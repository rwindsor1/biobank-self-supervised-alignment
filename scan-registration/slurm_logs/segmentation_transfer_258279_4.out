4 th decile
.20
.25
/users/rhydian/anaconda3/envs/torch_env/lib/python3.7/site-packages/torch/cuda/__init__.py:52: UserWarning: CUDA initialization: Found no NVIDIA driver on your system. Please check that you have an NVIDIA GPU and installed a driver from http://www.nvidia.com/Download/index.aspx (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729006826/work/c10/cuda/CUDAFunctions.cpp:100.)
  return torch._C._cuda_getDeviceCount() > 0
  0%|          | 0/811 [00:00<?, ?it/s]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  0%|          | 1/811 [00:23<5:18:23, 23.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  0%|          | 2/811 [00:26<3:53:18, 17.30s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  0%|          | 3/811 [00:28<2:53:29, 12.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  0%|          | 4/811 [00:31<2:13:13,  9.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 5/811 [00:34<1:44:08,  7.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 6/811 [00:37<1:23:03,  6.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 7/811 [00:39<1:07:57,  5.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 8/811 [00:42<57:39,  4.31s/it]  Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 9/811 [00:44<50:34,  3.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 10/811 [00:47<45:35,  3.42s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|▏         | 11/811 [00:49<41:44,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|▏         | 12/811 [00:51<38:44,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 13/811 [00:54<37:05,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 14/811 [00:57<36:40,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 15/811 [01:03<51:44,  3.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 16/811 [01:06<45:33,  3.44s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 17/811 [01:08<42:01,  3.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 18/811 [01:11<38:52,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 19/811 [01:13<37:05,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 20/811 [01:18<45:11,  3.43s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 21/811 [01:20<41:18,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 22/811 [01:23<38:36,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 23/811 [01:27<43:13,  3.29s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 24/811 [01:29<39:55,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 25/811 [01:32<38:01,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 26/811 [01:34<35:51,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 27/811 [01:37<37:02,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 28/811 [01:40<36:11,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▎         | 29/811 [01:43<34:46,  2.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▎         | 30/811 [01:45<34:41,  2.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 31/811 [01:48<33:57,  2.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 32/811 [01:50<33:25,  2.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 33/811 [01:53<33:40,  2.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 34/811 [01:55<32:57,  2.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 35/811 [01:58<35:27,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 36/811 [02:01<34:41,  2.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▍         | 37/811 [02:03<33:54,  2.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▍         | 38/811 [02:06<33:27,  2.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▍         | 39/811 [02:09<34:22,  2.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▍         | 40/811 [02:11<33:37,  2.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▌         | 41/811 [02:14<34:43,  2.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▌         | 42/811 [02:17<35:46,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▌         | 43/811 [02:20<35:22,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▌         | 44/811 [02:23<36:47,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 45/811 [02:26<35:21,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 46/811 [02:28<34:09,  2.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 47/811 [02:31<33:40,  2.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 48/811 [02:33<33:24,  2.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 49/811 [02:36<32:51,  2.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 50/811 [02:39<35:49,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▋         | 51/811 [02:42<34:35,  2.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▋         | 52/811 [02:44<33:18,  2.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 53/811 [02:46<32:45,  2.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 54/811 [02:49<32:36,  2.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 55/811 [02:52<32:17,  2.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 56/811 [02:54<32:24,  2.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 57/811 [02:57<33:23,  2.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 58/811 [03:00<32:55,  2.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 59/811 [03:02<32:41,  2.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 60/811 [03:05<31:54,  2.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 61/811 [03:07<32:00,  2.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 62/811 [03:10<32:37,  2.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 63/811 [03:13<35:19,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 64/811 [03:16<33:23,  2.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 65/811 [03:19<34:49,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 66/811 [03:21<34:26,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 67/811 [03:24<33:51,  2.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 68/811 [03:26<32:38,  2.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▊         | 69/811 [03:29<32:15,  2.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▊         | 70/811 [03:32<34:07,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 71/811 [03:35<33:42,  2.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 72/811 [03:37<33:00,  2.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 73/811 [03:40<32:49,  2.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 74/811 [03:44<37:05,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 75/811 [03:46<35:49,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 76/811 [03:49<35:15,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 77/811 [03:52<35:49,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|▉         | 78/811 [03:55<35:18,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|▉         | 79/811 [03:58<34:51,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|▉         | 80/811 [04:01<35:02,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|▉         | 81/811 [04:04<34:50,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|█         | 82/811 [04:07<35:23,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|█         | 83/811 [04:09<34:36,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|█         | 84/811 [04:12<33:48,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|█         | 85/811 [04:15<33:05,  2.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 86/811 [04:18<33:46,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 87/811 [04:20<33:49,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 88/811 [04:23<33:22,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 89/811 [04:26<33:51,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 90/811 [04:29<33:35,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 91/811 [04:31<33:10,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█▏        | 92/811 [04:34<33:17,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█▏        | 93/811 [04:37<33:03,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 94/811 [04:40<32:48,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 95/811 [04:43<33:45,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 96/811 [04:45<32:42,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 97/811 [04:48<31:59,  2.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 98/811 [04:51<32:31,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 99/811 [04:53<32:32,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 100/811 [04:56<32:20,  2.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 101/811 [04:59<32:32,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 102/811 [05:02<32:19,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 103/811 [05:04<32:01,  2.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 104/811 [05:08<34:19,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 105/811 [05:11<34:41,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 106/811 [05:13<34:09,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 107/811 [05:16<33:37,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 108/811 [05:19<33:25,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 109/811 [05:22<32:55,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▎        | 110/811 [05:26<38:34,  3.30s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▎        | 111/811 [05:30<39:50,  3.41s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 112/811 [05:33<38:23,  3.30s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 113/811 [05:36<38:31,  3.31s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 114/811 [05:40<38:42,  3.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 115/811 [05:43<37:31,  3.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 116/811 [05:45<35:53,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 117/811 [05:50<40:27,  3.50s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▍        | 118/811 [05:53<37:49,  3.28s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▍        | 119/811 [05:56<37:46,  3.28s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▍        | 120/811 [05:59<36:14,  3.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▍        | 121/811 [06:02<35:18,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▌        | 122/811 [06:05<35:37,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▌        | 123/811 [06:08<35:16,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▌        | 124/811 [06:10<33:37,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▌        | 125/811 [06:13<32:34,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 126/811 [06:16<32:36,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 127/811 [06:19<33:21,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 128/811 [06:22<32:18,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 129/811 [06:24<31:45,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 130/811 [06:27<32:17,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 131/811 [06:30<32:49,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▋        | 132/811 [06:33<32:28,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▋        | 133/811 [06:36<32:40,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 134/811 [06:40<34:24,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 135/811 [06:42<33:15,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 136/811 [06:45<32:24,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 137/811 [06:48<32:42,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 138/811 [06:51<31:36,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 139/811 [06:53<31:21,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 140/811 [06:56<32:36,  2.92s/it] 17%|█▋        | 141/811 [06:59<31:20,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 142/811 [07:05<41:59,  3.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 143/811 [07:09<43:01,  3.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 144/811 [07:13<43:04,  3.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 145/811 [07:16<40:15,  3.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 146/811 [07:19<37:01,  3.34s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 147/811 [07:22<35:15,  3.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 148/811 [07:24<33:40,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 149/811 [07:27<32:59,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 150/811 [07:30<32:38,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▊        | 151/811 [07:33<31:38,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▊        | 152/811 [07:36<31:29,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 153/811 [07:39<31:46,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 154/811 [07:41<31:32,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 155/811 [07:44<30:46,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 156/811 [07:47<31:07,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 157/811 [07:50<31:00,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 158/811 [07:53<31:32,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|█▉        | 159/811 [07:56<31:56,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|█▉        | 160/811 [07:59<30:53,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|█▉        | 161/811 [08:01<30:40,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|█▉        | 162/811 [08:04<29:58,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|██        | 163/811 [08:07<31:06,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|██        | 164/811 [08:10<30:06,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|██        | 165/811 [08:13<33:16,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|██        | 166/811 [08:16<31:26,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 167/811 [08:19<31:09,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 168/811 [08:22<30:27,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 169/811 [08:24<29:32,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 170/811 [08:27<29:59,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 171/811 [08:30<29:42,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 172/811 [08:33<30:12,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██▏       | 173/811 [08:35<29:34,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██▏       | 174/811 [08:38<29:03,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 175/811 [08:41<28:53,  2.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 176/811 [08:44<29:59,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 177/811 [08:47<31:33,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 178/811 [08:50<30:27,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 179/811 [08:53<31:33,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 180/811 [08:56<30:19,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 181/811 [08:58<30:06,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 182/811 [09:01<29:33,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 183/811 [09:04<29:18,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 184/811 [09:07<29:07,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 185/811 [09:09<28:49,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 186/811 [09:13<30:15,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 187/811 [09:15<29:43,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 188/811 [09:18<29:23,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 189/811 [09:25<42:19,  4.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 190/811 [09:28<37:39,  3.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▎       | 191/811 [09:31<35:32,  3.44s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▎       | 192/811 [09:34<33:25,  3.24s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 193/811 [09:37<32:36,  3.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 194/811 [09:39<30:40,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 195/811 [09:42<29:50,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 196/811 [09:45<31:56,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 197/811 [09:48<31:25,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 198/811 [09:51<30:13,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▍       | 199/811 [09:54<29:16,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▍       | 200/811 [09:57<29:05,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▍       | 201/811 [09:59<28:54,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▍       | 202/811 [10:02<28:43,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▌       | 203/811 [10:12<50:21,  4.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▌       | 204/811 [10:15<43:41,  4.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▌       | 205/811 [10:18<39:02,  3.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▌       | 206/811 [10:20<35:14,  3.50s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 207/811 [10:23<33:05,  3.29s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 208/811 [10:26<31:20,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 209/811 [10:29<30:39,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 210/811 [10:31<29:21,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 211/811 [10:34<27:59,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 212/811 [10:37<27:38,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▋       | 213/811 [10:40<27:59,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▋       | 214/811 [10:42<28:13,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 215/811 [10:45<27:24,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 216/811 [10:48<26:35,  2.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 217/811 [10:50<26:36,  2.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 218/811 [10:53<26:08,  2.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 219/811 [10:56<27:26,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 220/811 [10:59<27:46,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 221/811 [11:01<27:03,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 222/811 [11:04<26:31,  2.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 223/811 [11:07<26:16,  2.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 224/811 [11:09<26:20,  2.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 225/811 [11:12<26:23,  2.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 226/811 [11:15<27:02,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 227/811 [11:18<27:02,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 228/811 [11:21<27:08,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 229/811 [11:24<28:11,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 230/811 [11:27<28:20,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 231/811 [11:29<27:46,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▊       | 232/811 [11:43<58:10,  6.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▊       | 233/811 [11:46<48:40,  5.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 234/811 [11:48<41:37,  4.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 235/811 [11:51<37:09,  3.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 236/811 [11:54<34:12,  3.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 237/811 [12:00<41:41,  4.36s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 238/811 [12:03<37:26,  3.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 239/811 [12:06<35:51,  3.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|██▉       | 240/811 [12:09<33:23,  3.51s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|██▉       | 241/811 [12:12<31:18,  3.30s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|██▉       | 242/811 [12:15<29:53,  3.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|██▉       | 243/811 [12:18<28:48,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|███       | 244/811 [12:20<27:51,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|███       | 245/811 [12:23<26:51,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|███       | 246/811 [12:26<26:18,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|███       | 247/811 [12:29<26:36,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 248/811 [12:32<26:58,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 249/811 [12:34<26:11,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 250/811 [12:38<28:33,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 251/811 [12:41<28:04,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 252/811 [12:44<27:34,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 253/811 [12:46<26:46,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███▏      | 254/811 [12:49<26:10,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███▏      | 255/811 [12:52<25:58,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 256/811 [12:54<25:12,  2.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 257/811 [12:58<26:43,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 258/811 [13:01<28:56,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 259/811 [13:04<27:08,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 260/811 [13:17<54:23,  5.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 261/811 [13:19<45:34,  4.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 262/811 [13:22<39:42,  4.34s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 263/811 [13:25<36:03,  3.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 264/811 [13:28<32:37,  3.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 265/811 [13:32<32:53,  3.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 266/811 [13:35<30:37,  3.37s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 267/811 [13:37<29:01,  3.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 268/811 [13:40<27:39,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 269/811 [13:43<27:36,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 270/811 [13:47<29:34,  3.28s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 271/811 [13:50<28:33,  3.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▎      | 272/811 [13:53<27:12,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▎      | 273/811 [13:56<28:52,  3.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 274/811 [13:59<27:48,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 275/811 [14:02<26:57,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 276/811 [14:05<26:25,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 277/811 [14:08<27:39,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 278/811 [14:21<54:40,  6.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 279/811 [14:24<45:08,  5.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▍      | 280/811 [14:27<38:57,  4.40s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▍      | 281/811 [14:30<34:54,  3.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▍      | 282/811 [14:34<35:41,  4.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▍      | 283/811 [14:37<33:25,  3.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▌      | 284/811 [14:40<30:46,  3.50s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▌      | 285/811 [14:43<28:45,  3.28s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▌      | 286/811 [14:45<26:50,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▌      | 287/811 [14:48<25:56,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 288/811 [14:51<25:19,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 289/811 [14:54<24:52,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 290/811 [14:57<24:51,  2.86s/it] 36%|███▌      | 291/811 [14:59<24:58,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 292/811 [15:02<24:30,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 293/811 [15:05<24:08,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▋      | 294/811 [15:08<24:02,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▋      | 295/811 [15:11<24:11,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▋      | 296/811 [15:13<24:34,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 297/811 [15:16<24:18,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 298/811 [15:20<25:16,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 299/811 [15:24<29:00,  3.40s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 300/811 [15:27<28:15,  3.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 301/811 [15:30<26:15,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 302/811 [15:32<25:21,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 303/811 [15:35<24:33,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 304/811 [15:38<24:14,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 305/811 [15:41<23:49,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 306/811 [15:44<24:10,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 307/811 [15:46<23:21,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 308/811 [15:49<24:03,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 309/811 [15:58<38:47,  4.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 310/811 [16:01<35:43,  4.28s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 311/811 [16:04<32:01,  3.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 312/811 [16:07<29:03,  3.49s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▊      | 313/811 [16:10<26:46,  3.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▊      | 314/811 [16:12<26:00,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 315/811 [16:16<25:49,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 316/811 [16:30<52:39,  6.38s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 317/811 [16:32<43:06,  5.24s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 318/811 [16:35<37:24,  4.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 319/811 [16:38<32:37,  3.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 320/811 [16:41<29:47,  3.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|███▉      | 321/811 [16:43<27:13,  3.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|███▉      | 322/811 [16:47<27:24,  3.36s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|███▉      | 323/811 [16:49<25:17,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|███▉      | 324/811 [16:52<24:24,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|████      | 325/811 [16:55<24:25,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|████      | 326/811 [16:59<27:40,  3.42s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|████      | 327/811 [17:02<25:48,  3.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|████      | 328/811 [17:05<25:06,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 329/811 [17:08<24:25,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 330/811 [17:11<23:56,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 331/811 [17:13<22:53,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 332/811 [17:16<22:15,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 333/811 [17:20<25:16,  3.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 334/811 [17:22<23:54,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████▏     | 335/811 [17:35<47:20,  5.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████▏     | 336/811 [17:38<39:16,  4.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 337/811 [17:42<36:39,  4.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 338/811 [17:45<32:08,  4.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 339/811 [17:47<29:08,  3.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 340/811 [17:50<26:44,  3.41s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 341/811 [17:53<24:41,  3.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 342/811 [17:56<23:50,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 343/811 [18:02<32:45,  4.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 344/811 [18:05<28:52,  3.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 345/811 [18:08<26:48,  3.45s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 346/811 [18:11<25:08,  3.24s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 347/811 [18:13<24:09,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 348/811 [18:16<22:47,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 349/811 [18:19<22:23,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 350/811 [18:22<22:36,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 351/811 [18:25<22:38,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 352/811 [18:28<22:09,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▎     | 353/811 [18:30<22:04,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▎     | 354/811 [18:33<22:17,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 355/811 [18:38<24:54,  3.28s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 356/811 [18:40<23:25,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 357/811 [18:43<22:31,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 358/811 [18:46<22:32,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 359/811 [18:49<22:47,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 360/811 [18:52<22:00,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▍     | 361/811 [18:55<21:45,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▍     | 362/811 [18:57<21:09,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▍     | 363/811 [19:00<21:04,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▍     | 364/811 [19:03<22:09,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▌     | 365/811 [19:06<21:08,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▌     | 366/811 [19:09<20:43,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▌     | 367/811 [19:11<20:41,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▌     | 368/811 [19:14<20:46,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▌     | 369/811 [19:17<21:10,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 370/811 [19:20<21:12,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 371/811 [19:23<20:27,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 372/811 [19:26<20:24,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Trying to load from /users/rhydian/self-supervised-project/model_weights/SSECEncodersBothBoth
==> Resuming model trained for 106 epochs...
Trying to load from ../model_weights/angle_regressor4
==> Resuming model trained for 7 epochs...
4271880_20201_2_0,7a1zzo4icz,-0.6172340575023553,-97.92137214279231,-34.92892034253563

4824720_20201_2_0,7a2nyn4icz,28.8848651407642,41.83014528710598,-171.48967299037434

2658113_20201_2_0,7a6hgn4icz,-0.9032793057262997,-135.3929807760166,-32.19104484588706

4474703_20201_2_0,7acoeo4icz,-1.3249716863605268,-94.62156362307658,-38.10771605045228

5583884_20201_2_0,7ad5jn4icz,0.38986943668555657,-65.40402235952908,-45.58338103036135

4664664_20201_2_0,7agn2p4icz,-1.1942395628267042,-106.31375252232641,-36.73743576436274

5764908_20201_2_0,7agt6p4icz,-3.0861562994155034,-106.80075482217347,-39.98970502976208

2718651_20201_2_0,7arpfp4icz,1.520388940146963,-95.89829742862386,-50.03931755729879

3561016_20201_2_0,7atwsn4icz,0.17416488925103746,-84.91526671850153,-40.11378472385107

3316700_20201_2_0,7avs4p4icz,0.46300196459667103,-71.7895161927693,-43.71812714358346

3137019_20201_2_0,7ax9wo4icz,-1.0494452259726874,-122.98392935237646,-27.640258514625813

4205878_20201_2_0,7ayyqn4icz,-1.8700584671830949,-124.71649331894693,-11.964331769607725

4819696_20201_2_0,7b0d4p4icz,-1.1519948232581634,-80.86569992172898,-26.357578230700355

1679230_20201_2_0,7b0ldn4icz,1.2834501132478444,-112.14495307560796,-39.052687827693475

2205470_20201_2_0,7b4vbp4icz,-2.5300854361172047,-97.23947828580586,-11.911992536079111

5614364_20201_2_0,7b5ugo4icz,-0.7988110816864222,-116.73022459756427,-37.76713983154261

3615300_20201_2_0,7b7rvn4icz,-3.3577858255127473,-92.56298724962792,-37.093896194102626

1061539_20201_2_0,7b8zzo4icz,0.3553089530125259,-83.99571861718104,-32.61189229954596

1586212_20201_2_0,7bfjmn4icz,-0.5281140264597687,-215.43266371812788,-42.91403939320102

2166055_20201_2_0,7bha0p4icz,-1.1817089381981931,-112.60457949719935,-21.62868666103337

5138170_20201_2_0,7bhnfo4icz,0.6126857304710396,-49.10102480429384,-36.12810803452575

1422471_20201_2_0,7bhyfn4icz,-2.596909990746633,-86.88626543630369,-19.791783551624988

5583696_20201_2_0,7bpjqn4icz,-0.20324124974685942,-102.19930668910885,-38.97034716286055

3499851_20201_2_0,7btiwn4icz,-0.7919169847098709,-81.90641146178413,-31.268697596178697

4153193_20201_2_0,7buajo4icz,0.9203724144480334,-67.44834371851829,-37.979496235285154

2488340_20201_2_0,7c0eip4icz,0.7348398282119208,-69.29222369514304,-38.595568868650346

2050036_20201_2_0,7cakzo4icz,-2.476750711445879,-121.2705883830154,-30.065871846276778

2958664_20201_2_0,7ce1fp4icz,-1.1713195979329418,-62.87298816166276,-34.254639115794646

2024803_20201_2_0,7cimfp4icz,-1.8769103858381517,-102.78135909262647,-6.553860753322695

3648348_20201_2_0,7cmtjo4icz,3.32663908415835,-91.20188114261757,-59.296218540717774

3599648_20201_2_0,7cn2in4icz,2.730775251587253,-126.76015730394857,-39.37962574240095

1131691_20201_2_0,7culao4icz,-2.6070173594384793,-105.68641233002649,-13.254409509257187

2308182_20201_2_0,7cy00p4icz,1.3260207537316888,-91.40311863350664,-35.116384583494906

5987177_20201_2_0,7czq5p4icz,-2.8960079091039312,-107.14131063958888,-15.652386756877945

3505287_20201_2_0,7d3cio4icz,1.8516023832121429,-65.46594416816603,-48.02443699191798

5145843_20201_2_0,7d7w7p4icz,2.0015752780370524,-101.02906965534865,-41.593339351645426

2358635_20201_2_0,7dboao4icz,-0.38735327635832406,-92.73502761746491,-40.33789377971054

3068716_20201_2_0,7ddown4icz,-0.13139376546907358,-69.68013992099861,-48.97743255492645

4577918_20201_2_0,7dr7ao4icz,3.5123582543152003,-88.66782210272964,-48.707608314030196

5126783_20201_2_0,7dreuo4icz,1.0723032487843849,-75.46272267253306,-34.51119848100805

1040848_20201_2_0,7dsdbn4icz,-0.8735982852034152,-88.47273217791383,-28.013744382618427

4682636_20201_2_0,7dzasn4icz,3.5478309796337077,-83.28210762091214,-65.50042331831797

2960735_20201_2_0,7e4j3p4icz,-1.3195751560796232,-105.72453689500651,-46.854275290451554

3120968_20201_2_0,7e6ben4icz,50.1615930937632,131.8676391007568,-217.96466846865601

4069941_20201_2_0,7e8dgn4icz,-0.33259060703332827,-115.89192647043768,-30.6389385641762

3636566_20201_2_0,7eau9o4icz,0.2711328322321188,-78.9850780244476,-28.952265065038972

1709305_20201_2_0,7edu9n4icz,-0.13096648418538823,-92.01571519551476,-35.48406823112876

3616189_20201_2_0,7edzrn4icz,1.031452218748628,-81.46785135210499,-48.15707001453791

5095417_20201_2_0,7efc2p4icz,1.0618032396283494,-99.2422435297891,-32.51335129188452

5045588_20201_2_0,fpu97p4icz,-2.2615183066473623,-67.34393614343239,-29.966705985612847

5194529_20201_2_0,7ejswo4icz,-1.005901299592953,-83.44879280676926,-40.52883058498591

3724093_20201_2_0,7elvao4icz,0.09325164709018238,-101.59786115485002,-31.48089688016242

4439154_20201_2_0,7em1cn4icz,2.743336187125143,-102.75970198161994,-56.34662447174796

5947187_20201_2_0,7em9no4icz,-1.374037350337977,-66.62968976601104,-18.476625807538568

4405374_20201_2_0,7ep9ep4icz,2.5597879884710717,-98.55993643299598,-50.66930031126964

1444637_20201_2_0,7eqqvn4icz,0.30100646932410474,-93.13880171529473,-45.86775162096981

5578137_20201_2_0,7ewa3o4icz,-0.27210091293061683,-102.42020188251101,-40.38183537639338

1500884_20201_2_0,7ewx7p4icz,2.54075116965692,-83.50920102886482,-48.18566543581679

3316754_20201_2_0,7exdgp4icz,1.226222470629499,-80.3317083177476,-48.09702790375468

4011192_20201_2_0,7f0lcp4icz,-2.1637754401930795,-65.93136912314355,-50.83519008168467

1355118_20201_2_0,7f74po4icz,-2.1774466838296527,-134.29033365261728,-25.662462913429792

3970458_20201_2_0,7fbq5o4icz,0.4321536081436515,-105.17582000340448,-27.69590511509115

1406160_20201_2_0,7fg6ip4icz,-3.476022920869677,-112.23236967219293,-12.565512929689788

1318412_20201_2_0,7fgj4o4icz,-3.881687167177354,-84.04786041301088,-6.7031888015557115

1367189_20201_2_0,7fhcan4icz,-3.8101296554445296,-102.06941625384741,-15.036192247078759

2180081_20201_2_0,7fookn4icz,1.8959926942696348,-125.52280951413411,-48.238041116945226

4996547_20201_2_0,7fxnwn4icz,0.039874130429894544,-77.69534496073399,-36.655592588573555

2203944_20201_2_0,7fyzmn4icz,-1.939925420853467,-113.03314047360499,-26.110742508250993

4452535_20201_2_0,7g1rqn4icz,-1.7346868239117625,-99.68036990310696,-28.721991229061757

5647202_20201_2_0,7g51gp4icz,-2.21084632553552,-78.97529696272127,-32.11416929718948

5532184_20201_2_0,7gej7p4icz,0.8574392721330446,-111.91543099875102,-36.055951876844404

1963512_20201_2_0,7ggldp4icz,0.7703048729421927,-84.54127009031814,-0.6160386929299193

4364754_20201_2_0,7gin9p4icz,-29.8167408315685,-69.92931855647782,111.94941228364546

5888177_20201_2_0,pwiufn4icz,-1.2139160815649417,-151.72522277932936,-18.9201862956249

5815039_20201_2_0,7gm29p4icz,2.993494966519924,-93.3746623427671,-50.04621140634323

5513114_20201_2_0,7gocfp4icz,4.1848943742606375,-84.95556745313894,-68.84842206470712

5028452_20201_2_0,7gsdbo4icz,0.7537511489535379,-115.37681262163323,-38.4260504530027

2924341_20201_2_0,7gvb7o4icz,-1.9918502602227475,-97.74751142959764,-25.336091394098702

2948602_20201_2_0,7gxjon4icz,1.8140212433144438,-121.10877073554144,-33.93395857631759

5973330_20201_2_0,7gy9ro4icz,-1.6151328839437453,-86.86123115545718,-24.367716165570428

5348886_20201_2_0,7gyqto4icz,-2.617238578190248,-99.18437187472887,-34.742864323989025

2493428_20201_2_0,7h1k4p4icz,2.0415325450116426,-84.1722428270308,-46.26046303634398

2480189_20201_2_0,7h1m4p4icz,-1.113219139048966,-114.27494449326156,-43.9973733067271

4702326_20201_2_0,7h2rto4icz,0.47045372912316147,-75.75134308656831,-47.13020406951976

5062192_20201_2_0,7h4fco4icz,-2.348734867193508,-89.0644421185979,-18.758834544154013

4585126_20201_2_0,7h5nmo4icz,1.6498414719023828,-49.132208876487624,-39.7110217793398

5589156_20201_2_0,7h6lko4icz,1.3206177550423095,-82.18781412074597,-41.05928531747597

4619914_20201_2_0,7haifp4icz,2.0965321652694784,-167.10157088959357,-27.27573308284238

1065334_20201_2_0,7hj14p4icz,-0.19681110309809202,-72.01012256418463,-39.86259080955733

3779841_20201_2_0,7hjtsn4icz,0.29777769149357497,-89.55051927474955,-42.92404938681362

1302385_20201_2_0,7hq09p4icz,-1.5001398542940483,-97.26086022208113,-25.332706755636664

4821225_20201_2_0,7ht49p4icz,-0.6406776689740704,-92.4697878613226,-36.319737237045246

5064198_20201_2_0,7hwzko4icz,-1.106553119406109,-90.09609082036434,-25.32050094095618

5005584_20201_2_0,7hzhip4icz,1.1506008574500868,-82.90128311945136,-41.63461158697005

2316826_20201_2_0,7hzu2p4icz,-1.8200862993043903,-139.2861950965814,-33.80379478408091

3715390_20201_2_0,7i156n4icz,-4.303699395743083,-107.2789361162508,-23.7866263122434

1015668_20201_2_0,7i1qfp4icz,-0.9425849966343429,-126.85309921764653,-25.77763795661383

4712714_20201_2_0,7i3hjp4icz,-0.6236392199301346,-91.51337322321714,-43.2304170053136

3864069_20201_2_0,7i5uyo4icz,4.051531594216814,-60.785570397437226,-71.30511074407327

2264844_20201_2_0,7i6kjn4icz,3.769250770734336,-94.0943164741418,-59.47709667617977

5871100_20201_2_0,7i8eon4icz,-0.7903220200612756,-98.6340648105863,-28.55290193264257

3312479_20201_2_0,7ic2ap4icz,-1.054988687180292,-53.751660459938904,-36.8706268206667

1024964_20201_2_0,7icqco4icz,1.4682696751518056,-91.1881537748393,-54.19209525642269

3600797_20201_2_0,gifqtn4icz,1.5499603735827496,-92.47066373570817,-39.29791723923702

4831943_20201_2_0,7ih8to4icz,1.4277000776275404,-102.29879516748443,-40.84209169910258

2354915_20201_2_0,7imaon4icz,0.5420118070666846,-79.79292848934824,-29.59934183899155

5575488_20201_2_0,7is33o4icz,-0.21788055791300145,-102.8003739593542,-30.583349181991224

3651211_20201_2_0,7ix77p4icz,-0.6493353709360967,-135.51654239952063,-37.60571811436702

4069834_20201_2_0,7j05bp4icz,3.5010097938213813,-80.97934361974629,-39.54360125673038

3491030_20201_2_0,7j6cep4icz,-0.7207744055510402,-107.86133216055111,-27.751967122483507

5726205_20201_2_0,7j8xso4icz,-0.20234664733403665,-92.2755475968446,-28.76704150503032

1178545_20201_2_0,7j97so4icz,-1.5082440796862577,-94.92059893860434,-18.5825261250032

3988568_20201_2_0,7jcdwo4icz,2.8630437514909115,-52.732246348265676,-48.81612108769396

4745251_20201_2_0,7jtl2p4icz,-1.940132878029805,-114.79780620263116,-35.00386214075502

3709087_20201_2_0,7jv5wo4icz,2.879411642436892,-79.82656314398824,-49.15706046264022

3851101_20201_2_0,7jxc1o4icz,0.6674827832443725,-106.73032272874329,-34.347232684785396

2191102_20201_2_0,7jxfip4icz,-1.7645321371976745,-91.5975667923625,-18.652536621343714

5754996_20201_2_0,7jy0to4icz,-0.5127452358966873,-127.4302960401503,-51.61501915796208

4130022_20201_2_0,7jys6o4icz,-1.7737269115566383,-113.37896794103472,-21.953292590085283

5628109_20201_2_0,7kbp8o4icz,-2.487582577554251,-102.36683728883025,-30.49693402015282

3559467_20201_2_0,7kfspn4icz,1.6593398591406059,-110.68773146522656,-34.57311363190419

5250941_20201_2_0,7kimun4icz,-13.289585026014267,-106.6103729309657,52.458948166378946

1342234_20201_2_0,7kprzo4icz,4.748182401076777,-66.81802926408483,-44.651587932416774

5972830_20201_2_0,7kq46o4icz,1.2289337910545655,-131.99002141763836,-42.16323075960594

1691096_20201_2_0,7kqndp4icz,-2.5583780134265126,-115.79986489875515,-27.151148985361957

2778800_20201_2_0,7kt0no4icz,1.374178706669914,-72.42871341378807,-27.543930963071958

1730205_20201_2_0,7ktgzo4icz,0.18282332609462446,-72.32345667826547,-44.3551240333484

5148062_20201_2_0,7kty6p4icz,-2.162447560971334,-94.27581434113307,-35.20998655154949

1235098_20201_2_0,7kwchp4icz,1.2477857391222897,-77.82987623316336,-50.207243148187914

2120518_20201_2_0,7l5abn4icz,0.8501528605930134,-60.727170522394545,-48.68059942506491

2069537_20201_2_0,7l6v2p4icz,-1.451486370389709,-111.25365354100873,-17.748140625313965

3279998_20201_2_0,7l7h7p4icz,-1.2719594570925874,-92.623729100925,-29.142593079098532

3010305_20201_2_0,7l8atn4icz,-2.828402323184142,-76.81316430571633,-25.916745365502067

3730266_20201_2_0,7l8jgp4icz,-1.3439518334558775,-75.46730787515068,-27.604318304022513

3193861_20201_2_0,7lc89o4icz,0.286446731347363,-67.45355312652893,-35.9129370795293

4355878_20201_2_0,7lia2p4icz,2.144843894128777,-78.46877352036643,-43.687575816171574

1450420_20201_2_0,7lidkn4icz,-2.8368214909275022,-75.10294974359283,-22.351541449229302

3338241_20201_2_0,7lkblo4icz,2.031018868958303,-74.37342941287093,-65.24319093286383

5320199_20201_2_0,7llafn4icz,-21.223315790028927,-163.3466771017678,92.62061151965322

2035634_20201_2_0,7lnxrn4icz,0.6448500062121731,-123.53335826336604,-23.66342593591159

1769512_20201_2_0,7lql4p4icz,-47.36794950128895,116.19682834522831,481.6719282839242

4518297_20201_2_0,7lsogn4icz,1.6885310207005344,-73.57423786708074,-42.7108097175399

2623154_20201_2_0,7lxnan4icz,0.0421723069222464,-91.5995820372828,-59.69613946162201

5427931_20201_2_0,7m6upn4icz,0.6856890443696365,-66.81406833920721,-44.48165026489994

1958227_20201_2_0,7mb0en4icz,0.3932884158473776,-80.00831607759736,-47.472159541371894

5886224_20201_2_0,7mca4o4icz,0.983388239761895,-109.03830285828425,-31.825787243389215

3813220_20201_2_0,7mcf5o4icz,-5.828291201139972,-113.95867739343115,6.871714073644384

2357033_20201_2_0,7mcvmo4icz,-2.3375243631812745,-154.32233881906274,-29.78647013832233

2743164_20201_2_0,7mh6yo4icz,-1.2950966442987704,-89.59118513566796,-42.363383965964914

5147414_20201_2_0,7mhngp4icz,5.634295319081656,-80.90303179637232,-71.75572830485916

5096919_20201_2_0,7micdo4icz,-0.30556414951403865,-86.32211927658358,-47.87422222732479

3952975_20201_2_0,7mn4ip4icz,1.6624501791548612,-68.96008424784316,-51.60776426635422

4724982_20201_2_0,7mn8on4icz,-0.4118824846862847,-134.42081047511346,-43.759299059448466

5089318_20201_2_0,7mo98p4icz,-4.52243604159544,-132.94291981763772,-20.0641991945257

5647501_20201_2_0,7mqa4p4icz,5.487134171018985,-99.8950786550416,-71.84260045337709

1533697_20201_2_0,7mqx5o4icz,-2.118899998098903,-134.58593770399995,-32.58543151792594

1744560_20201_2_0,7mrjdp4icz,4.041250100297448,-87.55233693494091,-52.874213368338715

1832714_20201_2_0,7mx5cp4icz,-2.656071424626649,-140.34737496886822,-29.68801320104015

4325928_20201_2_0,7n0kzo4icz,0.5238606613641947,-34.43786023235364,-26.48431388049218

2366388_20201_2_0,7n589n4icz,0.6383750024747494,-101.8682150884058,-45.06565142811958

1055460_20201_2_0,7n6kdp4icz,-2.862848509843539,-116.77250521201901,-20.218972588719453

2897746_20201_2_0,7nbp7p4icz,-0.7584987554788922,-63.24440386608532,-33.07238493502419

4805289_20201_2_0,7nclio4icz,0.006515270220507738,-78.67328862242857,-32.660193339842394

3549779_20201_2_0,7nd6tn4icz,0.8469777410893232,-115.28241062149374,-43.428614678391966

4408270_20201_2_0,7ndzlo4icz,0.43789710755398015,-102.44914054434145,-51.51115531840243

2318613_20201_2_0,7nkd3p4icz,-3.1988476303521947,-62.100953871995046,-6.509065162470023

4663541_20201_2_0,7nkeqn4icz,-0.24266102995630956,-48.630174618415026,-41.845001165309

5395210_20201_2_0,7nm3ap4icz,4.164932746593213,-84.36243616353386,-60.21218381588797

4625366_20201_2_0,7nnaho4icz,0.38909396212937297,-132.46988146528076,-34.226447800864705

3353659_20201_2_0,7nw7in4icz,2.2894237709309073,-109.29770888279373,-43.481175892039744

4282633_20201_2_0,7nwiwo4icz,1.8022142590734973,-110.50566094643418,-29.004773287644753

4163812_20201_2_0,7o6a0p4icz,-0.06237543366582951,-69.18012157880125,-29.59839166651537

1110671_20201_2_0,7o9txo4icz,-0.29656678214412413,-87.00567787805534,-38.754277936234445

4632394_20201_2_0,7obyip4icz,-1.0348877426095533,-97.0259278360106,-29.63025560813719

2627160_20201_2_0,7odi8p4icz,-0.15915999099164854,-110.19386634582222,-28.99009427683393

4306674_20201_2_0,7oe6go4icz,-0.16472716668963353,-78.17859067030085,-14.284611418227811

2857917_20201_2_0,7ogj7o4icz,1.4162816379797032,-95.73021653749572,-36.78891623915044

3153128_20201_2_0,7ohh3p4icz,0.8648076955124915,-104.54129593194102,-50.65386171086729

4533728_20201_2_0,7oj43p4icz,1.8024635486431184,-66.62546080798617,-48.37642570812305

2273150_20201_2_0,7om65p4icz,0.5294874173567334,-89.43456589227884,-39.542344855725574

4637284_20201_2_0,7oqijp4icz,3.414252412552732,-55.42594289178234,-54.31615055655509

1361857_20201_2_0,7oqmhp4icz,0.9878766828733557,-48.61511963398024,-40.40605460016937

1797955_20201_2_0,7ov64p4icz,0.5940683770457182,-70.94937629836704,-41.57561706118044

5868944_20201_2_0,7ozsdp4icz,-2.372060772032741,-75.12822090836332,-27.35627914564084

5752787_20201_2_0,7p3vdp4icz,0.13076606036712238,-91.57296454891278,-50.23372813936717

4635658_20201_2_0,7p8v6o4icz,2.3766872729053636,-130.21474240054658,-52.98806905383171

5617898_20201_2_0,7plcmo4icz,-1.2237603339719076,-57.046390992752094,-29.1707026438622

2291173_20201_2_0,7pvvso4icz,3.6749572084801296,-81.9864280145718,-53.62039556112174

4882576_20201_2_0,7pwgrn4icz,-0.3484997375711958,-68.39869880668883,-38.251033977355846

2641396_20201_2_0,7px8fp4icz,2.1099918286155943,-83.28613241219824,-58.513220738357745

3166835_20201_2_0,7q1bjo4icz,-0.3185314938179318,-85.63807003543315,-38.67862046984979

5893805_20201_2_0,7q3xln4icz,-3.6714217762129175,-107.50411287918772,-23.53674270492465

2235338_20201_2_0,7q7h9o4icz,2.7108618519272296,-107.28823882751036,-42.05951346750692

1920649_20201_2_0,7qm6io4icz,-0.0015946019143227427,-96.50420362064321,-47.03586036373173

4628834_20201_2_0,7qmv9n4icz,0.268977204791893,-95.91519401651061,-38.90710154618576

2817279_20201_2_0,7qn6vn4icz,1.106836734100394,-104.26409275860883,-45.554243227584436

3010312_20201_2_0,7qo6vo4icz,-1.9883103526066905,-47.57773809791982,-28.52598815761297

4243197_20201_2_0,7qp6xn4icz,-1.9140775709435016,-142.29271035919265,-7.293935647896745

4044871_20201_2_0,7qs17n4icz,-1.7204740785553887,-103.34311439456513,-4.8439880553356005

5147406_20201_2_0,7quiin4icz,1.3208142376689724,-92.11022976424738,-45.85004818648093

4467316_20201_2_0,7r63mn4icz,3.405076973692037,-77.22051678603009,-43.2807068978222

2338924_20201_2_0,7r79hp4icz,1.8179787985379374,-105.24608851345462,-62.40181843496275

5911591_20201_2_0,7rabrn4icz,-2.5804227132173825,-89.84865061709408,-22.43135461405282

5309162_20201_2_0,7rbj5p4icz,-1.4065660522362904,-78.66039010988311,-23.504543875661568

1435074_20201_2_0,7rbjeo4icz,-2.0337541108140336,-93.62883868703335,-24.375625360096265

5207979_20201_2_0,7rc01p4icz,-0.20568494379120866,-134.4195566007424,-47.37788883989094

4995013_20201_2_0,7rc99n4icz,0.6422593523740219,-105.23098361434558,-44.72767433140112

3609263_20201_2_0,7rdhtn4icz,-0.9161778475385112,-125.85938674874058,-24.50271155195462

5256175_20201_2_0,7rfw5p4icz,-2.832263398757809,-83.30522064096814,-30.64314033448362

2721870_20201_2_0,7ritzn4icz,-0.8214395711406793,-132.0223326087342,-38.1980273212539

1036760_20201_2_0,7rvbvn4icz,-1.490952305973719,-93.25462144541939,-30.665313712207876

5339383_20201_2_0,7rynho4icz,-0.8725064422774012,-80.25954711303615,-11.070872848453021

3873090_20201_2_0,7s09fo4icz,-4.941400881640966,-143.3302470268752,6.502823639749863

2162791_20201_2_0,7s7din4icz,3.6228093867396924,-84.1076531322729,-47.637816169164765

2150706_20201_2_0,7saqwn4icz,0.9509916497551294,-114.11674428153242,-40.14058866325948

2135197_20201_2_0,7scnfn4icz,-1.3568974428153449,-88.71258670948652,-29.153612316328335

1314966_20201_2_0,7sddyo4icz,-0.5642749556181732,-92.467199459857,-40.207459104078495

3720706_20201_2_0,7sglip4icz,1.4667813173741233,-101.83130573807179,-27.54443670577038

5137391_20201_2_0,7skdwo4icz,-1.9079343317459094,-126.73255295905034,-18.249207995027234

1221242_20201_2_0,7sny0p4icz,-1.0538625033187763,-63.537567308134726,-34.76696490330556

5591041_20201_2_0,7so2mn4icz,0.6159284771204562,-68.57271755049638,-27.823367893559464

5583770_20201_2_0,7sobyo4icz,4.251117066404112,-68.84047794765391,-53.504297148002394

2247460_20201_2_0,7ss36p4icz,-1.21073690763969,-84.65352398241552,-41.84761321804238

4634462_20201_2_0,7stsqn4icz,-2.29736787929402,-107.02848282544917,-21.86696209427747

2606374_20201_2_0,7swqyo4icz,1.790094340057848,-114.77148496027479,-60.37397158937108

2806398_20201_2_0,7t1upn4icz,2.4708011649463892,-108.41410034214354,-44.87425379869967

2129916_20201_2_0,7t1y3p4icz,1.6757889733089124,-105.05885722977311,-48.73351229405138

4917943_20201_2_0,7t6n6o4icz,2.999168322517874,-63.29073594010572,-41.766890696156295

2562959_20201_2_0,7t6spn4icz,0.4796373909371923,-105.65460023435313,-24.563820807380523

3548147_20201_2_0,7tcocp4icz,-0.8249418207433131,-74.78131189889018,-33.050424102760914

3854130_20201_2_0,7tddhp4icz,3.042105222306985,-116.32599969355007,-37.688146557344226

2557829_20201_2_0,7tdw9p4icz,2.090602975805376,-113.25591469744205,-46.183764365007875

5021835_20201_2_0,7th3zo4icz,2.1826818493588735,-126.49262678844627,-59.3457450099867

1208611_20201_2_0,7thubp4icz,-1.589792039265344,-113.30214449650208,-17.20694948100207

4532901_20201_2_0,7tiudo4icz,-0.7848369830439075,-75.20977223765928,-36.7175043910396

2203300_20201_2_0,7tjq7o4icz,-3.101288219781591,-102.95927605036431,-13.124729952877473

1064999_20201_2_0,7tltoo4icz,-1.2320489004356123,-62.29375795328602,-26.075285818659765

4761211_20201_2_0,7tr73p4icz,0.36238682198002753,-108.07284683809715,-65.95909825047772

3508224_20201_2_0,7ttl6p4icz,2.0476771447542688,-74.0055062101508,-47.48578071844895

3427831_20201_2_0,7u1epo4icz,0.02643503149230651,-108.5891236985857,-35.69169554344313

2409680_20201_2_0,7u5j9p4icz,0.8993595919459403,-84.91838094074322,-41.36265902778378

1816074_20201_2_0,7u6j7p4icz,-5.957255593291354,-76.21167786922638,-13.233847521766904

1075479_20201_2_0,7u6qln4icz,0.6621035691975209,-98.21648106451738,-54.85788414910881

1582864_20201_2_0,7uad3p4icz,-13.965727444135176,-154.8248154095976,42.077481197247636

4124812_20201_2_0,7ulv8p4icz,-1.798514162029199,-94.01287407057168,-38.46823111465349

4232006_20201_2_0,7utdin4icz,-1.2162075811189361,-111.84822208178193,-5.851079358148638

2123252_20201_2_0,7uxr3o4icz,1.1471994010938231,-135.8370921067854,-55.7086562369667

5060193_20201_2_0,7uzwfo4icz,1.2985605336212018,-61.693821039883375,-44.80441270360912

2604749_20201_2_0,7v5tdp4icz,-2.185825195222991,-72.2864917617988,-33.77568019079655

5947886_20201_2_0,6odlgp4icz,0.33288930060346367,-103.51974522405499,-36.572010941259265

3808908_20201_2_0,7v9ngp4icz,-1.434966728734354,-55.47175437894458,-22.41988567290197

5913785_20201_2_0,7v9yep4icz,-0.988050162809938,-107.50529030254938,-19.74579880031584

5310123_20201_2_0,7vejvn4icz,1.1499343676019416,-83.06349517732531,-55.426913211658785

4113381_20201_2_0,7vj7cp4icz,3.433072038941275,-88.47533649090747,-34.7992902391271

3432433_20201_2_0,7vl6fo4icz,-1.8618855956642208,-93.38150257136829,-25.956860108918903

3510841_20201_2_0,7vs6mn4icz,0.25206850448187074,-104.98214608896438,-7.568252345725426

5504900_20201_2_0,7vuh7p4icz,-3.126619790717742,-128.36693846496425,-10.470844068769537

4000440_20201_2_0,7vvm7o4icz,-0.8570733337872328,-58.316815655288934,-20.52685616820598

5000639_20201_2_0,7vxyoo4icz,-4.058651158320298,-85.30973614139208,-37.94031388314393

4883437_20201_2_0,7vzeno4icz,1.749286979773895,-83.4965517007758,-56.54324272469714

3407019_20201_2_0,7w3fwo4icz,0.9177253919718799,-100.70120409910115,-34.62727640770625

2734628_20201_2_0,7w49ln4icz,-3.9226282270642305,-115.49725496747811,-27.075739290906682

3237655_20201_2_0,7wb4cp4icz,9.327604698070237,-42.16998893239838,-148.90132505389948

3863428_20201_2_0,7wd2co4icz,5.565692267145522,-127.72114374980833,-77.73799974520591

5485183_20201_2_0,7wd7so4icz,0.37097423012521824,-84.5903327242965,-46.125102342166315

5300087_20201_2_0,7wnnao4icz,-0.7581563898460493,-99.50058671933448,-25.40027840076867

1941559_20201_2_0,7woa0p4icz,-0.6965425979627003,-112.9836368297156,-23.33357672068385

3413104_20201_2_0,7wryjn4icz,-3.266433961197541,-95.00514646565583,-19.005503573531684

1925123_20201_2_0,7x26lo4icz,-0.11104477903012626,-102.12813490549487,-52.49545720565898

1202596_20201_2_0,7x4mnn4icz,0.6315534219213327,-66.05045833418993,-28.1706780469315

4756608_20201_2_0,7x4xhp4icz,-1.0544215826740972,-130.28591300645718,-30.736308448285413

3178823_20201_2_0,7x6lpn4icz,-1.1323037711323536,-97.5411001117478,-20.145743915701743

3021885_20201_2_0,7x6szo4icz,0.19038502497245538,-101.6914674342101,-55.22275055233217

4000655_20201_2_0,7x9dgn4icz,-3.1520167706850737,-112.23696542679863,-18.9516309803261

5708624_20201_2_0,7xdfuo4icz,-1.4188497995443607,-100.35305012101512,-19.413837137324393

1833168_20201_2_0,7xiefp4icz,-1.6716794762353273,-118.30777260105009,-13.771532206530509

4845063_20201_2_0,7xn0gn4icz,1.9908884498824677,-74.12242150846043,-51.15414332342202

3617067_20201_2_0,7xnven4icz,2.0202474340957988,-104.43289656726503,-41.21952097509079

5380027_20201_2_0,7xqcip4icz,0.946353739526172,-122.31666932165939,-39.066195279812945
 46%|████▌     | 373/811 [19:28<19:40,  2.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 374/811 [19:31<20:13,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 375/811 [19:35<22:15,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▋     | 376/811 [19:39<25:07,  3.47s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▋     | 377/811 [19:42<23:12,  3.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 378/811 [19:44<21:53,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 379/811 [19:47<21:18,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 380/811 [19:52<26:04,  3.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 381/811 [19:55<24:23,  3.40s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 382/811 [19:58<23:15,  3.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 383/811 [20:01<22:12,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 384/811 [20:05<23:24,  3.29s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 385/811 [20:07<22:13,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 386/811 [20:10<21:10,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 387/811 [20:13<20:54,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 388/811 [20:16<20:59,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 389/811 [20:20<23:13,  3.30s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 390/811 [20:27<31:59,  4.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 391/811 [20:30<27:50,  3.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 392/811 [20:34<27:49,  3.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 393/811 [20:37<25:38,  3.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▊     | 394/811 [20:41<25:43,  3.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▊     | 395/811 [20:44<23:36,  3.40s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 396/811 [20:46<22:21,  3.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 397/811 [20:49<21:29,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 398/811 [20:52<20:44,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 399/811 [20:55<20:31,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 400/811 [20:59<22:31,  3.29s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 401/811 [21:02<21:45,  3.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|████▉     | 402/811 [21:05<20:38,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|████▉     | 403/811 [21:07<20:20,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|████▉     | 404/811 [21:10<19:57,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|████▉     | 405/811 [21:13<19:07,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 406/811 [21:16<18:56,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 407/811 [21:20<21:16,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 408/811 [21:22<20:22,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 409/811 [21:25<19:30,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 410/811 [21:28<19:25,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 411/811 [21:31<19:02,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 412/811 [21:33<18:30,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 413/811 [21:36<18:15,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 414/811 [21:39<18:52,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 415/811 [21:42<19:04,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████▏    | 416/811 [21:44<18:12,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████▏    | 417/811 [21:50<24:22,  3.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 418/811 [21:53<22:30,  3.44s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 419/811 [21:56<21:13,  3.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 420/811 [21:59<19:59,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 421/811 [22:01<19:00,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 422/811 [22:04<18:39,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 423/811 [22:07<19:28,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 424/811 [22:10<19:31,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 425/811 [22:13<19:18,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 426/811 [22:16<19:04,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 427/811 [22:21<22:08,  3.46s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 428/811 [22:24<21:09,  3.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 429/811 [22:27<20:15,  3.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 430/811 [22:29<19:38,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 431/811 [22:32<19:05,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 432/811 [22:35<18:33,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 433/811 [22:40<22:29,  3.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▎    | 434/811 [22:43<20:54,  3.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▎    | 435/811 [22:45<19:32,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 436/811 [22:48<18:55,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 437/811 [22:51<18:22,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 438/811 [22:54<18:00,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 439/811 [22:57<18:04,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 440/811 [23:00<17:50,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 441/811 [23:04<20:29,  3.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▍    | 442/811 [23:07<20:06,  3.27s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▍    | 443/811 [23:10<19:29,  3.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▍    | 444/811 [23:13<19:02,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▍    | 445/811 [23:16<18:14,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▍    | 446/811 [23:19<17:49,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▌    | 447/811 [23:21<17:47,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▌    | 448/811 [23:24<17:18,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▌    | 449/811 [23:27<16:40,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▌    | 450/811 [23:29<16:18,  2.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 451/811 [23:32<16:02,  2.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 452/811 [23:35<16:24,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 453/811 [23:38<16:42,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 454/811 [23:41<16:42,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 455/811 [23:43<16:34,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 456/811 [23:46<16:13,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▋    | 457/811 [23:49<16:23,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▋    | 458/811 [23:52<16:45,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 459/811 [23:54<16:20,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 460/811 [23:58<17:13,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 461/811 [24:01<16:51,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 462/811 [24:03<16:48,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 463/811 [24:06<16:49,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 464/811 [24:09<16:47,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 465/811 [24:12<16:29,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 466/811 [24:15<17:06,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 467/811 [24:18<16:32,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 468/811 [24:21<16:19,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 469/811 [24:23<15:50,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 470/811 [24:26<15:30,  2.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 471/811 [24:29<15:25,  2.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 472/811 [24:31<15:32,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 473/811 [24:34<15:21,  2.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 474/811 [24:37<15:45,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▊    | 475/811 [24:40<15:51,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▊    | 476/811 [24:43<15:40,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 477/811 [24:46<15:36,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 478/811 [24:48<15:29,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 479/811 [24:51<15:14,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 480/811 [24:54<15:06,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 481/811 [24:56<15:02,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 482/811 [24:59<14:50,  2.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|█████▉    | 483/811 [25:02<14:44,  2.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|█████▉    | 484/811 [25:04<14:43,  2.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|█████▉    | 485/811 [25:08<16:48,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|█████▉    | 486/811 [25:16<24:10,  4.46s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|██████    | 487/811 [25:19<21:44,  4.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|██████    | 488/811 [25:22<19:23,  3.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|██████    | 489/811 [25:24<18:00,  3.36s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|██████    | 490/811 [25:27<17:16,  3.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 491/811 [25:31<17:01,  3.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 492/811 [25:34<16:55,  3.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 493/811 [25:36<16:13,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 494/811 [25:39<15:48,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 495/811 [25:42<15:40,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 496/811 [25:50<23:53,  4.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████▏   | 497/811 [25:53<21:16,  4.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████▏   | 498/811 [25:57<19:46,  3.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 499/811 [25:59<18:04,  3.48s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 500/811 [26:02<16:54,  3.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 501/811 [26:05<17:08,  3.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 502/811 [26:08<16:08,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 503/811 [26:11<15:29,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 504/811 [26:14<16:10,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 505/811 [26:17<15:16,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 506/811 [26:20<14:38,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 507/811 [26:22<14:23,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 508/811 [26:25<14:05,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 509/811 [26:29<15:58,  3.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 510/811 [26:32<15:24,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 511/811 [26:35<14:57,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 512/811 [26:39<17:06,  3.43s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 513/811 [26:42<15:48,  3.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 514/811 [26:45<14:58,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▎   | 515/811 [26:48<15:53,  3.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▎   | 516/811 [26:51<14:55,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▎   | 517/811 [26:54<14:39,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 518/811 [26:57<14:36,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 519/811 [26:59<14:18,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 520/811 [27:04<16:13,  3.34s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 521/811 [27:07<15:30,  3.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 522/811 [27:11<16:48,  3.49s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 523/811 [27:17<20:30,  4.27s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▍   | 524/811 [27:21<20:35,  4.31s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▍   | 525/811 [27:24<18:11,  3.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▍   | 526/811 [27:27<16:40,  3.51s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▍   | 527/811 [27:30<15:31,  3.28s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▌   | 528/811 [27:32<14:54,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▌   | 529/811 [27:35<14:44,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▌   | 530/811 [27:38<13:56,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▌   | 531/811 [27:41<13:40,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 532/811 [27:45<14:50,  3.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 533/811 [27:50<18:11,  3.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 534/811 [27:53<16:57,  3.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 535/811 [27:57<16:11,  3.52s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 536/811 [27:59<14:50,  3.24s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 537/811 [28:02<14:09,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▋   | 538/811 [28:05<13:58,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▋   | 539/811 [28:08<13:30,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 540/811 [28:10<13:08,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 541/811 [28:14<14:28,  3.22s/it] 67%|██████▋   | 542/811 [28:28<27:52,  6.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 543/811 [28:31<23:19,  5.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 544/811 [28:33<19:50,  4.46s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 545/811 [28:36<17:44,  4.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 546/811 [28:39<16:01,  3.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 547/811 [28:42<14:57,  3.40s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 548/811 [28:44<13:56,  3.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 549/811 [28:47<13:37,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 550/811 [28:50<13:07,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 551/811 [28:53<12:48,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 552/811 [28:56<13:19,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 553/811 [29:00<13:30,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 554/811 [29:02<12:58,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 555/811 [29:05<12:23,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▊   | 556/811 [29:08<12:18,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▊   | 557/811 [29:11<12:05,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 558/811 [29:13<11:51,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 559/811 [29:16<11:47,  2.81s/it] 69%|██████▉   | 560/811 [29:19<12:08,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 561/811 [29:22<12:18,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 562/811 [29:25<11:54,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 563/811 [29:28<12:02,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|██████▉   | 564/811 [29:31<12:02,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|██████▉   | 565/811 [29:34<11:42,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|██████▉   | 566/811 [29:36<11:18,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|██████▉   | 567/811 [29:39<11:02,  2.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|███████   | 568/811 [29:42<10:56,  2.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|███████   | 569/811 [29:44<10:54,  2.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|███████   | 570/811 [29:47<10:55,  2.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|███████   | 571/811 [29:50<10:38,  2.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 572/811 [29:52<10:49,  2.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 573/811 [29:55<10:52,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 574/811 [29:58<10:40,  2.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 575/811 [30:00<10:36,  2.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 576/811 [30:03<10:35,  2.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 577/811 [30:06<10:41,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████▏  | 578/811 [30:09<10:53,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████▏  | 579/811 [30:12<11:02,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 580/811 [30:15<10:53,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 581/811 [30:19<12:13,  3.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 582/811 [30:21<11:34,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 583/811 [30:24<11:32,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 584/811 [30:28<11:46,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 585/811 [30:30<11:00,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 586/811 [30:33<10:52,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 587/811 [30:38<12:44,  3.41s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 588/811 [30:40<11:57,  3.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 589/811 [30:43<11:20,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 590/811 [30:46<11:02,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 591/811 [30:49<10:42,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 592/811 [30:51<10:12,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 593/811 [30:54<10:06,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 594/811 [30:57<09:48,  2.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 595/811 [31:00<10:14,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 596/811 [31:04<11:33,  3.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▎  | 597/811 [31:17<21:56,  6.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▎  | 598/811 [31:20<18:36,  5.24s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 599/811 [31:24<17:48,  5.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 600/811 [31:30<18:07,  5.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 601/811 [31:33<15:40,  4.48s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 602/811 [31:35<13:44,  3.95s/it] 74%|███████▍  | 603/811 [31:38<12:20,  3.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 604/811 [31:41<11:33,  3.35s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▍  | 605/811 [31:44<10:44,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▍  | 606/811 [31:46<10:19,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▍  | 607/811 [31:49<10:11,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▍  | 608/811 [31:52<09:54,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▌  | 609/811 [31:56<10:47,  3.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▌  | 610/811 [31:59<10:48,  3.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▌  | 611/811 [32:02<10:10,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▌  | 612/811 [32:05<09:55,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 613/811 [32:32<33:28, 10.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 614/811 [32:34<25:59,  7.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 615/811 [32:47<30:38,  9.38s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 616/811 [32:53<27:10,  8.36s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 617/811 [32:56<21:20,  6.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 618/811 [32:59<17:48,  5.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▋  | 619/811 [33:01<15:00,  4.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▋  | 620/811 [33:04<12:59,  4.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 621/811 [33:07<11:35,  3.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 622/811 [33:09<10:33,  3.35s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 623/811 [33:12<09:58,  3.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 624/811 [33:15<09:23,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 625/811 [33:17<09:03,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 626/811 [33:20<08:47,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 627/811 [33:23<08:33,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 628/811 [33:25<08:29,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 629/811 [33:28<08:22,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 630/811 [33:31<08:13,  2.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 631/811 [33:36<10:17,  3.43s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 632/811 [33:38<09:23,  3.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 633/811 [33:42<09:33,  3.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 634/811 [33:45<09:06,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 635/811 [33:48<08:56,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 636/811 [33:50<08:35,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▊  | 637/811 [33:53<08:08,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▊  | 638/811 [33:56<08:06,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 639/811 [33:58<07:57,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 640/811 [34:01<07:54,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 641/811 [34:04<07:54,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 642/811 [34:07<07:46,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 643/811 [34:09<07:38,  2.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 644/811 [34:12<07:40,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|███████▉  | 645/811 [34:15<07:29,  2.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|███████▉  | 646/811 [34:17<07:31,  2.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|███████▉  | 647/811 [34:20<07:28,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|███████▉  | 648/811 [34:23<07:30,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 649/811 [34:26<07:25,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 650/811 [34:28<07:16,  2.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 651/811 [34:31<07:18,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 652/811 [34:34<07:21,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 653/811 [34:39<09:02,  3.44s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 654/811 [34:42<08:32,  3.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).

2560497_20201_2_0,7xvgao4icz,4.2372793799340664,-105.3856676173379,-65.65734446161918

3561522_20201_2_0,7xvmpn4icz,-4.304065575665495,-119.91200296191076,-10.572626435220101

5948689_20201_2_0,7y15do4icz,-0.20765859964600922,-89.26012215641649,-34.0545324161877

3415827_20201_2_0,7y43ko4icz,-6.5019475718721935,-137.79756839895367,9.996099703287797

1118115_20201_2_0,7y63do4icz,0.7085409074660115,-77.92206199382048,-32.573570679044906

2462360_20201_2_0,7y6tho4icz,2.5012312345229653,-83.51941273759556,-45.57079317704125

4146800_20201_2_0,7y6vqn4icz,-4.074009961616402,-124.38437560501379,-20.277118108500872

4099084_20201_2_0,7y7y0p4icz,1.0602895739696951,-94.35180474328212,-37.40443174298686

4466522_20201_2_0,7y8eto4icz,-1.6050017080646677,-77.78977783024186,-17.48787935540588

4735427_20201_2_0,7y94gn4icz,0.18186573160937008,-82.29395416428119,-30.47954578959194

1334424_20201_2_0,7y9kfp4icz,-1.8621164394213294,-90.79724013106465,-42.848403642524374

5583859_20201_2_0,7ycjin4icz,-58.619018064084095,218.35689574445507,382.4005758222445

1214331_20201_2_0,7yd2no4icz,-0.3461234521537007,-99.41190016199252,-35.272238723534414

5716244_20201_2_0,7yg2ep4icz,1.1048305610110938,-117.37102807097821,-33.95093894318171

4339137_20201_2_0,7yj67p4icz,-2.280962251851689,-141.74223535297708,-16.986502609769687

4621296_20201_2_0,7yo40p4icz,-1.166648366770125,-64.24995254250092,-28.733050715560893

2108106_20201_2_0,7ypdyo4icz,-1.729079807057033,-57.17101725491159,-32.236643418954046

4024291_20201_2_0,7yta6p4icz,2.1166298622751274,-75.435126113324,-51.59360679718638

1958155_20201_2_0,7ytnbp4icz,1.1637055364543871,-84.7539812942191,-49.92893508124152

3445839_20201_2_0,7yuorn4icz,-0.9105142189003433,-93.84436331112448,-22.9563874753741

1846234_20201_2_0,7z3n9o4icz,-1.3815314845987152,-86.76980905151834,-27.34542920563827

3687694_20201_2_0,7z8vjo4icz,-0.020539118811507086,-19.750331785166225,-58.370171251002716

5819949_20201_2_0,7z9qpo4icz,0.676141974634755,-92.42028572610559,-37.27468079912265

3404247_20201_2_0,7zbmap4icz,1.1388451172720464,-90.20352057528146,-39.52189851239251

5962950_20201_2_0,7zdukn4icz,-17.370608012891672,-141.53818010315499,55.25074267397112

2215287_20201_2_0,7zfgdp4icz,1.9308425117670287,-64.27833984162203,-54.843013516963026

3085423_20201_2_0,7zfrjn4icz,0.5144377619940885,-63.90667457312418,-37.485270013165064

2200286_20201_2_0,7zk4rn4icz,-0.5699308104112166,-86.85538219852813,-55.489196910731266

1464743_20201_2_0,7zob9o4icz,1.3132788611074409,-73.77724207021737,-49.17397745710552

2605098_20201_2_0,7zr4po4icz,-1.5294637980235914,-90.26127429929085,-42.687213166825074

1956997_20201_2_0,7zt1sn4icz,-9.612359055585353,-134.25786183404452,6.382657498043187

4644175_20201_2_0,7zwaxo4icz,-1.044857987449883,-94.52545075262418,-23.641226432470745

2388794_20201_2_0,7zygwo4icz,-7.490167532337819,-84.53644208242596,3.083494970998302

5224906_20201_2_0,7zzpso4icz,-1.5627348336835374,-52.75721011439987,-12.920225589743083

5596028_20201_2_0,800g0p4icz,-1.371885473703476,-79.83179227418091,-23.96505018796961

4146108_20201_2_0,801c2o4icz,6.7008247697470935,-73.635024904467,-70.83424793858819

5577303_20201_2_0,801f7o4icz,-1.321486201126158,-132.01244345206862,-28.290104036760496

3721101_20201_2_0,809afn4icz,-3.202119134498816,-93.975173067355,-22.076790675615428

2798719_20201_2_0,80aisn4icz,0.3483726253239468,-128.55118113166245,-54.47413876254923

3957430_20201_2_0,80ht8o4icz,-2.483070598951004,-88.21781836547734,-14.965523854851384

3641402_20201_2_0,80ptzo4icz,-0.9434432228853459,-53.812455308927156,-13.744136592874867

6010128_20201_2_0,80qo0o4icz,-3.3619903778922455,-116.61109505165402,-32.89027937581777

2790014_20201_2_0,80x97o4icz,1.1464136190778125,-90.05539636094903,-30.213995775766023

1202809_20201_2_0,80yb3p4icz,-3.137705206033303,-143.57294993287485,-34.67886067142601

3265089_20201_2_0,80ycwn4icz,0.6034913494353622,-87.87624512157575,-45.51315846038804

5167557_20201_2_0,811mqn4icz,4.076865144925362,-97.28298601540823,-53.82418340776695

3561500_20201_2_0,812dhp4icz,-14.051147780071895,-108.39486590975076,25.122547903737882

3480741_20201_2_0,814yrn4icz,-1.9676372169375371,-101.63561975074569,-38.46870930060015

4784130_20201_2_0,8161ip4icz,-11.357043462791546,-107.03016542665355,22.90248321121682

4106930_20201_2_0,816s0o4icz,3.043419878799894,-66.00601261869303,-55.99767298259442

3081374_20201_2_0,81a06p4icz,-0.35367884487838835,-98.21733660313751,-32.63740559262054

2416546_20201_2_0,81e8fn4icz,0.34697610901178,-98.85203636260096,-48.402037861340304

4464532_20201_2_0,81ekpn4icz,-0.679743772444376,-119.87250467047778,-12.646030175805691

3153378_20201_2_0,81ghtn4icz,-2.9356710117592826,-100.46281463740283,-16.815284746073075

2468560_20201_2_0,81hhmn4icz,-6.437166472067854,-100.17615958528174,-0.26890205797704425

3796213_20201_2_0,81hyfo4icz,-3.639227737472632,-90.56039664244378,-12.12709374133766

4109792_20201_2_0,81p3zo4icz,2.6912748094900185,-56.37083378718836,-40.53692884727073

2199914_20201_2_0,81pvho4icz,-2.4727232112928688,-78.32496481075859,-24.86922446396005

5245218_20201_2_0,81rydp4icz,-0.7801957542874469,-72.3299124004109,-23.204952312915395

5094989_20201_2_0,81ti3p4icz,-0.8507427688482595,-122.35167204295882,-13.836672139748288

1565009_20201_2_0,81ui8p4icz,1.7708755934390323,-103.89525117610074,-25.142434076817807

4494437_20201_2_0,81w7yo4icz,0.5346050551398449,-60.32942057029433,-27.912655841153324

5388846_20201_2_0,81y7tn4icz,3.7885461779077287,-99.25231754260315,-49.01489745310836

3238018_20201_2_0,82427o4icz,-3.1239916035089843,-82.70279379893282,-16.576600628293335

1855634_20201_2_0,829ado4icz,-2.2554794102253,-67.1293859542958,-27.939736628873277

1927004_20201_2_0,82eqkn4icz,-3.1269662753975913,-121.29909545343443,-33.062746812085805

4313326_20201_2_0,82g03p4icz,-6.755599608336258,-140.48587842249572,0.4181529825450241

2199957_20201_2_0,82gldo4icz,0.9078774924370351,-44.14853854802385,-33.10959211587797

2685595_20201_2_0,82h8fn4icz,-0.03380618610193079,-127.134349540676,-38.64784119560085

1111662_20201_2_0,82qmro4icz,-0.7313230393907568,-82.35457088627291,-21.95113852618134

2918249_20201_2_0,82rc6o4icz,-1.6357640444128803,-99.68806467778009,-30.473252604922337

1652273_20201_2_0,832atn4icz,-2.5534744058698724,-67.79496666906607,-15.07857691399657

3977070_20201_2_0,834kzo4icz,-1.357619806739415,-60.75465222628796,-21.938278725467157

4843639_20201_2_0,836r2o4icz,0.0890075963393123,-119.2054941813509,-35.435560356208214

2510879_20201_2_0,83927n4icz,-4.681754393708648,-98.2424069316767,-17.629325557153123

3633361_20201_2_0,83d5zo4icz,-0.7843420408798352,-75.70041892073257,-33.89676711945858

5900942_20201_2_0,83dsgo4icz,1.8817344564781713,-59.41820657898032,-47.042743232809755

2003261_20201_2_0,83j4tn4icz,2.266546193852352,-61.98574851356267,-41.60602930312197

4133090_20201_2_0,83qgjn4icz,3.258632838264222,-82.1691485262021,-57.00217283276798

3260895_20201_2_0,83rkzo4icz,2.6568018346296354,-46.59958302874088,-51.18395216655232

3149119_20201_2_0,83sijp4icz,2.0582656339812173,-92.18618625395169,-48.31922830442896

5537712_20201_2_0,83wwdo4icz,-1.0806034972183463,-62.648299299712846,-23.9341353812043

1996404_20201_2_0,8498ep4icz,-2.505568184745916,-126.08422499584992,-27.366437782893996

1483310_20201_2_0,84al7p4icz,1.8237072843681672,-64.90982442429234,-34.31508607374366

2166165_20201_2_0,84b5en4icz,0.3271154149636646,-90.45989241851743,-50.48039089763127

2660105_20201_2_0,84enyo4icz,0.5928315636186274,-100.00153828330008,-53.317855064753786

5132746_20201_2_0,84fbwn4icz,-1.812917466098328,-100.12485986596712,-22.653905089276847

1905602_20201_2_0,84fyvn4icz,-1.7928378946816232,-104.9997157381344,-20.191204455080225

3856707_20201_2_0,84oqcp4icz,0.28351545222870367,-79.34973809855722,-41.796713726037

5703221_20201_2_0,84r6gp4icz,-2.9152225002406036,-158.14998777170482,-5.004780442139634

3804289_20201_2_0,84vz0o4icz,-1.1388917971163626,-48.28135713844682,-39.219025878649006

2222528_20201_2_0,84w1oo4icz,0.4846088118710963,-138.8091983002761,-36.66925291752004

2710601_20201_2_0,84xjip4icz,-2.3444315584441897,-65.27645067620278,-30.63750537407425

5029680_20201_2_0,8541to4icz,-1.0407275991990679,-127.40378299735573,-38.97780816532297

3526375_20201_2_0,85723p4icz,2.4845616516893165,-102.6808037879135,-49.97409418894489

3403754_20201_2_0,857bxo4icz,0.45229989248817765,-78.46552344640105,-47.66850520254009

1126612_20201_2_0,85e4tn4icz,0.3594773239507329,-98.9951333777,-16.120525445630335

5758343_20201_2_0,85ecio4icz,1.3243761375913636,-132.30777228172124,-52.832295386631785

2923411_20201_2_0,85h0cp4icz,9.777868450124455,-10.139703704801434,-88.39797479096606

1644049_20201_2_0,85phgp4icz,-0.09749428779012119,-101.6373091460054,-31.68964588091255

3139236_20201_2_0,85q4yo4icz,-0.6775108187483303,-81.7756587957578,-43.38497834116312

4045190_20201_2_0,85x8oo4icz,0.12561618130262983,-106.93153067067874,-27.83881253913961

3184704_20201_2_0,85xgzo4icz,3.440912469923397,-99.18580541708627,-42.760316033469195

3415721_20201_2_0,861e5p4icz,-0.47554208513945917,-74.79965749304463,-35.82445336243124

5220934_20201_2_0,861ybo4icz,1.1888457407104898,-76.90288474521554,-41.82210227480563

2760713_20201_2_0,868kvo4icz,-2.0749743390138145,-105.91304812263232,-24.36836141870505

3841158_20201_2_0,86co3p4icz,1.9654502396811886,-38.354725233524334,-76.55639615671147

2456134_20201_2_0,86d6to4icz,0.7622795736631062,-107.14524162059115,-28.815155180198417

3079428_20201_2_0,86k0wo4icz,0.08789822265984086,-107.64224708667501,-44.46640613701592

3417248_20201_2_0,86p1xo4icz,-1.0445382010605027,-81.21324104228205,-22.428890610929272

1644355_20201_2_0,86t2po4icz,1.0759059306975276,-56.68625756778346,-38.29982409426458

3530822_20201_2_0,86zyln4icz,0.9768182451649525,-107.07953538655946,-53.66519040297672

2552371_20201_2_0,8701gp4icz,1.549375311638511,-45.29020688979094,-41.63515007636626

2451970_20201_2_0,874fun4icz,-2.1385256486035664,-117.79590200146686,-33.848641095824135

3140187_20201_2_0,874v8p4icz,-3.300446443629324,-102.87956369278706,-36.440843409538246

5144935_20201_2_0,8781on4icz,-3.5187525251457092,-103.97926830389119,-21.61024454410635

4562143_20201_2_0,87cifp4icz,13.110358023534191,-55.870296624844144,-104.31481670901908

5206749_20201_2_0,87jgwn4icz,-0.296060007566302,-96.12787976986951,-44.80599315125882

5722631_20201_2_0,87qf0p4icz,-2.5534119684156007,-76.5847422515377,-23.00274331211901

5596414_20201_2_0,87re3o4icz,5.736900515378347,-50.212331773414064,-53.6268199317434

3765268_20201_2_0,87rezo4icz,-4.873930536408469,-149.8970270385063,3.34007197944689

2677243_20201_2_0,87sb7p4icz,-1.596948126984355,-71.88516045966873,-20.089331680429098

2689620_20201_2_0,87u2ep4icz,1.5303124994990618,-92.49502078403154,-49.33478184708187

2798329_20201_2_0,87ydxn4icz,2.133348598471653,-99.43990006447711,-35.02920726016201

3403953_20201_2_0,8868pn4icz,8.330256610999557,-108.94080202603001,-90.69715921471497

3252465_20201_2_0,887vmo4icz,-1.0045866372527907,-81.43457218361334,-35.48740794615067

1949232_20201_2_0,888xao4icz,-2.097675992848867,-102.1777951770986,-23.94072717204135

4156304_20201_2_0,88agon4icz,0.2357490284530101,-80.54165819397181,-33.29790225408598

1570634_20201_2_0,88caep4icz,-0.7339686548211348,-108.14768015235063,-47.455616228535774

3702251_20201_2_0,88dbwo4icz,-0.023629743647951694,-114.91531276766298,-20.511878081293844

3996278_20201_2_0,88ibin4icz,-1.4336359651388821,-113.10832527533128,-32.67896549591629

2009209_20201_2_0,88icdp4icz,-2.8632280438916005,-103.55177593249522,-30.057586842671014

3174591_20201_2_0,88io9o4icz,-0.2686288157061605,-87.15285583530033,-35.991119993623386

2347647_20201_2_0,88kzpo4icz,0.12946546141663917,-54.11886368612909,-46.68878255540449

1431958_20201_2_0,88mqwo4icz,-5.124974610982349,-132.2378502728558,-11.389824133239259

1301100_20201_2_0,88ow4o4icz,0.5693857587930989,-97.23617057016452,-34.04858821932898

1768247_20201_2_0,88s5zo4icz,0.836913897207686,-57.411586929188076,-58.33028404030787

5479573_20201_2_0,88su9o4icz,1.6521190847400447,-96.58689854375592,-35.97598409936566

2205339_20201_2_0,88w1gn4icz,2.493855861846855,-94.63010781989766,-59.82053069533623

1795881_20201_2_0,88xkdn4icz,-2.9148144276154477,-81.71641480597353,-14.23978954294546

4855000_20201_2_0,88ysbo4icz,-3.3794191381404652,-193.03213647122018,-26.16356798659291

2884212_20201_2_0,891cin4icz,10.242769378240748,-52.27928776985925,-95.74723101472941

3788828_20201_2_0,893mdp4icz,-4.357451128298649,-133.93711669312387,-9.500033157629545

4846274_20201_2_0,8j47fp4icz,0.5700269363172212,-75.18780399609011,-31.289560574408853

5640612_20201_2_0,8974no4icz,3.2115386431259156,-64.69161404488867,-50.819363150201355

5947103_20201_2_0,8979lo4icz,-3.759696940070979,-98.01729195557795,-3.322085027758206

3896390_20201_2_0,89cuwo4icz,0.8236999621224546,-39.23675735405061,-36.986228923381546

5267330_20201_2_0,89d8vn4icz,2.1913724801274923,-99.10527595688987,-47.757808150598635

1066220_20201_2_0,89dv6o4icz,-0.6490496719763669,-79.19274431977445,-35.99615851190964

3417752_20201_2_0,89hn8o4icz,-1.4488953499147321,-69.49835831147462,-27.621417599818855

1768524_20201_2_0,89imrn4icz,-1.368730761875351,-92.13518922153662,-28.96856162151454

5892746_20201_2_0,89ioen4icz,3.345151299622817,-62.614563211054474,-48.7244021660367

4778541_20201_2_0,89n2gp4icz,1.6396408178215223,-116.42846116058254,-54.55574586569696

3120652_20201_2_0,89pj4o4icz,-2.010817036421717,-104.24527893174158,-33.28924014965355

3396956_20201_2_0,89ue4p4icz,-6.822586806803025,-153.01585338872627,-16.97915364063553

2267174_20201_2_0,89zlhp4icz,14.603665833344431,-62.625607802397724,-91.91978225534609

5006775_20201_2_0,8a0p6o4icz,1.4502100984174293,-95.10275779909256,-44.21704777359622

5406939_20201_2_0,8a2p0o4icz,3.3582376572155375,-94.0727858860254,-52.20153677904369

4593416_20201_2_0,8a9zsn4icz,-1.7266638456490535,-128.89600184616467,-28.98371102212201

4976347_20201_2_0,8abaqn4icz,2.586600589924943,-106.63758799253111,-55.33887950466297

5084580_20201_2_0,8aepfn4icz,-2.301704668626389,-97.21598196144268,-21.029249426987462

5424422_20201_2_0,8af1kp4icz,-1.480657473304986,-106.16965437664368,-35.272987639058414

2105617_20201_2_0,vzv0do4icz,-1.7616504594252196,-72.93110297360681,-20.891880045644456

1733991_20201_2_0,8aq4do4icz,1.4220335175297845,-80.6005009427214,-50.95745846336325

5426572_20201_2_0,8aspun4icz,-0.3888276295974005,-97.43670295110974,-27.392081495905458

2831897_20201_2_0,8at62o4icz,2.1995435616607115,-117.38542842992942,-52.585838708911595

3685687_20201_2_0,8av1jn4icz,-4.502388196175944,-75.80185026232806,-9.37855379735339

1287658_20201_2_0,8avkpo4icz,-0.025712262318471985,-103.5738721486108,-35.39186011819004

5807184_20201_2_0,8axvuo4icz,1.9477002560318653,-93.08302334646177,-43.88111748566055

2597035_20201_2_0,8b1l7o4icz,-0.5636165956655141,-62.61123935236512,-31.258446937522805

2558533_20201_2_0,8b6pto4icz,-0.4933583606858941,-115.53923707657518,-40.04389349998823

4456833_20201_2_0,8b7xmo4icz,0.9079283280995268,-82.64353242116232,-45.16304741086108

4306299_20201_2_0,8b9pvo4icz,2.566446694859313,-72.26602303671228,-38.075594063913144

4585311_20201_2_0,8bb3sn4icz,1.9584206533198514,-118.80262064215972,-40.01982922594199

2005873_20201_2_0,8bi86o4icz,-1.1143950265024727,-115.05466917942536,-19.432355647986626

3190979_20201_2_0,8bjl4p4icz,-2.7111565427297037,-82.12870521932251,-29.352532992427555

2612342_20201_2_0,8bktfo4icz,1.9853825923014616,-79.5587994088205,-41.781815924302606

5839403_20201_2_0,8blkpn4icz,1.4634478662785377,-89.52590966004104,-36.18815573577575

5245684_20201_2_0,8bniap4icz,-0.28569127954326734,-70.5667504585602,-38.99561223821644

3130703_20201_2_0,8bnxun4icz,2.593728979478461,-105.92415029025258,-48.67317020088291

3409619_20201_2_0,8br7so4icz,0.3796352345245351,-94.14582214927248,-36.86681186148655

1961863_20201_2_0,8bsrho4icz,1.8067462990197698,-103.84030211328741,-36.05426177628112

5055722_20201_2_0,8buken4icz,-3.544020740415667,-74.56974573138567,-35.73795170996958

5272817_20201_2_0,nfu9io4icz,0.11833162559653959,-49.208932830746136,-56.966910425799426

1898049_20201_2_0,8c1cbp4icz,0.10601681738335257,-83.57581122942466,-37.61521870319925

4254440_20201_2_0,8c309n4icz,-3.5114193786749603,-97.2951514166102,-16.607856117325795

5063679_20201_2_0,8c5ifp4icz,2.261278365822066,-127.0722119228493,-51.79817394128486

2843958_20201_2_0,8c8n9o4icz,0.31676953382601825,-73.14651413959834,-52.63410155145634

3618040_20201_2_0,8caswn4icz,-0.7665298992724084,-75.50635835177394,-23.39671713653823

2431525_20201_2_0,8cdfpo4icz,-4.610071641469836,-105.09657015933749,-6.2786444564944475

4967883_20201_2_0,8cg12p4icz,-1.0142007145010044,-54.60151021072983,-12.598838918150108

4628809_20201_2_0,8cj76p4icz,1.7027139414549202,-108.0255246549124,-36.45996239204139

3544994_20201_2_0,8cu2vo4icz,-0.35307418967820775,-78.26708027360678,-41.102767675177674

1077138_20201_2_0,8cvaip4icz,0.3081804779876454,-114.97965289242691,-53.20173533003755

4371755_20201_2_0,8cwk3p4icz,1.6454350124702863,-55.502802548979986,-68.56958429124342

2955313_20201_2_0,8cz5co4icz,-2.4032892609482706,-125.2401271061621,-22.444604742084806

1027526_20201_2_0,8dayvo4icz,-1.0691854006797128,-72.91748543059117,-72.71483624425468

4878991_20201_2_0,8dbr6p4icz,-0.8343340119253755,-63.38442446244636,-16.300555601539315

5185494_20201_2_0,8dcp6p4icz,-2.865360772879245,-101.51045219113226,-32.92697818459516

4873689_20201_2_0,8dhcip4icz,-2.111721794863745,-83.31888349813826,0.504657484266545

5182902_20201_2_0,8djk3p4icz,-1.4720057672812839,-99.4189052093947,-12.776728683370123

2319006_20201_2_0,8dm1ho4icz,1.95946061421062,-119.06593900216865,-45.48111375224204

2872002_20201_2_0,8dx1cp4icz,-0.9366435716062592,-122.19086294184032,-31.850245652294262

2555462_20201_2_0,8dxkpn4icz,1.630178999006882,-62.03236514225853,-37.619877355517445

3209587_20201_2_0,8e154o4icz,-2.463411299476573,-52.00107505591052,-36.078640693700876

1426032_20201_2_0,8e5bhp4icz,-8.817941711871416,-127.43765038503042,8.702535196603236

4874065_20201_2_0,8e7atn4icz,0.8041246970817825,-97.20494705402808,-37.86755486317452

1901412_20201_2_0,8e7ofp4icz,0.8754205573318351,-105.48841085874989,-54.469271593251136

4270986_20201_2_0,8e9k8o4icz,1.5165131629258117,-127.8580466656289,-43.25884236241377

4089671_20201_2_0,8eetun4icz,-2.806639892944526,-115.12615383603284,-32.74447676955441

3874012_20201_2_0,8ef3kp4icz,-2.4827309677927545,-72.54620077219403,-33.314438921848776

5976696_20201_2_0,8ehiln4icz,-0.7311589623294528,-68.21253785327278,-17.130249562790453

3461601_20201_2_0,8eif2o4icz,0.0610754632422741,-80.77110790481296,-26.965747768898126

3078302_20201_2_0,8emedp4icz,5.243868710483492,-75.77893890824458,-66.37872385185753

1389678_20201_2_0,8eo7wo4icz,1.2388316818645762,-48.764418825104485,-38.52398166807883

5523597_20201_2_0,8eo9no4icz,0.482062652524675,-94.6566515436817,-27.72367808330978

5354223_20201_2_0,a2h18p4icz,0.4567111289683675,-80.43818357646592,-50.14597829516144

3674566_20201_2_0,8f0wso4icz,3.29030170184577,-71.6167212981369,-64.26319423776559

3921355_20201_2_0,8f2xun4icz,-2.5631260179261366,-94.39551206758642,-18.134573805414433

1590675_20201_2_0,8f5mho4icz,-8.545988356880988,-113.70457861810962,15.791962328174705

2777850_20201_2_0,8f6k8n4icz,1.839274724284837,-121.29431942483288,-61.711228903079345

5145877_20201_2_0,8fc56o4icz,0.9439258046286946,-106.8003483635066,-31.488877607095333

5136473_20201_2_0,8fe6fn4icz,1.7435641084755775,-64.19542962014597,-46.64611213766716

1383009_20201_2_0,8ffvao4icz,-1.7153190874705795,-82.41364983085992,-5.681003906744905

1249924_20201_2_0,8fgbeo4icz,-5.567816813224533,-138.64880748600885,-13.602822657868003

3935420_20201_2_0,8fi7wn4icz,0.5809034784540746,-101.45708203064291,-40.956753298539454

1226705_20201_2_0,8foqrn4icz,1.8650798599539276,-92.5732836539672,-39.73716766596249

1993759_20201_2_0,8fovco4icz,-1.2040582026184101,-96.86972936558044,-17.55038798249771

2599370_20201_2_0,8fqsgp4icz,-1.758614011068306,-165.78803453850696,-50.86012399264719

3373414_20201_2_0,8ftaxo4icz,3.1959851322685005,-75.81998385533217,-52.837717657357416

2246861_20201_2_0,8ftruo4icz,0.9832563389913319,-85.62861141781735,-34.415908583034636

5501979_20201_2_0,8ftvjp4icz,3.0064123691035456,-79.07975676487334,-67.2018153125636

2834489_20201_2_0,8fxdbn4icz,-0.5564817308220477,-98.70716869009252,-38.013958693991285

3119868_20201_2_0,8g39zn4icz,0.6508393027269893,-88.73505691424515,-21.93316522000285

5884141_20201_2_0,8g4mhp4icz,-1.8355334040832714,-71.20016311595725,-20.727993365873516

5914236_20201_2_0,8g4ygo4icz,-0.02935302732783662,-79.73228091893225,-27.503607163323466

2787616_20201_2_0,8g8h7n4icz,-1.4627914048229538,-81.050577578227,-26.32701449446276

4001069_20201_2_0,8g9f5o4icz,-1.8770970222925218,-94.94757399321085,-15.290098020199892

1631426_20201_2_0,8gbf3p4icz,1.3131866206311325,-86.20871971124953,-60.5967163779662

3085537_20201_2_0,8giexo4icz,-6.314452307068716,-118.66867485214766,-5.704977943507771

4359630_20201_2_0,8gj5jp4icz,-0.5620216835426106,-93.83927554577889,-14.924744552372957

2623027_20201_2_0,8gl09n4icz,-0.053516566419276664,-133.9800134597712,-41.559332981067186

5106124_20201_2_0,8gwpap4icz,0.8663543617673564,-99.98861951522571,-31.234235964904315

1954956_20201_2_0,8gyamo4icz,0.034326555374432806,-90.88569598636687,-14.975619804056407

2813059_20201_2_0,8h43qn4icz,-1.5418046316343699,-125.72867803871321,-20.279829614200494

4045576_20201_2_0,8h88go4icz,1.9251749469033206,-107.39222851550755,-58.658997828421775

2979546_20201_2_0,8hd71p4icz,0.29574853317065464,-75.67705265066937,-41.263789117383126

3701013_20201_2_0,8hfohp4icz,-0.3339598227527877,-86.67880603926659,-15.861464268488803

2865610_20201_2_0,8hqglo4icz,-0.7174983571325629,-96.9754598704817,-23.9387178465673

4015739_20201_2_0,8hsjvo4icz,3.674099333980814,-66.62044341756089,-52.69384481464061

2493978_20201_2_0,8hxs9o4icz,3.1666287032033087,-77.57602695601909,-76.39198372779015

4518588_20201_2_0,8hyuto4icz,1.4018382156418814,-73.1755669383827,-42.34173737336005

3712490_20201_2_0,8i0gmn4icz,0.08585062493639391,-117.03593433878964,-48.117436340433756

3776222_20201_2_0,8i0upn4icz,-2.6683973974311495,-149.49944515741126,-3.663731393698413

2590025_20201_2_0,8i24gn4icz,-2.3347940542940493,-128.43880960228174,-20.73086927116961

3809851_20201_2_0,8i3kdp4icz,-1.12655321261522,-78.27761783462807,-26.899026122555256

1915208_20201_2_0,8i4eyo4icz,-1.8339865419237804,-54.9736834809832,-58.093081372717336

3116663_20201_2_0,8i5g0p4icz,0.7810289784114232,-108.64202517117852,-39.39256739453667

4743933_20201_2_0,8i6nkn4icz,-0.28965456341781476,-117.38710404458902,-58.37357062829469

4200229_20201_2_0,8i7j5p4icz,-3.8766506623488057,-66.37054734650951,-22.037392410293506

4320118_20201_2_0,8i8ueo4icz,1.7224563926857432,-137.68130504578215,-61.265714949906354

5413117_20201_2_0,8i94bn4icz,0.869673992720718,-117.18848081546398,-34.72083843690001

2060394_20201_2_0,8iaaep4icz,-77.17406956274563,79.62785474229011,388.00211337913123

5650525_20201_2_0,8iaq5p4icz,0.9808912979351355,-110.35069668585987,-43.60178347348578

1516953_20201_2_0,8ibjyn4icz,0.8815782058471074,-91.49713347280999,-54.37246952506345

4245022_20201_2_0,8ie29o4icz,1.1967838848014514,-79.09752482162378,-27.965274180909304

1747728_20201_2_0,8if07p4icz,0.5573060163004256,-94.35410117532115,-37.02609537638075

3288401_20201_2_0,8ifp2p4icz,1.0939557799590154,-87.17856122664051,-46.83325919740564

4531232_20201_2_0,8ijwbo4icz,2.0255747246069458,-115.31441102297424,-35.98960843574153

3016873_20201_2_0,8il8bo4icz,-4.581859930949253,-109.33551983035304,-6.081295462057426

5418143_20201_2_0,8ir9yo4icz,1.6926408043327423,-70.20287715410217,-28.404910536035146

2717512_20201_2_0,8ix6sn4icz,0.4807785372228466,-131.61591203076875,-20.427491780218304

4846274_20201_2_0,8j47fp4icz,0.5700269363172212,-75.18780399609011,-31.289560574408853

5402717_20201_2_0,8j63fp4icz,-0.6714300279630784,-100.33291877566933,-27.46144547358155

3911245_20201_2_0,8j6o8p4icz,0.48799061429801016,-62.882806360731365,-21.975173089161217

2201901_20201_2_0,8j7zhp4icz,0.6230190932737967,-73.56477006706427,-50.9115296832517

3403468_20201_2_0,8jco7n4icz,-0.9898079439565824,-113.6388054442503,-23.068928909390408

2427631_20201_2_0,8jhrko4icz,1.5892244388008632,-92.27943687308999,-31.5734998305701

5655293_20201_2_0,8jipcn4icz,0.09595859857938342,-133.19173943006587,-23.524715843127595

3473900_20201_2_0,8jju6n4icz,1.9089676772535658,-123.5777099988716,-44.7801338829717

4329547_20201_2_0,8jmw2p4icz,27.187219220329958,-178.3906250811657,150.47303040844167

5637364_20201_2_0,8jq9gn4icz,0.29965108539362667,-119.73256997058587,-41.76445251753833
 81%|████████  | 655/811 [34:45<08:39,  3.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 656/811 [34:48<08:10,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 657/811 [34:51<07:44,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 658/811 [34:54<07:32,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████▏ | 659/811 [34:57<07:30,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████▏ | 660/811 [34:59<07:13,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 661/811 [35:02<07:07,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 662/811 [35:05<06:54,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 663/811 [35:08<07:03,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 664/811 [35:11<07:03,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 665/811 [35:13<06:58,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 666/811 [35:17<07:27,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 667/811 [35:20<07:01,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 668/811 [35:22<06:46,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 669/811 [35:25<06:35,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 670/811 [35:28<06:33,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 671/811 [35:31<06:34,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 672/811 [35:33<06:28,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 673/811 [35:36<06:15,  2.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 674/811 [35:39<06:20,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 675/811 [35:41<06:13,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 676/811 [35:44<06:03,  2.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 677/811 [35:47<06:06,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▎ | 678/811 [35:50<06:11,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▎ | 679/811 [35:53<06:12,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 680/811 [35:56<06:10,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 681/811 [35:58<06:11,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 682/811 [36:01<06:10,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 683/811 [36:04<05:54,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 684/811 [36:07<05:48,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 685/811 [36:09<05:46,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▍ | 686/811 [36:12<05:44,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▍ | 687/811 [36:15<05:35,  2.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▍ | 688/811 [36:18<05:37,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▍ | 689/811 [36:20<05:34,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▌ | 690/811 [36:23<05:30,  2.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▌ | 691/811 [36:26<05:32,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▌ | 692/811 [36:29<05:36,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▌ | 693/811 [36:31<05:27,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 694/811 [36:34<05:24,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 695/811 [36:37<05:21,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 696/811 [36:40<05:16,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 697/811 [36:42<05:08,  2.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 698/811 [36:45<05:18,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 699/811 [36:48<05:23,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▋ | 700/811 [36:51<05:15,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▋ | 701/811 [36:54<05:12,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 702/811 [36:57<05:08,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 703/811 [37:01<05:34,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 704/811 [37:07<07:29,  4.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 705/811 [37:10<06:40,  3.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 706/811 [37:13<06:03,  3.47s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 707/811 [37:20<08:01,  4.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 708/811 [37:23<07:00,  4.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 709/811 [37:26<06:17,  3.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 710/811 [37:29<05:46,  3.43s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 711/811 [37:33<06:10,  3.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 712/811 [37:36<05:37,  3.41s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 713/811 [37:38<05:15,  3.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 714/811 [37:41<05:00,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 715/811 [37:44<04:51,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 716/811 [37:47<04:41,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 717/811 [37:50<04:35,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▊ | 718/811 [37:52<04:25,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▊ | 719/811 [37:55<04:17,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 720/811 [37:58<04:12,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 721/811 [38:01<04:12,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 722/811 [38:03<04:06,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 723/811 [38:06<04:02,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 724/811 [38:09<04:05,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 725/811 [38:12<03:52,  2.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|████████▉ | 726/811 [38:14<03:50,  2.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|████████▉ | 727/811 [38:17<03:50,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|████████▉ | 728/811 [38:20<03:44,  2.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|████████▉ | 729/811 [38:22<03:41,  2.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 730/811 [38:25<03:39,  2.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 731/811 [38:28<03:42,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 732/811 [38:31<03:34,  2.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 733/811 [38:33<03:32,  2.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 734/811 [38:36<03:29,  2.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 735/811 [38:39<03:27,  2.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 736/811 [38:41<03:22,  2.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 737/811 [38:44<03:20,  2.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 738/811 [38:47<03:21,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 739/811 [38:50<03:14,  2.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 740/811 [38:52<03:08,  2.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████▏| 741/811 [38:55<03:08,  2.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████▏| 742/811 [38:58<03:10,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 743/811 [39:01<03:09,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 744/811 [39:03<03:04,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 745/811 [39:06<03:05,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 746/811 [39:09<02:59,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 747/811 [39:12<02:55,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 748/811 [39:14<02:52,  2.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 749/811 [39:17<02:52,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 750/811 [39:20<02:50,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 751/811 [39:23<02:45,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 752/811 [39:26<02:43,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 753/811 [39:28<02:39,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 754/811 [39:31<02:40,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 755/811 [39:34<02:36,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 756/811 [39:37<02:31,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 757/811 [39:39<02:29,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 758/811 [39:42<02:25,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▎| 759/811 [39:45<02:22,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▎| 760/811 [39:48<02:21,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 761/811 [39:51<02:20,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 762/811 [39:53<02:17,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 763/811 [39:56<02:14,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 764/811 [39:59<02:10,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 765/811 [40:02<02:07,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 766/811 [40:05<02:11,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▍| 767/811 [40:08<02:04,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▍| 768/811 [40:11<02:03,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▍| 769/811 [40:14<02:02,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▍| 770/811 [40:16<01:56,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▌| 771/811 [40:24<02:52,  4.31s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▌| 772/811 [40:27<02:31,  3.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▌| 773/811 [40:30<02:15,  3.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▌| 774/811 [40:32<02:01,  3.29s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 775/811 [40:36<02:02,  3.40s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 776/811 [40:39<01:53,  3.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 777/811 [40:42<01:48,  3.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 778/811 [40:44<01:38,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 779/811 [40:47<01:34,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 780/811 [40:50<01:30,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▋| 781/811 [40:53<01:26,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▋| 782/811 [40:56<01:21,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 783/811 [40:58<01:17,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 784/811 [41:01<01:14,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 785/811 [41:04<01:12,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 786/811 [41:07<01:09,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 787/811 [41:09<01:06,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 788/811 [41:12<01:02,  2.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 789/811 [41:15<01:00,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 790/811 [41:18<00:57,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 791/811 [41:23<01:13,  3.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 792/811 [41:26<01:03,  3.35s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 793/811 [41:29<00:57,  3.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 794/811 [41:32<00:52,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 795/811 [41:34<00:47,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 796/811 [41:37<00:44,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 797/811 [41:40<00:40,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 798/811 [41:43<00:37,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▊| 799/811 [41:45<00:33,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▊| 800/811 [41:48<00:31,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 801/811 [41:51<00:28,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 802/811 [41:54<00:25,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 803/811 [41:57<00:22,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 804/811 [41:59<00:19,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 805/811 [42:02<00:16,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 806/811 [42:05<00:14,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|█████████▉| 807/811 [42:08<00:11,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|█████████▉| 808/811 [42:10<00:08,  2.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|█████████▉| 809/811 [42:13<00:05,  2.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|█████████▉| 810/811 [42:16<00:02,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|██████████| 811/811 [42:19<00:00,  2.94s/it]100%|██████████| 811/811 [42:19<00:00,  3.13s/it]

1570232_20201_2_0,8jsjan4icz,1.3357136662030626,-90.2404307371894,-37.25921005503518

4578187_20201_2_0,8jtk0o4icz,1.5958870604274236,-76.4720670518605,-41.14728423252092

4866226_20201_2_0,8jvj0p4icz,-4.521272172314106,-95.8792353772867,-22.945456060815545

2912509_20201_2_0,8jz5hp4icz,-3.4004835676869876,-85.00044710934381,-13.142288077836554

1653927_20201_2_0,8k0zmo4icz,-6.250120446910503,-84.35782289783833,12.654924520090404

4912637_20201_2_0,8k3ryo4icz,0.3468194156212459,-97.53544634621562,-24.421219369370263

5057727_20201_2_0,8k4ayo4icz,0.28529969978514136,-66.94285019238802,-34.40042343863364

5031710_20201_2_0,8k4icn4icz,0.6020342469250408,-89.36993152188333,-32.35862421768206

4186770_20201_2_0,8k5w9n4icz,-2.0549253895366593,-72.82707793571251,-48.808344139426595

5747231_20201_2_0,8k9w0o4icz,0.2435681494636693,-40.32282093071649,-35.92543414224497

3096114_20201_2_0,8kg16p4icz,0.31057420973523286,-80.73821526065325,-30.925578978721532

2433885_20201_2_0,8kmh9p4icz,-1.6817057907565895,-100.41786894967697,-7.151996274234705

5219897_20201_2_0,8kqjgp4icz,0.9223094598368414,-80.98395264856165,-59.4550125738552

3983148_20201_2_0,8krnbp4icz,-0.6154079227200363,-105.96226027873621,-42.49749083186754

5331808_20201_2_0,8ksfto4icz,-0.49806663678902735,-114.94436952666712,-46.902285164310726

1357552_20201_2_0,8ktilo4icz,-10.020062485416911,-115.24957175434824,41.45306717638908

5204552_20201_2_0,8kxuxo4icz,1.6269270203106572,-76.83832141223468,-50.197655077093174

2822764_20201_2_0,8l78tn4icz,0.5623333718880394,-64.33451832391762,-32.354485736185126

2679214_20201_2_0,8l7cip4icz,-2.3819955012973777,-125.79429079960542,-28.036754806394185

3960780_20201_2_0,8l983p4icz,2.8417890464809505,-66.12288298853153,-52.86240906667017

5863824_20201_2_0,8lcn2p4icz,-0.13365910883042,-95.3958107518161,-34.90765402740665

2183185_20201_2_0,8lnbro4icz,-1.4217757533673958,-47.958175208015916,-27.365792275761777

1589350_20201_2_0,8lokyn4icz,-0.9742902048522935,-87.14459451011365,-21.800472903349302

1098689_20201_2_0,8lp57o4icz,-7.936631909375753,-72.80733075567417,2.9608755095505472

1405002_20201_2_0,8lrwgp4icz,-3.1363861839758798,-114.41417343303493,-16.389450499612224

1026676_20201_2_0,8lsajo4icz,2.202100276975578,-79.19546085008037,-63.540864146847255

1042818_20201_2_0,8lt22o4icz,0.4693709642653016,-96.03471995906816,-49.50304277506329

2197340_20201_2_0,8lu6xn4icz,-0.11686566913744156,-110.90548770801294,-44.28157581032332

3266710_20201_2_0,8lum5o4icz,-0.0129180867881971,-106.03421195343185,-40.20030487293283

1321089_20201_2_0,8lyaen4icz,-1.8540792431177835,-49.05023872481976,-68.93492786309707

1523923_20201_2_0,8m254o4icz,0.6922791289870425,-64.69519548918464,-45.66298555391623

5312574_20201_2_0,8m871o4icz,-1.4570047069039787,-86.35557629569689,-33.76743461650237

5952674_20201_2_0,8ma0bn4icz,0.8078092940127439,-69.65209832022629,-49.49653615356907

2193626_20201_2_0,8mdmho4icz,-0.7359358410250764,-59.257051348760655,-15.728986696518945

3135620_20201_2_0,8mejep4icz,3.3243895643152026,-95.29553314102358,-65.50210734011651

2313403_20201_2_0,8mmumn4icz,1.5431838602697008,-115.72600007967125,-52.78620964480153

4692258_20201_2_0,8mo2ro4icz,3.0713979566879033,-66.96582276244038,-36.80606342079463

3060440_20201_2_0,8mrlfp4icz,2.9797627905681896,-117.05017921314538,-48.567553484421694

2237026_20201_2_0,8mw6to4icz,1.9202116801581115,-85.39694016958202,-30.926551363040602

1603494_20201_2_0,8mwjto4icz,-0.9282710299421651,-72.80331307514982,-46.58166286821566

4086964_20201_2_0,8mzmwo4icz,-0.27173806411832346,-95.91255118776874,-22.153402901467203

2411408_20201_2_0,8mzr8p4icz,13.580057584016142,-70.97107836750132,200.87561372187608

3962696_20201_2_0,8n1lgo4icz,1.7512931762989505,-81.58753660449395,-53.70428779244867

5341060_20201_2_0,8n55bp4icz,2.1740651672675315,-105.50826331165044,-37.1030173058968

5700885_20201_2_0,8nadnn4icz,-0.0965774704222243,-101.37645365012898,-42.91874877632381

3257100_20201_2_0,8ncopn4icz,1.1938150369418963,-70.40471547466854,-37.9778871903393

3747645_20201_2_0,8nqcqo4icz,0.7865095962957693,-134.7432386788444,-39.80910719127398

2639004_20201_2_0,qtddlo4icz,-1.1822301562405997,-91.47462218790807,-43.84535070236164

5033645_20201_2_0,8nu1nn4icz,-2.66019692591301,-93.1177666189133,-28.079911081886095

2907234_20201_2_0,8nunzo4icz,-3.2393923686513553,-92.16903740642547,-17.322335660492428

4503190_20201_2_0,8nvqkn4icz,17.07428331361216,-25.344183931548002,-123.2096667600365

5957040_20201_2_0,8nxkno4icz,-8.77192810483217,-37.562671319264666,8.321457925338706

4045839_20201_2_0,8o5n9p4icz,-2.0673206754082543,-86.7767230291349,-12.159715280005145

1701927_20201_2_0,8oaono4icz,-0.3065108014894832,-71.93486792820877,-40.106218320301664

4048615_20201_2_0,8oc8no4icz,1.9296411835218121,-107.71361850566248,-34.731062398243296

2352660_20201_2_0,8odfmn4icz,-0.49549057566085714,-133.7973742542697,-28.290443154655037

1585161_20201_2_0,8oekun4icz,-0.011457879147295017,-87.2530427546726,-46.423793808304225

4498275_20201_2_0,8of7en4icz,0.07770653780106114,-95.71866314252367,-48.272761340930074

1836606_20201_2_0,8or5gn4icz,0.2898722767570101,-91.90728914211036,-35.149135791476425

2906029_20201_2_0,8orpmo4icz,-1.9904287968525116,-103.72385556475231,-21.403140920650543

2153132_20201_2_0,8p219o4icz,9.005538274520363,-57.88332237360322,-67.15781602279216

1659120_20201_2_0,8p42ao4icz,-3.074045967128962,-98.51350749091671,-26.50726898002553

2494276_20201_2_0,8p9jdn4icz,3.6844622611716153,-84.28099358222022,-42.85871192828181

1816598_20201_2_0,8pa2in4icz,-1.057197637526943,-119.57803125723797,-33.737012544240116

2198107_20201_2_0,8pbjto4icz,3.2741570212949984,-80.7716987469262,-83.74062249372398

1392956_20201_2_0,8pc7zo4icz,-1.0989179875429318,-97.25610230017398,-22.8580958262246

5312250_20201_2_0,8piagp4icz,6.077878765930827,-56.67689765330195,-63.98023286785414

3442519_20201_2_0,8pk6dn4icz,0.42332072635687185,-67.47709556730933,-32.92435627846709

1308330_20201_2_0,8ppa8p4icz,-1.6348151936283928,-88.29644719957417,-23.350326106912917

4295220_20201_2_0,8ppdcp4icz,0.1789091802605451,-97.53398397631616,-44.23370175172573

1883365_20201_2_0,8pqopo4icz,0.3526533187806697,-95.60113132498185,-32.98846059579823

1651305_20201_2_0,8pvyho4icz,-1.4100630288904135,-93.24726915173744,-17.060676331498343

4530579_20201_2_0,8pwf4p4icz,2.546507630140854,-69.12270168419383,-41.23350495043442

1524898_20201_2_0,8py48o4icz,-2.700195131326219,-109.64285338636125,-21.420348265191507

5200767_20201_2_0,8q2iqo4icz,0.5383254422875904,-64.75913165379637,-38.123153455281695

3111535_20201_2_0,8q3eip4icz,-1.1581470908560876,-73.73574197841748,-40.09263544119575

1668528_20201_2_0,8qb8dn4icz,-0.2659370110338454,-66.59927237385105,-39.76988163646159

2396489_20201_2_0,8qcc6o4icz,2.0643253184390074,-63.675662021566296,-42.107170419199534

4423136_20201_2_0,8qga4o4icz,1.3082731222155488,-100.24274027871107,-44.30226527304757

2933926_20201_2_0,8qi6bo4icz,-2.059265589998361,-89.37832409344088,-18.212903093749645

3818514_20201_2_0,8qk7eo4icz,-1.009423420895959,-106.19249443001098,-17.749529572913218

5877338_20201_2_0,8qkcko4icz,-2.1515880230709334,-69.14035172962002,-23.962263324646884

5526971_20201_2_0,8qo5jn4icz,0.09273901042458241,-99.62122456917774,-33.48913217997833

3634915_20201_2_0,8qrg1o4icz,-1.4014070935306,-105.99055706874464,-13.130311637869767

3334740_20201_2_0,8r28vn4icz,-2.6874843920823146,-101.2564241822295,-21.1775710945862

4515318_20201_2_0,8r45ao4icz,1.6106095188878595,-98.12519932442646,-44.65231125164631

2298233_20201_2_0,8r4khp4icz,0.9323655149043651,-97.6723176358885,-35.68490299720547

5404656_20201_2_0,8r6oqo4icz,9.024804280670837,-70.35986936874107,-77.54909003427264

1238310_20201_2_0,8rb07o4icz,0.4880085317281713,-107.86946248889325,-26.260724746935892

4765051_20201_2_0,8rdxao4icz,0.5110232155836361,-108.75062794504996,-39.225406251952805

5571847_20201_2_0,2c33qn4icz,0.40998123953815124,-85.44103370900788,-40.71027785814296

1658487_20201_2_0,8rpown4icz,-11.317328373065429,-105.73517847700867,-1.8769297381781342

5316401_20201_2_0,8rpw8o4icz,2.542778704478966,-103.69555673612854,-40.248971305054354

4886262_20201_2_0,fi1nwo4icz,0.7724721832991085,-93.39909297812179,-33.2729147418931

2075625_20201_2_0,8rvi9o4icz,0.07069753253651563,-105.33581581703643,-34.43630278810781

5054379_20201_2_0,8rwljn4icz,-1.8660452721878111,-122.50402888216317,-15.485095443355704

3837123_20201_2_0,8s0c6n4icz,2.3931825329340026,-124.24355242923136,-46.71015429015222

1887486_20201_2_0,8s21xn4icz,-0.8494240107923123,-118.80122734035845,-33.62539249467329

1840051_20201_2_0,8s4qrn4icz,-1.305458673229309,-141.20762490910883,-21.513091656586

4913314_20201_2_0,8saado4icz,0.9681559717193108,-87.6888563691835,-32.02222602773763

4581131_20201_2_0,8sbyko4icz,-1.3209664477911998,-81.76544343502488,-32.27065008388243

1187368_20201_2_0,8scfro4icz,0.04672497501153609,-85.18991649538697,-32.90465849594827

3534955_20201_2_0,agufdn4icz,1.8481666054337873,-98.62724663779073,-49.725766378156024

2095256_20201_2_0,8sg2wo4icz,0.16453723808370924,-91.03636718454143,-31.383084700896077

5115397_20201_2_0,8sg91p4icz,-1.820817082987227,-121.54216355249335,-28.611221336692765

3556287_20201_2_0,8sgcfp4icz,1.9544307606771694,-108.71272713002821,-42.279821023110685

4130797_20201_2_0,8si2no4icz,-3.2486497716865075,-89.90118681855287,-15.4104827661221

4353101_20201_2_0,8sofbn4icz,-0.48040325834237596,-96.50176149108819,-24.702182752737656

1101160_20201_2_0,8srmyn4icz,-0.2563257068551927,-113.14327630515547,-48.05289331767021

2735809_20201_2_0,8srsbn4icz,2.1588059913328124,-147.3650764818651,-42.297794158923324

5795334_20201_2_0,8sxrhp4icz,0.715749431588865,-112.6951374869858,-42.912168400200386

1567896_20201_2_0,8t0z8n4icz,-0.9697974621561112,-78.42370057608105,-36.8436543142295

5282267_20201_2_0,8t7sgo4icz,0.2792199783004139,-100.13928338084708,-39.719511071105416

2268485_20201_2_0,8t8wbo4icz,-0.20917751770010262,-68.41212304540784,-25.504504576504416

1453738_20201_2_0,8tb7lo4icz,-4.82446633509448,-115.20595863631789,-2.72042020751762

3789448_20201_2_0,8tg4ep4icz,-0.48796670157566147,-51.93760076465054,-40.203787759019434

3039805_20201_2_0,8tk9eo4icz,1.4963386708311712,-94.06723378393224,-54.01777428215084

4578750_20201_2_0,8tm0yo4icz,10.58700187372852,-36.05390850048124,-78.72234531005958

4462602_20201_2_0,8trgho4icz,-1.8137524193002434,-93.27164106832302,-11.656247663515416

3773705_20201_2_0,8tui3p4icz,1.6550475456720892,-94.68525714363153,-30.822105887849787

5613050_20201_2_0,8u1djo4icz,1.006362249937645,-59.46513756558352,-48.436397403259306

2757337_20201_2_0,8u2moo4icz,-0.17184176173427812,-114.11291421052991,-33.51461972309042

1508032_20201_2_0,8u2pgp4icz,-0.1609941037552391,-102.76355930066163,-49.82241365236082

4558357_20201_2_0,8u3oao4icz,2.174262690545903,-91.5456874871764,-48.61188639979787

3622395_20201_2_0,8u4sco4icz,-1.4644976264065124,-95.71746064777994,-39.213950571768194

5456541_20201_2_0,8u5suo4icz,-0.4948707015643294,-82.69851536633965,-34.81426979008906

1070285_20201_2_0,8ua58p4icz,4.005995953847752,-93.38944331370385,-72.97881086352608

2181312_20201_2_0,8uffpn4icz,-3.889276947001163,-83.1619275186047,-2.658232813259886

3913610_20201_2_0,8uh1qn4icz,1.1377646207917276,-143.60473000198584,-63.49568066645513

2125015_20201_2_0,8uj2mn4icz,-0.625768745472985,-103.08580422680848,-42.43636476958102

1651140_20201_2_0,8ukxun4icz,0.7156590477879878,-78.57656936080224,-38.93072606478057

5229354_20201_2_0,8umdvn4icz,-0.9284270307371169,-86.80394074476644,-39.242561928068184

5431689_20201_2_0,8up0uo4icz,1.4115092668775222,-80.43179496936574,-47.2146762775167

2166386_20201_2_0,8uqipn4icz,0.4765463067223289,-88.8505343096895,-40.717083909621394

2937830_20201_2_0,8ux1uo4icz,2.3473594047250512,-45.34725061056801,-52.64134926274937

1925013_20201_2_0,8v012p4icz,-8.30344600482964,-116.39256549516824,5.0865476425365586

5215621_20201_2_0,8v14co4icz,-0.8851746995892752,-119.8399121440963,-23.34449179668222

4956593_20201_2_0,8v2x3o4icz,1.6704942088532306,-65.36215788870538,-35.19959073027789

3677014_20201_2_0,8v57mo4icz,81.48450924886413,231.13591941800155,-215.26995462553256

1697841_20201_2_0,8v6sbn4icz,-4.42146634004541,-109.08570722662344,-14.209302353926162

5334162_20201_2_0,8vabhp4icz,2.7040799565885165,-60.17200262791664,-44.99800264626842

2903799_20201_2_0,8vauep4icz,0.8220005158802385,-54.60065225266632,-32.690434637562504

1220275_20201_2_0,8vcw2p4icz,2.080759658920726,-46.94632774568825,-32.80994947589227

1981612_20201_2_0,8vcybo4icz,-0.24582949400015025,-99.96687392169099,-20.51769930393607

5880509_20201_2_0,8vf5sn4icz,-0.9578236819024545,-123.1106351332433,-22.505704445513828

3447118_20201_2_0,8vi6do4icz,2.008395556802298,-74.68065865964073,-61.5271883829767

5417926_20201_2_0,8vjfno4icz,-0.2884155768799291,-79.18050500485347,-31.64543642466299

2533159_20201_2_0,8vkbrn4icz,-1.0996207096186021,-71.35692006729698,-30.36589128155495

4210336_20201_2_0,8vni3o4icz,-0.9772608249758813,-112.00493701741408,-30.398411193562495

4175956_20201_2_0,8vojon4icz,-10.196080842781695,-136.65926969819498,48.07458345325014

3297429_20201_2_0,8w0wco4icz,2.5730740627986677,-116.74326215020068,-56.40288520605843

3939685_20201_2_0,8w6dfp4icz,-0.1941571559658949,-77.07904498672468,-24.02541578589303

5971370_20201_2_0,8w72po4icz,0.6212642043856939,-56.353039411043454,-37.41487614913102

3675044_20201_2_0,8w9bcp4icz,-0.930243046733138,-121.79690117351186,-15.469546028968864

5444801_20201_2_0,8w9zfp4icz,2.375267508614812,-83.76071653315103,-58.17946413186107

3241273_20201_2_0,8werfo4icz,-2.814735304615394,-82.58581955613457,-30.358633504425285

4275189_20201_2_0,8wivjn4icz,0.6851026591127757,-117.4066934319548,-37.398254835807165

1780651_20201_2_0,8wki1o4icz,3.513375655971239,-56.46440565935484,-47.66824596490004

4696246_20201_2_0,8wl9nn4icz,-2.4271215970241564,-131.97715869010338,-20.118241565855826

4047011_20201_2_0,8wy84p4icz,-1.0077586985773168,-58.83682259179187,-50.83985938678899

5593705_20201_2_0,8x2m6p4icz,-0.3698790855046547,-132.06484743862282,-14.085863409190765

1041861_20201_2_0,8x7e2o4icz,0.0815906742601729,-110.15893351926283,-38.90100942416589

2534356_20201_2_0,8xb8vn4icz,0.5901043582994009,-73.37800396025492,-44.22313606000483

4220198_20201_2_0,8xcqnn4icz,-2.3182101354085436,-132.68131073167874,-20.481808165553588

5206419_20201_2_0,8xdwyo4icz,-0.4475573870030319,-100.47504136193757,-26.970667128216334

2111082_20201_2_0,8xkrhp4icz,0.30593277332552904,-85.11219023628155,-42.10373814609159

1855947_20201_2_0,8xlipn4icz,3.9867346019115466,-100.40372037456962,-44.92684997018176

2970389_20201_2_0,8xqrjo4icz,1.4311267972360835,-136.0216542214232,-26.457271702281417

1676810_20201_2_0,8xu5bn4icz,0.37189142173954376,-93.7410971510466,-31.863977987183503

3466206_20201_2_0,8xwkyn4icz,0.5947662582137756,-106.2962590247268,-29.331603944711006

4253597_20201_2_0,8y0hno4icz,-0.6725505101319413,-87.56178324313586,-25.547157974936198

5678851_20201_2_0,8y619p4icz,-1.840765099937844,-99.76400155011876,-25.470641618536447

4484462_20201_2_0,8y9m5o4icz,3.0769020732843377,-76.30157574786614,-46.29484437392826

1568854_20201_2_0,8y9r8o4icz,-0.2439884245082058,-110.94322827960201,-42.47740644837005

1536493_20201_2_0,8ydnvo4icz,2.8264321190652866,-73.71079395913674,-63.4716150519789

1137940_20201_2_0,8yffwo4icz,-0.7998174322491258,-69.30056750478587,-37.25534285135164

4518738_20201_2_0,8yggxo4icz,-2.6165284372575837,-106.57620876299404,-44.34151713233135

2582572_20201_2_0,8ylrap4icz,-1.6249187693391602,-56.09337326621329,-32.20664265028131

2434293_20201_2_0,8yn5gn4icz,-1.5976736917025927,-82.01601997239473,-25.32774312379256

5345476_20201_2_0,8yqrpn4icz,0.915710961649526,-92.64902557743795,-50.2055240062281

5099269_20201_2_0,8ytloo4icz,-0.16138410916681017,-78.55472196708385,-38.838381678116804

2755871_20201_2_0,8yvnen4icz,2.7354588275456027,-116.21566597427349,-49.17865616442339

1504539_20201_2_0,8yxrun4icz,-2.065347771508849,-86.29988822100648,-18.279004502438994

3697651_20201_2_0,8yzybp4icz,11.321258915356402,-5.051294162648475,-74.27963863476631

3723898_20201_2_0,8z5lgo4icz,1.8236348212926725,-74.2312672995418,-34.08498165196988

1908279_20201_2_0,8z6edo4icz,1.211177526771981,-64.39219150299996,-46.19976191028641

3004665_20201_2_0,8z8o5n4icz,-3.0656442625030302,-96.98374296953591,-18.24232845593464

2860029_20201_2_0,8z9kho4icz,-0.8866734898973364,-69.39387021701299,-24.94607379848867

5576622_20201_2_0,8zm86p4icz,0.524981780615745,-118.91359656129782,-45.14896884804183

1782283_20201_2_0,8zmzen4icz,-4.635507276376983,-73.80124414329725,-20.314789050480613

1939814_20201_2_0,8znq7p4icz,-4.484096342618593,-112.80741516712504,-14.1871746833896

3712641_20201_2_0,8zw0to4icz,-1.7063634330415338,-136.61742265624957,-39.35487750937794

5059868_20201_2_0,902t8o4icz,-0.6192789415982016,-87.33635625556838,-16.013435263345173

2228643_20201_2_0,903lio4icz,0.35642772562862773,-96.56097022882471,-49.495023325493264

1572618_20201_2_0,9045on4icz,2.108621835811042,-66.82237331813923,-53.21485905530676

3947966_20201_2_0,909kun4icz,1.6711300036075756,-80.03885691392858,-49.957289982409165

5742433_20201_2_0,90cydn4icz,2.8267574035191916,-106.09362807393791,-62.02314100627427

2871514_20201_2_0,90hcxn4icz,0.5655383014952092,-87.0334085658464,-25.528601046958443

5269009_20201_2_0,90ik8o4icz,-2.9156746342984268,-106.71020062311061,-26.534694734400688

3496323_20201_2_0,90l9lo4icz,-2.667578429912485,-117.12924590312514,-14.575518893105766

5040152_20201_2_0,90madp4icz,4.318258198830488,-71.73586428367716,-38.46278479774401

5230981_20201_2_0,90mqyo4icz,-0.3002782447862303,-80.68666877984097,-45.70919315285076

1830644_20201_2_0,90nf7o4icz,-2.8334655858335203,-108.50697451526315,-6.307195562271033

2211555_20201_2_0,90rvcp4icz,2.1827096665267764,-119.11463943312881,-55.257044803496

3224442_20201_2_0,90z8zo4icz,3.8572956806327667,-124.60109652829073,-59.8406585468978

5972103_20201_2_0,91ji4p4icz,3.3359535213021134,-54.97860941879185,-63.5417975159763

1344676_20201_2_0,91o69p4icz,-0.15805563917226426,-51.42403698473342,-47.530135811453604

3726781_20201_2_0,91ph0o4icz,-13.564742314594616,-156.2055032035647,22.79635284307747

1984001_20201_2_0,91rtao4icz,0.7100763861808296,-90.47829781952683,-46.069090828517346

4554595_20201_2_0,921cro4icz,5.220870739373008,-41.186322384634195,-60.590240161589335

4898191_20201_2_0,921fao4icz,1.5885720780122585,-72.24610434675793,-37.38503559400118

5825767_20201_2_0,9227sn4icz,3.8277288250308277,-116.62694558231388,-65.67272537409585

4991665_20201_2_0,922u3p4icz,2.93043997560993,-88.29409134181157,-41.50481317473134

3163082_20201_2_0,3z783p4icz,2.1091567332983048,-47.964866608646446,-65.3359347421735

1368343_20201_2_0,929a2o4icz,29.211874844815817,-24.872420263960038,-146.97398715264114

5006150_20201_2_0,92e4no4icz,-1.8856487372993778,-99.20821626443518,-20.973747193189965

3747269_20201_2_0,92f42o4icz,-1.911031800781413,-46.4920533874961,-26.466417681128462

3498165_20201_2_0,92m3hp4icz,-1.13982767366202,-113.46211256653072,-51.05869575042031

3183112_20201_2_0,92phbp4icz,2.002973037050099,-88.98292399227671,-46.41245236513498

1338452_20201_2_0,92qjxn4icz,0.34469278817789195,-78.50864615869455,-38.605660873597316

1169770_20201_2_0,92vqgp4icz,2.018404943288229,-69.93489600224996,-49.36418578437045

5240028_20201_2_0,92y6jn4icz,1.6629327433051249,-83.66800839731954,-57.39399171384623

3779563_20201_2_0,932vsn4icz,-0.3342145940442159,-121.16514604433058,-23.49367284154266

4401162_20201_2_0,934b8p4icz,-1.1742564502400668,-58.146619770643525,-28.958741064379936

1258116_20201_2_0,9362zo4icz,-3.8337085132243067,-98.59966688467182,-12.33117583831914

3938613_20201_2_0,936xjn4icz,-1.1705267895000984,-139.64028340532101,-23.36811787081058

2382804_20201_2_0,937npo4icz,-2.0606220634986263,-88.28477555588316,-46.72687190221026

1187807_20201_2_0,93fgsn4icz,-0.9954731850786191,-97.76799303510055,-31.44521315986249

3951465_20201_2_0,93fpcn4icz,-0.5068372638001073,-132.67001618786537,-22.85630612424174

4980975_20201_2_0,93ggso4icz,1.5369396657750611,-63.63519729450039,-46.98840565818833

2176125_20201_2_0,93golo4icz,-8.06373921617584,-148.25452270549505,11.196591566018242

3752616_20201_2_0,93lt6p4icz,-2.523298256283673,-85.08334151678142,-11.676795490954547

4859997_20201_2_0,93mren4icz,-0.1897197177647094,-128.12544731797814,-26.878937040184297

4411611_20201_2_0,93nldo4icz,0.4519810917013313,-52.661845285453296,-44.52092287958649

3436337_20201_2_0,93orln4icz,0.9532920249540928,-88.84231728006597,-34.484862186156846

2445199_20201_2_0,93w81o4icz,-0.8991820191183449,-79.51649023581996,-36.75843880098222

2706963_20201_2_0,93z5po4icz,0.5987509002464305,-95.93914049443507,-41.54215350482718

4061488_20201_2_0,94085o4icz,-2.343791402808421,-130.64482728360352,-20.93898405845661

5762724_20201_2_0,94be4o4icz,-0.31267905043263744,-96.40681575421351,-45.83336814967882

3141969_20201_2_0,94bskn4icz,-1.190066328988301,-111.01248221898089,-17.142026335702013

1339787_20201_2_0,94e10p4icz,28.325815408125404,85.08982786157242,-147.91349515226705

3501160_20201_2_0,94ea9p4icz,-0.9178517671767102,-79.72030660986428,-15.437258034683452

4091563_20201_2_0,94jtdp4icz,1.6428287955888987,-54.747255610433655,-47.15319396870456

5840701_20201_2_0,94syqo4icz,1.1050212271834012,-75.0843274361936,-52.711944294403466

2500612_20201_2_0,94tx7o4icz,-0.8359310680413916,-116.82090405991377,-29.907231158718645

2416851_20201_2_0,94u26o4icz,1.6109400698520555,-85.8919242440661,-40.28907918764324

4211325_20201_2_0,9505fp4icz,0.2852047286418991,-92.99271985715993,-47.955014482236535

1776287_20201_2_0,953mzo4icz,-8.548049801955685,-97.8354349151387,-4.01770879604436

5012775_20201_2_0,9566ep4icz,-3.005854711781021,-96.67855368973443,-19.854933581765437

4044544_20201_2_0,tl5d1o4icz,-0.5575531577079933,-131.42549590958103,-38.063253867019824

/users/rhydian/anaconda3/envs/torch_env/lib/python3.7/site-packages/torch/cuda/__init__.py:52: UserWarning: CUDA initialization: Found no NVIDIA driver on your system. Please check that you have an NVIDIA GPU and installed a driver from http://www.nvidia.com/Download/index.aspx (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729006826/work/c10/cuda/CUDAFunctions.cpp:100.)
  return torch._C._cuda_getDeviceCount() > 0
  0%|          | 0/101 [00:00<?, ?it/s]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 1/101 [00:08<14:21,  8.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 2/101 [00:11<11:34,  7.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 3/101 [00:15<09:33,  5.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/101 [00:18<08:09,  5.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▍         | 5/101 [00:20<06:57,  4.35s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 6/101 [00:24<06:30,  4.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 7/101 [00:27<05:51,  3.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 8/101 [00:30<05:22,  3.47s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 9/101 [00:33<05:05,  3.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|▉         | 10/101 [00:36<04:51,  3.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 11/101 [00:39<04:42,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 12/101 [00:42<04:35,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 13/101 [00:45<04:33,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 14/101 [00:47<04:18,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▍        | 15/101 [00:50<04:13,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 16/101 [00:53<04:05,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 17/101 [00:56<03:59,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 18/101 [00:59<03:57,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 19/101 [01:01<03:49,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|█▉        | 20/101 [01:06<04:27,  3.30s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 21/101 [01:10<04:46,  3.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 22/101 [01:13<04:27,  3.39s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 23/101 [01:16<04:08,  3.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 24/101 [01:19<03:56,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▍       | 25/101 [01:21<03:46,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 26/101 [01:28<05:09,  4.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 27/101 [01:31<04:38,  3.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 28/101 [01:33<04:07,  3.39s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▊       | 29/101 [01:36<03:47,  3.16s/it] 30%|██▉       | 30/101 [01:39<03:40,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 31/101 [01:42<03:26,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 32/101 [01:44<03:15,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 33/101 [01:47<03:08,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▎      | 34/101 [01:50<03:12,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▍      | 35/101 [01:53<03:08,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 36/101 [01:55<03:01,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 37/101 [01:58<03:02,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 38/101 [02:01<03:01,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▊      | 39/101 [02:04<03:01,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|███▉      | 40/101 [02:07<02:56,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 41/101 [02:11<03:00,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 42/101 [02:13<02:56,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 43/101 [02:16<02:45,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▎     | 44/101 [02:19<02:40,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▍     | 45/101 [02:22<02:40,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 46/101 [02:24<02:34,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 47/101 [02:27<02:32,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 48/101 [02:30<02:30,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▊     | 49/101 [02:33<02:24,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|████▉     | 50/101 [02:36<02:26,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 51/101 [02:39<02:25,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████▏    | 52/101 [02:41<02:17,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 53/101 [02:46<02:37,  3.28s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 54/101 [02:49<02:25,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 55/101 [02:51<02:20,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▌    | 56/101 [02:54<02:15,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▋    | 57/101 [02:57<02:10,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 58/101 [03:00<02:05,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 59/101 [03:03<02:03,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 60/101 [03:07<02:11,  3.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|██████    | 61/101 [03:10<02:03,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████▏   | 62/101 [03:12<01:54,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 63/101 [03:15<01:51,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 64/101 [03:18<01:49,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 65/101 [03:21<01:46,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▌   | 66/101 [03:24<01:40,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▋   | 67/101 [03:27<01:39,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 68/101 [03:30<01:34,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 69/101 [03:32<01:30,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 70/101 [03:35<01:27,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|███████   | 71/101 [03:38<01:29,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████▏  | 72/101 [03:41<01:22,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 73/101 [03:44<01:19,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 74/101 [03:47<01:17,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 75/101 [03:49<01:13,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▌  | 76/101 [03:52<01:10,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 77/101 [03:55<01:07,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 78/101 [03:58<01:02,  2.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 79/101 [04:00<00:59,  2.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 80/101 [04:03<00:57,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 81/101 [04:06<00:54,  2.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 82/101 [04:08<00:51,  2.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 83/101 [04:11<00:49,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 84/101 [04:14<00:48,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 85/101 [04:17<00:46,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▌ | 86/101 [04:20<00:43,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 87/101 [04:23<00:39,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 88/101 [04:26<00:36,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 89/101 [04:30<00:37,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 90/101 [04:43<01:09,  6.28s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 91/101 [04:46<00:52,  5.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 92/101 [04:52<00:49,  5.50s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 93/101 [04:56<00:40,  5.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 94/101 [04:59<00:30,  4.40s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 95/101 [05:02<00:23,  3.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▌| 96/101 [05:05<00:18,  3.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 97/101 [05:08<00:13,  3.41s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 98/101 [05:11<00:09,  3.24s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 99/101 [05:13<00:06,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 100/101 [05:26<00:06,  6.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|██████████| 101/101 [05:34<00:00,  6.62s/it]100%|██████████| 101/101 [05:34<00:00,  3.31s/it]
Trying to load from /users/rhydian/self-supervised-project/model_weights/SSECEncodersBothBoth
==> Resuming model trained for 106 epochs...
Trying to load from ../model_weights/angle_regressor4
==> Resuming model trained for 7 epochs...
4115357_20201_2_0,7g9bln4icz,-0.7135527111401939,-92.48518309750955,-42.202356607718045

4788947_20201_2_0,7ieakn4icz,5.937972171012481,-116.11965687784487,-61.79239192169561

5640885_20201_2_0,7iegho4icz,0.04224131874736743,-107.5343162891981,-26.39902872965041

2643719_20201_2_0,7iuuoo4icz,-0.5905957138601073,-67.56737220408866,-32.362329153610034

4023355_20201_2_0,7j65ln4icz,0.18696476251498986,-87.39476132141328,-43.28885823377598

3253180_20201_2_0,n4hrcn4icz,3.2560483373592564,-122.73770585270015,-36.70318162890385

1980249_20201_2_0,7mztso4icz,-1.8438701905167159,-98.43624245899503,-36.089114380627365

5010345_20201_2_0,7nwffo4icz,-3.1251140730963582,-130.76763549144582,-13.988017259473196

2801751_20201_2_0,7or7hp4icz,1.6756168211075635,-107.79040081099248,-50.296815103246544

4129791_20201_2_0,7ox9ep4icz,3.0482854444215115,-60.72477659941097,-75.64886272286392

1565973_20201_2_0,7q7bhp4icz,2.1868225228787783,-98.52320801750241,-34.028421678928225

5976031_20201_2_0,7qlhpo4icz,0.5933621201955289,-75.16421959484103,-32.888641515192305

5322244_20201_2_0,7rusgp4icz,0.9300650412585776,-88.66615336132983,-32.250860399848534

5436338_20201_2_0,7snkln4icz,-1.2935281828421326,-77.1069811346899,-24.481569617644652

5903753_20201_2_0,7uqu2p4icz,-0.26860955326508407,-77.28915753008383,-31.88713333796811

4757992_20201_2_0,7vo5cp4icz,2.077383343975592,-116.92358612036975,-51.555464630012395

1865213_20201_2_0,7vt2xn4icz,2.9259160150358077,-103.50176648995475,-54.558554609636985

3931785_20201_2_0,7waeto4icz,-1.7792288153306788,-48.63101501723787,-25.050727419224415

2142026_20201_2_0,7wk58o4icz,-2.856063897354277,-137.05792933939134,-10.96221224628745

2995289_20201_2_0,7wqjsn4icz,1.3320309441498148,-72.71702342385282,-33.70502446439747

4350110_20201_2_0,7wtv3o4icz,1.0269591662771613,-112.57413319357903,-32.128470783001745

2436258_20201_2_0,7x57xo4icz,-0.766511727397866,-99.12979505743667,-35.25383832310426

4501086_20201_2_0,7xs27o4icz,6.820999067249998,-86.73974156427494,-88.83914272162241

1523891_20201_2_0,7z3xmo4icz,1.3690630974207716,-94.24002562169989,-33.3652582700165

4737935_20201_2_0,7zcvqn4icz,-0.120333046258925,-99.12850502358961,-33.319644764740204

1709811_20201_2_0,7zokhp4icz,0.7113153398843433,-85.05725043657972,-57.979940488288875

3894300_20201_2_0,7zwven4icz,-0.9551866624813617,-132.9409497296909,-31.765110857983927

1374355_20201_2_0,80apto4icz,-0.27922152083104673,-119.81039035107614,-48.30321992747821

2063304_20201_2_0,818imo4icz,0.3252780585951633,-110.07386171119009,-47.49603143227503

3896696_20201_2_0,81jpko4icz,2.2912832315272764,-64.11877243362926,258.2163717307958

3033223_20201_2_0,81y8mo4icz,-0.01764580478996194,-136.47388141871934,-31.60266376043593

2587195_20201_2_0,820oqo4icz,1.4101486562535541,-114.930905907012,-42.839076410920384

2405599_20201_2_0,83ghrn4icz,0.5426300620106864,-49.49515397630293,-32.68900355968205

2319249_20201_2_0,85jxun4icz,0.05822724525453641,-112.91548743076413,-40.321570712483435

1267526_20201_2_0,86tsmo4icz,0.34250429863871257,-91.65954051669371,-38.68920061182102

2447565_20201_2_0,87hlon4icz,-0.8497933367041387,-158.7075405188016,-7.631538304267238

5312426_20201_2_0,895jlo4icz,-1.109723514261133,-85.28820074307066,-25.08509162731778

3253871_20201_2_0,89uyfp4icz,-2.3716931775925225,-152.059645936832,-35.188170903018204

1193638_20201_2_0,8a51to4icz,-1.99302448401963,-147.9046665729077,-38.31239266280406

5029465_20201_2_0,8adfap4icz,2.1862250248160016,-50.22928683406636,-58.6834879891497

4395679_20201_2_0,bruhqn4icz,-0.4125617792669742,-86.86670813668763,-34.90590436531066

3938440_20201_2_0,8cbd7o4icz,3.5396256935243375,-105.82484969388076,-52.22421079930976

1629731_20201_2_0,8cc7co4icz,-0.3092770980132744,-119.38947774115442,-30.77986833235134

1327118_20201_2_0,8cjmep4icz,-4.206098165351131,-126.44893951775731,-9.17303136833992

5534258_20201_2_0,8copvo4icz,0.07947590604880814,-122.85997237959276,-26.56900391304825

2766958_20201_2_0,8dfj7o4icz,1.928857626220023,-64.96139222837917,-50.253527200324754

2145834_20201_2_0,8e1h3o4icz,0.060011587854454033,-83.98596682806064,-26.708370517765957

2992312_20201_2_0,8g1bco4icz,2.5113145490426727,-131.1428441371424,-81.82513564007617

4915434_20201_2_0,8ghjto4icz,1.781293220436415,-143.8779631178853,-30.671937575537726

5993559_20201_2_0,8hfjpo4icz,0.9455811014987676,-83.35270195779415,-33.96057169558756

3161410_20201_2_0,8iakun4icz,-0.5720380408557239,-80.26050392098409,-43.671534065714965

2625024_20201_2_0,8ii7en4icz,-0.29983801251444686,-76.71889549377931,-41.37257924684249

3508619_20201_2_0,8isotn4icz,-0.16777963365583373,-114.50817117408587,-35.63769086407149

2384383_20201_2_0,8ja1bo4icz,1.050859636432575,-79.01937132390304,-34.809547572390414

1722703_20201_2_0,8kb73o4icz,0.2795619333061546,-76.65892594750946,-35.14019211773629

4279201_20201_2_0,8krugp4icz,5.051953678459346,-101.29413392678237,-55.61200526433154

3932661_20201_2_0,8mzewo4icz,1.422330647584066,-37.042897549565396,-34.35454198109524

3395454_20201_2_0,8oq9in4icz,0.20827460413425272,-106.91123782488256,-43.07858367277919

1469034_20201_2_0,8p3jwn4icz,1.8099624331344195,-59.90414178908932,-50.20941033997377

2508624_20201_2_0,8pkqpo4icz,-1.2873027102598207,-95.58403351576817,-21.871132937688785

1072809_20201_2_0,8qxvyn4icz,-1.192208166216692,-67.00451718000622,-12.27801534358926

5229637_20201_2_0,8r8z8p4icz,-0.5605667954541772,-95.13266899892338,-27.50622194337612

1246327_20201_2_0,8s11gp4icz,-1.3768875694759721,-134.92775194408586,-39.18423017767938

2902958_20201_2_0,8s94io4icz,-0.3397051844624521,-122.5292764595468,-48.29064539110806

5258682_20201_2_0,8skfno4icz,-0.15059923884411533,-116.06742211085415,-26.67697448777271

5502426_20201_2_0,8snw2p4icz,1.2940858367287607,-88.52632433758717,-42.66552201292474

5859046_20201_2_0,8t8wjp4icz,-3.4126542499863732,-115.74276410069601,13.444414282765251

3440188_20201_2_0,8tjcip4icz,0.755705365021027,-119.15370780986726,-21.406463984003295

5019454_20201_2_0,8txzno4icz,-8.74651248674202,-69.89260835625538,28.753653491420124

4929062_20201_2_0,8u5hrn4icz,0.7975853535608506,-78.83823966235363,-33.64332445667944

5308900_20201_2_0,8u8j3p4icz,0.05576852967525292,-87.08644224017681,-43.19871968417303

2049151_20201_2_0,8umkgo4icz,-0.28405829863909143,-98.3680334598146,-32.93909296631624

5885915_20201_2_0,8vxubo4icz,1.523774133703181,-54.96652630995419,-48.024603680406244

4005684_20201_2_0,8vyy3o4icz,-0.3871589971770191,-75.93619374295935,-24.5818567433829

5011109_20201_2_0,8w1ron4icz,-1.1762299408128343,-77.30693826527374,-32.2007761012721

3424129_20201_2_0,8wmvuo4icz,-0.21912997777950974,-64.00046055384419,-34.91682227836117

1381351_20201_2_0,8wvm9p4icz,2.488629959253567,-114.3179657608774,-46.012159352474484

4693085_20201_2_0,8ya01p4icz,2.1299146902529285,-64.08253606596298,-49.96714040356558

5235038_20201_2_0,8yu4fn4icz,5.074274582847741,-49.59943770327271,-64.95555589756341

5429921_20201_2_0,8zzryn4icz,1.57745089240259,-116.490462519875,-43.97724287387496

5490674_20201_2_0,90smkn4icz,6.056420107820037,-74.43041582522196,-56.142077923795384

3289626_20201_2_0,ac9hdn4icz,-2.7198033550433656,-116.43102081746866,-5.797685976398782

4058205_20201_2_0,941lep4icz,1.367626744893292,-110.44686170942563,-41.64743241277034

2780812_20201_2_0,94mk8p4icz,-0.8387183892345091,-59.20551951815611,-14.339575612010933

3005176_20201_2_0,94sjgp4icz,-1.375096461633221,-104.21289811812903,-39.93559243478296

2566515_20201_2_0,96w86o4icz,-0.03939482057720891,-94.99884007654114,-36.374619637547966

1280848_20201_2_0,9704jp4icz,0.28171604129913547,-116.24919081208986,-29.291146908580174

2149946_20201_2_0,97aubo4icz,-2.5489894346294673,-150.90983354234228,-28.699995423509932

4128374_20201_2_0,97i47p4icz,2.021585270482907,-99.7176753854175,-54.1591533102698

4901312_20201_2_0,99d25o4icz,-0.2965714326797548,-124.37480607564544,-41.638950785533865

2340898_20201_2_0,99dl9p4icz,1.8052261990952287,-77.52347687807972,-51.14519758704968

2368700_20201_2_0,99pxwo4icz,0.8034329196777076,-106.05840999408647,-40.44247073033077

5442143_20201_2_0,9a8dao4icz,-3.0022976348078356,-103.99087064587007,-13.085265908740922

4820933_20201_2_0,9c5yyo4icz,3.6718509302439477,-43.60000932620261,-34.70103538835252

4167885_20201_2_0,9cjuip4icz,0.09119434059692337,-115.01833289467876,-28.281356616185448

6011960_20201_2_0,9fgi3o4icz,-0.9466443930037156,-94.94706338971667,-21.293816464487747

1323962_20201_2_0,9gh14p4icz,-0.010609623319039748,-54.191258665039044,-23.44459400344978

4254222_20201_2_0,9h1r9p4icz,0.44670715598670396,-68.04499278857315,-45.24205494380827

1769340_20201_2_0,9h20eo4icz,-1.6518933200760768,-126.97713787873974,-25.908110506746695

1013312_20201_2_0,9h6w0p4icz,-1.5205775576716756,-91.35597094077406,-29.92804553507682

3037381_20201_2_0,ub2abn4icz,2.8512207068423407,-93.67647563702374,-40.899907299841516

/users/rhydian/anaconda3/envs/torch_env/lib/python3.7/site-packages/torch/cuda/__init__.py:52: UserWarning: CUDA initialization: Found no NVIDIA driver on your system. Please check that you have an NVIDIA GPU and installed a driver from http://www.nvidia.com/Download/index.aspx (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729006826/work/c10/cuda/CUDAFunctions.cpp:100.)
  return torch._C._cuda_getDeviceCount() > 0
  0%|          | 0/101 [00:00<?, ?it/s]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 1/101 [00:03<05:18,  3.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 2/101 [00:07<05:48,  3.52s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 3/101 [00:10<05:25,  3.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/101 [00:13<05:09,  3.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▍         | 5/101 [00:15<04:51,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 6/101 [00:18<04:45,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 7/101 [00:22<04:51,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 8/101 [00:24<04:39,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 9/101 [00:27<04:30,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|▉         | 10/101 [00:30<04:23,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 11/101 [00:33<04:21,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 12/101 [00:36<04:19,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 13/101 [00:39<04:15,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 14/101 [00:41<04:07,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▍        | 15/101 [00:44<04:03,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 16/101 [00:47<03:58,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 17/101 [00:50<04:00,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 18/101 [01:03<08:01,  5.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 19/101 [01:06<06:43,  4.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|█▉        | 20/101 [01:18<09:48,  7.27s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 21/101 [01:21<07:51,  5.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 22/101 [01:24<06:34,  4.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 23/101 [01:27<05:34,  4.29s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 24/101 [01:29<04:53,  3.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▍       | 25/101 [01:33<04:38,  3.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 26/101 [01:36<04:19,  3.46s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 27/101 [01:38<04:02,  3.27s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 28/101 [01:41<03:42,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▊       | 29/101 [01:44<03:35,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|██▉       | 30/101 [01:47<03:29,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 31/101 [01:50<03:30,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 32/101 [01:53<03:22,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 33/101 [01:56<03:27,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▎      | 34/101 [01:58<03:14,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▍      | 35/101 [02:01<03:11,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 36/101 [02:04<03:10,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 37/101 [02:07<03:04,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 38/101 [02:11<03:14,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▊      | 39/101 [02:13<03:05,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|███▉      | 40/101 [02:16<02:57,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 41/101 [02:19<02:51,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 42/101 [02:22<02:45,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 43/101 [02:24<02:41,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▎     | 44/101 [02:29<03:05,  3.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▍     | 45/101 [02:31<02:51,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 46/101 [02:34<02:47,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 47/101 [02:37<02:37,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 48/101 [02:40<02:41,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▊     | 49/101 [02:43<02:30,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|████▉     | 50/101 [02:46<02:37,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 51/101 [02:49<02:33,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████▏    | 52/101 [02:52<02:27,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 53/101 [02:56<02:38,  3.31s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 54/101 [02:59<02:34,  3.29s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 55/101 [03:02<02:26,  3.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▌    | 56/101 [03:06<02:27,  3.28s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▋    | 57/101 [03:09<02:18,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 58/101 [03:11<02:09,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 59/101 [03:14<02:02,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 60/101 [03:17<02:00,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|██████    | 61/101 [03:20<01:55,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████▏   | 62/101 [03:23<02:00,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 63/101 [03:26<01:56,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 64/101 [03:29<01:52,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 65/101 [03:32<01:47,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▌   | 66/101 [03:36<01:54,  3.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▋   | 67/101 [03:39<01:46,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 68/101 [03:42<01:40,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 69/101 [03:49<02:20,  4.38s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 70/101 [03:53<02:11,  4.24s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|███████   | 71/101 [03:56<01:53,  3.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████▏  | 72/101 [03:59<01:40,  3.45s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 73/101 [04:02<01:33,  3.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 74/101 [04:04<01:24,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 75/101 [04:07<01:18,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▌  | 76/101 [04:10<01:13,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 77/101 [04:13<01:09,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 78/101 [04:16<01:08,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 79/101 [04:19<01:04,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 80/101 [04:21<01:00,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 81/101 [04:24<00:56,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 82/101 [04:27<00:52,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 83/101 [04:29<00:49,  2.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 84/101 [04:32<00:45,  2.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 85/101 [04:35<00:43,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▌ | 86/101 [04:37<00:40,  2.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 87/101 [04:40<00:38,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 88/101 [04:43<00:35,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 89/101 [04:46<00:32,  2.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 90/101 [04:49<00:31,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 91/101 [04:52<00:28,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 92/101 [04:54<00:24,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 93/101 [04:57<00:21,  2.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 94/101 [04:59<00:18,  2.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 95/101 [05:02<00:16,  2.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▌| 96/101 [05:05<00:13,  2.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 97/101 [05:08<00:10,  2.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 98/101 [05:10<00:08,  2.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 99/101 [05:13<00:05,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 100/101 [05:16<00:02,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|██████████| 101/101 [05:20<00:00,  2.94s/it]100%|██████████| 101/101 [05:20<00:00,  3.17s/it]
Trying to load from /users/rhydian/self-supervised-project/model_weights/SSECEncodersBothBoth
==> Resuming model trained for 106 epochs...
Trying to load from ../model_weights/angle_regressor4
==> Resuming model trained for 7 epochs...
1290280_20201_2_0,77mb5o4icz,-4.260632250769956,-79.43493108174144,-15.06034146695049

2909123_20201_2_0,yryaxo4icz,-1.0996081256929624,-88.64299109093659,-27.959641299208897

3819525_20201_2_0,789egp4icz,1.9258794911922341,-108.78770877013613,-38.09383365920837

5426039_20201_2_0,78o8sn4icz,-0.49384187345290714,-93.7931007928047,-46.19187641721096

4601046_20201_2_0,78vd7o4icz,-0.8045422211486434,-109.80170769411805,-39.304797482140785

3583353_20201_2_0,798v8p4icz,-1.1814392851088988,-86.07602901350793,-31.516011551659147

3230860_20201_2_0,7a29zo4icz,3.679796827709922,-41.542927715912356,-65.18526298477245

4368276_20201_2_0,7ab1ip4icz,1.3598583486201092,-98.02818767010777,-39.67325140504599

3836491_20201_2_0,7adpjn4icz,-0.288601696266455,-93.81701590704887,-31.94559327274537

3575487_20201_2_0,7aqe4p4icz,0.879478558583936,-44.96539864670217,-35.054008938706545

5124817_20201_2_0,7b4mjn4icz,3.5664877693344135,-104.17279097739942,-53.85351104758419

1483181_20201_2_0,7b7mwn4icz,-1.7338303951017178,-115.36740467585338,-24.578497419591514

3813247_20201_2_0,7c4m4p4icz,-1.4295205944789768,-78.39243901784778,-21.63041942362851

4388796_20201_2_0,7cyenn4icz,-1.7568168548215048,-104.73983651999833,-7.707914658010296

5258145_20201_2_0,7d6w5o4icz,-3.5151946640782814,-124.63678894938434,3.1467815453252115

1965503_20201_2_0,7fru6o4icz,-5.676443980533012,-112.35054276511849,4.546917553470649

5037977_20201_2_0,7glg8p4icz,0.16941625509858568,-80.59063221251617,-19.728226464668325

5645644_20201_2_0,7gozgp4icz,-0.7285196478533367,-75.69235615557989,-7.828791796159095

4328174_20201_2_0,7hoj9p4icz,2.528122751118275,-114.92459203182352,-53.76537924036337

4626959_20201_2_0,7ibjno4icz,2.3100366685536127,-59.330643321344525,-34.707343934681546

5378508_20201_2_0,7j7i2p4icz,-0.6645460946026377,-118.02449919714985,-43.90915690749853

3305559_20201_2_0,7jcd1p4icz,1.4690707334145967,-80.22140305442224,-43.88505380239951

1173114_20201_2_0,7k88io4icz,9.532771963504056,-103.53449553545263,-75.04621561037415

5558208_20201_2_0,7kes7p4icz,4.307030591151457,-94.81361549841071,-56.72766949046732

2549670_20201_2_0,7mavqo4icz,-28.6253654581668,-108.76599569350151,127.6546880404547

2759539_20201_2_0,7mdy0p4icz,0.8057844282541642,-121.06290468903495,-29.22484378490455

1016715_20201_2_0,7mpzno4icz,-0.6283109000156112,-85.92616365093704,-37.06069215275835

3856950_20201_2_0,7n849o4icz,0.38255172580275704,-100.80118390334823,-33.16196273913275

4511686_20201_2_0,7nc87p4icz,-3.3403698109011795,-111.00870441486614,-31.119655804982173

1822467_20201_2_0,7omcan4icz,0.6244167154063003,-64.36391936337486,-42.51531410752567

3020342_20201_2_0,7pve5o4icz,-0.7861062548401931,-88.84746358679507,-31.0604718970213

5173497_20201_2_0,7qb9en4icz,-0.15642425881356062,-128.0903184702948,-35.318736159707484

1616270_20201_2_0,7qr3ap4icz,-0.4819000939816858,-67.286668223796,-39.714984426907165

3630180_20201_2_0,7s761p4icz,0.005099170740643159,-47.91285381555207,-58.905904834489334

2226410_20201_2_0,7skgdp4icz,0.927372885385844,-135.738693871654,-28.934553446960507

5184834_20201_2_0,7tmpzo4icz,-2.624898493225683,-86.53711099727525,-33.04888082251645

2556398_20201_2_0,7u263p4icz,-0.9000919755162256,-110.06855916039748,-38.1201073259879

4098495_20201_2_0,7u2uco4icz,-1.7922549038817286,-125.31879494005292,-21.97281638056444

2164506_20201_2_0,7v8fco4icz,-0.29316558470993254,-104.37226974689548,-36.89948402049265

5972743_20201_2_0,7vv3nn4icz,1.1804942064489836,-70.5070460750456,-52.87855472890415

1577826_20201_2_0,7weldn4icz,0.985062945898361,-73.25837714480488,-55.13851338102718

3996787_20201_2_0,7xgadp4icz,-1.827047611489781,-62.021020269870945,-26.401663881907453

4519765_20201_2_0,7xp29o4icz,-1.8390422532200608,-110.78498832601375,-29.994365552925103

2652231_20201_2_0,7y0ubn4icz,36.57793341000469,-30.173431634879194,-186.38437147026337

2770221_20201_2_0,7y6wwn4icz,3.012865676281258,-89.79783418059043,-51.23233417655965

5616217_20201_2_0,7yc5wn4icz,-0.5473676165569283,-111.43598995492658,-15.96122402248534

3770057_20201_2_0,7yo27o4icz,1.6980640808849388,-110.5232290687415,-39.39909641263078

4578849_20201_2_0,7yy5no4icz,1.0870902961819235,-88.33446924022434,-26.843741087693004

4397516_20201_2_0,7z1wgo4icz,0.08828231077402118,-132.76357092447267,-52.79323143876812

1326623_20201_2_0,7zkejo4icz,1.0186801584197196,-92.16350701103264,-49.10164474353277

3626754_20201_2_0,80x2io4icz,-1.3312755906211045,-66.81600316546744,-35.990356732788314

1735979_20201_2_0,82rh4p4icz,-1.1213950006833076,-72.47071911641063,-32.65526507235249

5984092_20201_2_0,841m8p4icz,0.022520502376663976,-110.20130957527209,-48.94003740172474

4018285_20201_2_0,84710p4icz,-3.246586708456745,-103.78620494044202,-15.735530382884633

3124597_20201_2_0,847dhp4icz,3.189955035776262,-74.21426098348405,-62.067973954932285

3679311_20201_2_0,84q9eo4icz,-1.3682798893777635,-86.83885826173022,-58.19702073637143

1389801_20201_2_0,86iu2p4icz,-2.640677325221681,-92.8787316817797,-44.1407674143812

5274080_20201_2_0,86scfp4icz,-0.2827531776237387,-111.94689066148982,-28.755272922815664

1583013_20201_2_0,87btho4icz,-2.8655543537665027,-76.13287704971174,-16.45842554225949

2779608_20201_2_0,87r5cn4icz,-0.937810424949592,-82.59300716836103,-26.657247728831948

4826524_20201_2_0,894jwo4icz,-0.5444705001818215,-92.98183866490393,-39.361463436433

2464969_20201_2_0,05k9nn4icz,1.814579786659955,-94.07368007479579,-34.023368124676495

5978279_20201_2_0,8brf2o4icz,0.7617332939222163,-103.77502081187507,-45.499933665839876

3204291_20201_2_0,8cfkcn4icz,-0.9513380410830895,-74.0107169844782,-22.02931070404135

2403957_20201_2_0,8d4vfn4icz,0.38522853133949353,-134.0746408123637,-39.18822522191118

3603512_20201_2_0,8f7m8o4icz,-2.0597117731784853,-102.3339630707161,-13.225576131297174

5194368_20201_2_0,8fkpfn4icz,1.743614966021175,-83.8564915552389,-46.338821849043754

5036190_20201_2_0,8fr4ro4icz,0.12507832662945131,-93.12758138547395,-21.03451570957644

4907201_20201_2_0,sweixo4icz,-0.23401190852192102,-95.2897978642338,-43.62597229799077

2492791_20201_2_0,8h34pn4icz,-0.5794091144483728,-94.5654100782564,-41.91342578104637

1289541_20201_2_0,8h4dno4icz,-1.8907373975704496,-65.94991577244076,-26.342567432125122

1938108_20201_2_0,8h7jin4icz,-1.9112407445175976,-90.04055017935525,-31.321650374028735

4932320_20201_2_0,8i6nbo4icz,1.1172348900928002,-46.264863842532264,-40.31339358156592

2648062_20201_2_0,8ip7uo4icz,-1.1249514120499324,-139.42295591604613,-27.06310275497438

4466208_20201_2_0,8iwk7o4icz,4.517974350348928,-86.46113682576373,-62.92707112962589

3005419_20201_2_0,8izaho4icz,0.7061099146414697,-107.74634617226408,-36.08258584004125

2024299_20201_2_0,8jpy4o4icz,0.2111701940876508,-102.3871623013502,-34.05615512982172

3530628_20201_2_0,8jwkhp4icz,-2.127082707390625,-68.41064172401465,-40.12634093553021

1299761_20201_2_0,8khcoo4icz,0.8441821358077736,-98.23152013676705,-48.644279869897275

2620999_20201_2_0,8lckcn4icz,0.1410598550704239,-88.88028114185312,-25.7969308804834

1543082_20201_2_0,8lo1qn4icz,-3.5001311811045985,-104.61003101855124,-2.816622423066761

5336780_20201_2_0,8mpcun4icz,0.23140809376734836,-94.65741002158046,-23.538195098174455

3496780_20201_2_0,8nv9yo4icz,0.29497676589464833,-63.59660625440486,-29.626378424942075

5837397_20201_2_0,8nyeuo4icz,2.06688469585526,-119.69549689679224,-56.95934582171212

4699218_20201_2_0,8oauro4icz,0.4321775080921309,-64.26335511235607,-48.115509564360224

3158661_20201_2_0,8poqko4icz,-2.9575885822587837,-107.51706881266719,-17.606513028279096

2910427_20201_2_0,8rbj7o4icz,-0.7194542980678571,-100.57945604650686,-33.95553144640148

4074159_20201_2_0,8roqro4icz,-4.9227113479385265,-130.22701773877623,-12.08944397726863

5000696_20201_2_0,8sx5yo4icz,-2.5954420990913927,-128.6720634778947,-12.810055689886894

5182025_20201_2_0,z2hkgn4icz,0.7816056544986272,-76.68681903321323,-54.99721305038702

2449937_20201_2_0,8tzssn4icz,-1.8679923241083338,-126.97902288368408,-15.049222706316698

5016908_20201_2_0,8vlvcp4icz,-4.1941565716975004,-165.66602283693513,-10.113493053944708

3746604_20201_2_0,8wo34p4icz,-0.3724216397723814,-76.87097725892795,-34.22563892214738

2793134_20201_2_0,8x5yyn4icz,-3.225514066450442,-91.91509692699265,-26.526530799172534

2214579_20201_2_0,8xqaho4icz,8.768734726295614,-66.74004116085075,-163.2023450647775

2762587_20201_2_0,8y7e6n4icz,4.0698246237403755,-87.21688308996806,-76.76263916304417

5980447_20201_2_0,8ypmen4icz,0.8832760286586286,-85.00734676405406,-47.13204889580376

4615262_20201_2_0,8yvbbn4icz,1.0243458745171143,-128.6553125400838,-41.35142878777273

3148502_20201_2_0,8yxtpn4icz,-2.6868097354203364,-61.473920390191324,-18.454781094363526

4708741_20201_2_0,8z3c0p4icz,2.8771471119188923,-65.74423778964939,-57.74702920998017

4164466_20201_2_0,cc0xsn4icz,0.8204891012586124,-87.66125680335176,-46.752839078357795

