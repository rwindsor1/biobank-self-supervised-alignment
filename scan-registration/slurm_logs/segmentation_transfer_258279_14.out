14 th decile
.70
.75
/users/rhydian/anaconda3/envs/torch_env/lib/python3.7/site-packages/torch/cuda/__init__.py:52: UserWarning: CUDA initialization: Found no NVIDIA driver on your system. Please check that you have an NVIDIA GPU and installed a driver from http://www.nvidia.com/Download/index.aspx (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729006826/work/c10/cuda/CUDAFunctions.cpp:100.)
  return torch._C._cuda_getDeviceCount() > 0
  0%|          | 0/811 [00:00<?, ?it/s]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  0%|          | 1/811 [00:02<36:16,  2.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  0%|          | 2/811 [00:04<33:00,  2.45s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  0%|          | 3/811 [00:06<30:01,  2.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  0%|          | 4/811 [00:08<28:04,  2.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 5/811 [00:09<25:46,  1.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 6/811 [00:10<23:18,  1.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 7/811 [00:12<21:42,  1.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 8/811 [00:15<30:04,  2.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 9/811 [00:17<26:14,  1.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 10/811 [00:19<27:01,  2.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|▏         | 11/811 [00:20<23:33,  1.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|▏         | 12/811 [00:21<21:43,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 13/811 [00:24<23:41,  1.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 14/811 [00:25<23:20,  1.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 15/811 [00:27<23:10,  1.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 16/811 [00:29<22:32,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 17/811 [00:30<22:42,  1.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 18/811 [00:32<23:26,  1.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 19/811 [00:34<23:15,  1.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 20/811 [00:36<24:00,  1.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 21/811 [00:37<21:44,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 22/811 [00:40<24:30,  1.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 23/811 [00:41<23:57,  1.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 24/811 [00:43<22:02,  1.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 25/811 [00:44<22:23,  1.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 26/811 [00:46<21:32,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 27/811 [00:47<19:49,  1.52s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 28/811 [00:49<22:01,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▎         | 29/811 [00:52<24:59,  1.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▎         | 30/811 [00:56<35:56,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 31/811 [00:59<36:45,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 32/811 [01:01<31:07,  2.40s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 33/811 [01:02<28:22,  2.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 34/811 [01:04<26:33,  2.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 35/811 [01:06<24:19,  1.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 36/811 [01:07<22:38,  1.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▍         | 37/811 [01:09<24:13,  1.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▍         | 38/811 [01:11<23:23,  1.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▍         | 39/811 [01:15<31:36,  2.46s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▍         | 40/811 [01:16<26:53,  2.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▌         | 41/811 [01:18<24:25,  1.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▌         | 42/811 [01:20<26:14,  2.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▌         | 43/811 [01:23<29:52,  2.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▌         | 44/811 [01:25<26:46,  2.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 45/811 [01:26<24:04,  1.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 46/811 [01:27<21:32,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 47/811 [01:29<23:25,  1.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 48/811 [01:31<23:39,  1.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 49/811 [01:33<24:02,  1.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 50/811 [01:35<22:22,  1.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▋         | 51/811 [01:37<23:02,  1.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▋         | 52/811 [01:38<22:46,  1.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 53/811 [01:40<20:42,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 54/811 [01:41<20:09,  1.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 55/811 [01:42<18:55,  1.50s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 56/811 [01:44<18:57,  1.51s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 57/811 [01:45<18:18,  1.46s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 58/811 [01:47<17:58,  1.43s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 59/811 [01:48<17:29,  1.40s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 60/811 [01:49<17:39,  1.41s/it]  8%|▊         | 61/811 [01:51<17:59,  1.44s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 62/811 [01:52<17:17,  1.39s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 63/811 [01:54<18:47,  1.51s/it]  8%|▊         | 64/811 [01:55<18:39,  1.50s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 65/811 [01:57<18:14,  1.47s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 66/811 [01:59<21:31,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 67/811 [02:01<20:36,  1.66s/it]  8%|▊         | 68/811 [02:02<19:22,  1.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▊         | 69/811 [02:04<19:00,  1.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▊         | 70/811 [02:05<17:49,  1.44s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 71/811 [02:06<17:17,  1.40s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 72/811 [02:07<17:12,  1.40s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 73/811 [02:09<16:33,  1.35s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 74/811 [02:10<16:40,  1.36s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 75/811 [02:11<16:17,  1.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 76/811 [02:13<18:06,  1.48s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 77/811 [02:15<17:51,  1.46s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|▉         | 78/811 [02:17<19:42,  1.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|▉         | 79/811 [02:19<21:40,  1.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|▉         | 80/811 [02:20<19:25,  1.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|▉         | 81/811 [02:21<18:20,  1.51s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|█         | 82/811 [02:24<22:11,  1.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|█         | 83/811 [02:26<24:17,  2.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|█         | 84/811 [02:28<22:51,  1.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|█         | 85/811 [02:29<20:22,  1.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 86/811 [02:30<19:09,  1.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 87/811 [02:32<18:16,  1.51s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 88/811 [02:33<18:00,  1.50s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 89/811 [02:34<17:28,  1.45s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 90/811 [02:36<17:15,  1.44s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 91/811 [02:37<16:36,  1.38s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█▏        | 92/811 [02:38<16:07,  1.35s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█▏        | 93/811 [02:40<16:24,  1.37s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 94/811 [02:41<15:51,  1.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 95/811 [02:42<15:42,  1.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 96/811 [02:45<19:06,  1.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 97/811 [02:46<18:02,  1.52s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 98/811 [02:48<18:35,  1.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 99/811 [02:49<17:49,  1.50s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 100/811 [02:51<18:05,  1.53s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 101/811 [02:53<20:51,  1.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 102/811 [02:55<21:55,  1.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 103/811 [02:56<19:36,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 104/811 [02:58<18:59,  1.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 105/811 [02:59<17:47,  1.51s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 106/811 [03:00<17:30,  1.49s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 107/811 [03:02<16:27,  1.40s/it] 13%|█▎        | 108/811 [03:03<16:35,  1.42s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 109/811 [03:04<15:57,  1.36s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▎        | 110/811 [03:05<15:31,  1.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▎        | 111/811 [03:07<17:45,  1.52s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 112/811 [03:09<17:49,  1.53s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 113/811 [03:10<16:59,  1.46s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 114/811 [03:11<15:57,  1.37s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 115/811 [03:14<20:37,  1.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 116/811 [03:16<21:25,  1.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 117/811 [03:18<22:11,  1.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▍        | 118/811 [03:20<20:49,  1.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▍        | 119/811 [03:22<21:36,  1.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▍        | 120/811 [03:23<20:23,  1.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▍        | 121/811 [03:25<19:07,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▌        | 122/811 [03:26<17:23,  1.52s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▌        | 123/811 [03:28<18:30,  1.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▌        | 124/811 [03:29<17:41,  1.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▌        | 125/811 [03:31<17:33,  1.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 126/811 [03:32<16:45,  1.47s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 127/811 [03:33<16:17,  1.43s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 128/811 [03:35<16:28,  1.45s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 129/811 [03:36<16:05,  1.42s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 130/811 [03:37<15:41,  1.38s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 131/811 [03:39<15:16,  1.35s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▋        | 132/811 [03:40<15:34,  1.38s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▋        | 133/811 [03:42<15:17,  1.35s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 134/811 [03:44<18:21,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 135/811 [03:46<19:35,  1.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 136/811 [03:47<18:45,  1.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 137/811 [03:49<17:29,  1.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 138/811 [03:50<16:30,  1.47s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 139/811 [03:51<16:27,  1.47s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 140/811 [03:53<16:30,  1.48s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 141/811 [03:54<16:59,  1.52s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 142/811 [03:56<17:39,  1.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 143/811 [03:58<18:16,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 144/811 [03:59<17:49,  1.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 145/811 [04:01<16:28,  1.48s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 146/811 [04:02<15:53,  1.43s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 147/811 [04:03<15:30,  1.40s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 148/811 [04:04<14:07,  1.28s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 149/811 [04:06<15:00,  1.36s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 150/811 [04:08<17:01,  1.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▊        | 151/811 [04:09<16:24,  1.49s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▊        | 152/811 [04:11<16:27,  1.50s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 153/811 [04:12<16:22,  1.49s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 154/811 [04:14<16:57,  1.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 155/811 [04:16<17:27,  1.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 156/811 [04:17<17:04,  1.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 157/811 [04:19<17:34,  1.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 158/811 [04:20<17:09,  1.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|█▉        | 159/811 [04:22<17:04,  1.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|█▉        | 160/811 [04:24<18:00,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|█▉        | 161/811 [04:26<19:21,  1.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|█▉        | 162/811 [04:28<21:32,  1.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|██        | 163/811 [04:30<20:12,  1.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|██        | 164/811 [04:31<18:58,  1.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|██        | 165/811 [04:33<18:14,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|██        | 166/811 [04:34<17:56,  1.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 167/811 [04:36<17:35,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 168/811 [04:38<17:12,  1.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 169/811 [04:40<20:20,  1.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 170/811 [04:42<19:50,  1.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 171/811 [04:44<19:01,  1.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 172/811 [04:45<18:32,  1.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██▏       | 173/811 [04:47<17:29,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██▏       | 174/811 [04:48<17:28,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 175/811 [04:50<17:21,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 176/811 [04:52<17:18,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 177/811 [04:53<18:15,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 178/811 [04:55<17:58,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 179/811 [04:57<17:26,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 180/811 [04:58<17:11,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 181/811 [05:00<16:47,  1.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 182/811 [05:02<17:25,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 183/811 [05:03<17:01,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 184/811 [05:05<16:27,  1.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 185/811 [05:06<16:31,  1.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 186/811 [05:08<15:45,  1.51s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 187/811 [05:10<17:37,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 188/811 [05:11<18:01,  1.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 189/811 [05:13<17:57,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 190/811 [05:15<18:58,  1.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▎       | 191/811 [05:17<18:25,  1.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▎       | 192/811 [05:19<18:10,  1.76s/it] 24%|██▍       | 193/811 [05:22<24:27,  2.38s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 194/811 [05:24<22:05,  2.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 195/811 [05:26<20:59,  2.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 196/811 [05:28<21:10,  2.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 197/811 [05:30<19:51,  1.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 198/811 [05:32<20:58,  2.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▍       | 199/811 [05:34<21:30,  2.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▍       | 200/811 [05:36<21:44,  2.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▍       | 201/811 [05:38<21:14,  2.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▍       | 202/811 [05:40<20:11,  1.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▌       | 203/811 [05:41<18:19,  1.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▌       | 204/811 [05:45<23:52,  2.36s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▌       | 205/811 [05:47<21:12,  2.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▌       | 206/811 [05:48<19:32,  1.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 207/811 [05:50<19:01,  1.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 208/811 [05:52<19:14,  1.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 209/811 [05:54<19:12,  1.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 210/811 [05:56<20:45,  2.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 211/811 [05:59<21:12,  2.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 212/811 [06:01<21:14,  2.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▋       | 213/811 [06:03<22:52,  2.29s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▋       | 214/811 [06:05<20:39,  2.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 215/811 [06:07<19:37,  1.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 216/811 [06:08<18:56,  1.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 217/811 [06:10<18:39,  1.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 218/811 [06:12<19:30,  1.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 219/811 [06:15<20:15,  2.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 220/811 [06:16<19:10,  1.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 221/811 [06:18<17:50,  1.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 222/811 [06:20<17:21,  1.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 223/811 [06:21<15:45,  1.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 224/811 [06:22<15:32,  1.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 225/811 [06:24<16:11,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 226/811 [06:26<15:49,  1.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 227/811 [06:28<16:29,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 228/811 [06:29<16:18,  1.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 229/811 [06:31<15:22,  1.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 230/811 [06:32<16:07,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 231/811 [06:34<15:50,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▊       | 232/811 [06:36<15:54,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▊       | 233/811 [06:37<15:35,  1.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 234/811 [06:39<14:50,  1.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 235/811 [06:40<14:31,  1.51s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 236/811 [06:42<16:03,  1.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 237/811 [06:44<16:49,  1.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 238/811 [06:46<16:27,  1.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 239/811 [06:47<16:33,  1.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|██▉       | 240/811 [06:49<15:56,  1.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|██▉       | 241/811 [06:51<16:05,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|██▉       | 242/811 [06:52<16:06,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|██▉       | 243/811 [06:54<16:08,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|███       | 244/811 [07:00<27:42,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|███       | 245/811 [07:04<30:04,  3.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|███       | 246/811 [07:05<25:34,  2.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|███       | 247/811 [07:07<23:41,  2.52s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 248/811 [07:09<20:59,  2.24s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 249/811 [07:11<19:40,  2.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 250/811 [07:13<19:05,  2.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 251/811 [07:14<17:48,  1.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 252/811 [07:16<17:47,  1.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 253/811 [07:18<17:23,  1.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███▏      | 254/811 [07:20<16:54,  1.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███▏      | 255/811 [07:21<16:00,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 256/811 [07:23<15:44,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 257/811 [07:24<15:03,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 258/811 [07:26<15:17,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 259/811 [07:28<14:56,  1.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 260/811 [07:29<14:24,  1.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 261/811 [07:31<14:41,  1.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 262/811 [07:32<14:00,  1.53s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 263/811 [07:33<13:28,  1.48s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 264/811 [07:35<13:31,  1.48s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 265/811 [07:37<16:01,  1.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 266/811 [07:39<15:18,  1.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 267/811 [07:40<15:24,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 268/811 [07:42<14:13,  1.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 269/811 [07:43<14:21,  1.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 270/811 [07:45<14:39,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 271/811 [07:47<15:14,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▎      | 272/811 [07:48<14:44,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▎      | 273/811 [07:50<14:36,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 274/811 [07:52<15:35,  1.74s/it] 34%|███▍      | 275/811 [07:54<15:00,  1.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 276/811 [07:56<16:35,  1.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 277/811 [07:57<15:21,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 278/811 [07:59<15:27,  1.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 279/811 [08:01<14:39,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▍      | 280/811 [08:03<16:44,  1.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▍      | 281/811 [08:04<15:41,  1.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▍      | 282/811 [08:06<14:56,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▍      | 283/811 [08:08<14:40,  1.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▌      | 284/811 [08:09<14:57,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▌      | 285/811 [08:11<15:12,  1.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▌      | 286/811 [08:14<16:48,  1.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▌      | 287/811 [08:15<15:54,  1.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 288/811 [08:17<16:29,  1.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 289/811 [08:19<15:25,  1.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 290/811 [08:20<14:51,  1.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 291/811 [08:22<16:09,  1.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 292/811 [08:24<16:10,  1.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 293/811 [08:26<15:14,  1.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▋      | 294/811 [08:29<17:47,  2.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▋      | 295/811 [08:30<16:16,  1.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▋      | 296/811 [08:32<16:11,  1.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 297/811 [08:34<15:59,  1.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 298/811 [08:35<15:08,  1.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 299/811 [08:37<14:44,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 300/811 [08:39<16:33,  1.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 301/811 [08:43<19:45,  2.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 302/811 [08:44<17:25,  2.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 303/811 [08:46<16:04,  1.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 304/811 [08:47<15:19,  1.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 305/811 [08:49<14:26,  1.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 306/811 [08:51<15:52,  1.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 307/811 [08:53<16:33,  1.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 308/811 [08:56<17:29,  2.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 309/811 [08:58<17:33,  2.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 310/811 [09:00<18:08,  2.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 311/811 [09:02<16:56,  2.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 312/811 [09:03<15:56,  1.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▊      | 313/811 [09:05<15:20,  1.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▊      | 314/811 [09:07<15:02,  1.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 315/811 [09:08<14:32,  1.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 316/811 [09:10<14:15,  1.73s/it] 39%|███▉      | 317/811 [09:12<13:54,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 318/811 [09:14<14:49,  1.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 319/811 [09:21<27:33,  3.36s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 320/811 [09:22<23:24,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|███▉      | 321/811 [09:24<20:16,  2.48s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|███▉      | 322/811 [09:27<20:47,  2.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|███▉      | 323/811 [09:28<18:21,  2.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|███▉      | 324/811 [09:31<19:14,  2.37s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|████      | 325/811 [09:33<17:31,  2.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|████      | 326/811 [09:34<15:56,  1.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|████      | 327/811 [09:36<14:57,  1.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|████      | 328/811 [09:38<15:08,  1.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 329/811 [09:39<14:41,  1.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 330/811 [09:42<15:25,  1.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 331/811 [09:44<16:41,  2.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 332/811 [09:46<15:18,  1.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 333/811 [09:47<15:18,  1.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 334/811 [09:49<15:30,  1.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████▏     | 335/811 [09:51<14:20,  1.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████▏     | 336/811 [09:53<14:51,  1.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 337/811 [09:55<14:28,  1.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 338/811 [09:57<15:30,  1.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 339/811 [09:59<15:16,  1.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 340/811 [10:03<20:33,  2.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 341/811 [10:05<18:33,  2.37s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 342/811 [10:07<16:47,  2.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 343/811 [10:08<15:44,  2.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 344/811 [10:10<15:42,  2.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 345/811 [10:12<14:40,  1.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 346/811 [10:13<13:57,  1.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 347/811 [10:16<14:41,  1.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 348/811 [10:18<15:27,  2.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 349/811 [10:19<14:16,  1.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 350/811 [10:21<14:06,  1.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 351/811 [10:23<13:10,  1.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 352/811 [10:24<12:58,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▎     | 353/811 [10:26<12:38,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▎     | 354/811 [10:27<12:27,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 355/811 [10:29<11:51,  1.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 356/811 [10:30<11:25,  1.51s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 357/811 [10:32<11:26,  1.51s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 358/811 [10:33<11:42,  1.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 359/811 [10:35<12:05,  1.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 360/811 [10:36<11:49,  1.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▍     | 361/811 [10:38<11:58,  1.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▍     | 362/811 [10:40<11:57,  1.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▍     | 363/811 [10:41<11:23,  1.53s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▍     | 364/811 [10:43<11:42,  1.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▌     | 365/811 [10:44<11:28,  1.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▌     | 366/811 [10:46<11:10,  1.51s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▌     | 367/811 [10:47<11:19,  1.53s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▌     | 368/811 [10:49<11:29,  1.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▌     | 369/811 [10:50<11:10,  1.52s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 370/811 [10:52<11:25,  1.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 371/811 [10:54<12:04,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 372/811 [10:56<13:19,  1.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Trying to load from /users/rhydian/self-supervised-project/model_weights/SSECEncodersBothBoth
==> Resuming model trained for 106 epochs...
Trying to load from ../model_weights/angle_regressor4
==> Resuming model trained for 7 epochs...
2050897_20201_2_0,pf9upo4icz,1.8586890445273887,-90.02213006386833,-41.58900730284067

4533571_20201_2_0,pfdiqo4icz,2.052967224324069,-72.68612135162982,-41.206305019958805

2644662_20201_2_0,pfj8ko4icz,-1.3508773565538708,-70.77364467118355,-35.2888849606008

5982458_20201_2_0,pfkpan4icz,-1.7565638703727637,-125.27235454699687,-19.119984987872925

4193848_20201_2_0,pfl5cn4icz,0.3593090567143164,-73.62089347928352,-26.36548128104478

3589141_20201_2_0,pfmp4p4icz,-0.8769062904695526,-72.53393016457576,-11.82071273237473

1329439_20201_2_0,pfo29p4icz,0.6248308060658471,-125.48368203557303,-52.45477152089077

2706704_20201_2_0,pfyvwn4icz,-1.501845553489228,-96.16075810177404,-28.718047556613257

1667269_20201_2_0,pfzaco4icz,-2.7398688438332384,-64.66678401891417,-43.64819029253535

1891364_20201_2_0,pg5i4o4icz,0.27074133241712783,-127.54771458812908,-44.65501413012552

5466137_20201_2_0,pg6i8p4icz,0.8092759343064737,-88.6149671732586,-37.875378931449234

3131985_20201_2_0,pg79wn4icz,0.4378495205580827,-87.82453976216189,-41.13548214553353

3147250_20201_2_0,pg860p4icz,-1.4740652625003967,-65.03958210094305,-39.17926523171434

3679103_20201_2_0,pgdbno4icz,-3.5716803624585274,-142.31515588251793,-4.515168970747823

2941852_20201_2_0,pgf8to4icz,-1.3673288340018475,-74.20185502216447,-24.553019976274953

3747258_20201_2_0,pgfjio4icz,-1.450960319795567,-82.58760678637532,-3.491794767569644

5423406_20201_2_0,pglpao4icz,-1.8134348841585168,-118.83795676282406,-23.237387462641436

4436104_20201_2_0,pglyfo4icz,3.822050289043188,-77.93254541128397,-56.49608763646691

1287562_20201_2_0,pgt8to4icz,5.130350393672085,-27.1671021072992,-60.961190084525185

4255962_20201_2_0,pgzaan4icz,-1.109549040322886,-92.91255497364435,-24.540503818926283

4342290_20201_2_0,ph18eo4icz,-0.05129673565214141,-79.94482663811945,-19.24758769309065

2771230_20201_2_0,ph1xdo4icz,-1.0281911783700006,-114.8664095562606,-27.244082763214763

4406673_20201_2_0,ph2ivn4icz,0.14037043224211052,-100.78066081113712,-31.184330921312664

4900025_20201_2_0,ph4hgn4icz,-0.3896217917746883,-115.12584503086904,-43.67087953142179

2934626_20201_2_0,ph4lep4icz,3.064660613096363,-90.12921383449239,-50.28023504243917

3399551_20201_2_0,ph4lpo4icz,0.0065970849685748414,-96.39121729387139,-31.88941242499577

1656018_20201_2_0,ph4t0p4icz,-0.6946507262913558,-128.15854821883767,-34.415753111624525

5856917_20201_2_0,ph5abo4icz,1.3669365926516126,-83.27166192420219,-40.21011196780046

5559386_20201_2_0,ph6spo4icz,-0.584760292069055,-153.83661743740328,-27.25541256249545

3457312_20201_2_0,ph767p4icz,1.0345077447538815,-61.64084629769641,-52.93148095294893

1338544_20201_2_0,ph7ypo4icz,-0.3690674096416662,-103.78603210691338,-63.27251934538069

4726076_20201_2_0,phbgan4icz,1.0482964658480374,-103.47699494609455,-39.66371033597257

1062753_20201_2_0,phe1ho4icz,0.6837974608731695,-99.6826050285078,-15.711448011787397

3655154_20201_2_0,phet8p4icz,1.1126888796858827,-82.07449950340674,-45.22660385419472

2960373_20201_2_0,phkkap4icz,-4.222420800081242,-119.9427041113949,-20.815182310231208

5648150_20201_2_0,phshko4icz,-0.42707941960817947,-103.23643989001928,-38.84346723063902

1142074_20201_2_0,pht7hp4icz,7.765330832045699,-70.19593345856703,-76.89273681349772

3284296_20201_2_0,phtwxo4icz,-0.6607149370943844,-90.54338106232507,-24.089462301722193

4738274_20201_2_0,phzhxo4icz,2.5378748891032687,-44.5885380339912,-62.92909341174615

2129340_20201_2_0,pic2eo4icz,1.1797860404289615,-90.22276666190572,-33.16701790238869

4410171_20201_2_0,pidu9o4icz,1.9299380848410834,-106.27291668165313,-34.08555663771948

3822469_20201_2_0,xc3u0o4icz,0.8051974683686567,-73.02281265613698,-41.561359753629034

3311670_20201_2_0,pijb3o4icz,-0.18164932247557153,-103.5980031523498,-34.73903112341155

4438276_20201_2_0,pik23p4icz,0.7396010792983453,-99.71724453326857,-36.901986480599845

1162184_20201_2_0,pin47p4icz,0.46623796674038537,-77.45457842877173,-54.855519707213006

4247360_20201_2_0,piptho4icz,-4.18808687140388,-80.76186948583168,0.8944274301560142

2951962_20201_2_0,pisfkn4icz,-0.8814774025260517,-77.01387404614664,-52.99392639549262

4231852_20201_2_0,pivcwn4icz,-0.39014087648782947,-85.41975068217488,-43.48158171194302

3836348_20201_2_0,pj27do4icz,1.5166452547250304,-61.60367727868618,-43.55152349809495

3250593_20201_2_0,pj2bso4icz,-3.0290852793960177,-111.12142254465678,-22.731166158176663

5728795_20201_2_0,pj4h0o4icz,-1.6799130854248125,-142.74271629398947,-9.782832053770107

2804473_20201_2_0,pj5qwo4icz,-1.4503838217727394,-81.82503982650167,-29.736777230724712

5422251_20201_2_0,pja8cp4icz,0.4355947709102385,-110.21667148211287,-35.0448970185319

4027730_20201_2_0,pjbv8p4icz,11.342961434308155,-28.192227045837967,-107.17784150826114

5328600_20201_2_0,pje5fo4icz,-1.4841875612559463,-84.92111550837066,-16.598980980647582

2414155_20201_2_0,pjegfo4icz,-2.6254711190390734,-150.91183854482372,-18.03515801005497

5820294_20201_2_0,pji64o4icz,0.45817870140161476,-66.99817595046912,-35.72778111293589

4595894_20201_2_0,pjjrmo4icz,1.3773721045382814,-98.74473944602363,-48.29233741179266

5425830_20201_2_0,pjmasn4icz,-1.9519171435879064,-94.1792927955745,-19.75707084728245

1658684_20201_2_0,pk3msn4icz,-0.06206690740715451,-85.51396232532198,-33.92744949628495

1075368_20201_2_0,pk57fp4icz,-49.881929784195215,9.839640610221807,239.9684631051598

5021995_20201_2_0,pk8vun4icz,-0.9547999026949802,-109.66588379533064,-21.627362824167136

4490005_20201_2_0,pkabuo4icz,-0.04775575402851484,-78.33109894795726,-41.402645460930174

3252905_20201_2_0,pkeb3o4icz,-112.73788008932382,495.77868268981285,301.93343178434986

1977841_20201_2_0,pkihbo4icz,0.6271310374804949,-74.89160406552324,-36.92086927431757

1321642_20201_2_0,pkkpzo4icz,2.315567245357314,-134.78101112071906,-62.670987408532

4773086_20201_2_0,pkoaon4icz,0.38425851240488873,-146.0225217740821,-42.63073924545151

3810526_20201_2_0,pkpf5p4icz,51.222504257646,-154.1855191510964,39.401358998552084

4969254_20201_2_0,pkwwvo4icz,1.1646617883268808,-146.8750137714394,-53.58523385600368

5857129_20201_2_0,pky55p4icz,-0.2978124472014388,-87.26675717541124,-36.99634278703945

2821431_20201_2_0,pkzcco4icz,-0.29956399523296784,-78.91042718930274,-39.755382683309875

3712865_20201_2_0,pl53gp4icz,2.653534561805916,-97.41021266202694,-53.959415792587464

2820224_20201_2_0,pl867o4icz,2.7283105819304776,-73.80759070107098,-57.282051326971924

4286849_20201_2_0,pla3fp4icz,-1.8587500450342453,-130.7922645737132,-20.11623591621631

4015631_20201_2_0,plethp4icz,1.264076067740138,-88.4478476289315,-34.12420417937143

4259718_20201_2_0,plewmo4icz,-0.6155290732640364,-101.21666912586369,-38.168486892217146

3879468_20201_2_0,plf1ko4icz,-0.07829690242698868,-111.71071605545075,-32.6976202496237

3500777_20201_2_0,plffgo4icz,-1.7045660892904537,-103.09164172508727,-25.066895488273673

5648359_20201_2_0,plfoeo4icz,2.0163219786540583,-63.65929516421323,-43.68976165850728

3257221_20201_2_0,plj2tn4icz,0.2663638393011293,-158.1419601175371,-28.168487622065925

4471372_20201_2_0,plqdbo4icz,-1.3752217665926563,-91.41006949092792,-47.25516512888791

1590192_20201_2_0,plrubp4icz,-3.4504950062061672,-117.63540409271957,-14.540857469165132

1208701_20201_2_0,plu9bn4icz,-11.739444629227432,-119.8824000698875,27.42503636031698

1780771_20201_2_0,plvotn4icz,3.480238440059395,-111.54245583408382,-62.26816798230044

4209784_20201_2_0,plzldp4icz,-2.660856038830568,-117.11377906832547,-36.59272702526221

3797220_20201_2_0,pm1yeo4icz,1.1836141815690941,-114.62682478294599,-45.94087399357399

4802131_20201_2_0,pm4lbo4icz,-1.6522359291697233,-80.64447484160513,-32.90748054573032

2967488_20201_2_0,pm7d3o4icz,1.0111584106525469,-109.63783392437801,-50.0815441450095

3674235_20201_2_0,pm7r6p4icz,-1.0596879034629256,-71.60649037810202,-27.25046795930919

4541376_20201_2_0,pmir8p4icz,1.0578799554710343,-88.8212628922586,-54.596848306095

2765499_20201_2_0,pmjsro4icz,-0.10092678180723602,-109.63568365717418,-20.716045164428124

1308577_20201_2_0,pmonfo4icz,1.8854087359837828,-91.90379010340038,-56.776125829087704

5479203_20201_2_0,pmqiap4icz,-0.6054654932452366,-96.46782349974475,-25.286988501000693

1792072_20201_2_0,pmr09o4icz,-1.8332231430483137,-64.64217156371728,-16.774418045651544

5877503_20201_2_0,pmx42o4icz,0.45173710466482103,-81.3059465667821,-39.00707156787783

3741044_20201_2_0,pmxeco4icz,2.630339289568425,-104.96616818315795,-47.38488398002434

1382558_20201_2_0,pmxreo4icz,0.8446554231226107,-125.0153246553817,-32.65351296281031

3955273_20201_2_0,pn08uo4icz,0.7093025327676103,-61.6936560837745,-59.49694018569065

2923587_20201_2_0,pn18yo4icz,2.421295195386536,-74.1385493706342,-39.63112019441418

5673379_20201_2_0,pn3uuo4icz,-24.819590731357913,-21.968331273096226,36.509078641701905

1558758_20201_2_0,pn49fp4icz,-0.6508016026118223,-139.6415300769341,-30.660054210237362

3798423_20201_2_0,pnav6p4icz,1.8010364422796141,-93.54188984754984,-44.17433406855275

6016835_20201_2_0,pncdwn4icz,-0.8066168681724752,-131.98835801290397,-38.63905856699945

3207555_20201_2_0,pnfk3o4icz,1.1080100559648862,-71.31726263307706,-44.438451522335384

4379732_20201_2_0,pnl1en4icz,0.6546649512241886,-106.27568095476354,-35.9964501787715

4215927_20201_2_0,pnne6o4icz,0.6600616650742982,-75.13573640522068,-48.75389899875492

2852547_20201_2_0,pnnkcp4icz,-1.4889319432616936,-84.63630589578196,-10.14128745142878

4026844_20201_2_0,pnq44o4icz,-83.9941013426162,402.5056657306766,506.14665365022836

5089797_20201_2_0,pnqs6o4icz,-1.1665271817636744,-87.785378163485,-26.194847640195263

2168887_20201_2_0,pnt5ln4icz,-1.8871216176160022,-151.2179843087468,-24.851638464055867

2456548_20201_2_0,po0jso4icz,-3.956321659428166,-119.64342846944143,-8.692959655006092

1684681_20201_2_0,po0qnn4icz,34.529594668729366,71.10099213693091,-160.15569077493763

1959986_20201_2_0,po2qun4icz,-2.140849225653581,-101.21665377612064,-27.889696225769526

4867989_20201_2_0,po39bp4icz,1.2170405808534208,-134.34372638759461,-40.23507673573489

3121386_20201_2_0,po5vhn4icz,-0.4964217648337187,-90.6312677123926,-44.29582440062853

5927026_20201_2_0,po7q7n4icz,-1.6035024913677327,-119.51776053151693,-28.34762759775569

1591362_20201_2_0,po8dap4icz,-3.8121097572225984,-122.8278340257502,-19.312786184312387

3198517_20201_2_0,pobspn4icz,-0.4221206930908947,-120.70711084918517,-47.65359607769284

1228740_20201_2_0,poc6in4icz,2.1899668987237857,-59.315622931994255,-46.92448453077

4315756_20201_2_0,podkao4icz,1.2853168502163201,-129.9539084230235,-24.384103322195443

3710272_20201_2_0,podm9n4icz,0.9802275517879886,-137.91339611292975,-41.111141722286135

3367664_20201_2_0,popmgp4icz,-0.054885413223788544,-60.51180299992981,-50.071751242423574

5146849_20201_2_0,poq3sn4icz,-0.27876239777267015,-103.55245856115883,-42.88263820998978

6005263_20201_2_0,poqehp4icz,-0.5879840796900815,-88.3446954506017,-36.0795675862546

5176364_20201_2_0,pov79n4icz,-4.259753897609271,-89.3168203940995,-11.702392719726845

3354611_20201_2_0,powson4icz,-2.2035413245016273,-79.05736756788042,-15.756966772581904

1615288_20201_2_0,pp9rdp4icz,0.5719656627191835,-86.6556521142881,-15.095017175006461

2111070_20201_2_0,ppc1ip4icz,0.7244452846629629,-104.98516607185897,-46.007339991433824

4124002_20201_2_0,ppdiun4icz,-0.09472618907683172,-140.0126309496021,-17.942921330610403

1702798_20201_2_0,ppev5o4icz,0.38008659543676127,-114.2903653552315,-36.481010907753785

1935726_20201_2_0,ppfubo4icz,1.8924982200021316,-104.70736250610364,-35.012237796311325

3919656_20201_2_0,ppg0ap4icz,1.7453270212620364,-70.77713701770512,-72.0811568537035

1692710_20201_2_0,pphonn4icz,18.128776938518225,-55.98943695333671,-113.72775524055918

1974087_20201_2_0,ppi0rn4icz,-2.3782327718369385,-109.45799714106576,-12.239840485247797

2091229_20201_2_0,ppl7pn4icz,-4.911256662870366,-109.63909771876607,-20.54362879512297

1390150_20201_2_0,ppmaqo4icz,0.913626650195152,-104.94670215110173,-29.467383540186816

5262265_20201_2_0,ppnkap4icz,-2.594586485611548,-126.52334061843689,-3.3306915832129533

5294683_20201_2_0,pporhp4icz,-1.350945732869146,-95.29033412800342,-29.46495313846748

2573931_20201_2_0,ppqv9n4icz,-2.0768552730335124,-121.07542185050934,-20.24084511536674

1261296_20201_2_0,pptp5o4icz,-2.019968712316324,-106.31332886872269,-16.088702087870388

2016493_20201_2_0,ppxkbo4icz,-1.655493518022493,-95.08874937175884,-23.987711910241558

3477277_20201_2_0,ppy2fn4icz,-1.15076779988139,-131.92562084899504,-20.979641826863286

5619348_20201_2_0,pq0oap4icz,0.6733541760403187,-83.71555675779064,-48.07936457602882

2570427_20201_2_0,pq2h7p4icz,0.5423996887338581,-93.34427628708761,-45.582577062583

4049878_20201_2_0,pq30xo4icz,0.7584075726296691,-85.90774192431971,-54.95528286072056

3203542_20201_2_0,pqbh0p4icz,1.5034172880471341,-121.65561209286895,-59.91656983709257

1751337_20201_2_0,pqd2ap4icz,0.8186505721993695,-98.66810247382043,-40.37724766666611

1925179_20201_2_0,pqfqbn4icz,-0.0893608808486944,-105.3288184321529,-43.2817443288811

1651072_20201_2_0,pqgrzo4icz,3.0645172700508634,-60.85661224740545,-62.332794241325175

2714160_20201_2_0,pqhspn4icz,-2.852165975222829,-77.17361398379245,-14.908087899477891

4129217_20201_2_0,pqk1qn4icz,-3.774394205335365,-129.39759062336012,-4.411812738877288

2357084_20201_2_0,pqwo9o4icz,-1.9448945911921307,-95.0333335757791,-27.488070763253546

3117043_20201_2_0,pqxlqn4icz,-1.3323505812838556,-126.19618907416611,-43.575499956818675

6021592_20201_2_0,pqzgjo4icz,-1.1493045678977856,-98.45219612298041,-29.94812006582721

2201082_20201_2_0,pqzgln4icz,5.367580033119649,-99.35907898079859,-75.83731362509951

3382623_20201_2_0,pr2abo4icz,7.376904781096395,-38.27264392010403,-80.28645909140432

2483448_20201_2_0,pr8hno4icz,0.5340095946123633,-91.31432656889007,-37.481188988751256

3587758_20201_2_0,prd58o4icz,-0.2882774929377521,-65.21820439434003,-33.625136241256726

2628703_20201_2_0,pridpn4icz,4.530110955289456,-117.53952695654172,-55.74405149314711

4850298_20201_2_0,prlsin4icz,1.6263411561706105,-94.58878556290972,-41.73392865993851

2115236_20201_2_0,prmv6p4icz,2.7095144940360956,-67.01643081338361,-84.46186914064569

5788191_20201_2_0,pro6ko4icz,1.2748356223140103,-98.01123577538726,-45.06229085989557

6014672_20201_2_0,pru79n4icz,0.05512933029896299,-100.42764206947862,-42.713665629620536

1172436_20201_2_0,pruc8p4icz,-1.097430358659692,-105.60272761384886,-36.21302285790843

4478746_20201_2_0,ps1ggp4icz,1.676099581628805,-51.14808373421525,-67.50959081007815

4578472_20201_2_0,ps3qlo4icz,-0.19937642384849932,-81.95109934513997,-27.88001923782585

4851446_20201_2_0,ps55xo4icz,-1.0881538350800735,-101.04976660849542,-25.10764964306469

3411281_20201_2_0,ps567p4icz,-0.7622144347187152,-74.85578648170002,-38.9109414083259

2983285_20201_2_0,ps6x6o4icz,3.447811475404573,-93.80057411635363,-40.21602981127029

2211134_20201_2_0,psas7p4icz,-0.4613685166098714,-58.6135327922774,-62.50195815207657

1647824_20201_2_0,psbjko4icz,-1.4171750206825218,-164.79890023239264,-34.700374636015525

3801723_20201_2_0,psc7sn4icz,5.178894184139191,-86.9710217189457,-67.54846173975714

4088678_20201_2_0,psedtn4icz,-3.1591709941822326,-100.82934200535792,0.10980919554312152

1672985_20201_2_0,psfr6p4icz,1.6216345314066376,-120.80162194129309,-51.61367653517206

1022571_20201_2_0,psgg6o4icz,10.606173823998732,-41.06360215801391,-80.10304583768537

5097289_20201_2_0,psi5en4icz,0.783784564573619,-90.95234162520879,-47.277187304249395

3792801_20201_2_0,psqq2o4icz,-1.9311129710573507,-92.28394921710105,-30.586209450522645

3416202_20201_2_0,psvnao4icz,3.9002382629881844,-108.73545150576712,-61.776670187110895

1469246_20201_2_0,psx6fn4icz,-0.930416585923209,-89.70008425308836,-36.85992970197903

3483062_20201_2_0,psyq9o4icz,-0.0626984519756978,-97.58395205088664,-26.005519987502495

1601056_20201_2_0,pt41qn4icz,5.029757434642296,-110.82459007355567,-43.0735104434861

2432151_20201_2_0,ptf0lo4icz,-3.9944640154893825,-81.51203887308915,-15.70551694544423

4828829_20201_2_0,ptifep4icz,-1.9348767906245874,-41.550607507763516,-26.18642692514834

2899052_20201_2_0,ptkotn4icz,-0.6821408249833808,-135.71683875763748,-28.733255864728562

1063636_20201_2_0,ptl6ko4icz,-12.349432521328263,-148.2383049529601,19.78360803619529

1069738_20201_2_0,ptmutn4icz,35.29517260214043,81.11611007716209,-163.0804130542378

2237464_20201_2_0,ptphmn4icz,-10.475025740616186,-95.29577167373134,13.754447933318914

3045113_20201_2_0,ptr4vn4icz,0.21189995152889324,-96.74134623141455,-44.49062525162219

1206977_20201_2_0,ptvsbp4icz,1.4684456526167122,-116.77400674898033,-45.12975293762662

3998260_20201_2_0,ptykwo4icz,-2.8425633591283668,-77.31463222049894,-21.43550647705753

3219016_20201_2_0,ptzcap4icz,-1.5268528881066605,-111.44861329006156,-33.85303478202215

1233290_20201_2_0,ptzuqn4icz,-0.08978026768843729,-105.72769160382444,-26.308262083076656

4617090_20201_2_0,pu5hco4icz,-36.146735747261594,49.69812087224466,367.40375389418386

4855224_20201_2_0,pu77so4icz,-0.20338042812266968,-83.70043937471186,-32.39425248990689

2311294_20201_2_0,pu7jgo4icz,4.992143044056644,-47.21080663153327,-49.15156428440309

3565596_20201_2_0,puirfo4icz,-0.838075353671796,-96.86960702554558,-35.433371369059614

1163475_20201_2_0,puvqvo4icz,0.8400852755541525,-79.35428028069072,-48.965152397913144

2929896_20201_2_0,puwb6n4icz,1.3521530322106305,-85.88982197439017,-55.772615392407886

4267857_20201_2_0,puxtco4icz,-2.8488548063540655,-106.11619999498217,-14.770752221129001

3461060_20201_2_0,pv2ffp4icz,0.7705731404729325,-83.2633990787547,-43.41665102897046

5791495_20201_2_0,pv56lo4icz,-2.847644986689017,-144.7269201405827,-42.42940706300169

4922778_20201_2_0,pv6xfo4icz,0.09814331852561992,-91.51509777191546,-42.37052772500283

4993633_20201_2_0,pv7hmn4icz,-2.1865258343031537,-107.50770493307888,-25.88562403193059

5363778_20201_2_0,pv7seo4icz,-1.4016061879296835,-124.69873240605574,-27.566014784614865

1676396_20201_2_0,pvaolo4icz,6.726463112369852,-102.09411489769974,-59.14910212312029

4168404_20201_2_0,pvaydo4icz,-3.650514376414028,-121.6822526709824,-34.21924391641387

4030563_20201_2_0,pvo09n4icz,0.7774006090308788,-82.41421948143926,-51.61326735578983

3252655_20201_2_0,pvrpnn4icz,-1.7161906511365537,-88.42307698895249,-42.21446473192391

3663102_20201_2_0,pvtwmn4icz,3.188228854186642,-87.65993709170507,-57.72106432102282

3244343_20201_2_0,pvu3ao4icz,-0.35629168085901547,-105.82340851364279,-33.278901309801

4255774_20201_2_0,pvwmkn4icz,-1.2354668413559102,-64.19096402891432,-33.15384395368035

4931694_20201_2_0,pw0h7o4icz,-3.795150295700802,-118.58402484723106,-16.170150327312655

4652857_20201_2_0,pw0r2p4icz,-0.08996466993469451,-74.77583536989872,-27.198267070458556

2713941_20201_2_0,pw1tsn4icz,1.2587747360688875,-101.18856777075351,-36.47628961916223

3550653_20201_2_0,pw47un4icz,-0.9013998411006638,-124.7991704355087,-38.44435767990328

5334986_20201_2_0,pw99ao4icz,1.8552177348624979,-80.61793977887714,-40.09791939395427

1070469_20201_2_0,pw9c4o4icz,1.9189788534880636,-72.8517203800807,-41.23063283508003

2561292_20201_2_0,pwau7p4icz,-1.739827807737042,-107.89694209658776,-33.74696016616579

4271171_20201_2_0,pwb8do4icz,-0.673804427869958,-88.81265770054958,-20.8129332011205

4534215_20201_2_0,pwch0p4icz,-1.1931488301979774,-152.4848506920925,-35.217520740280804

2458723_20201_2_0,pwdzun4icz,-0.9924456817873407,-111.49987741396635,-21.182167193894756

1066749_20201_2_0,pwhzhp4icz,1.0345623357986857,-93.31083283844924,-53.31607544994807

5888177_20201_2_0,pwiufn4icz,-1.2139160815649417,-151.72522277932936,-18.9201862956249

1617744_20201_2_0,pwnuip4icz,-2.7323288824754464,-81.76148779754183,-48.074323911633215

4593188_20201_2_0,pwpdpo4icz,-2.1941683499337565,-76.42722490131777,-23.800525148473994

2961709_20201_2_0,pwqgun4icz,-2.356540922628378,-66.2892960959847,-14.368635451254463

5773112_20201_2_0,pwra4p4icz,0.6459149452224658,-132.75341261261582,-48.80845864700291

4178204_20201_2_0,pws8bp4icz,0.513122499401292,-62.88989838452284,-44.4373421568863

3056077_20201_2_0,pwtydp4icz,-1.0100823482337673,-75.46285329529309,-42.977018784368994

2547913_20201_2_0,pwx9in4icz,-0.9015357696245726,-108.64578902186082,-28.929062503929813

1307040_20201_2_0,pwz4gp4icz,-0.12759910400917432,-100.0917584301256,-44.8318325996532

2888865_20201_2_0,px2zuo4icz,-0.7264237129220702,-52.2871627926466,-27.072450044738616

5416559_20201_2_0,px35bo4icz,0.2959569003124109,-93.2856093210516,-34.67977994131603

3850563_20201_2_0,px4j7p4icz,-2.9814290705842708,-120.08165887182975,-19.33876267662079

2303593_20201_2_0,pxdwbo4icz,4.7427756591507055,-67.99347220814383,-42.639219125159656

5473283_20201_2_0,pxercn4icz,-2.044497706643401,-79.03247228049719,-20.486561744102403

5498919_20201_2_0,pxhifp4icz,0.9618283053076755,-102.44280089892214,-69.34519589466174

1136438_20201_2_0,pxiybp4icz,-1.11704979223003,-95.35459113284475,-44.02494354004317

4827533_20201_2_0,pxj9lo4icz,-2.4933831306089385,-104.61391651687245,-28.953252076274396

5240185_20201_2_0,pxr5en4icz,0.6133874221916145,-64.96951048583273,-53.43608049184397

2188367_20201_2_0,pxs5nn4icz,-0.2858263504679679,-126.7456455256845,-28.861878109941884

2026245_20201_2_0,pxxb0p4icz,1.9053866426539634,-41.856892980476744,-43.936930525807696

5715412_20201_2_0,pxyepn4icz,-0.5763037128586033,-118.05870657764032,-32.243118427720034

1235616_20201_2_0,py1mao4icz,4.713957226615891,-58.446137364259386,-86.16810745011207

3747971_20201_2_0,py5y9o4icz,-0.26438548982200677,-142.88305718579846,-24.723084111756492

5459146_20201_2_0,py65ao4icz,0.5072154591797726,-101.08575714029982,-46.492487305704415

4006575_20201_2_0,pyfc4o4icz,0.9560119438269851,-82.61310234110402,-39.16188580343268

5230215_20201_2_0,pyiyvo4icz,0.9555452782485067,-89.88010659902204,-38.51812792353125

2293283_20201_2_0,pyizzo4icz,0.01905520258235991,-111.92255275674981,-34.59639225097976

4109027_20201_2_0,pyriln4icz,-1.2382034226652414,-85.23675299158018,-32.70671330263035

4033282_20201_2_0,pyvsto4icz,-0.04399916876402987,-89.45894549442676,-32.17077646400962

2094822_20201_2_0,pyz4ro4icz,8.084992211949544,-19.04191419871961,-75.54594564601558

5791256_20201_2_0,pz0fhp4icz,-0.8195421844667431,-131.00083233570643,-43.80579396596687

2589603_20201_2_0,pz13vn4icz,0.5948226886249344,-101.71518001745287,-32.39603282798765

2703171_20201_2_0,pz1imn4icz,-2.784214379467622,-140.81473580848214,-14.00763694162194

1413505_20201_2_0,pz394p4icz,-3.413077170455572,-58.72870004026424,-36.91807073517862

5767919_20201_2_0,pz3f8p4icz,0.8251347669743893,-104.9276499520094,-61.86302541141191

5978720_20201_2_0,pz5cvn4icz,-0.5564114013198869,-131.64621475242546,-47.483922956983406

5121282_20201_2_0,pz5q3p4icz,-2.1450577566636904,-125.54138594911487,-25.474466382119772

3869733_20201_2_0,pz698p4icz,-1.722487360469551,-91.95013750435646,-42.06514797843417

3666334_20201_2_0,pz7bun4icz,0.3587304362109943,-86.70281737506585,-30.860387042995427

5430856_20201_2_0,pz8z3p4icz,-0.4361537618440766,-86.78242999120832,-33.25858670113128

2625982_20201_2_0,in22cn4icz,0.2574649972350783,-131.6284764527626,-42.1428380286051

3452231_20201_2_0,pzjd5o4icz,-0.6055543971501818,-110.68327544178806,-46.53796393995893

2191918_20201_2_0,pzjemo4icz,3.4361053239289876,-69.68131791875419,-79.51088428767149

3238346_20201_2_0,pzqq7o4icz,1.3423086214808344,-92.3310042201337,-38.0169067967869

4756865_20201_2_0,pzs27p4icz,1.1430015203534183,-77.98449787399099,-28.66433403299291

1070491_20201_2_0,o4nino4icz,1.5535612006895518,-97.59586378035593,-46.74008195190996

1962932_20201_2_0,pzvshn4icz,-0.7664730180789541,-78.10480757590031,-37.13828438138734

1061644_20201_2_0,q05x6o4icz,-0.9518807578983193,-110.39335883687588,-26.200033940057907

5502218_20201_2_0,q0ajwo4icz,-1.1110820512156292,-96.48124331336638,-25.709009401012352

3645158_20201_2_0,q0aqso4icz,4.257312722907918,-50.81243746089308,-74.64222205291634

1311583_20201_2_0,q0gv8o4icz,2.4993973597627175,-82.2195952087495,-43.83885659425819

2282068_20201_2_0,q0hafo4icz,1.453287028997011,-73.78896119280785,-36.77143493836718

5689075_20201_2_0,q0hmcn4icz,160.26584513856542,847.9765262013393,123.72909376265665

2879568_20201_2_0,q0huko4icz,0.15848856927953148,-78.87135017163703,-34.246451131999365

2918526_20201_2_0,q0jv9n4icz,-1.2806745222822025,-98.34007688296492,-19.515605307254418

2035153_20201_2_0,q0rgen4icz,-8.786484899666005,-140.32102126879607,16.425934701575244

2963962_20201_2_0,q108cp4icz,-0.7844389104097412,-81.6538826140345,-31.42916450285483
 46%|████▌     | 373/811 [10:58<14:24,  1.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 374/811 [11:00<13:32,  1.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 375/811 [11:01<12:44,  1.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▋     | 376/811 [11:03<12:30,  1.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▋     | 377/811 [11:05<12:11,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 378/811 [11:06<11:36,  1.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 379/811 [11:08<11:05,  1.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 380/811 [11:09<11:21,  1.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 381/811 [11:11<11:25,  1.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 382/811 [11:12<11:08,  1.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 383/811 [11:14<11:09,  1.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 384/811 [11:16<11:31,  1.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 385/811 [11:17<11:35,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 386/811 [11:18<10:14,  1.44s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 387/811 [11:20<10:22,  1.47s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 388/811 [11:21<10:42,  1.52s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 389/811 [11:23<10:39,  1.52s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 390/811 [11:25<11:36,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 391/811 [11:26<11:17,  1.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 392/811 [11:29<12:46,  1.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 393/811 [11:31<13:42,  1.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▊     | 394/811 [11:33<13:55,  2.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▊     | 395/811 [11:35<13:35,  1.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 396/811 [11:37<14:30,  2.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 397/811 [11:40<14:45,  2.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 398/811 [11:42<14:46,  2.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 399/811 [11:44<14:30,  2.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 400/811 [11:46<14:46,  2.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 401/811 [11:48<13:21,  1.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|████▉     | 402/811 [11:49<12:28,  1.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|████▉     | 403/811 [11:51<12:06,  1.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|████▉     | 404/811 [11:53<12:06,  1.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|████▉     | 405/811 [11:56<15:29,  2.29s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 406/811 [11:58<14:29,  2.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 407/811 [11:59<13:11,  1.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 408/811 [12:02<14:24,  2.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 409/811 [12:04<13:47,  2.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 410/811 [12:06<12:56,  1.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 411/811 [12:07<12:21,  1.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 412/811 [12:09<12:33,  1.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 413/811 [12:11<12:46,  1.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 414/811 [12:13<12:27,  1.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 415/811 [12:15<12:29,  1.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████▏    | 416/811 [12:17<12:02,  1.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████▏    | 417/811 [12:18<11:40,  1.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 418/811 [12:20<11:52,  1.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 419/811 [12:22<12:15,  1.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 420/811 [12:24<13:12,  2.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 421/811 [12:27<13:59,  2.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 422/811 [12:29<14:06,  2.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 423/811 [12:32<14:57,  2.31s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 424/811 [12:33<13:38,  2.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 425/811 [12:35<12:44,  1.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 426/811 [12:37<12:20,  1.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 427/811 [12:39<12:08,  1.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 428/811 [12:41<11:56,  1.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 429/811 [12:42<11:31,  1.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 430/811 [12:44<11:04,  1.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 431/811 [12:46<10:58,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 432/811 [12:47<10:19,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 433/811 [12:49<10:22,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▎    | 434/811 [12:50<10:11,  1.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▎    | 435/811 [12:52<11:19,  1.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 436/811 [12:54<10:39,  1.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 437/811 [12:57<13:20,  2.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 438/811 [12:59<12:06,  1.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 439/811 [13:00<12:01,  1.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 440/811 [13:02<11:00,  1.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 441/811 [13:04<12:21,  2.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▍    | 442/811 [13:06<11:49,  1.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▍    | 443/811 [13:08<11:10,  1.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▍    | 444/811 [13:09<10:29,  1.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▍    | 445/811 [13:12<11:52,  1.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▍    | 446/811 [13:14<11:40,  1.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▌    | 447/811 [13:15<11:26,  1.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▌    | 448/811 [13:17<11:25,  1.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▌    | 449/811 [13:19<10:48,  1.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▌    | 450/811 [13:21<11:48,  1.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 451/811 [13:23<11:34,  1.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 452/811 [13:25<12:24,  2.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 453/811 [13:29<14:30,  2.43s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 454/811 [13:31<14:18,  2.40s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 455/811 [13:33<13:07,  2.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 456/811 [13:34<11:36,  1.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▋    | 457/811 [13:36<10:47,  1.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▋    | 458/811 [13:37<10:15,  1.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 459/811 [13:39<10:06,  1.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 460/811 [13:43<14:02,  2.40s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 461/811 [13:45<12:45,  2.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 462/811 [13:46<11:36,  2.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 463/811 [13:48<11:12,  1.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 464/811 [13:49<09:59,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 465/811 [13:51<09:35,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 466/811 [13:52<09:14,  1.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 467/811 [13:54<08:58,  1.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 468/811 [13:55<08:50,  1.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 469/811 [13:57<09:12,  1.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 470/811 [13:58<08:53,  1.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 471/811 [14:00<09:33,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 472/811 [14:02<09:41,  1.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 473/811 [14:04<10:26,  1.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 474/811 [14:06<09:57,  1.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▊    | 475/811 [14:07<09:38,  1.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▊    | 476/811 [14:09<09:01,  1.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 477/811 [14:11<09:10,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 478/811 [14:13<09:44,  1.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 479/811 [14:14<09:57,  1.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 480/811 [14:16<10:02,  1.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 481/811 [14:18<09:14,  1.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 482/811 [14:19<08:55,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|█████▉    | 483/811 [14:21<09:11,  1.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|█████▉    | 484/811 [14:23<08:55,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|█████▉    | 485/811 [14:25<09:42,  1.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|█████▉    | 486/811 [14:26<09:30,  1.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|██████    | 487/811 [14:29<11:03,  2.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|██████    | 488/811 [14:30<09:48,  1.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|██████    | 489/811 [14:33<11:04,  2.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|██████    | 490/811 [14:35<10:44,  2.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 491/811 [14:37<11:38,  2.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 492/811 [14:39<10:49,  2.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 493/811 [14:41<09:59,  1.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 494/811 [14:42<09:13,  1.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 495/811 [14:44<08:41,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 496/811 [14:45<08:18,  1.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████▏   | 497/811 [14:46<08:00,  1.53s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████▏   | 498/811 [14:49<09:39,  1.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 499/811 [14:50<08:52,  1.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 500/811 [14:52<08:37,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 501/811 [14:55<10:35,  2.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 502/811 [14:57<10:14,  1.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 503/811 [14:59<10:51,  2.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 504/811 [15:01<10:03,  1.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 505/811 [15:02<09:29,  1.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 506/811 [15:04<09:03,  1.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 507/811 [15:05<08:26,  1.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 508/811 [15:07<08:18,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 509/811 [15:09<08:11,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 510/811 [15:10<08:19,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 511/811 [15:12<08:59,  1.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 512/811 [15:16<12:05,  2.43s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 513/811 [15:20<14:23,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 514/811 [15:23<13:53,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▎   | 515/811 [15:24<12:05,  2.45s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▎   | 516/811 [15:27<12:22,  2.52s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▎   | 517/811 [15:29<11:18,  2.31s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 518/811 [15:30<09:59,  2.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 519/811 [15:32<09:43,  2.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 520/811 [15:34<09:12,  1.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 521/811 [15:36<09:05,  1.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 522/811 [15:38<09:17,  1.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 523/811 [15:39<08:51,  1.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▍   | 524/811 [15:42<09:23,  1.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▍   | 525/811 [15:44<10:15,  2.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▍   | 526/811 [15:46<09:30,  2.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▍   | 527/811 [15:54<18:32,  3.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▌   | 528/811 [15:57<16:50,  3.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▌   | 529/811 [15:59<14:17,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▌   | 530/811 [16:00<11:48,  2.52s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▌   | 531/811 [16:03<11:50,  2.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 532/811 [16:05<11:39,  2.51s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 533/811 [16:07<11:11,  2.41s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 534/811 [16:09<10:18,  2.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 535/811 [16:11<09:25,  2.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 536/811 [16:13<09:01,  1.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 537/811 [16:15<09:06,  2.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▋   | 538/811 [16:18<10:14,  2.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▋   | 539/811 [16:19<09:32,  2.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 540/811 [16:21<08:44,  1.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 541/811 [16:25<11:39,  2.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 542/811 [16:26<10:02,  2.24s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 543/811 [16:28<09:13,  2.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 544/811 [16:31<09:51,  2.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 545/811 [16:33<10:15,  2.31s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 546/811 [16:36<10:48,  2.45s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 547/811 [16:38<10:14,  2.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 548/811 [16:40<09:12,  2.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 549/811 [16:42<09:04,  2.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 550/811 [16:43<08:34,  1.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 551/811 [16:45<08:09,  1.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 552/811 [16:47<08:21,  1.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 553/811 [16:49<07:55,  1.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 554/811 [16:51<08:22,  1.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 555/811 [16:52<07:48,  1.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▊   | 556/811 [16:55<09:05,  2.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▊   | 557/811 [16:57<08:27,  2.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 558/811 [16:58<07:51,  1.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 559/811 [17:00<07:28,  1.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 560/811 [17:03<08:35,  2.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 561/811 [17:04<07:51,  1.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 562/811 [17:06<07:35,  1.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 563/811 [17:08<07:13,  1.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|██████▉   | 564/811 [17:09<06:52,  1.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|██████▉   | 565/811 [17:11<07:47,  1.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|██████▉   | 566/811 [17:15<09:50,  2.41s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|██████▉   | 567/811 [17:17<09:10,  2.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|███████   | 568/811 [17:19<08:29,  2.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|███████   | 569/811 [17:20<07:29,  1.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|███████   | 570/811 [17:22<08:03,  2.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|███████   | 571/811 [17:24<07:32,  1.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 572/811 [17:26<07:11,  1.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 573/811 [17:27<07:04,  1.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 574/811 [17:29<06:38,  1.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 575/811 [17:30<06:38,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 576/811 [17:32<06:17,  1.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 577/811 [17:34<06:24,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████▏  | 578/811 [17:35<06:12,  1.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████▏  | 579/811 [17:38<07:52,  2.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 580/811 [17:40<07:57,  2.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 581/811 [17:43<08:26,  2.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 582/811 [17:45<08:13,  2.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 583/811 [17:46<07:31,  1.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 584/811 [17:48<06:45,  1.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 585/811 [17:49<06:41,  1.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 586/811 [17:51<06:27,  1.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 587/811 [17:58<11:54,  3.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 588/811 [18:00<10:40,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 589/811 [18:02<10:01,  2.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 590/811 [18:04<08:33,  2.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 591/811 [18:05<08:00,  2.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 592/811 [18:08<08:09,  2.24s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 593/811 [18:10<07:46,  2.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 594/811 [18:12<07:44,  2.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 595/811 [18:14<07:13,  2.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 596/811 [18:15<06:56,  1.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▎  | 597/811 [18:17<06:26,  1.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▎  | 598/811 [18:20<07:31,  2.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 599/811 [18:21<06:50,  1.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 600/811 [18:23<06:36,  1.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 601/811 [18:25<06:25,  1.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 602/811 [18:26<06:08,  1.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 603/811 [18:28<05:44,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 604/811 [18:30<06:08,  1.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▍  | 605/811 [18:33<07:59,  2.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▍  | 606/811 [18:35<07:05,  2.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▍  | 607/811 [18:36<06:30,  1.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▍  | 608/811 [18:38<06:17,  1.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▌  | 609/811 [18:40<06:16,  1.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▌  | 610/811 [18:41<05:47,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▌  | 611/811 [18:43<05:23,  1.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▌  | 612/811 [18:44<05:29,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 613/811 [18:47<06:14,  1.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 614/811 [18:48<05:49,  1.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 615/811 [18:50<05:42,  1.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 616/811 [18:52<05:27,  1.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 617/811 [18:53<05:16,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 618/811 [18:55<05:11,  1.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▋  | 619/811 [18:57<05:24,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▋  | 620/811 [18:59<06:18,  1.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 621/811 [19:01<05:43,  1.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 622/811 [19:02<05:29,  1.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 623/811 [19:04<05:35,  1.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 624/811 [19:06<05:27,  1.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 625/811 [19:07<05:15,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 626/811 [19:09<05:09,  1.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 627/811 [19:11<05:24,  1.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 628/811 [19:13<05:16,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 629/811 [19:14<05:07,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 630/811 [19:16<05:04,  1.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 631/811 [19:18<05:04,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 632/811 [19:19<05:00,  1.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 633/811 [19:21<04:56,  1.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 634/811 [19:22<04:51,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 635/811 [19:24<04:53,  1.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 636/811 [19:26<04:46,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▊  | 637/811 [19:28<05:20,  1.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▊  | 638/811 [19:31<05:51,  2.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 639/811 [19:35<07:48,  2.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 640/811 [19:37<07:16,  2.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 641/811 [19:39<06:27,  2.28s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 642/811 [19:40<05:54,  2.10s/it] 79%|███████▉  | 643/811 [19:42<05:36,  2.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 644/811 [19:48<08:31,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|███████▉  | 645/811 [19:49<07:25,  2.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|███████▉  | 646/811 [19:52<07:01,  2.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|███████▉  | 647/811 [19:54<06:47,  2.48s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|███████▉  | 648/811 [19:56<06:34,  2.42s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 649/811 [19:58<05:46,  2.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 650/811 [20:00<05:50,  2.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 651/811 [20:02<05:14,  1.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 652/811 [20:04<05:17,  1.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 653/811 [20:05<04:50,  1.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 654/811 [20:07<04:46,  1.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).

1642773_20201_2_0,q115jn4icz,0.04298914744118961,-131.41566404714717,-44.46225938828253

1877915_20201_2_0,q15vip4icz,1.3056176148116665,-52.98821530729862,-61.320375475332554

1967617_20201_2_0,q18tfn4icz,-5.14193839796756,-104.77611592658826,-26.36771023411289

2494116_20201_2_0,q1b3mo4icz,3.8911309083975185,-29.46077628488416,-61.92902985829649

3027589_20201_2_0,q1lpfo4icz,2.448686678954826,-56.23897827070158,-64.7388116148414

1984036_20201_2_0,q1m3nn4icz,3.4497473209783855,-50.80024964249404,-46.53949097786415

4507526_20201_2_0,q1q86p4icz,0.8029305862838956,-59.94639747925743,-47.20792578190941

4669087_20201_2_0,q1quto4icz,-4.58279442527949,-128.9617452011851,-12.339292802208007

2591433_20201_2_0,q1sm3p4icz,-2.5367692069750714,-125.3860931086358,-22.205412448086065

4237690_20201_2_0,q20e4o4icz,1.9532800621209072,-64.37630929761764,-54.956663344859436

3031731_20201_2_0,q25dfp4icz,0.6109560487811168,-74.40126505417518,-35.65556119782052

2688950_20201_2_0,qt0v8o4icz,-2.517577340991699,-102.30966164499921,-23.710901538716428

3983510_20201_2_0,q271bp4icz,-0.16061743330256456,-69.3592374598615,-9.759249192360272

3567268_20201_2_0,q28bgn4icz,0.7106617181307373,-116.54610783287313,-41.18007906474959

3787802_20201_2_0,34vfkn4icz,-0.8995823257715546,-87.85939516223706,-12.444501307956884

4789555_20201_2_0,q2apdp4icz,-0.4890505056810606,-96.53896038209501,-32.81369201434467

1360522_20201_2_0,q2f3mo4icz,2.406916205297381,-74.76225630790742,-58.19823568523333

3738299_20201_2_0,q2lefo4icz,0.33035877504138783,-114.11597213345891,-44.3907777926249

5385973_20201_2_0,q2pfdo4icz,-1.4658942197213793,-86.58607399209023,-41.65691302733906

4357380_20201_2_0,q2x5ep4icz,-1.7914846653021865,-100.2303627019046,-18.999887003934504

3355398_20201_2_0,q31ero4icz,-1.4041244501214032,-77.87741802784771,-52.976677676216894

5682065_20201_2_0,q33jap4icz,-3.6899056659134826,-95.57823546498986,-32.67975111114487

4843859_20201_2_0,vdys8o4icz,0.22221545392276662,-93.80794216434609,-32.7291059890635

2637125_20201_2_0,q374pn4icz,1.7226514952749388,-115.66982030030886,-35.10114726106609

3996371_20201_2_0,q3erzo4icz,-1.2909525742754588,-59.219075933713896,-32.538971100106124

4132335_20201_2_0,q3k09n4icz,-0.4429482632438818,-154.5340005923811,-39.77524892157271

5651031_20201_2_0,q3kjon4icz,0.1400437281740063,-108.74246334840907,-41.1757085997524

5281336_20201_2_0,q3m80p4icz,4.248744122189173,-82.48701094159003,-60.442390091787445

1861041_20201_2_0,q3qnvo4icz,-1.5594593013145812,-40.11045656102749,-59.60729269839685

1244297_20201_2_0,q42wen4icz,3.0376287487839244,-113.47486835015161,-72.07211882700227

2583269_20201_2_0,q4cqyn4icz,4.911587908599659,-106.24743029335991,-51.93853089083507

4321032_20201_2_0,q4cvho4icz,-1.2015822442073114,-78.77784043970044,-30.965792925471533

1917304_20201_2_0,q4deto4icz,2.125705766653448,-116.83651591881596,-35.63256881159657

1745020_20201_2_0,q4fl9p4icz,-0.4324805818964883,-83.6799775911046,-8.593298749472567

1427265_20201_2_0,q4rlxn4icz,-3.0193255184838987,-114.1687515673857,-9.553332655819503

1910586_20201_2_0,q4vgap4icz,-1.4161764529369625,-97.44244941650172,-27.685444172136243

3769316_20201_2_0,q4vtuo4icz,3.131840036726309,-50.579455185019526,-64.70261345807955

1309805_20201_2_0,q50qjp4icz,-47.41637215615747,-136.20776545375185,254.28165765626892

3096364_20201_2_0,q514ln4icz,0.029285922887069788,-90.05768994260296,-32.71966618516501

1875958_20201_2_0,q53vdo4icz,-0.5194643867745716,-111.79762234480805,-47.430618460175054

2129056_20201_2_0,q58tbp4icz,0.6580830842171819,-95.934403064635,-46.18043104286639

4317544_20201_2_0,q596ro4icz,-0.6947079225866847,-105.23722320292418,-23.829633229135453

5678360_20201_2_0,q5c8kn4icz,2.6600011466999067,-99.52915059080067,-61.435288819725386

3760297_20201_2_0,q5ge8p4icz,-1.3886397304855096,-126.48995523613291,-55.45630138757629

3827874_20201_2_0,xy6rqn4icz,0.4236345835040629,-88.61728762014329,-43.518256585909796

4251538_20201_2_0,q5imap4icz,-0.6761962495954175,-86.42871131386329,-40.043502238005246

5332198_20201_2_0,q5iqen4icz,-1.65322395707458,-80.01129983213931,-20.61324274407187

2467439_20201_2_0,q5k5cn4icz,-0.9987860987804387,-148.83274217813909,-30.647269120002306

5696286_20201_2_0,q5l5oo4icz,4.392533156917729,-98.42865297054135,-49.041673973263855

5529805_20201_2_0,q5to3p4icz,1.2355138484237518,-43.65403295979473,-33.64717991752114

4492420_20201_2_0,q5unqo4icz,-1.6621621444559767,-88.36519971315792,-39.20556484158378

5466137_20201_2_0,pg6i8p4icz,0.8092759343064737,-88.6149671732586,-37.875378931449234

3389858_20201_2_0,q6098o4icz,0.5572694408121797,-86.54664023209082,-49.17187798792456

2572698_20201_2_0,q6519p4icz,0.4062456018350534,-83.08031251499847,-44.75423890161919

2441744_20201_2_0,q6afwo4icz,-0.11301016854512597,-62.358796545929806,-36.595358144043274

3759357_20201_2_0,q6dr4p4icz,-0.5244781535947364,-137.61036801050528,-42.747787582477244

4371090_20201_2_0,q6nvco4icz,0.2750474506417469,-86.96914618006198,-27.228679387215166

5914690_20201_2_0,q6rvun4icz,2.4243156865399187,-79.70191817567155,-27.45401127264404

4362549_20201_2_0,q6uaqn4icz,-0.8642913642032699,-131.305267529039,-31.062419708747385

1856238_20201_2_0,q6utpn4icz,-3.2989537114703076,-116.05930298853798,-11.578897896345154

5375691_20201_2_0,q6vmep4icz,-4.720876226634123,-142.62785620479178,-19.5541587825778

5003615_20201_2_0,q700nn4icz,0.3753575128164543,-125.49834520052553,-11.94199985652611

3080538_20201_2_0,q71pmo4icz,0.7274492736185159,-82.78830950776006,-14.165435569636017

4344965_20201_2_0,q7269n4icz,2.1910195928480034,-70.42724783441795,-52.59698062327816

2769801_20201_2_0,q73wwn4icz,-1.0301627695624063,-89.46211531411777,-26.692299706931493

3245636_20201_2_0,q74oqo4icz,-1.4849463286112183,-143.75363064412042,-16.035602186251708

3961055_20201_2_0,q7fgmo4icz,-5.951950795864738,-108.37126033165521,11.1769270375016

3815923_20201_2_0,q7ka9p4icz,-0.5181016957486103,-71.610305703297,-22.499443277496823

1570800_20201_2_0,q7kafp4icz,1.9264561106828746,-102.19492374069992,-27.119118008558644

5191432_20201_2_0,q7n78p4icz,2.547013269711587,-53.53441945041547,-43.03882989851779

5764596_20201_2_0,q7ocao4icz,-0.9297059170162448,-86.0660653786575,-32.2088397924678

1860729_20201_2_0,q7s0no4icz,1.4736334497990797,-91.61044265414569,-18.15556380992311

2568211_20201_2_0,q7x2oo4icz,-1.7490701779783857,-69.40087782436117,-25.606374733984403

2597711_20201_2_0,q7zjvn4icz,-2.7803823544792032,-145.786111855274,-4.1631487118224015

4833036_20201_2_0,q821kp4icz,6.21801812628666,-88.2113261961425,-73.80280723517018

5256974_20201_2_0,q856in4icz,1.8465921717846978,-99.99082961598359,-46.097496350365375

5292646_20201_2_0,q875xn4icz,0.29742815729183536,-70.33054005398083,-20.798045808172972

5040892_20201_2_0,q89n9p4icz,3.4075090318690595,-159.22451046426193,-53.30729409047473

2067543_20201_2_0,q8albp4icz,-0.12676532399050036,-109.101432439789,-32.104395251586666

1872552_20201_2_0,q8dsyo4icz,-0.22826798470137918,-125.5419094900536,-40.88798994880864

4991500_20201_2_0,q8qedp4icz,-10.067078937642183,-129.59806523971787,20.492199912251294

1845440_20201_2_0,q8rxnn4icz,-1.1680477176457393,-83.21239673618874,-43.66567916202355

4446220_20201_2_0,q8u6to4icz,-6.321164497693203,-124.72960533469882,-1.197077277146093

4271228_20201_2_0,q8vmrn4icz,-6.632351737914848,-168.81214321912634,15.087452182923386

2694431_20201_2_0,q8w7cp4icz,-5.26544464238062,-101.2933002046905,-1.9658472587864964

4641676_20201_2_0,q8wj9p4icz,-3.1094832504531764,-108.3431353488312,-11.581852305589052

3348386_20201_2_0,q8zjxn4icz,1.2887432236432952,-61.08524357567347,-34.77011409959144

4947799_20201_2_0,q8zu9p4icz,-0.32818334283286565,-72.79181773527466,-33.13428583882694

1869620_20201_2_0,q96o8o4icz,-0.1439953938179529,-91.6276445162159,-35.36177628214196

4289232_20201_2_0,q98b7o4icz,-0.0178647383619351,-122.48017492919018,-21.31735218921372

1413392_20201_2_0,q9a5xo4icz,1.63934502262808,-139.51943623091694,-45.968988054774144

5633638_20201_2_0,q9amdp4icz,-1.5608241636023894,-112.544474092325,-29.33559236651388

5254325_20201_2_0,q9e1kp4icz,0.7724728417080813,-63.856286691190945,-50.42415860614844

5878761_20201_2_0,q9hlqn4icz,-1.7693502766302007,-119.21383434708198,-27.450208355519067

3651617_20201_2_0,q9rwfn4icz,-2.0579487024773067,-104.88013213662799,-11.627207625195894

3925234_20201_2_0,q9siso4icz,1.4787737570500075,-103.43153778920114,-44.70615236769336

1940577_20201_2_0,q9skwn4icz,-0.9749985515713256,-99.04491458717831,-32.861653826351656

1417133_20201_2_0,q9tglo4icz,1.9091602795465827,-78.2926235308104,-44.58939284588459

4753143_20201_2_0,q9x9kn4icz,-3.906454054885435,-84.02804707346687,-26.253375627773252

1211237_20201_2_0,q9xsko4icz,-0.26383369399739975,-101.76780883065584,-33.16718332607297

4711201_20201_2_0,q9zmto4icz,6.781854857921154,-76.55665985301627,-79.41685209309489

5719241_20201_2_0,qa0kvo4icz,-2.0526974660609456,-129.76477512792766,-30.37110964894252

3688083_20201_2_0,qa1xbp4icz,-2.699454293821148,-103.66405062662443,-14.40298285156831

1196122_20201_2_0,qa3uen4icz,9.090114942588542,-45.77576494694398,-85.0379183793906

1385328_20201_2_0,qa9qin4icz,0.7241302127495903,-79.83701206309414,-23.152281182218843

5625094_20201_2_0,qaawgp4icz,-1.2338384559929603,-122.59059233861751,-63.06941895499503

2535181_20201_2_0,qago5p4icz,-3.5085930249233197,-147.86255613479534,-15.828561359744612

1840243_20201_2_0,qammyn4icz,-0.656026939194763,-103.30136249404669,-32.29213010005914

2582128_20201_2_0,qap5wo4icz,-1.111975013123164,-92.5648045617234,-26.954856346467608

4818278_20201_2_0,qaplxn4icz,1.4508443501588355,-127.33599169626373,-27.45922880721463

3002417_20201_2_0,qatjip4icz,39.60582124556631,-26.260028342417797,-60.58586850685959

3748265_20201_2_0,qauh6o4icz,-0.44616190977672093,-136.15499206591613,-12.225005791357361

1891351_20201_2_0,qaxxpn4icz,-1.5714464439211397,-126.90756071150676,-26.857456161573353

3074232_20201_2_0,qb9pro4icz,-0.4575783862615043,-139.63977634433857,-22.697997990398278

2808906_20201_2_0,qbaoao4icz,-3.0916710542062913,-109.07082397833972,-14.983818291501052

3632755_20201_2_0,qbaoqo4icz,1.8759299425029416,-39.054235675912,-24.077848939734437

5543466_20201_2_0,qbbexo4icz,3.4730220399669265,-88.0990791833132,-50.69485341836325

3000353_20201_2_0,qbegqn4icz,-0.008647011642325737,-119.32401302208785,-54.15720347006757

4642673_20201_2_0,qbfb7o4icz,-2.534075288940773,-80.99463281146103,-56.38215420149092

4294059_20201_2_0,qbfseo4icz,0.2761520767115605,-96.70758598496371,-25.05815472630698

5410190_20201_2_0,qbilxn4icz,1.2785483500952173,-76.78543368591698,-42.044591189941684

3159189_20201_2_0,qbj1mo4icz,-3.3531932594268152,-76.94589175106242,-13.203686078976204

2786941_20201_2_0,qbnbdn4icz,0.5641436752606959,-119.64475021923829,-47.99596203709919

5699797_20201_2_0,qbp37n4icz,4.105485378646045,-106.62396058957916,-62.876034327786144

4801273_20201_2_0,qbpm9o4icz,1.4110910973354795,-73.80005765741336,-36.84086354886051

5928827_20201_2_0,qbtbbn4icz,3.0325196714529707,-87.1248146162365,-46.21437976302727

4990576_20201_2_0,qbumwo4icz,2.848915665059071,-83.70566503406695,-62.91071667684389

1649577_20201_2_0,qbvjmn4icz,-0.9394193839782318,-105.44052694058212,-51.74877563607609

3798457_20201_2_0,qby8xo4icz,-1.1627459114547416,-137.05422949003867,-30.416592372378375

4563618_20201_2_0,qc2nto4icz,1.0078047074983532,-96.70396869465776,-51.75142282911921

4139225_20201_2_0,qc5gan4icz,1.87344061613098,-103.21215691450226,-46.041392411047

4600281_20201_2_0,qc8xdp4icz,-2.1387906946400825,-120.42315583119876,-49.65660248370379

5647085_20201_2_0,qcf78o4icz,0.6928729511591407,-133.27956986020564,-27.238520349251445

4762718_20201_2_0,qcgcon4icz,0.42103952855449156,-103.84206976472086,-30.184837467688823

2520927_20201_2_0,qchadn4icz,1.7458837668194995,-102.83060413072127,-46.338367189343785

1111993_20201_2_0,qcrk8p4icz,-3.394375730674035,-112.85377575987522,-18.004006185544938

3261877_20201_2_0,qcx33p4icz,1.9799286445887108,-61.334084037536684,-45.05841407282347

2159268_20201_2_0,qcy6dp4icz,2.2946108862045795,-90.68289618351463,-35.33828241341034

3207259_20201_2_0,qczhqo4icz,-1.8503123435399442,-66.32197231733579,-15.315429642154484

5964244_20201_2_0,qd27ln4icz,-3.6158155855789715,-108.05753855374002,2.0768996292188433

1330514_20201_2_0,qd27to4icz,-2.8623779702974814,-70.19009127131005,-7.216870454003569

2304022_20201_2_0,qd2fzo4icz,-1.9712787623864303,-109.4539265173139,-33.11521836983442

5700037_20201_2_0,qd3ofp4icz,-2.6248261316732213,-103.4141172823854,-30.912296789319612

4317591_20201_2_0,qd5ubn4icz,-1.616965042940032,-141.16074111855724,-12.333226175596863

1877106_20201_2_0,qd7q8p4icz,-3.0616890741632266,-91.06862507097392,-9.544905527288819

3673901_20201_2_0,qde9nn4icz,-3.1031590897948584,-133.33488290338326,-15.813586636926388

3094353_20201_2_0,qdf4vn4icz,0.3575933547139237,-108.0834347782052,-29.20970164577473

2039955_20201_2_0,qdksvn4icz,0.7362386905974759,-100.30208610143,-15.352536539071792

5223561_20201_2_0,qdmrnn4icz,0.3642221028422472,-124.72208649674661,-44.827638858976

5122725_20201_2_0,qdoquo4icz,-1.4932361393316689,-91.40871112847248,-27.972588349838105

3528110_20201_2_0,qdupso4icz,-0.3550400727716809,-119.2043797931282,-23.60418453153909

2976232_20201_2_0,qdyirn4icz,1.484724738020023,-95.58951087357548,-32.06784800516476

2160938_20201_2_0,qdzvin4icz,-5.539459591165708,-105.84567594572181,-20.522596569456766

4367851_20201_2_0,qe45xo4icz,2.073506598282501,-80.55118682402733,-37.92592446308245

4995416_20201_2_0,qe8t4p4icz,3.0823128908242503,-69.42247424551041,-45.94652727090363

5982556_20201_2_0,qe925o4icz,-1.023052402419553,-86.60524298038115,-16.32160193536069

5005408_20201_2_0,qeaq7o4icz,1.8123369061650867,-58.90450914217334,-49.04818904741741

2047042_20201_2_0,qeceip4icz,0.42014829855482777,-69.16175734749544,-42.98921716582679

1247668_20201_2_0,qekaip4icz,-3.1134809211211065,-106.36159028106582,-21.197718723977303

1999777_20201_2_0,qeknan4icz,-0.3876435641271045,-117.21638497029807,-35.87611243995194

3622465_20201_2_0,qeq3uo4icz,3.028961538651968,-83.68199677864254,-50.35074241257536

4494046_20201_2_0,qet18o4icz,-3.5065909911925806,-136.6601218154651,11.121833081929012

4914005_20201_2_0,qeuc8o4icz,-4.029184030574311,-87.63290582760769,-19.633486481523875

3310175_20201_2_0,qevgrn4icz,-1.696873299213952,-98.29418695222932,-18.66513518059746

3432067_20201_2_0,qex3eo4icz,-0.629793986892925,-102.11387943256543,-47.0648623325898

1847310_20201_2_0,5lzubp4icz,3.3717389581617665,-119.73040335895215,-70.59078675463442

1307409_20201_2_0,qf6con4icz,-1.0365548243618654,-98.62861947779777,-20.87007422636745

4855453_20201_2_0,qf7rbo4icz,0.4559500161637298,-106.99893152734302,-48.21537192557835

1891165_20201_2_0,qf81gp4icz,-6.229642411839717,-57.383635035339694,1.7671297943598887

3911635_20201_2_0,qf86gp4icz,-13.657895541867566,-131.21723785141802,52.2749117861639

1843345_20201_2_0,qfj01p4icz,0.13210750756705691,-90.21750314586825,-46.9464384138834

5072708_20201_2_0,qfk31p4icz,-0.4476810539979534,-122.38449389333562,-37.68723968911962

5602607_20201_2_0,qfliwn4icz,0.5275308501124153,-101.51137237288307,-33.254990361857864

4556592_20201_2_0,qfngjo4icz,-3.740529499704324,-97.70567046607476,-23.84616454556712

3171198_20201_2_0,qfo75p4icz,2.2220030274978186,-51.10217932512401,-47.5473725657844

3359199_20201_2_0,qfps0p4icz,0.4084031442758924,-60.83602144902517,-37.2699589571932

5029150_20201_2_0,qfqafn4icz,-1.9900533958943394,-92.01773529805894,-43.70969260188576

1645993_20201_2_0,qfug3o4icz,-2.392898662760949,-93.45209428855506,-30.710376409460054

1707297_20201_2_0,qg0tbo4icz,-1.7307446394828958,-59.61848682682964,-37.52976221528303

5431867_20201_2_0,qg19jn4icz,-0.4536131060545588,-108.11192775241,-41.29991655393101

3939871_20201_2_0,qg1v9p4icz,0.21248937446433327,-113.29389070846798,-43.376877765364114

2359866_20201_2_0,qg749n4icz,1.0513830925264478,-141.62275385325168,-41.26540854865274

4347605_20201_2_0,qg82yo4icz,2.98256072290649,-60.174411627022096,-30.00698311958844

5073368_20201_2_0,qg9tqn4icz,-1.8876613118370233,-132.33340851493196,-33.28022047579363

2664647_20201_2_0,qgitjn4icz,0.5505243029952749,-88.41806300252244,-35.31009767553144

3114203_20201_2_0,qgitso4icz,-1.773100066123077,-91.8950632091514,-18.186013430631334

2948714_20201_2_0,qgj53o4icz,-1.6481997991888508,-93.11108064452816,-19.872840097492812

1718510_20201_2_0,qgk89p4icz,0.55618868109365,-105.11867555674598,-54.26134826298055

2323316_20201_2_0,qgo0no4icz,13.076918871112623,-41.334283877945325,-98.4590757090356

2881869_20201_2_0,qgrabp4icz,-0.4414430297749947,-81.17765201544108,-46.81624427283265

5965521_20201_2_0,qgsb0p4icz,1.1236872075397408,-83.92676288543709,-52.70650340228784

4746391_20201_2_0,qgt7wo4icz,4.6368508535242245,-96.63176565706371,-65.5591849352157

4728315_20201_2_0,qguhgp4icz,0.6529170056856629,-85.73127793143968,-37.21463908802944

3418945_20201_2_0,qh1l9o4icz,3.7222093227788706,-83.71760828183787,-49.17929928010939

5844119_20201_2_0,qh3jgp4icz,-1.524719001907786,-69.44559432763589,-35.53893095306637

1487483_20201_2_0,qh6fco4icz,3.1795885780656516,-109.58834171087119,-46.60176918413312

5714384_20201_2_0,qh7pvo4icz,-2.109111337179334,-58.442452963780966,-34.009232028197715

5084335_20201_2_0,qh836n4icz,0.1669970502828921,-92.20510787047348,-48.352920446336555

5244183_20201_2_0,qh97co4icz,-0.8425274137330416,-96.91866937040407,-27.27739463366231

5503195_20201_2_0,qhc6mn4icz,-1.7585248390218615,-83.88646269285053,-10.723894955111689

4440153_20201_2_0,qhd1jn4icz,-1.6425767237890339,-151.40150641398003,-42.24945907850366

1844127_20201_2_0,qhfx5o4icz,1.4267406122199848,-87.41618325945333,-38.22469467096792

2265807_20201_2_0,qhhp6o4icz,-7.5371294913508535,-71.21646543343729,-5.783689461693925

3198002_20201_2_0,qhlubp4icz,-1.3728098766715402,-95.55461150231511,-35.338327855994905

5011043_20201_2_0,qhn7fp4icz,-1.8984431006428448,-108.15254597259263,-25.556860502645804

3100695_20201_2_0,qhqaoo4icz,-0.6568013130942242,-125.65885317120328,-18.123847076042594

2047170_20201_2_0,qhudon4icz,0.02686192307208083,-137.02819225466982,-25.94615509320046

3388358_20201_2_0,qhz3co4icz,1.9549127967112292,-90.55309109575705,-56.61279271016036

3914481_20201_2_0,qi0vxo4icz,-0.049879068951750524,-94.91018602511329,-37.8921544224669

4859647_20201_2_0,qi1cgo4icz,0.8963525325658728,-89.44482393598108,-52.12465096010122

2604831_20201_2_0,qi4zxo4icz,2.0932204132144503,-85.05731011659955,-52.02072792343357

6019084_20201_2_0,qi8xln4icz,0.9196241264522753,-105.6253903213543,-51.86130972713673

3545875_20201_2_0,qi9hwo4icz,0.6985729025114462,-76.62908244389746,-43.07968812818619

4201806_20201_2_0,qia73o4icz,0.9468928966414194,-125.06251584536304,-32.76249113070827

4465493_20201_2_0,qica4p4icz,0.8865317455282947,-89.88309792307973,-44.04695920633973

4775165_20201_2_0,qilkqo4icz,0.5518282279591691,-107.28436049605753,-29.988774478889994

5832736_20201_2_0,qinxco4icz,-4.2261605910272655,-109.14349232357563,-5.25190605491855

3379102_20201_2_0,qip7so4icz,2.1095560541586122,-99.28651957856488,-45.75763666928944

3421401_20201_2_0,qitx1p4icz,1.6515190844279841,-90.70832402911972,-61.994542696677556

2356529_20201_2_0,qiyu4o4icz,-0.9706657945104319,-95.20282055214196,-7.274847166778329

1541945_20201_2_0,qj04bn4icz,-2.464120997648193,-112.68547396127656,-38.714999593705556

5672798_20201_2_0,qj5jio4icz,0.1670408997966512,-67.49563216048315,-27.434670393684158

2223299_20201_2_0,qjavoo4icz,1.4090986504254668,-115.1766782639138,-36.446369864232594

5295852_20201_2_0,qjg1on4icz,1.0177684925114407,-82.87798630542892,-45.92490141224613

5925452_20201_2_0,qjnjip4icz,3.167904922704899,-90.87698072257814,-54.945022626979465

1825117_20201_2_0,qjqaan4icz,-0.09561260574577486,-71.3358946918195,-37.26289748837942

1044522_20201_2_0,qjqp8o4icz,-1.4785015110790036,-114.92413309522681,-23.52970868925101

3468679_20201_2_0,qjrfko4icz,-0.018356310421308572,-98.75200128713075,-36.60908310010835

4017362_20201_2_0,qjrtqo4icz,1.5962111694531023,-88.80802916875717,-39.88497003796988

2361590_20201_2_0,qjsk9o4icz,0.6472157173922397,-117.16540923820364,-29.376793524375643

1861288_20201_2_0,qjwmio4icz,1.384532876099716,-81.46992751231144,-25.120672178431292

4281482_20201_2_0,qk3x6p4icz,-1.2362081750189398,-133.35212439714772,-28.845888025178226

2543657_20201_2_0,qka10p4icz,3.128386023299722,-64.8522477150893,-51.25637402909922

3491475_20201_2_0,qkcnon4icz,0.5390686148107371,-95.18397528735167,-36.01147086564741

4028009_20201_2_0,qkef9o4icz,-2.4378262360002267,-89.24993243541456,-11.609979790413476

6006625_20201_2_0,qkf05p4icz,0.6998159103307743,-109.1381083502649,-33.22192765008057

4594513_20201_2_0,qkfcbp4icz,0.4710830932389746,-95.45021833964068,-54.83577413863054

3728404_20201_2_0,qkg2mn4icz,-0.7201912993773182,-92.35384353221411,-34.943749745712836

1796252_20201_2_0,qkibzo4icz,-1.4348977434264731,-82.02437342879955,-28.225057519857145

3625485_20201_2_0,qkk1ln4icz,1.3996915857287424,-129.26666514181048,-49.71810646395765

5964340_20201_2_0,qkk8vn4icz,-1.641788820261153,-114.22930659331965,-30.56956411498004

1575589_20201_2_0,qkkavn4icz,0.9776616983394704,-73.66869267369535,-36.63946118291331

1039737_20201_2_0,qknyko4icz,1.7211269254165034,-93.62101683333165,-50.684695249062926

3297638_20201_2_0,qkowxo4icz,1.1637540855518984,-101.89506595486006,-37.485842513176635

3106707_20201_2_0,qkytwn4icz,-1.532798417391302,-134.14222810490546,-30.692329033119634

2070946_20201_2_0,ql2vxo4icz,-0.2277199477735059,-80.90106274234034,-45.51958086447284

5047770_20201_2_0,ql6hyn4icz,3.554485169473312,-78.23860638531579,-47.84968909197298

2391034_20201_2_0,4el64o4icz,1.2629094694670853,-53.91640131313733,-47.92414493117012

2541251_20201_2_0,ql8aep4icz,0.5977260656045417,-114.24833935700116,-46.02105722825445

2109919_20201_2_0,qlfaoo4icz,0.32450256325634314,-58.69422214541419,-22.81888549566179

2545566_20201_2_0,qlji5n4icz,-0.85196190598884,-92.51839283406204,-38.12855601901195

3005513_20201_2_0,qljxln4icz,2.242206772688403,-114.78119495478825,-65.84939528560994

5808606_20201_2_0,s8slbo4icz,-1.7006306878678383,-50.54968990641086,-48.3932953296991

5132416_20201_2_0,qlqa0p4icz,-2.7668145176003724,-70.09848077268168,-2.947240248029118

4794774_20201_2_0,qlqztn4icz,-0.5688189988082224,-115.84229432377671,-38.081238395774264

3652665_20201_2_0,qlqzuo4icz,-0.4215231656407033,-40.61783629678695,-23.802042759042422

4124938_20201_2_0,qlz1co4icz,-0.507668586714937,-89.48565753855343,-44.77139210307294

5295327_20201_2_0,ll2f1p4icz,1.9455187281869886,-49.155776068041604,-49.860880459453455

1011801_20201_2_0,qm5uhp4icz,0.8786244609345646,-66.48625631082777,-23.47732772592535

2377758_20201_2_0,qmh65p4icz,11.862656907959481,-62.617535718455514,-91.9359222810763

3496683_20201_2_0,qmotcp4icz,7.5782343350673065,-88.3472782917078,-62.342624558773736

1106433_20201_2_0,qmpybo4icz,1.240030397486789,-49.74566134121409,-40.72740497906261

2321550_20201_2_0,qmtymo4icz,-1.5522454946644721,-94.54353516420147,-30.615346253652476

4423946_20201_2_0,qmwx5p4icz,-0.9590349236336534,-88.09107305185196,-35.71907262748658

1926000_20201_2_0,qn54rn4icz,1.9726771826157903,-94.31850824404066,-62.16099861205025

4446501_20201_2_0,qn9gdo4icz,1.9350400306739248,-128.3900899103492,-44.76979424493979

3209006_20201_2_0,qndwin4icz,-1.8809301257812983,-96.8093416396375,-29.250354886523695

1488207_20201_2_0,zlyqbn4icz,-6.402828110715342,-138.12243509512857,20.035576043356457

3484179_20201_2_0,qnotqo4icz,1.5797900351629028,-77.03941837095698,-41.422513855702704

2027605_20201_2_0,qnp53p4icz,1.1315156871328595,-75.96234260115892,-34.67570966668001

1059543_20201_2_0,qnpojp4icz,0.8522276642681276,-79.89116538341099,-33.329293925468875

2206863_20201_2_0,qnshon4icz,0.4497099311548211,-85.1518136577466,-35.600814025121124

4859012_20201_2_0,qntvwo4icz,-2.176450283461963,-74.81095630261706,-38.79704328186783

6018809_20201_2_0,qnx1un4icz,0.2980630289108373,-126.45149687116839,-35.5640472347246

5030619_20201_2_0,qnyw8p4icz,1.7650234779796006,-42.21843122358479,-44.082017898163414

3829645_20201_2_0,qnz8xo4icz,-1.3957268511267817,-69.93335665628672,-38.87850881976581

1797422_20201_2_0,qo1tgp4icz,0.9816610727769746,-51.29697869702483,-51.105358709668636

4618720_20201_2_0,qo5ebo4icz,9.251063176058468,-28.77487611524964,-86.77548748611474

3391858_20201_2_0,qo84wn4icz,-0.42008748026183046,-94.71070382375362,-31.259401299414833

2082728_20201_2_0,qoey9p4icz,-0.03645570288435347,-148.7273145769727,-41.00739532205537

5672128_20201_2_0,qofgon4icz,-1.5510785663855882,-152.77447311898555,-32.88541782298674

5064745_20201_2_0,qogwro4icz,0.853765673015646,-81.11634456006996,-40.61233569358774
 81%|████████  | 655/811 [20:08<04:34,  1.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 656/811 [20:10<04:20,  1.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 657/811 [20:11<04:11,  1.64s/it] 81%|████████  | 658/811 [20:16<06:07,  2.40s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████▏ | 659/811 [20:17<05:21,  2.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████▏ | 660/811 [20:24<08:34,  3.41s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 661/811 [20:26<07:31,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 662/811 [20:27<06:26,  2.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 663/811 [20:30<06:38,  2.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 664/811 [20:32<05:52,  2.40s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 665/811 [20:33<05:12,  2.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 666/811 [20:35<04:45,  1.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 667/811 [20:37<04:30,  1.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 668/811 [20:38<04:12,  1.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 669/811 [20:40<04:12,  1.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 670/811 [20:43<04:54,  2.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 671/811 [20:44<04:35,  1.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 672/811 [20:46<04:16,  1.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 673/811 [20:48<04:09,  1.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 674/811 [20:51<04:47,  2.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 675/811 [20:53<05:07,  2.26s/it] 83%|████████▎ | 676/811 [20:55<04:50,  2.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 677/811 [20:57<04:56,  2.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▎ | 678/811 [20:59<04:31,  2.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▎ | 679/811 [21:01<04:17,  1.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 680/811 [21:02<03:59,  1.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 681/811 [21:04<03:58,  1.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 682/811 [21:06<03:40,  1.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 683/811 [21:08<04:03,  1.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 684/811 [21:11<04:31,  2.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 685/811 [21:12<04:05,  1.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▍ | 686/811 [21:15<04:45,  2.28s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▍ | 687/811 [21:17<04:38,  2.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▍ | 688/811 [21:19<04:07,  2.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▍ | 689/811 [21:21<04:02,  1.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▌ | 690/811 [21:22<03:47,  1.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▌ | 691/811 [21:25<04:06,  2.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▌ | 692/811 [21:27<03:57,  2.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▌ | 693/811 [21:28<03:43,  1.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 694/811 [21:30<03:36,  1.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 695/811 [21:32<03:22,  1.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 696/811 [21:34<03:43,  1.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 697/811 [21:36<03:34,  1.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 698/811 [21:37<03:13,  1.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 699/811 [21:39<03:05,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▋ | 700/811 [21:40<02:55,  1.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▋ | 701/811 [21:41<02:44,  1.50s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 702/811 [21:46<04:31,  2.49s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 703/811 [21:48<03:56,  2.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 704/811 [21:49<03:31,  1.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 705/811 [21:51<03:12,  1.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 706/811 [21:52<03:03,  1.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 707/811 [21:54<02:51,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 708/811 [21:55<02:50,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 709/811 [21:57<02:50,  1.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 710/811 [21:59<02:52,  1.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 711/811 [22:01<02:58,  1.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 712/811 [22:02<02:46,  1.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 713/811 [22:04<02:46,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 714/811 [22:06<03:07,  1.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 715/811 [22:08<03:07,  1.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 716/811 [22:10<02:55,  1.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 717/811 [22:11<02:43,  1.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▊ | 718/811 [22:16<04:09,  2.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▊ | 719/811 [22:18<03:42,  2.41s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 720/811 [22:20<03:12,  2.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 721/811 [22:21<02:59,  2.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 722/811 [22:23<02:42,  1.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 723/811 [22:24<02:30,  1.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 724/811 [22:26<02:26,  1.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 725/811 [22:29<02:55,  2.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|████████▉ | 726/811 [22:30<02:42,  1.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|████████▉ | 727/811 [22:32<02:36,  1.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|████████▉ | 728/811 [22:36<03:32,  2.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|████████▉ | 729/811 [22:38<03:19,  2.43s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 730/811 [22:40<03:02,  2.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 731/811 [22:42<02:52,  2.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 732/811 [22:44<02:43,  2.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 733/811 [22:46<02:36,  2.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 734/811 [22:47<02:26,  1.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 735/811 [22:49<02:17,  1.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 736/811 [22:51<02:10,  1.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 737/811 [22:52<02:07,  1.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 738/811 [22:55<02:16,  1.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 739/811 [22:56<02:16,  1.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 740/811 [22:59<02:33,  2.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████▏| 741/811 [23:02<02:42,  2.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████▏| 742/811 [23:04<02:25,  2.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 743/811 [23:05<02:17,  2.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 744/811 [23:07<02:04,  1.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 745/811 [23:09<02:01,  1.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 746/811 [23:10<01:58,  1.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 747/811 [23:12<01:53,  1.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 748/811 [23:14<01:50,  1.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 749/811 [23:15<01:43,  1.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 750/811 [23:17<01:38,  1.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 751/811 [23:18<01:37,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 752/811 [23:20<01:37,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 753/811 [23:22<01:42,  1.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 754/811 [23:24<01:36,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 755/811 [23:25<01:30,  1.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 756/811 [23:27<01:30,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 757/811 [23:29<01:28,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 758/811 [23:31<01:34,  1.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▎| 759/811 [23:33<01:44,  2.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▎| 760/811 [23:35<01:45,  2.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 761/811 [23:37<01:35,  1.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 762/811 [23:40<01:57,  2.39s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 763/811 [23:43<01:51,  2.31s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 764/811 [23:44<01:40,  2.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 765/811 [23:46<01:31,  1.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 766/811 [23:48<01:24,  1.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▍| 767/811 [23:49<01:20,  1.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▍| 768/811 [23:51<01:14,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▍| 769/811 [23:52<01:09,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▍| 770/811 [23:54<01:05,  1.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▌| 771/811 [23:55<01:03,  1.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▌| 772/811 [23:57<01:02,  1.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▌| 773/811 [23:58<01:00,  1.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▌| 774/811 [24:00<01:00,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 775/811 [24:02<00:58,  1.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 776/811 [24:03<00:56,  1.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 777/811 [24:05<00:54,  1.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 778/811 [24:07<00:54,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 779/811 [24:08<00:51,  1.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 780/811 [24:10<00:52,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▋| 781/811 [24:12<00:50,  1.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▋| 782/811 [24:13<00:48,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 783/811 [24:15<00:48,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 784/811 [24:17<00:45,  1.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 785/811 [24:19<00:45,  1.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 786/811 [24:20<00:41,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 787/811 [24:22<00:39,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 788/811 [24:24<00:40,  1.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 789/811 [24:26<00:39,  1.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 790/811 [24:28<00:38,  1.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 791/811 [24:29<00:36,  1.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 792/811 [24:31<00:33,  1.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 793/811 [24:33<00:31,  1.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 794/811 [24:34<00:29,  1.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 795/811 [24:37<00:29,  1.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 796/811 [24:38<00:26,  1.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 797/811 [24:40<00:23,  1.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 798/811 [24:42<00:23,  1.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▊| 799/811 [24:44<00:22,  1.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▊| 800/811 [24:46<00:20,  1.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 801/811 [24:47<00:17,  1.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 802/811 [24:49<00:15,  1.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 803/811 [24:50<00:13,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 804/811 [24:52<00:12,  1.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 805/811 [24:54<00:10,  1.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 806/811 [24:56<00:08,  1.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|█████████▉| 807/811 [24:58<00:06,  1.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|█████████▉| 808/811 [24:59<00:05,  1.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|█████████▉| 809/811 [25:01<00:03,  1.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|█████████▉| 810/811 [25:02<00:01,  1.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|██████████| 811/811 [25:04<00:00,  1.76s/it]100%|██████████| 811/811 [25:04<00:00,  1.86s/it]

2080536_20201_2_0,qoh3dp4icz,2.557075954403449,-85.78275940511574,-60.723189238669775

5046129_20201_2_0,qohe8o4icz,1.5759809941313974,-72.25521704741249,-48.36729674863268

3597471_20201_2_0,qohrmo4icz,0.3725187407448972,-68.3553679495688,-51.6993633279714

1072165_20201_2_0,qoplip4icz,3.5187327871557303,-76.26768262129903,-66.13409211844092

5056255_20201_2_0,qoqj0p4icz,3.4165077846015155,-92.33304914008511,-51.724190106978455

2175307_20201_2_0,qovmyo4icz,0.5633994334728701,-77.4278195615278,-41.59059171598534

4899735_20201_2_0,qoybgp4icz,-1.4100188743430868,-113.86112178281081,-22.16561034111777

5233532_20201_2_0,qp0ggp4icz,-4.466144750404592,-101.69993996652053,-18.576647022000742

3803231_20201_2_0,qp2ckn4icz,-0.2926176509099765,-60.65639473498868,-47.72592512313811

1831299_20201_2_0,qp4u0o4icz,-0.668116260005085,-84.01017585099072,-21.220196928598767

2847401_20201_2_0,qp75un4icz,-1.0006725282066484,-83.44703407741056,-12.769272232236844

2693190_20201_2_0,qp7exo4icz,-0.7388536892394121,-103.69527204710701,-37.349615243733595

3722495_20201_2_0,qp8rhn4icz,1.308516890263458,-73.00722400566505,-46.284814820221385

2611982_20201_2_0,qpfydo4icz,-1.8540341413764454,-75.2961435831881,-19.375148033297236

3067090_20201_2_0,qpktjo4icz,1.7312480523020513,-85.86892360014758,-33.11946296273288

4882948_20201_2_0,qpll2o4icz,4.305853468590908,-133.47362421018875,-51.47572614193008

3981004_20201_2_0,qpn84p4icz,2.524377991260363,-98.0376711433733,-46.51319435063451

4804470_20201_2_0,qpp86o4icz,-0.46831657851138514,-106.93727766218456,-15.647943117503331

1189496_20201_2_0,qppado4icz,0.6336862512339793,-68.58769833212372,-35.59984893390258

5361473_20201_2_0,qpq55o4icz,0.7389700089226332,-105.54959988977336,-23.639622086126735

1688846_20201_2_0,qq1vqo4icz,1.0244743760481372,-151.0052983558004,-37.12625454250119

5405553_20201_2_0,qq3pon4icz,0.9375920691997925,-59.60084560384615,-40.67116685127512

1197219_20201_2_0,qq5ebp4icz,3.7720178953940064,-85.9195624895197,-59.08471025449191

2224110_20201_2_0,qqao7n4icz,-0.8335855906552183,-128.12879794082264,-22.97709750831862

5953292_20201_2_0,qqbzfp4icz,2.814774384802358,-79.60754964588392,-34.605374769753155

4454160_20201_2_0,qqe3un4icz,-2.3827067735995833,-96.9220045798908,-30.59457513095063

1101903_20201_2_0,qqg49n4icz,-1.8564193946298178,-135.17914358998294,-34.60338132259815

1335021_20201_2_0,qqk9so4icz,0.6458369382417973,-67.70148582532474,-30.513715211175366

1044352_20201_2_0,qqkenn4icz,-0.9747721240284404,-79.3653530015817,-24.720820796815673

5399795_20201_2_0,qqw7pn4icz,0.9339048712489284,-108.93333721040688,-35.82177980947286

3042134_20201_2_0,qqx8jo4icz,-4.573140594325155,-96.73840101156625,-12.631605388085418

3358097_20201_2_0,qr58tn4icz,-0.455141754658692,-115.99022688088135,-38.22228441312262

1838608_20201_2_0,qr8mhp4icz,0.15623196676761467,-111.9052714503405,-14.512144782549214

1898976_20201_2_0,qrdo3p4icz,-1.8752957707642366,-133.76408197219737,-25.548560595375633

4962037_20201_2_0,qri5ho4icz,1.8555602676447647,-77.20903924742788,-45.00107454823437

5392791_20201_2_0,qrj27o4icz,-0.5204526969027465,-82.55525764437704,-27.418197018664983

5603231_20201_2_0,qruw0p4icz,-0.4457060898577284,-86.60513859179133,-31.5654398070254

3809688_20201_2_0,qs0g2p4icz,2.6511396942524548,-132.394974282885,-29.915813342573713

3849871_20201_2_0,qs8cgp4icz,-0.696215196950531,-129.1959512914945,-38.81626471086328

3924594_20201_2_0,qsbzno4icz,-2.657224262140825,-111.25103053479975,-13.066314027691504

3262115_20201_2_0,qsgu5p4icz,0.012445319661246755,-120.20239790762855,-47.248172465626695

3332615_20201_2_0,qsi69p4icz,1.3595050686363583,-102.56395739072985,-42.031788783677314

3844357_20201_2_0,qsnwgp4icz,10.312477448242708,-105.86910185915136,-83.25257725831511

5602891_20201_2_0,qsohkn4icz,0.5224888319692093,-99.0346262162434,-19.094393392698706

2313122_20201_2_0,qsqten4icz,5.599228593903071,-88.97258628897919,-57.5604526792489

3023969_20201_2_0,qsrgpn4icz,0.5601561937556618,-112.6496651860937,-41.391016056374355

4388517_20201_2_0,qsuean4icz,0.8718854405016605,-167.4081918033033,-42.78182057316944

2770348_20201_2_0,qsyh9p4icz,1.3980944763041332,-60.55956525061217,-50.007995931506684

2688950_20201_2_0,qt0v8o4icz,-2.517577340991699,-102.30966164499921,-23.710901538716428

4893258_20201_2_0,qt503o4icz,-0.14141582460816665,-99.87334312821531,-33.62159494490204

5688399_20201_2_0,qt5xzo4icz,-3.5450022720285004,-122.9408315807529,-11.68991497484572

2069825_20201_2_0,qt7gjn4icz,1.907182326541052,-72.71362139301712,-50.75543036073195

3423296_20201_2_0,qt8xjn4icz,-1.842298101943883,-91.8228565961675,-20.485178918080038

5924218_20201_2_0,qt9kap4icz,-0.4159247032255429,-86.22317004772009,-47.06569109320235

2177120_20201_2_0,qtay8n4icz,-2.5268664183187806,-126.3634761416381,-15.65663127119656

2639004_20201_2_0,qtddlo4icz,-1.1822301562406026,-91.47462218790807,-43.845350702361614

5470114_20201_2_0,qtjo9o4icz,-0.2826524672787831,-117.56467377654275,-21.694031564726956

4534208_20201_2_0,qtw7nn4icz,1.438019973233607,-115.61918778511136,-35.30295919795867

4395750_20201_2_0,qtx0vo4icz,-1.6721104727953304,-109.89598387670034,-25.263929071188315

4481938_20201_2_0,qtxa1o4icz,-0.9991297281685589,-95.03802243368327,-44.41397150656012

5531397_20201_2_0,qtz44p4icz,2.312320212672507,-120.23082986042522,-60.04751392798097

4544878_20201_2_0,qu0wgp4icz,-2.004877655008144,-88.30430437766677,-26.62403839091715

3605286_20201_2_0,qu4fwn4icz,3.2086880481296407,-66.54742128471062,-44.917293102487804

1469508_20201_2_0,quezuo4icz,-0.4245939913186642,-43.26066609424754,-45.93874464166379

1161974_20201_2_0,qufkpn4icz,1.1375608499425363,-88.29936657911352,-37.8852506446711

3757949_20201_2_0,qug9wo4icz,2.8468473392616103,-121.17079876374592,-44.33365808294832

5123301_20201_2_0,qugyip4icz,-1.6021553560163169,-120.84480937452466,-20.845638515156935

1970059_20201_2_0,qukljn4icz,-1.629493179274577,-119.35791453243203,-25.468706357011072

5949204_20201_2_0,qulh5p4icz,-0.9901196055255197,-69.44759694348807,-45.46623842700839

4674093_20201_2_0,qupadp4icz,0.7987930535035697,-77.35777641679519,-44.04087776419895

4691240_20201_2_0,qut2vn4icz,3.252927569016638,-120.81782106826253,-68.58204875213286

2313841_20201_2_0,quvafp4icz,-4.864255781461497,-144.08561978527905,-16.173173007944143

4143231_20201_2_0,quxp5o4icz,0.7812230429741107,-107.74242407795782,-39.862382411157824

2015497_20201_2_0,qv04zo4icz,1.22552614589743,-123.67682916006416,-48.04050201277181

1275015_20201_2_0,qv0lno4icz,-0.3336626042585987,-118.29989944972468,-25.711821192002688

2988235_20201_2_0,qv0mvo4icz,-0.6937278698278625,-77.53245481678141,-28.971973073618727

5015889_20201_2_0,qv2uso4icz,-0.681749889707359,-105.36959068939404,-36.279633768252594

5622671_20201_2_0,qv523o4icz,-0.9355246638211572,-94.1295606807169,-28.13532287253807

5296304_20201_2_0,qv90uo4icz,-0.5111230976128143,-86.92951965328189,-39.93020296677456

2661964_20201_2_0,qva8do4icz,0.9387947112460814,-122.29364516896038,-40.10657062431852

2904815_20201_2_0,qvbe4p4icz,0.9756185668163021,-132.84409328916385,-38.74579485805707

5669924_20201_2_0,qw2m4p4icz,-166.76981500991553,427.94243010504294,311.293704621208

2480444_20201_2_0,qw3jio4icz,-1.416628069849967,-85.72336652274029,-25.58828076388565

5961762_20201_2_0,qw64gn4icz,1.6505533242160104,-88.16688290012792,-48.05133077752707

4692418_20201_2_0,qwaqlo4icz,0.6704187585568675,-113.59077373375669,-35.22505707247474

4231080_20201_2_0,qwbgjn4icz,0.8385653503300604,-88.76721515342771,-47.07041191481733

2583902_20201_2_0,qwfijo4icz,-1.2204767684460973,-96.46369159317206,-29.49808529574969

5106868_20201_2_0,qwmdno4icz,1.368846351124853,-87.27719139738866,-42.81697633936281

3969985_20201_2_0,qwn5wn4icz,-1.9516156304485752,-106.17657249627129,-32.530668468618614

5368651_20201_2_0,qwsmmn4icz,-1.7997700466392448,-101.49961553722747,-16.889092919396973

3836519_20201_2_0,qwt84o4icz,-1.3078559353307633,-74.45056428140089,-26.07710521251296

5459525_20201_2_0,qwvbkn4icz,-3.6740120893026025,-104.04651326684115,-0.2580426028407885

1163757_20201_2_0,qwvqto4icz,11.033003232724893,54.73562440963687,-86.18106443017459

2620310_20201_2_0,qx10fp4icz,0.9919164551430958,-136.20413808707374,-39.10628279187112

2714233_20201_2_0,qx17oo4icz,-1.0477188963967687,-103.75637545973012,-17.952503687683958

2101556_20201_2_0,qx2ojo4icz,-0.8741436948163351,-95.96927931694682,-21.018919723307576

5638737_20201_2_0,qxctxo4icz,-1.342528192041723,-98.67896521952801,299.34070069723157

2555697_20201_2_0,qxe3fn4icz,-1.8691695603454848,-96.70546819605505,-22.997128503328014

5704331_20201_2_0,qxlcvo4icz,0.038176517981496114,-92.2770711956527,-16.863862148039672

1409252_20201_2_0,qxqguo4icz,-1.1414441308590961,-89.88093327530117,-39.22555009440801

2459159_20201_2_0,qxrx9o4icz,0.27555992744487656,-84.47845630988931,-27.551381014378265

4588563_20201_2_0,qxulsn4icz,-0.8015544726935196,-97.90738737211268,-32.681361995693095

1193470_20201_2_0,qxz1cn4icz,1.6584612504779437,-106.73483401130858,-54.13242411531151

1044665_20201_2_0,qy0adn4icz,0.9739183573297029,-133.57245602069804,-43.40817635614749

3238317_20201_2_0,qy3sgn4icz,-1.5331273978530502,-110.99351656805857,-39.69281031460247

3510815_20201_2_0,qy5qlo4icz,-1.1066936148593587,-108.09448116964367,-26.47040725574564

2115979_20201_2_0,qyfa6o4icz,3.0162363979336324,-96.1034091608231,-35.674893064034364

2285030_20201_2_0,qyfoao4icz,-2.3158670596129083,-111.22109452947393,-19.83571131581138

5783226_20201_2_0,dntq9o4icz,1.522823105468697,-37.0466308739513,-38.75907442200764

3406737_20201_2_0,qyh5jn4icz,-1.1455035113230105,-96.83682649966477,-45.28952873380672

5784135_20201_2_0,qyno3p4icz,0.6164665979874226,-75.69940817703474,-44.91684383475638

1290559_20201_2_0,qypm3o4icz,-0.6600746838640146,-90.63853642531046,-19.89040228759727

5303130_20201_2_0,jf4z3o4icz,-1.2627306393358613,-99.12148439288717,-35.415246506988126

3971753_20201_2_0,hhgbao4icz,0.8973851271726923,-99.21095621939921,-47.799287054928456

2473837_20201_2_0,qz3p9p4icz,101.21910952468866,115.90836597962112,-182.13000498006375

5378406_20201_2_0,qz6i4o4icz,2.7990366598513527,-108.64015972751636,-59.53147929490339

3930651_20201_2_0,qzaoeo4icz,2.1635957218995405,-65.9162593351191,-51.20391294088331

1473840_20201_2_0,qzcdbn4icz,-1.442608666862843,-94.01370616012821,-20.736835839698102

4019195_20201_2_0,qzf1vo4icz,-1.292383233974477,-88.6874637181119,-11.869522830764026

2346312_20201_2_0,qzff7p4icz,-0.4220857451980994,-90.62876793067673,-31.66773388882929

5448516_20201_2_0,qzg27o4icz,-3.427444743864668,-83.39890487270017,-12.170752301298151

2733458_20201_2_0,qzgslo4icz,9.088270483915366,-75.27041668555182,-98.78218124654788

2993777_20201_2_0,rc0s3o4icz,-1.5724148388194403,-69.7761801678547,-32.65229183541686

3101057_20201_2_0,qzo8vn4icz,-1.7300393168568464,-137.0077370332757,-20.174121389370157

4335094_20201_2_0,qzp9wo4icz,-0.44171118345872906,-112.95154325196089,-36.38026144153436

4844449_20201_2_0,qzv44o4icz,-2.27776234771421,-78.28043040719638,-21.42744562900677

4887834_20201_2_0,r03c9p4icz,-0.7970781059571003,-120.82353593139794,-20.070689891129504

1130645_20201_2_0,4ogj7p4icz,-0.7103109416779928,-95.13402802213153,-23.92910989943819

3490361_20201_2_0,r0n26n4icz,-1.9532398134099251,-106.33111388237319,-27.34602780106431

5658697_20201_2_0,r0qfio4icz,0.3910970538365747,-48.495346070289344,-35.84150467840176

4288572_20201_2_0,r0sren4icz,-0.6764967706858607,-4.745713688335741,-69.09499421643397

3491695_20201_2_0,r0t9ep4icz,0.5725873557601125,-135.31346058863033,-51.95030298430092

3611392_20201_2_0,r0wgso4icz,3.5261258598128022,-70.78919390686471,-50.36901085658651

2673249_20201_2_0,r13oqo4icz,-1.76061797219114,-104.16763502582546,-24.437819263992708

4302341_20201_2_0,r19rip4icz,0.9420134679439071,-97.10350841432486,-41.36490401189671

2975557_20201_2_0,r19z8o4icz,-2.682241760686745,-89.06224542335252,-8.264807236329887

2181179_20201_2_0,r1b4eo4icz,-0.004525802685535483,-104.1407498399652,-24.71686201602988

2165822_20201_2_0,r1hifp4icz,0.016159005939716496,-126.08142153721491,-56.27298374513151

3599566_20201_2_0,r1ixjp4icz,-0.8140214035781962,-111.06711565667942,-24.052483826868738

4435164_20201_2_0,r1m7hp4icz,-4.186052244418292,-119.22137694097623,-20.709065412592878

4628915_20201_2_0,r1n58p4icz,0.1900036458629608,-72.4933948548437,-34.714857717870984

1473176_20201_2_0,r1qqtn4icz,0.5106685440754805,-82.84110875422618,-39.10412811854739

2459069_20201_2_0,r1w2vo4icz,1.6913908697339624,-89.86641843947572,-33.77939165152175

1039065_20201_2_0,r1x07p4icz,-1.410677189947443,-110.08501712456402,-36.90344621925823

3477983_20201_2_0,r1zeeo4icz,-1.2617477378109108,-93.48689027186629,-42.83904920954504

4362170_20201_2_0,r1ztun4icz,0.7417286258076855,-48.260789813015975,-22.3039087790589

2631954_20201_2_0,r21qwn4icz,1.2012049975307066,-110.31068461358575,-48.82241930792888

3283916_20201_2_0,r223ip4icz,-0.31610009939945455,-74.72374156912392,-18.175749030186367

3939662_20201_2_0,r226po4icz,0.14045541096880945,-81.0786701229419,-50.2334359671969

1478228_20201_2_0,r25sen4icz,-1.3768481144330627,-117.85926356708399,-18.75985523863895

2186548_20201_2_0,r27cxn4icz,-0.4791327976165549,-104.91534043732895,-41.424529875865915

4293046_20201_2_0,r28ywo4icz,-2.1762401471495623,-121.39488735532905,-29.318833843933362

4711470_20201_2_0,r2gpip4icz,2.591627783023615,-108.4326851856274,-46.97017792458445

2844140_20201_2_0,r2seeo4icz,-7.935564302864374,-40.75448029853379,-5.5819882480655

1474312_20201_2_0,r2snmo4icz,-1.9160686797078537,-142.51538183157197,-13.788515201715654

2818652_20201_2_0,r346eo4icz,-2.174865584907116,-101.63623600087669,-17.618908527064903

5954566_20201_2_0,r3ayip4icz,-1.8603824764754575,-78.1485725997129,-36.92844873047312

4678379_20201_2_0,r3ia8o4icz,0.247790256046745,-67.49351602279478,-40.37248444420027

3178317_20201_2_0,r3ic8o4icz,1.0680964530344652,-113.6477026894417,-14.282176963497818

1880022_20201_2_0,r3jkno4icz,0.5817130491494933,-54.785094111404646,-48.85108504594183

4420126_20201_2_0,r3kvfp4icz,-2.053788070526451,-109.80571938989752,-4.220726101810783

1428755_20201_2_0,r3mvho4icz,-2.6727476087688893,-71.91024377464521,-24.52413470556401

5597535_20201_2_0,r3o6ip4icz,-2.032151237789199,-55.656425576743004,-41.12505872255136

3324103_20201_2_0,yb889p4icz,1.6914130626409656,-125.85400344577465,-51.87349707788857

1751540_20201_2_0,r3yijo4icz,1.5097859562681977,-65.89874417566796,-40.55540344932399

5545145_20201_2_0,r47aro4icz,4.419238033874242,-110.4975937183292,-67.03830553924624

5309951_20201_2_0,r4bnbp4icz,-0.3749523591757089,-117.03257927814425,-30.717458726677066

5527544_20201_2_0,r4f12p4icz,1.5114611941646745,-80.2660967150299,-30.645917059581734

4794091_20201_2_0,r4idio4icz,3.211655050507732,-39.326977446846826,-38.58429794367564

5483093_20201_2_0,r4lphn4icz,2.1766172114334466,-97.94809393750779,-56.6313487987663

4869436_20201_2_0,r4nrsn4icz,1.4866675048591755,-67.42339606642346,-46.54467951930397

1296029_20201_2_0,r4pnun4icz,-0.27397330116733676,-128.18114601816976,-33.97863589541224

1730338_20201_2_0,r4q4tn4icz,11.62166329215494,-101.75292044418839,-90.49467409785287

5535626_20201_2_0,r4q7ln4icz,-1.3083452933194126,-131.45854759207757,-35.27890616479013

5681402_20201_2_0,r4qtlo4icz,2.876708458009358,-92.65366548161646,-52.71225475898504

5155806_20201_2_0,r50wwn4icz,-0.17982231160010242,-111.3348823008323,-38.403008859517385

5044278_20201_2_0,r57q5p4icz,-0.6249799140072555,-57.709407595537556,-16.595665557786262

2744311_20201_2_0,r589ho4icz,-0.8016990419189147,-67.64764200850368,-28.280536874882387

2514200_20201_2_0,r5a1on4icz,-3.391049214878971,-105.01473180776162,-11.257554426396723

2132326_20201_2_0,9nah7p4icz,-0.7882487061002719,-71.67813917158628,-40.079127849700825

1505350_20201_2_0,r5dgso4icz,-2.4815938057780804,-118.95988853518969,-35.76775428001595

1794127_20201_2_0,r5jabp4icz,-0.05466190846897134,-87.47245086817554,-38.268546703802755

5263441_20201_2_0,r5kjbp4icz,2.083406113793127,-102.08751150582358,-55.83978407294002

4110750_20201_2_0,r5nhgo4icz,-0.7881284356167313,-93.3000530320821,-32.88780691719546

5068421_20201_2_0,r5oeho4icz,-3.0830119555537876,-119.21456584174103,-28.81644044731472

3393211_20201_2_0,r5okjp4icz,-0.06871767370606277,-100.68004081217612,-41.114120699328765

3061824_20201_2_0,r5sstn4icz,-19.9417294930445,-151.93821502871967,74.33692618594274

4265263_20201_2_0,r5t4kp4icz,-1.8091713133667104,-89.62022562956952,-9.905142747789824

3282615_20201_2_0,r5tmno4icz,3.926672206249868,-81.46231326290649,-62.44803179419728

2666896_20201_2_0,r5yqqn4icz,1.1464449215746255,-112.2075170775417,-33.21013609989929

5369826_20201_2_0,r605xo4icz,-4.103209193261638,-80.90758397189353,-3.4541068972879287

3699555_20201_2_0,r665vo4icz,-0.47889885755327194,-77.75987724023668,-23.013077149793418

4337217_20201_2_0,r6gcsn4icz,0.788880369547292,-142.1479933070143,-38.02675750067165

5583677_20201_2_0,r6l1ho4icz,5.0651397161341105,-130.6664565986275,-73.63802498870272

4764694_20201_2_0,r6m9so4icz,-5.3637930478387865,-116.28847578998534,-11.844175771921527

3104429_20201_2_0,r6md5o4icz,-1.9434535477506663,-116.49877659381434,-11.330726850454766

1698466_20201_2_0,r6mk7o4icz,-3.5195655146549845,-91.6192842862369,-22.842616974869486

5610101_20201_2_0,r6ob7p4icz,1.526598236232617,-148.38793495361864,-67.85590136874328

5105178_20201_2_0,9kbqun4icz,-0.8846987845097556,-98.64602294282395,-32.76975971935812

4373923_20201_2_0,r6z9vn4icz,-1.2229432079829845,-81.12927501202208,-24.91539555671693

5918968_20201_2_0,fak25o4icz,1.2052234011428165,-71.1334012042729,-39.562444587256124

5009250_20201_2_0,r71etn4icz,11.169993251363028,-44.085650853236274,-84.48516240275237

3608345_20201_2_0,r71qno4icz,0.08885935343585573,-116.5471197403919,-50.63098970832172

4679694_20201_2_0,r75q7n4icz,-16.343529793307486,-126.921655191907,72.2979073671874

2507653_20201_2_0,r7691p4icz,-3.523341350574095,-105.64650894045619,-16.721504068264238

5058838_20201_2_0,r76y5p4icz,-2.8389899446275373,-90.08792963588701,-24.721939962499007

1640377_20201_2_0,r78ixn4icz,-1.888747571008623,-140.87591972124014,-20.774661661262

3333984_20201_2_0,r7b31o4icz,0.3556717333793537,-32.30484605937664,-72.68780303326352

5413866_20201_2_0,r7gonn4icz,1.7594625517758427,-101.48941280646375,-57.37349984399819

4764354_20201_2_0,r7p62o4icz,0.5118617306804281,-93.08267379107724,-29.93441212221225

4851303_20201_2_0,r7q6vo4icz,-1.0302353192482305,-67.62614143141647,-54.265172842071124

4975054_20201_2_0,r7qh9p4icz,0.4378615382580777,-47.301479487995465,-36.930828860738146

4389179_20201_2_0,r7uyko4icz,-0.8218773670945224,-114.5542688522498,-31.87622699384015

3224857_20201_2_0,r7v2yo4icz,-1.5818694547364018,-86.61952501448476,-19.957399662439826

1907933_20201_2_0,r7zj4o4icz,3.122267767314322,-100.73915596147961,-50.128636548975095

2319871_20201_2_0,r808io4icz,-2.724868338986735,-116.73272231207113,-3.3589623224849277

5687776_20201_2_0,r861yo4icz,0.04680558876996378,-74.5406834664229,-41.9031650880612

3542108_20201_2_0,r86pro4icz,1.9758555207969701,-92.08301665727771,-43.660941248283365

1762911_20201_2_0,r8bbun4icz,-0.9705090483412147,-84.6151606907984,-20.823644409485297

2667058_20201_2_0,r8dh2o4icz,-1.7287043785432845,-122.97267793694931,-24.217571491522705

5698257_20201_2_0,r8h2ro4icz,0.6964828725802424,-69.68859837609523,-25.367398273244532

4451654_20201_2_0,r8kezo4icz,-0.4957359100156312,-60.50496367779809,-15.569682299858599

2080407_20201_2_0,r8kren4icz,-1.630055813446535,-61.29977165983988,-23.530722254382212

2621110_20201_2_0,r8m07o4icz,-1.6412780087411634,-73.26144065282983,-29.011192707968732

1746888_20201_2_0,r8s7rn4icz,0.30909344806474864,-125.56858884246344,-26.80701588940994

4646647_20201_2_0,r8szyo4icz,0.018268451038346806,-74.39732964551922,-29.68249376913073

1000860_20201_2_0,r8u0yo4icz,0.5338762498152007,-89.46039149762342,-39.69826060586581

2167491_20201_2_0,r8ylsn4icz,2.848699705774439,-84.488751884044,-45.217751369077206

2667087_20201_2_0,r95bap4icz,2.3455626461641197,-88.37781655759264,-47.2471745537741

4095939_20201_2_0,r96h9o4icz,-0.4960785039352472,-82.97131706821506,-34.86800586563021

1327582_20201_2_0,r981bo4icz,-1.4188099694155578,-88.20792617743675,-29.530416947728995

5111543_20201_2_0,r986dn4icz,-3.5886282131991725,-105.7011031524085,-35.27598847963826

3626024_20201_2_0,r9bu3p4icz,1.8098106720987142,-47.18484235411222,-36.823558406817625

5790512_20201_2_0,6l81xo4icz,-1.1377507389209576,-52.54271965810071,-31.750641809068313

2018132_20201_2_0,r9ilfn4icz,0.43791040058881975,-153.17616536380925,-34.06762358270038

5242907_20201_2_0,r9jjep4icz,2.164904621394414,-100.01170727188443,-62.06813024682812

4549031_20201_2_0,r9nd9p4icz,-1.2251745728172732,-131.46075210497938,-32.24259796477469

2398033_20201_2_0,r9u3un4icz,1.696130621879885,-81.18957740040321,-43.57794535231022

1607700_20201_2_0,r9xoon4icz,-1.719387941805423,-97.62277243122352,-26.433752713561248

4368405_20201_2_0,r9yt3p4icz,1.0750230715743576,-64.88639212501994,-42.96084019464851

1876030_20201_2_0,ra2ooo4icz,0.37324615134045297,-116.24210951864526,-43.5979366973455

2171863_20201_2_0,ra5qho4icz,7.683740954918094,-47.35814761974899,-68.83871570499645

1608212_20201_2_0,ra6ntn4icz,-0.9219094514306744,-118.61804897916196,-31.216415956159807

4308769_20201_2_0,ra7sen4icz,-4.933828292271487,-79.98880070871604,-47.81047632546003

4436791_20201_2_0,rabrbp4icz,-7.570977031962429,-79.09410282109832,23.352475192693376

2394154_20201_2_0,raf16p4icz,-0.926915154363337,-76.63892480193897,-37.18208188382236

4035998_20201_2_0,rahlmn4icz,1.1648794064154815,-121.86048345872638,-41.91381410272953

5274067_20201_2_0,rahrso4icz,-0.12442931775789093,-88.91797834001852,-37.36100283582917

2538823_20201_2_0,ral42p4icz,-0.32434207404354143,-67.1357206018844,-55.634648829512656

4570089_20201_2_0,0v4bln4icz,1.439816898902611,-138.86354768869512,-53.33740539101832

/users/rhydian/anaconda3/envs/torch_env/lib/python3.7/site-packages/torch/cuda/__init__.py:52: UserWarning: CUDA initialization: Found no NVIDIA driver on your system. Please check that you have an NVIDIA GPU and installed a driver from http://www.nvidia.com/Download/index.aspx (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729006826/work/c10/cuda/CUDAFunctions.cpp:100.)
  return torch._C._cuda_getDeviceCount() > 0
  0%|          | 0/101 [00:00<?, ?it/s]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 1/101 [00:01<02:49,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 2/101 [00:04<03:13,  1.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 3/101 [00:05<03:02,  1.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/101 [00:07<03:03,  1.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▍         | 5/101 [00:09<03:03,  1.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 6/101 [00:11<03:00,  1.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 7/101 [00:14<03:14,  2.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 8/101 [00:15<03:01,  1.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 9/101 [00:17<03:00,  1.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|▉         | 10/101 [00:19<02:58,  1.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 11/101 [00:22<03:06,  2.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 12/101 [00:23<02:52,  1.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 13/101 [00:25<02:49,  1.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 14/101 [00:27<02:46,  1.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▍        | 15/101 [00:29<02:38,  1.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 16/101 [00:35<04:30,  3.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 17/101 [00:37<03:49,  2.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 18/101 [00:38<03:21,  2.43s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 19/101 [00:41<03:13,  2.36s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|█▉        | 20/101 [00:42<02:54,  2.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 21/101 [00:44<02:43,  2.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 22/101 [00:46<02:36,  1.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 23/101 [00:48<02:45,  2.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 24/101 [00:51<02:45,  2.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▍       | 25/101 [00:53<02:38,  2.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 26/101 [00:55<02:35,  2.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 27/101 [00:57<02:32,  2.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 28/101 [00:58<02:26,  2.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▊       | 29/101 [01:01<02:33,  2.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|██▉       | 30/101 [01:04<02:46,  2.34s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 31/101 [01:05<02:31,  2.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 32/101 [01:08<02:30,  2.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 33/101 [01:09<02:17,  2.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▎      | 34/101 [01:11<02:11,  1.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▍      | 35/101 [01:14<02:35,  2.36s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 36/101 [01:16<02:20,  2.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 37/101 [01:18<02:16,  2.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 38/101 [01:20<02:14,  2.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▊      | 39/101 [01:24<02:39,  2.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|███▉      | 40/101 [01:26<02:30,  2.47s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 41/101 [01:29<02:27,  2.47s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 42/101 [01:31<02:16,  2.31s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 43/101 [01:34<02:30,  2.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▎     | 44/101 [01:36<02:18,  2.43s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▍     | 45/101 [01:39<02:26,  2.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 46/101 [01:41<02:12,  2.41s/it] 47%|████▋     | 47/101 [01:42<01:56,  2.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 48/101 [01:44<01:44,  1.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▊     | 49/101 [01:46<01:39,  1.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|████▉     | 50/101 [01:49<02:01,  2.38s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 51/101 [01:51<01:52,  2.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████▏    | 52/101 [01:54<01:54,  2.34s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 53/101 [01:56<01:47,  2.24s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 54/101 [01:58<01:40,  2.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 55/101 [02:02<02:06,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▌    | 56/101 [02:04<01:49,  2.44s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▋    | 57/101 [02:06<01:43,  2.36s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 58/101 [02:08<01:41,  2.35s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 59/101 [02:10<01:35,  2.28s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 60/101 [02:12<01:26,  2.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|██████    | 61/101 [02:14<01:26,  2.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████▏   | 62/101 [02:16<01:18,  2.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 63/101 [02:17<01:11,  1.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 64/101 [02:19<01:06,  1.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 65/101 [02:21<01:04,  1.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▌   | 66/101 [02:22<00:59,  1.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▋   | 67/101 [02:24<00:56,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 68/101 [02:25<00:54,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 69/101 [02:27<00:52,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 70/101 [02:30<01:01,  1.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|███████   | 71/101 [02:35<01:31,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████▏  | 72/101 [02:37<01:15,  2.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 73/101 [02:39<01:05,  2.35s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 74/101 [02:40<00:57,  2.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 75/101 [02:42<00:55,  2.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▌  | 76/101 [02:44<00:48,  1.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 77/101 [02:46<00:44,  1.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 78/101 [02:47<00:40,  1.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 79/101 [02:49<00:40,  1.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 80/101 [02:51<00:36,  1.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 81/101 [02:53<00:36,  1.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 82/101 [02:54<00:33,  1.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 83/101 [02:56<00:31,  1.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 84/101 [02:59<00:34,  2.06s/it] 84%|████████▍ | 85/101 [03:01<00:32,  2.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▌ | 86/101 [03:03<00:29,  1.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 87/101 [03:05<00:27,  1.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 88/101 [03:06<00:24,  1.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 89/101 [03:08<00:21,  1.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 90/101 [03:09<00:19,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 91/101 [03:11<00:18,  1.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 92/101 [03:13<00:16,  1.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 93/101 [03:15<00:14,  1.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 94/101 [03:17<00:12,  1.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 95/101 [03:18<00:09,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▌| 96/101 [03:20<00:08,  1.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 97/101 [03:21<00:06,  1.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 98/101 [03:23<00:04,  1.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 99/101 [03:24<00:03,  1.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 100/101 [03:26<00:01,  1.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|██████████| 101/101 [03:28<00:00,  1.82s/it]100%|██████████| 101/101 [03:28<00:00,  2.07s/it]
Trying to load from /users/rhydian/self-supervised-project/model_weights/SSECEncodersBothBoth
==> Resuming model trained for 106 epochs...
Trying to load from ../model_weights/angle_regressor4
==> Resuming model trained for 7 epochs...
3308977_20201_2_0,v6wqdo4icz,1.0695527480900011,-89.37964143499605,-38.18948976019142

3641626_20201_2_0,owq5nn4icz,7.049959660903821,-89.86075890250231,-53.27260201991315

1455231_20201_2_0,ox245p4icz,0.6429887663338182,-58.92326433963447,-11.563095095679586

4317708_20201_2_0,ox2xzo4icz,4.91873622918733,-29.991720686938066,-70.9825775262939

5832007_20201_2_0,oy5gdo4icz,-0.9184261213484759,-112.19544184132306,-21.911566669430982

4991517_20201_2_0,oyluvn4icz,-0.8865077969339733,-119.35606213373143,-28.971236292702613

5671177_20201_2_0,oyr9gp4icz,-0.3980821177022457,-70.86984583331571,-44.705444486088254

1832684_20201_2_0,oz48in4icz,0.12061810053505578,-96.1461089406626,-42.53893546450247

5362413_20201_2_0,ozb3on4icz,1.2011914227499694,-87.07316664974545,-31.49329455675455

3058469_20201_2_0,p0gswn4icz,0.5485313007014081,-114.52946034017003,-39.027261425023326

3772854_20201_2_0,p0vjdo4icz,-2.7844172532208975,-98.79023618043743,-38.9875560183726

4245914_20201_2_0,p11j5p4icz,3.285185426037944,-69.25873959272624,-61.6879281084484

5241058_20201_2_0,p1pymn4icz,-0.5116106376010353,-86.63840816519883,-16.835299760348576

1098010_20201_2_0,p1x5wn4icz,-1.245034907669963,-112.00038785351009,-24.22768801842767

4881081_20201_2_0,p1xh9p4icz,0.7649252917693685,-113.11800278394986,-33.50583192800667

2956662_20201_2_0,p23ozo4icz,1.081864920088669,-78.02136150568714,-15.210793026493107

1713408_20201_2_0,p2t6fo4icz,0.037848463106555603,-82.7407411084339,-19.978904960117703

5960511_20201_2_0,p3hv6p4icz,2.119168254675114,-90.30709749167173,-54.46793693542379

3282814_20201_2_0,p4c3ho4icz,-1.0257752077662068,-95.55017221666043,-22.549912418954676

1959515_20201_2_0,rgu3ho4icz,-0.14372526984020365,-70.30426989126755,-32.3546457876739

3205179_20201_2_0,p4pgso4icz,-0.5492474666748105,-71.05510944739544,-42.64583213843744

1349307_20201_2_0,p4x8ho4icz,-3.0294788497924707,-113.68511276669699,-7.355329079228966

4900269_20201_2_0,p583kp4icz,-6.752842657042679,-112.55622173666805,11.2148882234207

1332206_20201_2_0,p5agan4icz,1.6150051403243393,-102.04433466883108,-54.922454983407505

5479392_20201_2_0,p6hpao4icz,-1.6538939577487375,-99.50749411307382,-24.60906100388341

1856123_20201_2_0,p6oiwn4icz,2.290835649012199,-84.86813499859389,-73.91894087135546

5705929_20201_2_0,p7fq0o4icz,-1.1247293275080186,-91.16322473054828,-12.426327277347127

5344432_20201_2_0,p8etbp4icz,-0.01644113720920829,-84.17220628889788,-41.85555567572521

2813241_20201_2_0,p8rjdo4icz,1.8496744527933886,-112.96200219764239,-44.126983700235556

2145550_20201_2_0,pa6tmn4icz,-0.5365549556232059,-137.05018766551072,-18.778618122283987

5864961_20201_2_0,pa9ngp4icz,6.339495405170384,-69.87220712644165,-93.52667666196997

2457906_20201_2_0,pbs5no4icz,-0.6941760256533999,-71.57358110001431,-36.581518141522324

1830852_20201_2_0,pc33xo4icz,0.07791844130595547,-125.50276951190042,-33.025508094430364

2344921_20201_2_0,pcgpto4icz,3.181653365729459,-96.91078668459878,-33.038607718857264

4684579_20201_2_0,pcxhfo4icz,2.4106921587409427,-58.3686527498038,-53.04631036234936

5381847_20201_2_0,pdb4ep4icz,-1.5848390824795868,-113.09976224215,-22.553925141459217

1718884_20201_2_0,pdbqwo4icz,2.5788086359898257,-82.41222778209084,-36.88602047387813

1250023_20201_2_0,pedz5o4icz,-1.9942897563410467,-106.39066919588421,-12.624691758861502

2151618_20201_2_0,pf23kp4icz,1.9132085413781776,-61.44622478520938,-68.36921242212696

5898854_20201_2_0,pfebzo4icz,-2.828113016573957,-80.64822494304406,2.775924592060548

5326912_20201_2_0,pfkavo4icz,-0.7594535560073352,-71.53009890728438,-24.567655584217178

1324476_20201_2_0,pi7kxo4icz,6.889101898349135,-108.21151210918768,-85.35236026934183

1966094_20201_2_0,pigmun4icz,-1.3799802899580103,-90.20001382840672,-39.73755510217735

4891162_20201_2_0,pj2gqn4icz,0.8163934665460696,-112.55097610499769,-30.067565377532247

2403248_20201_2_0,pjfvnn4icz,-0.9189289224655186,-72.92918298329135,-35.03760278258471

2529377_20201_2_0,pjr68n4icz,-0.6281309014952103,-135.86846453999573,-42.31505970293843

2465403_20201_2_0,pkbdlo4icz,-125.38794968255621,652.5579028899097,346.0853618835824

2261363_20201_2_0,pkedrn4icz,-0.4252314981179335,-76.29172262510693,-46.249047771374705

3464367_20201_2_0,plax6p4icz,2.2709527103820446,-86.71839782224635,-52.36367689479928

4517873_20201_2_0,pnvowo4icz,-1.7573821889390353,-78.78318974660186,-35.574081601668425

4430006_20201_2_0,pnym7o4icz,0.3307125177381883,-96.78306156867575,-42.07201479717426

5638113_20201_2_0,poqouo4icz,1.913126722111452,-93.35252035789944,-40.022798969081805

5206463_20201_2_0,ppngqo4icz,-1.602073751448861,-112.49565468532109,-22.556295602063216

3680015_20201_2_0,psvkgo4icz,-2.422992624187206,-100.19753606996989,-31.02594738138356

2186419_20201_2_0,pt830p4icz,0.8401318265328475,-47.10568413775968,-47.92475930274958

2432931_20201_2_0,ptzgno4icz,-1.6459849117709984,-75.03930492492438,-23.702450279735416

2130646_20201_2_0,pubsjp4icz,-3.421314833282442,-119.34198423204597,-23.937462017846656

4616954_20201_2_0,pv469o4icz,2.4904279813100443,-65.96568884429905,-49.09461884955829

4168683_20201_2_0,pvqblo4icz,1.0472544151768575,-86.30203701370286,-49.41092277519397

3729567_20201_2_0,pwluep4icz,1.0942010662091397,-67.48255976620402,-46.25819265636096

4498141_20201_2_0,pxs4to4icz,2.108918852219511,-74.12440875497845,-51.63451782271328

4526047_20201_2_0,pxyyhp4icz,0.8359659070468035,-79.03558187610676,-44.38254925984671

5343645_20201_2_0,py780p4icz,-3.7766298582046742,-107.92390828823196,-13.343118614059321

5739817_20201_2_0,pyk4ro4icz,-7.595580772545577,-103.9589779081955,13.452277163508853

5468157_20201_2_0,pyrz1p4icz,-2.0669122341738086,-96.43644840476165,-44.448753015132624

1870689_20201_2_0,pyzq6o4icz,0.9324186184319452,-111.0106080728506,-48.619136669710514

5150738_20201_2_0,q0lwfn4icz,0.17328098376769474,-84.57602667567525,-28.11868511239001

1605438_20201_2_0,q136yo4icz,-3.5355907341433728,-96.0594491746389,-14.531418230156874

4968148_20201_2_0,q1iw6o4icz,-3.4560111440615877,-103.25082024250926,-10.757326662431893

2294249_20201_2_0,q1l05p4icz,3.827200539908713,-82.2303536079014,-43.683293224096886

3229089_20201_2_0,q3v0po4icz,-0.9639447460498262,-90.87016374711865,-26.9918408124837

1895500_20201_2_0,q44lwo4icz,0.941697958006189,-62.08377552892364,-50.6817579913519

1684415_20201_2_0,q4ervo4icz,-39.64502572766183,-114.08304695329747,199.02469947634324

5144057_20201_2_0,q4rtso4icz,0.4711197580515125,-77.914420932264,-45.48728770682874

4430113_20201_2_0,q4ymin4icz,2.8535960211365885,-99.69923009327562,-64.54888773576491

1796412_20201_2_0,q51fjo4icz,-0.21119007298618492,-109.32021468731836,-32.1402247726014

4098080_20201_2_0,q6r0wo4icz,1.813758069877647,-64.27752172705448,-60.40693635257452

3444558_20201_2_0,q70g4p4icz,1.565019012127477,-76.93355824756426,-48.03660500507793

3138070_20201_2_0,q7si8p4icz,-4.2929154805641465,-111.73497788579226,-11.241498882544903

4071463_20201_2_0,q8gojo4icz,-1.392531517084412,-70.61774419883744,-11.475489853797797

2597022_20201_2_0,q8ng8o4icz,1.2600252151965012,-48.29667429063781,-31.326831952331247

4691630_20201_2_0,q9caan4icz,-0.9696941107155271,-99.59628803288831,-42.73970561908811

2926644_20201_2_0,q9qeso4icz,-0.9318197137975083,-101.95571848088633,-24.61562599523235

3545887_20201_2_0,q9rxno4icz,-2.425101031585153,-100.9404241331973,-12.653221727858323

2286428_20201_2_0,45tumo4icz,33.01575582041761,-165.43720584953923,60.490461854112965

4308949_20201_2_0,qckjio4icz,-0.5162039796338949,-68.22470319634436,-21.087722855164714

1581654_20201_2_0,qe2eio4icz,-2.877589493390455,-141.01925668587847,-7.9585181119558825

3586020_20201_2_0,qg0hep4icz,0.32664276889891114,-74.474587643533,-41.48436301195274

2892053_20201_2_0,qh3j7o4icz,0.5425196666758991,-130.81518228387054,-14.703678513513267

2501360_20201_2_0,qhbgho4icz,-0.7821131762111041,-119.02359323640647,-33.40582628199921

4352930_20201_2_0,qioyvo4icz,1.75938694754189,-70.25230229322597,-44.04881321628024

4555769_20201_2_0,qk5shp4icz,-0.04064506692492213,-71.93072174795563,-33.14869161959322

2919819_20201_2_0,qk6cfn4icz,0.8917770309330363,-113.53736839025095,-32.78297823165613

1027428_20201_2_0,qkb2ep4icz,-0.24724129933470246,-80.23070591453592,-43.25834993133333

4052924_20201_2_0,qkv13o4icz,-10.078551561563364,-73.4208852846968,18.40235803953479

3506351_20201_2_0,ql2j3p4icz,-1.442258727942071,-85.56491441019165,-17.462929596059524

2788437_20201_2_0,qn1vfo4icz,2.1185256457750166,-116.633235118382,-47.70911605705284

2107868_20201_2_0,qnhfpn4icz,-0.8891356981982297,-110.09790784897751,-36.25124290829497

3587624_20201_2_0,qnlkwn4icz,-0.5216280093417631,-112.32754075996229,-37.9760067500857

3293791_20201_2_0,qnx7co4icz,0.43055751742362836,-74.4985085716713,-36.826953372670985

1539828_20201_2_0,r5c3qn4icz,0.8480401939718012,-90.89096220866782,-49.18168221172476

/users/rhydian/anaconda3/envs/torch_env/lib/python3.7/site-packages/torch/cuda/__init__.py:52: UserWarning: CUDA initialization: Found no NVIDIA driver on your system. Please check that you have an NVIDIA GPU and installed a driver from http://www.nvidia.com/Download/index.aspx (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729006826/work/c10/cuda/CUDAFunctions.cpp:100.)
  return torch._C._cuda_getDeviceCount() > 0
  0%|          | 0/102 [00:00<?, ?it/s]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 1/102 [00:01<02:47,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 2/102 [00:03<02:50,  1.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 3/102 [00:05<02:49,  1.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/102 [00:08<03:38,  2.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▍         | 5/102 [00:10<03:34,  2.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 6/102 [00:12<03:21,  2.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 7/102 [00:14<03:02,  1.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 8/102 [00:16<03:06,  1.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 9/102 [00:18<03:10,  2.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|▉         | 10/102 [00:20<02:59,  1.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 11/102 [00:21<02:49,  1.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 12/102 [00:23<02:54,  1.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 13/102 [00:25<02:43,  1.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▎        | 14/102 [00:27<02:35,  1.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▍        | 15/102 [00:29<02:58,  2.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 16/102 [00:31<02:40,  1.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 17/102 [00:33<02:47,  1.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 18/102 [00:35<02:46,  1.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▊        | 19/102 [00:37<02:39,  1.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|█▉        | 20/102 [00:38<02:27,  1.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 21/102 [00:40<02:31,  1.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 22/102 [00:43<02:36,  1.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 23/102 [00:46<03:13,  2.45s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▎       | 24/102 [00:48<03:06,  2.40s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▍       | 25/102 [00:50<02:48,  2.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▌       | 26/102 [00:52<02:39,  2.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▋       | 27/102 [00:54<02:36,  2.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 28/102 [00:56<02:23,  1.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 29/102 [00:57<02:15,  1.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 30/102 [00:59<02:01,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|███       | 31/102 [01:01<02:04,  1.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███▏      | 32/102 [01:03<02:08,  1.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 33/102 [01:04<02:05,  1.82s/it] 33%|███▎      | 34/102 [01:07<02:23,  2.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 35/102 [01:09<02:13,  1.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▌      | 36/102 [01:11<02:15,  2.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▋      | 37/102 [01:13<02:09,  1.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 38/102 [01:15<02:17,  2.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 39/102 [01:18<02:17,  2.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 40/102 [01:20<02:15,  2.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|████      | 41/102 [01:22<02:10,  2.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 42/102 [01:24<02:05,  2.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 43/102 [01:26<02:03,  2.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 44/102 [01:28<01:56,  2.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 45/102 [01:30<01:50,  1.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▌     | 46/102 [01:31<01:47,  1.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 47/102 [01:34<01:54,  2.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 48/102 [01:36<01:45,  1.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 49/102 [01:37<01:36,  1.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 50/102 [01:38<01:24,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 51/102 [01:40<01:23,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 52/102 [01:41<01:19,  1.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 53/102 [01:43<01:16,  1.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 54/102 [01:45<01:16,  1.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 55/102 [01:47<01:31,  1.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▍    | 56/102 [01:49<01:23,  1.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 57/102 [01:50<01:14,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 58/102 [01:51<01:08,  1.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 59/102 [01:53<01:05,  1.53s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 60/102 [01:54<01:02,  1.48s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|█████▉    | 61/102 [01:56<01:01,  1.50s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 62/102 [01:57<01:00,  1.51s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 63/102 [01:59<00:56,  1.45s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 64/102 [02:00<00:55,  1.47s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▎   | 65/102 [02:02<00:57,  1.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▍   | 66/102 [02:04<00:56,  1.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 67/102 [02:05<00:56,  1.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 68/102 [02:07<00:53,  1.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 69/102 [02:08<00:51,  1.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▊   | 70/102 [02:10<00:49,  1.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|██████▉   | 71/102 [02:11<00:45,  1.46s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 72/102 [02:15<01:02,  2.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 73/102 [02:17<01:02,  2.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 74/102 [02:19<01:00,  2.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▎  | 75/102 [02:22<01:00,  2.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▍  | 76/102 [02:24<00:58,  2.24s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▌  | 77/102 [02:26<00:53,  2.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▋  | 78/102 [02:28<00:52,  2.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 79/102 [02:30<00:47,  2.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 80/102 [02:31<00:42,  1.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 81/102 [02:34<00:47,  2.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 82/102 [02:36<00:41,  2.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████▏ | 83/102 [02:40<00:48,  2.53s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 84/102 [02:41<00:40,  2.24s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 85/102 [02:43<00:35,  2.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 86/102 [02:44<00:30,  1.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▌ | 87/102 [02:46<00:26,  1.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▋ | 88/102 [02:47<00:22,  1.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 89/102 [02:49<00:21,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 90/102 [02:50<00:19,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 91/102 [02:53<00:20,  1.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 92/102 [02:54<00:17,  1.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 93/102 [02:56<00:15,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 94/102 [02:57<00:13,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 95/102 [02:59<00:10,  1.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 96/102 [03:00<00:09,  1.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▌| 97/102 [03:02<00:07,  1.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 98/102 [03:03<00:06,  1.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 99/102 [03:05<00:04,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 100/102 [03:08<00:04,  2.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 101/102 [03:10<00:01,  1.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|██████████| 102/102 [03:12<00:00,  2.10s/it]100%|██████████| 102/102 [03:12<00:00,  1.89s/it]
Trying to load from /users/rhydian/self-supervised-project/model_weights/SSECEncodersBothBoth
==> Resuming model trained for 106 epochs...
Trying to load from ../model_weights/angle_regressor4
==> Resuming model trained for 7 epochs...
3520022_20201_2_0,p35w0p4icz,-0.6952011042270739,-101.76341707422992,-23.488663875189218

1419644_20201_2_0,p4ci6o4icz,5.38497058510986,-68.91993377748281,-77.41870533884641

3681796_20201_2_0,p57ven4icz,0.8623681168398122,-123.24188713440006,-70.05056718949119

4382682_20201_2_0,f0nbcp4icz,-1.1483357776480592,-126.3790342815031,-39.76247759274773

2423682_20201_2_0,p6gwbp4icz,0.9214366723196948,-123.86842968646337,-35.96132852306134

4354985_20201_2_0,p6isro4icz,-0.9399041957870901,-132.70055694450926,-52.212714394667245

3560913_20201_2_0,p6yikn4icz,-0.49919911771510633,-111.72044971922173,-33.93280153425923

5374573_20201_2_0,p8veap4icz,-0.24972195733247707,-101.65724880311166,-23.07468974422862

3201657_20201_2_0,p9k9go4icz,-1.319599088943122,-87.23418788988477,-23.365469117258797

5745052_20201_2_0,pangsn4icz,-1.9544525004703086,-119.85842439302326,-28.534937055814154

1657728_20201_2_0,pbkduo4icz,-2.878474816708608,-109.13101566884959,-25.383702821717648

2285135_20201_2_0,pbu1xo4icz,-1.8715332511797553,-112.99200247096479,-29.384538069941442

2960687_20201_2_0,pbzhqn4icz,0.1891298200642062,-92.93106903076398,-36.0090627683191

2757168_20201_2_0,pcacip4icz,2.7524550327321093,-80.0356677826594,-41.861834832315424

1671144_20201_2_0,pfyhjn4icz,-1.9867571626361025,-96.91017428068793,-44.522063667645

1627864_20201_2_0,pgbupo4icz,-1.7664859280336418,-101.79120671751693,-28.41746924439248

4666077_20201_2_0,pgqswo4icz,0.28265515825694454,-101.22879570695204,-48.967030323221636

4324481_20201_2_0,pgyq7p4icz,-0.19984188780888187,-135.59258246116244,-20.26369968297152

3055311_20201_2_0,ph1upo4icz,-0.5263221641322546,-104.52058228263121,-46.229077218062656

5274754_20201_2_0,ph1vbo4icz,-0.9186452011431634,-122.3159885329398,-17.81848832065721

4783522_20201_2_0,phps6o4icz,1.381703389406956,-70.14162128889524,-38.26425851307738

2551197_20201_2_0,pj60rn4icz,0.7033051489157225,-108.76431939488711,-38.423804509823654

1858255_20201_2_0,pjfo9n4icz,1.203151847815417,-96.74151056785499,-41.39551395665784

2010875_20201_2_0,pjw3ap4icz,-1.3138439587268662,-62.30382291154223,-28.205396801762376

6005274_20201_2_0,pklabp4icz,0.20723576152300027,-90.63538402523838,-33.08676327067083

5539172_20201_2_0,pl8wyo4icz,-0.5340121645909,-60.26787279203165,-23.462919177080295

3354477_20201_2_0,pm0t9p4icz,-1.2199400388348018,-86.25355665526965,-36.135272904800374

5283094_20201_2_0,pm3e2p4icz,-1.9396248270824374,-125.6847008254689,-27.679209036527965

3737909_20201_2_0,pmgcjn4icz,-1.5935061428855677,-109.62756942335818,-29.109801284066975

2889275_20201_2_0,pna7lo4icz,-1.6670457363420914,-97.07850098668143,-43.404070072183686

5286767_20201_2_0,pnbybo4icz,0.4509908478481553,-77.99760852267548,-35.53221830081213

5598523_20201_2_0,pnk0wn4icz,0.7382016400206567,-60.216779122649484,-78.79760923789843

3208758_20201_2_0,pnq20p4icz,2.9193655104049783,-70.69120126758071,-50.61369060300419

3444249_20201_2_0,5wsdtn4icz,-3.4196978893635164,-83.70133839039258,277.04818609377685

4319721_20201_2_0,poii7n4icz,-0.8059274538666387,-111.56309935940672,-31.552545828715537

4936402_20201_2_0,pphbap4icz,-0.230047479819981,-104.60434646082012,-34.04091252376669

5465943_20201_2_0,ppt8on4icz,1.6293915365130434,-103.92657753894756,-40.6248575896273

4307879_20201_2_0,ppzrsn4icz,4.371332380904767,-81.3941321063991,-63.32573926849477

3662444_20201_2_0,prbihp4icz,-2.894528757942439,-96.66786806697786,-28.465104677479943

3452821_20201_2_0,ps4y4o4icz,-0.2371715755466379,-97.40001059242653,-25.98949984971655

2253348_20201_2_0,pshkwn4icz,-0.47852845886311135,-75.7559222303928,-20.87117014932636

2363552_20201_2_0,psn0eo4icz,-2.9735615440087844,-121.1964012106275,-18.633656714194814

2364371_20201_2_0,pt82uo4icz,0.2339471408269683,-66.56202801335851,-33.78722084597506

2673643_20201_2_0,pt9ohp4icz,0.3638598947418664,-104.62903539977293,-41.94131386949036

2917658_20201_2_0,pu5zqo4icz,1.0635477015133372,-79.57120456594475,-48.07335476938975

1930336_20201_2_0,pvv4io4icz,0.26112850975978047,-79.53682418551386,-27.23780098912708

3140383_20201_2_0,px3hep4icz,0.03606787053940036,-93.81804891146345,-49.446527620045075

2977264_20201_2_0,pxugao4icz,1.9310163737274477,-57.57247552934163,-27.9762815593176

6010944_20201_2_0,pz8jrn4icz,-8.31479706479453,-113.74245435269955,24.371357502907756

3624790_20201_2_0,q0t0vn4icz,0.8653092347859659,-112.3447829594607,-41.629686705617175

5947241_20201_2_0,q0xpnn4icz,-0.7585634740526502,-94.86022819301053,-35.47595016608864

3703636_20201_2_0,q1tiln4icz,0.19705056141515048,-88.73004168685475,-25.937859947264016

3465381_20201_2_0,q3opln4icz,0.7235296078528958,-132.59500387720743,-37.84324838356952

4729262_20201_2_0,q4eten4icz,4.41007451690441,-79.1337747045608,-68.12570519566839

2950302_20201_2_0,q4r4to4icz,1.3725826343596723,-38.04698935779095,-44.33218485226246

3012870_20201_2_0,q5d9qo4icz,-0.5561666744566525,-139.03018902654117,-28.335074041701432

2570147_20201_2_0,q5w8bp4icz,1.9630429525938393,-86.43460091295,-48.70088617602589

3239496_20201_2_0,q76e6n4icz,1.0473667806033276,-77.09219759155405,-53.67677658791733

4383817_20201_2_0,q79voo4icz,0.6097515804005482,-67.72963448709697,-46.12546048980606

4405227_20201_2_0,q7egjn4icz,-0.11452644442516344,-105.07077682584313,-44.310422380442475

3833965_20201_2_0,q7q1xo4icz,4.480301313805341,-77.10419930490363,-50.61866993781619

3371596_20201_2_0,q8wpwn4icz,-1.5115037743196529,-106.89729985236326,-24.544972662367826

1666662_20201_2_0,q9a7oo4icz,-4.501991474923748,-87.83491085269299,-10.292440349778445

1715128_20201_2_0,rd2vfp4icz,-0.9072281661173922,-57.77445595779045,-27.637384158784855

2491548_20201_2_0,q9i6vo4icz,-2.6057738099275385,-117.8528815514403,-27.836805440741642

2077175_20201_2_0,q9qz5p4icz,-9.50066242011743,-106.81266177716154,-2.486277109386606

5407375_20201_2_0,q9s3lo4icz,1.2835675867309742,-99.688996265257,-38.02480063409227

1138122_20201_2_0,qaccmo4icz,-0.10434846108263322,-115.1523614459712,-52.56080458115426

4110907_20201_2_0,qajo9n4icz,-1.958904057398403,-111.7527999268726,-36.346148302165176

1288483_20201_2_0,qb6jmn4icz,-0.2967105105379968,-92.299994074593,-40.59464287868181

2976971_20201_2_0,qbieqn4icz,-1.448501703417037,-124.0711144550869,-31.225371448176006

5662744_20201_2_0,qbp4rn4icz,0.282565605785976,-93.73697075072997,-31.892107799227404

1298169_20201_2_0,qbuldp4icz,-1.6624066785177747,-106.73069868524448,-52.89419205959567

1103532_20201_2_0,qcdsgn4icz,-2.734000936658944,-108.87521401177136,-28.13292342902122

2539609_20201_2_0,qd5con4icz,0.6039588242261238,-116.34956045436013,-29.146576350295504

4980389_20201_2_0,qd5vsn4icz,0.4657292731395545,-120.95835649367984,-35.29481963604674

5576211_20201_2_0,qd7ron4icz,1.597999475973923,-86.24442565449397,-40.74915588740117

3633317_20201_2_0,qdqo7p4icz,-0.9410423531507646,-107.64287705358353,-35.00058681366127

5136010_20201_2_0,qeqsto4icz,1.8104015971029892,-108.18663821421904,-40.79429604589903

1623456_20201_2_0,qesg8p4icz,2.5026950928489855,-72.89755114159865,-52.235913183094816

5792249_20201_2_0,qfasgo4icz,1.4103851940004672,-67.85966743190366,-30.97545049630486

2936235_20201_2_0,qffqpo4icz,-0.06106335715515973,-104.310490710936,-28.696962491074174

2846726_20201_2_0,qftq6n4icz,1.8010200584526184,-90.03205986401775,-54.42926774111476

1783542_20201_2_0,qfzxmn4icz,-0.3548003628188265,-74.5090406345414,-33.36688750604462

4621538_20201_2_0,qgpmno4icz,-2.975477304603288,-86.96652181098727,-11.598967236528068

2076964_20201_2_0,qhkz1p4icz,0.8581244518125322,-63.97115978009816,-52.52654349088235

5311186_20201_2_0,qhnz3o4icz,19.094187552662767,-46.0089157112275,-114.96977789988516

3458040_20201_2_0,qircxo4icz,-2.1742013619604137,-114.88761247411605,-45.70179451942353

1268852_20201_2_0,qjec0p4icz,2.1771818367062554,-113.03536281556742,-47.079523572184414

2206465_20201_2_0,qjlkun4icz,9.07035302999084,-68.37292644356495,-81.22561057969209

2708268_20201_2_0,0pjopo4icz,-3.578018287916888,-92.6153541093696,-21.33814137829117

2826901_20201_2_0,qlqdno4icz,-0.05891956324830761,-145.12675459738097,-33.3275073221256

1159623_20201_2_0,qlri7n4icz,-0.5870056108226842,-94.60026292106363,-27.042076471422575

5747649_20201_2_0,qlsocp4icz,-2.0921008412994273,-113.12849071368515,-37.22095635849962

3230207_20201_2_0,qm6own4icz,-2.612685668216514,-120.7677630651545,-13.176775172633725

5361774_20201_2_0,qm6qfp4icz,2.322176851609634,-77.18214848865802,-50.00093027421016

3858701_20201_2_0,qmdwep4icz,-12.280008537117022,-99.167915158717,51.016567505418166

5529436_20201_2_0,qmsmwo4icz,-2.8682883083473696,-74.9276937402733,-20.921397199736646

3884972_20201_2_0,qo4xdp4icz,-1.1680743924867438,-148.20406614133893,-9.98926574896089

4024645_20201_2_0,qp1wuo4icz,1.1420986066516992,-91.00503262936661,-49.61424992525106

5146743_20201_2_0,qpow6o4icz,2.8986403381393755,-101.87772247381903,-48.30885954980937

5650221_20201_2_0,6sl5en4icz,1.0796461047671204,-98.23617278805659,-38.69817882959272

