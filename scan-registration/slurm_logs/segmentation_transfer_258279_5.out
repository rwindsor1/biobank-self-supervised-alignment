5 th decile
.25
.30
/users/rhydian/anaconda3/envs/torch_env/lib/python3.7/site-packages/torch/cuda/__init__.py:52: UserWarning: CUDA initialization: Found no NVIDIA driver on your system. Please check that you have an NVIDIA GPU and installed a driver from http://www.nvidia.com/Download/index.aspx (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729006826/work/c10/cuda/CUDAFunctions.cpp:100.)
  return torch._C._cuda_getDeviceCount() > 0
  0%|          | 0/810 [00:00<?, ?it/s]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  0%|          | 1/810 [00:02<36:19,  2.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  0%|          | 2/810 [00:05<35:28,  2.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  0%|          | 3/810 [00:07<34:36,  2.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  0%|          | 4/810 [00:10<35:22,  2.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 5/810 [00:13<35:33,  2.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 6/810 [00:15<35:25,  2.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 7/810 [00:19<41:27,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 8/810 [00:33<1:22:01,  6.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 9/810 [00:35<1:07:54,  5.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 10/810 [00:38<58:14,  4.37s/it] Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|▏         | 11/810 [00:40<50:38,  3.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|▏         | 12/810 [00:53<1:26:22,  6.49s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 13/810 [00:56<1:10:42,  5.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 14/810 [01:01<1:10:02,  5.28s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 15/810 [01:04<59:32,  4.49s/it]  Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 16/810 [01:06<51:58,  3.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 17/810 [01:09<47:22,  3.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 18/810 [01:11<42:39,  3.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 19/810 [01:14<40:19,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 20/810 [01:18<43:16,  3.29s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 21/810 [01:20<39:51,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 22/810 [01:23<37:57,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 23/810 [01:27<43:07,  3.29s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 24/810 [01:30<39:38,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 25/810 [01:32<37:44,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 26/810 [01:35<37:04,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 27/810 [01:38<36:47,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 28/810 [01:40<35:51,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▎         | 29/810 [01:43<35:07,  2.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▎         | 30/810 [01:45<34:58,  2.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 31/810 [01:48<33:58,  2.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 32/810 [01:51<34:10,  2.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 33/810 [01:53<33:43,  2.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 34/810 [01:56<33:46,  2.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 35/810 [01:58<34:07,  2.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 36/810 [02:01<33:26,  2.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▍         | 37/810 [02:03<33:21,  2.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▍         | 38/810 [02:06<32:51,  2.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▍         | 39/810 [02:09<33:30,  2.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▍         | 40/810 [02:11<33:02,  2.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▌         | 41/810 [02:14<32:41,  2.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▌         | 42/810 [02:16<32:34,  2.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▌         | 43/810 [02:19<33:05,  2.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▌         | 44/810 [02:21<33:07,  2.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 45/810 [02:24<32:36,  2.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 46/810 [02:27<33:12,  2.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 47/810 [02:29<32:48,  2.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 48/810 [02:32<32:59,  2.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 49/810 [02:34<32:55,  2.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 50/810 [02:37<33:24,  2.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▋         | 51/810 [02:40<32:43,  2.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▋         | 52/810 [02:42<32:52,  2.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 53/810 [02:45<33:23,  2.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 54/810 [02:48<33:02,  2.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 55/810 [02:50<32:20,  2.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 56/810 [02:53<31:58,  2.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 57/810 [02:55<32:00,  2.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 58/810 [02:58<31:55,  2.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 59/810 [03:00<31:31,  2.52s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 60/810 [03:03<32:06,  2.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 61/810 [03:05<32:02,  2.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 62/810 [03:08<31:42,  2.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 63/810 [03:12<36:11,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 64/810 [03:14<34:48,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 65/810 [03:17<33:39,  2.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 66/810 [03:19<33:15,  2.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 67/810 [03:22<32:06,  2.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 68/810 [03:24<32:07,  2.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▊         | 69/810 [03:27<31:40,  2.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▊         | 70/810 [03:29<30:52,  2.50s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 71/810 [03:32<32:02,  2.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 72/810 [03:34<31:37,  2.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 73/810 [03:37<31:33,  2.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 74/810 [03:40<31:38,  2.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 75/810 [03:43<33:17,  2.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 76/810 [03:45<33:06,  2.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|▉         | 77/810 [03:48<33:04,  2.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|▉         | 78/810 [03:51<33:43,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|▉         | 79/810 [03:54<33:12,  2.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|▉         | 80/810 [03:56<32:37,  2.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|█         | 81/810 [03:59<32:51,  2.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|█         | 82/810 [04:02<33:15,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|█         | 83/810 [04:05<33:42,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|█         | 84/810 [04:07<33:00,  2.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|█         | 85/810 [04:10<32:36,  2.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 86/810 [04:13<32:42,  2.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 87/810 [04:15<32:32,  2.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 88/810 [04:18<33:13,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 89/810 [04:21<33:28,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 90/810 [04:25<36:13,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 91/810 [04:27<35:42,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█▏        | 92/810 [04:30<34:12,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█▏        | 93/810 [04:33<33:53,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 94/810 [04:35<33:07,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 95/810 [04:38<33:10,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 96/810 [04:41<33:37,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 97/810 [04:44<33:07,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 98/810 [04:47<32:53,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 99/810 [04:49<31:52,  2.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 100/810 [04:52<32:22,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 101/810 [04:55<33:37,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 102/810 [04:58<33:15,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 103/810 [05:01<33:11,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 104/810 [05:03<32:55,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 105/810 [05:06<33:33,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 106/810 [05:09<33:07,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 107/810 [05:12<32:04,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 108/810 [05:15<32:36,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 109/810 [05:17<32:55,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▎        | 110/810 [05:20<32:31,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▎        | 111/810 [05:23<31:27,  2.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 112/810 [05:27<35:30,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 113/810 [05:29<34:32,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 114/810 [05:32<33:47,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 115/810 [05:35<33:42,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 116/810 [05:39<35:49,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 117/810 [05:41<35:05,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▍        | 118/810 [05:44<34:26,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▍        | 119/810 [05:47<33:58,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▍        | 120/810 [05:50<33:03,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▍        | 121/810 [05:52<31:50,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▌        | 122/810 [05:55<32:54,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▌        | 123/810 [05:58<32:07,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▌        | 124/810 [06:01<32:57,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▌        | 125/810 [06:04<32:49,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 126/810 [06:19<1:12:56,  6.40s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 127/810 [06:32<1:35:26,  8.38s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 128/810 [06:35<1:16:34,  6.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 129/810 [06:37<1:02:09,  5.48s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 130/810 [06:40<52:50,  4.66s/it]  Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 131/810 [06:42<45:51,  4.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▋        | 132/810 [06:45<41:38,  3.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▋        | 133/810 [06:48<38:41,  3.43s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 134/810 [06:51<36:06,  3.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 135/810 [06:54<35:06,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 136/810 [06:57<34:18,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 137/810 [07:04<48:02,  4.28s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 138/810 [07:08<48:29,  4.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 139/810 [07:11<43:12,  3.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 140/810 [07:14<41:02,  3.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 141/810 [07:17<38:23,  3.44s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 142/810 [07:20<37:26,  3.36s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 143/810 [07:23<34:35,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 144/810 [07:26<33:39,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 145/810 [07:28<32:29,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 146/810 [07:32<34:13,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 147/810 [07:35<33:23,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 148/810 [07:37<32:27,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 149/810 [07:40<32:10,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▊        | 150/810 [07:43<31:01,  2.82s/it] 19%|█▊        | 151/810 [07:46<30:29,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 152/810 [07:48<30:07,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 153/810 [07:51<30:04,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 154/810 [07:54<30:43,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 155/810 [07:57<31:24,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 156/810 [08:00<31:11,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 157/810 [08:03<31:13,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|█▉        | 158/810 [08:07<34:34,  3.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|█▉        | 159/810 [08:09<32:45,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|█▉        | 160/810 [08:13<36:10,  3.34s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|█▉        | 161/810 [08:16<34:15,  3.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|██        | 162/810 [08:19<32:12,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|██        | 163/810 [08:21<31:07,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|██        | 164/810 [08:24<30:38,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|██        | 165/810 [08:27<30:58,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|██        | 166/810 [08:30<30:10,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 167/810 [08:32<29:27,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 168/810 [08:35<28:52,  2.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 169/810 [08:39<32:13,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 170/810 [08:41<30:45,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 171/810 [08:44<30:38,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 172/810 [08:47<31:45,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██▏       | 173/810 [08:50<30:20,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██▏       | 174/810 [08:53<31:10,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 175/810 [08:56<30:38,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 176/810 [08:59<30:33,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 177/810 [09:02<30:26,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 178/810 [09:04<29:35,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 179/810 [09:07<29:38,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 180/810 [09:10<29:43,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 181/810 [09:13<29:27,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 182/810 [09:16<29:31,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 183/810 [09:18<28:54,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 184/810 [09:25<41:35,  3.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 185/810 [09:28<37:59,  3.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 186/810 [09:31<35:06,  3.38s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 187/810 [09:34<33:40,  3.24s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 188/810 [09:36<32:40,  3.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 189/810 [09:39<32:14,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 190/810 [09:43<31:52,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▎       | 191/810 [09:45<30:51,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▎       | 192/810 [09:48<30:40,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 193/810 [09:51<29:45,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 194/810 [09:54<29:44,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 195/810 [09:57<29:13,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 196/810 [09:59<29:08,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 197/810 [10:02<29:09,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 198/810 [10:12<50:16,  4.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▍       | 199/810 [10:15<42:47,  4.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▍       | 200/810 [10:17<38:17,  3.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▍       | 201/810 [10:20<35:32,  3.50s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▍       | 202/810 [10:23<32:41,  3.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▌       | 203/810 [10:26<31:50,  3.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▌       | 204/810 [10:30<33:40,  3.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▌       | 205/810 [10:32<31:39,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▌       | 206/810 [10:35<29:57,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 207/810 [10:38<29:08,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 208/810 [10:40<28:48,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 209/810 [10:43<28:29,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 210/810 [10:46<27:53,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 211/810 [10:48<27:35,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 212/810 [10:51<27:13,  2.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▋       | 213/810 [10:54<27:13,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▋       | 214/810 [10:57<27:48,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 215/810 [11:00<28:57,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 216/810 [11:03<28:24,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 217/810 [11:06<28:11,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 218/810 [11:08<28:17,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 219/810 [11:12<29:04,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 220/810 [11:14<28:04,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 221/810 [11:17<27:49,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 222/810 [11:20<28:25,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 223/810 [11:23<27:55,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 224/810 [11:26<28:18,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 225/810 [11:29<27:55,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 226/810 [11:31<26:45,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 227/810 [11:34<26:18,  2.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 228/810 [11:37<26:56,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 229/810 [11:39<26:52,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 230/810 [11:43<29:30,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▊       | 231/810 [11:46<28:59,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▊       | 232/810 [11:49<28:47,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 233/810 [11:52<28:55,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 234/810 [11:55<28:51,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 235/810 [12:00<34:28,  3.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 236/810 [12:03<32:14,  3.37s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 237/810 [12:06<31:39,  3.31s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 238/810 [12:09<29:23,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|██▉       | 239/810 [12:11<28:16,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|██▉       | 240/810 [12:14<27:01,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|██▉       | 241/810 [12:17<26:51,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|██▉       | 242/810 [12:19<26:31,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|███       | 243/810 [12:22<26:26,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|███       | 244/810 [12:25<27:20,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|███       | 245/810 [12:28<26:57,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|███       | 246/810 [12:31<26:41,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|███       | 247/810 [12:34<26:37,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 248/810 [12:37<26:57,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 249/810 [12:40<26:54,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 250/810 [12:42<26:26,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 251/810 [12:45<26:13,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 252/810 [12:48<25:56,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 253/810 [12:51<26:04,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███▏      | 254/810 [12:53<25:39,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███▏      | 255/810 [12:57<27:21,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 256/810 [13:00<28:12,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 257/810 [13:03<27:21,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 258/810 [13:05<26:10,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 259/810 [13:08<26:14,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 260/810 [13:11<26:48,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 261/810 [13:14<26:41,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 262/810 [13:17<26:41,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 263/810 [13:20<26:58,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 264/810 [13:23<26:17,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 265/810 [13:26<27:08,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 266/810 [13:29<26:33,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 267/810 [13:32<28:06,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 268/810 [13:35<27:17,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 269/810 [13:38<26:47,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 270/810 [13:41<26:29,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 271/810 [13:47<35:02,  3.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▎      | 272/810 [13:50<31:50,  3.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▎      | 273/810 [13:53<30:41,  3.43s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 274/810 [13:56<28:46,  3.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 275/810 [13:59<27:37,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 276/810 [14:01<26:06,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 277/810 [14:04<25:33,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 278/810 [14:06<24:50,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 279/810 [14:09<24:41,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▍      | 280/810 [14:12<24:31,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▍      | 281/810 [14:15<25:12,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▍      | 282/810 [14:18<25:09,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▍      | 283/810 [14:21<24:58,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▌      | 284/810 [14:23<24:31,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▌      | 285/810 [14:26<23:52,  2.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▌      | 286/810 [14:29<24:18,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▌      | 287/810 [14:32<24:41,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 288/810 [14:35<24:31,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 289/810 [14:38<26:10,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 290/810 [14:42<27:45,  3.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 291/810 [14:44<26:02,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 292/810 [14:47<25:26,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 293/810 [14:50<25:11,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▋      | 294/810 [14:53<26:22,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▋      | 295/810 [14:56<25:52,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 296/810 [14:59<25:15,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 297/810 [15:02<25:07,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 298/810 [15:05<24:53,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 299/810 [15:19<53:45,  6.31s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 300/810 [15:22<44:27,  5.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 301/810 [15:34<1:03:17,  7.46s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 302/810 [15:37<51:27,  6.08s/it]  Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 303/810 [15:40<43:28,  5.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 304/810 [15:43<37:29,  4.45s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 305/810 [15:46<33:25,  3.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 306/810 [15:49<30:31,  3.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 307/810 [15:53<33:04,  3.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 308/810 [15:58<34:29,  4.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 309/810 [16:02<34:04,  4.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 310/810 [16:25<1:20:56,  9.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 311/810 [16:30<1:08:20,  8.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▊      | 312/810 [16:32<54:43,  6.59s/it]  Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▊      | 313/810 [16:36<47:38,  5.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 314/810 [16:39<40:45,  4.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 315/810 [16:42<35:01,  4.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 316/810 [16:45<31:22,  3.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 317/810 [16:47<28:54,  3.52s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 318/810 [16:50<27:36,  3.37s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 319/810 [16:53<25:32,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|███▉      | 320/810 [16:56<25:28,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|███▉      | 321/810 [16:59<25:22,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|███▉      | 322/810 [17:02<24:07,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|███▉      | 323/810 [17:05<23:32,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|████      | 324/810 [17:07<22:40,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|████      | 325/810 [17:10<22:20,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|████      | 326/810 [17:12<22:01,  2.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|████      | 327/810 [17:15<22:39,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|████      | 328/810 [17:20<26:01,  3.24s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 329/810 [17:22<24:18,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 330/810 [17:25<23:27,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 331/810 [17:28<23:35,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 332/810 [17:31<22:48,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 333/810 [17:34<23:17,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 334/810 [17:37<23:12,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████▏     | 335/810 [17:39<22:25,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████▏     | 336/810 [17:42<21:58,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 337/810 [17:45<21:52,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 338/810 [17:48<22:19,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 339/810 [17:50<22:04,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 340/810 [17:53<21:28,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 341/810 [17:55<20:53,  2.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 342/810 [18:02<29:34,  3.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 343/810 [18:05<27:32,  3.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 344/810 [18:08<26:08,  3.37s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 345/810 [18:11<25:20,  3.27s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 346/810 [18:14<24:15,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 347/810 [18:16<23:12,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 348/810 [18:19<22:16,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 349/810 [18:22<22:03,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 350/810 [18:25<21:44,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 351/810 [18:28<21:58,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 352/810 [18:30<21:39,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▎     | 353/810 [18:33<22:14,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▎     | 354/810 [18:38<25:39,  3.38s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 355/810 [18:41<25:19,  3.34s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 356/810 [18:44<24:13,  3.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 357/810 [18:47<23:08,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 358/810 [18:50<22:37,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 359/810 [18:53<22:54,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 360/810 [18:55<22:17,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▍     | 361/810 [18:58<21:39,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▍     | 362/810 [19:02<22:46,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▍     | 363/810 [19:05<22:27,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▍     | 364/810 [19:07<21:26,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▌     | 365/810 [19:10<21:01,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▌     | 366/810 [19:13<20:51,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▌     | 367/810 [19:15<20:36,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▌     | 368/810 [19:18<20:18,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 369/810 [19:21<20:39,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 370/810 [19:24<20:00,  2.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Trying to load from /users/rhydian/self-supervised-project/model_weights/SSECEncodersBothBoth
==> Resuming model trained for 106 epochs...
Trying to load from ../model_weights/angle_regressor4
==> Resuming model trained for 7 epochs...
4576070_20201_2_0,95b3dp4icz,-1.2195167419154276,-120.02622645520299,-27.86272870421459

4639476_20201_2_0,95bopn4icz,-0.44656883629653277,-84.19046937405932,-24.694089866837416

3472139_20201_2_0,95cfno4icz,-0.15498091555419927,-71.52728967731383,-31.24817311379816

4664583_20201_2_0,95cx1o4icz,-0.2695960547353906,-79.98969610207834,-34.92717521942254

4303218_20201_2_0,95dupo4icz,1.2820118136032144,-66.98691557221042,-32.47421385615371

4391687_20201_2_0,95etdp4icz,0.0651512339853782,-68.5245994925732,-35.4245545498037

1662688_20201_2_0,95i2mn4icz,-0.009583070944477584,-109.18315714980466,-41.78642257638374

3741813_20201_2_0,95j2yo4icz,-1.8373934956783873,-107.79400414025761,-15.177054616754646

5403688_20201_2_0,95jcfo4icz,-2.1794304803091227,-115.8868268705493,-24.835782156893274

4934276_20201_2_0,95m0ro4icz,-1.1614930664414527,-156.04488689696868,-30.59310180519293

4473747_20201_2_0,95mc4p4icz,-2.4162783519462656,-84.2512556453496,-23.533090839864485

2962659_20201_2_0,95ntjp4icz,0.36635346164686067,-52.674100902998305,-53.91223599611571

1014271_20201_2_0,95p9pn4icz,-1.8228448860141833,-72.79721436919681,-45.853693807393086

3845351_20201_2_0,95prjn4icz,-1.041575001460319,-90.15004777741586,-48.43295697606507

3380819_20201_2_0,95r5rn4icz,-0.41098706386182454,-136.20952863132698,-38.01504704014562

2116371_20201_2_0,95s6on4icz,-4.1871289237344556,-89.5776840771882,-31.34087238175225

3528175_20201_2_0,95ssbp4icz,1.3011788842267145,-82.8303155913618,-36.62459844133011

2675755_20201_2_0,95v1hp4icz,-1.1983672826536949,-98.42437962907076,-27.686240550538557

2915109_20201_2_0,95vldo4icz,0.51193721307909,-99.7379525479841,-26.85707918482791

5463839_20201_2_0,95wdro4icz,3.4957539010301275,-54.77109851687476,-48.04930086327725

2276407_20201_2_0,95xinn4icz,-2.4191519366312506,-132.33334585175905,-25.33664778347344

5590167_20201_2_0,95ytlo4icz,-1.2356794711328776,-108.34922540010962,-12.259742135683354

1034755_20201_2_0,960wro4icz,1.0956013724400189,-63.692509056380885,-23.076008586376147

5393859_20201_2_0,96938o4icz,0.9585144134346217,-84.26046102282169,-43.96882592654245

3949566_20201_2_0,969uep4icz,3.4531459973149516,-108.0112028866146,-61.13247772832082

3640443_20201_2_0,96ap6o4icz,-0.2518014776817936,-69.84461204051004,-30.806205158871464

4460953_20201_2_0,96bwip4icz,4.153893765845544,-128.22893696371273,-73.78163043379644

3144498_20201_2_0,96clgo4icz,-2.7053208531115605,-114.08650090604303,-25.875972863847636

5830199_20201_2_0,96e1to4icz,-0.16237316893707343,-109.0334466923884,-25.928450988933108

4850961_20201_2_0,96e6ep4icz,0.06136727622575227,-143.57007920719465,-46.60806301379914

1600531_20201_2_0,96faxn4icz,-3.3691836421349435,-93.15123412727365,-16.05124424776436

4780100_20201_2_0,96hh2o4icz,0.006684695169980363,-84.3504438570969,-19.756969760684058

5964137_20201_2_0,96ir6p4icz,-0.34046509829082516,-77.93213961754748,-24.07093497042547

4862965_20201_2_0,96iurn4icz,-3.3838966938671344,-114.09998184515416,-1.4020002144333858

2605221_20201_2_0,96k2wo4icz,1.6891443787319782,-114.37359663910414,-48.86792384558166

3768685_20201_2_0,96m6gp4icz,-0.6495118606655954,-127.09787869713492,-48.067694104762396

1656085_20201_2_0,96ol2p4icz,1.938547785922841,-70.58553707596437,-33.830290660879044

3911774_20201_2_0,96plon4icz,1.772846728163835,-105.47144818774413,-41.903540363925586

2134500_20201_2_0,96spap4icz,5.03888679182418,-52.615041850205614,-48.18696042067353

2253051_20201_2_0,96th8n4icz,0.04856619058101827,-98.12706583780593,-37.362207708333514

3704292_20201_2_0,96v1eo4icz,0.4347399396873066,-117.41493811044128,-15.240319116290209

5339830_20201_2_0,96xszn4icz,2.4678940385940717,-113.60113649199025,-50.589890930063916

3034930_20201_2_0,96xzgo4icz,-5.777610871872219,-70.9732904732331,1.0687631277754974

4672468_20201_2_0,96y4ro4icz,-2.610793297790189,-86.85325255195076,-5.646020919765263

1217637_20201_2_0,96zigo4icz,-0.1720910341140117,-50.350961769803035,-35.565283666633604

1815341_20201_2_0,9756cp4icz,-0.3567505650182407,-113.36566517557762,-29.707850027564376

5640509_20201_2_0,977rvo4icz,1.128631246714165,-93.45108515710581,-40.31369859278462

2815601_20201_2_0,978oeo4icz,0.6602140989549827,-91.87725684013557,-43.06991762255035

3660778_20201_2_0,97afpn4icz,-0.20929831802355212,-84.36153485239214,-39.714884732960456

3666762_20201_2_0,97ah9o4icz,-2.988745741552344,-115.8936852361391,-15.110967301282727

5463901_20201_2_0,97dl9o4icz,-0.7807210367482627,-98.66435500381047,-34.74387023850717

2773614_20201_2_0,97iydn4icz,2.068136959313699,-100.25665316807408,-58.41887178694793

4834378_20201_2_0,97p31o4icz,-1.1371045214795146,-76.55515435939151,-27.450410528646003

3423997_20201_2_0,97p8do4icz,-0.16117594558673176,-100.86152137117625,-42.59026765664416

2819043_20201_2_0,97vven4icz,-0.8892080879587551,-89.89131603650452,-39.049106193113474

1871902_20201_2_0,984mqo4icz,-3.6719624729285028,-68.61618301544684,-15.709987785230481

3435316_20201_2_0,986p2p4icz,-2.3038289345652725,-105.90152215601137,-28.648941679836838

3810057_20201_2_0,98gocp4icz,3.1137818424015657,-78.7802064939186,-35.29418363044692

2838189_20201_2_0,98pc8p4icz,-3.4342833032248095,-76.52620403927997,-9.533379622988178

3957565_20201_2_0,98v5wn4icz,2.963426656468731,-47.37817910440455,-41.49942933627294

5539917_20201_2_0,98waln4icz,0.6883617981283693,-123.60984244858562,-44.3861651124719

4375062_20201_2_0,98yeho4icz,1.2300862378278434,-55.55991077268908,-48.42590219876665

3167662_20201_2_0,io69fo4icz,-5.980869728183698,-93.34203214245466,8.835328145534078

3433849_20201_2_0,992o5o4icz,2.1306030846496236,-68.64156425964848,-51.11502369366741

3701658_20201_2_0,992xqn4icz,1.9444568813508905,-76.26457744156826,-52.441163142397144

4199170_20201_2_0,993gio4icz,-0.8346555327213593,-65.33701703496678,-19.426481270983516

1819208_20201_2_0,9950jp4icz,0.42225279422278733,-98.6959731745662,-61.41521146003346

4586727_20201_2_0,9961xn4icz,3.071002032452693,-109.46615574017139,-43.5860299634802

5779655_20201_2_0,9988po4icz,-0.6053318392177601,-117.9666926477662,-30.99823522542593

3563695_20201_2_0,99a52p4icz,-6.6233065951263415,-135.91080595478167,2.2115896561904265

4528220_20201_2_0,99bvfp4icz,-5.175281822099001,-102.06383144440844,-1.258678486711375

1337746_20201_2_0,99f3cn4icz,-2.248745603632326,-128.8139569666516,-23.145144484270006

3901000_20201_2_0,99g8go4icz,-0.27020749104201225,-118.41046117868916,-48.51505704768675

1175030_20201_2_0,99jy8n4icz,3.455723107810732,-100.08882012851757,-61.02456050177065

2778780_20201_2_0,99miso4icz,-3.742756656534973,-95.20794223082197,-12.873773468220435

1663883_20201_2_0,99pkno4icz,1.073094607684194,-102.14262810543264,-29.205464000594844

1418282_20201_2_0,99qj4o4icz,1.753830715587654,-72.39837591440428,-29.4569267598867

4537165_20201_2_0,99sc1o4icz,-2.7851375910159364,-83.70532855271301,-21.890689104272624

5309293_20201_2_0,99wghp4icz,0.9224470735451928,-98.91122110055878,-53.937244593744325

2949579_20201_2_0,9a37ko4icz,-0.890024802144644,-106.00014040003882,-39.356497200028414

5648699_20201_2_0,9a4pfn4icz,-0.5048150361627491,-147.48179158942474,-38.20690204018186

4488045_20201_2_0,9a7lyn4icz,-2.3789820157792363,-103.18329372173815,-20.733163887086903

4816711_20201_2_0,9a90zo4icz,0.8355085469113609,-99.35192324579643,-33.1812990972376

3324047_20201_2_0,9a9buo4icz,0.2566711834393339,-78.51309221784612,-51.64122997354826

5201562_20201_2_0,9aetln4icz,1.615597728783201,-71.51255303749761,-51.7143984814025

4552447_20201_2_0,9apten4icz,2.922930690091447,-81.79656779434097,-62.497489526586875

5824260_20201_2_0,9ataqn4icz,0.07427332557925047,-114.44809345940956,-37.80329554221767

5388269_20201_2_0,9au11p4icz,4.078851474881219,-39.214421441898196,-50.34783202758567

3609845_20201_2_0,9axijp4icz,1.5019486353119789,-72.07956960095319,-70.44646917268531

1703388_20201_2_0,6vjlon4icz,-1.5062978594663432,-79.11648210125713,-32.57849540323096

4050565_20201_2_0,9b66mn4icz,1.2293691902292947,-60.628043870933965,-34.7193277641086

3413570_20201_2_0,9b6mqo4icz,0.3027161134230798,-66.60716878661071,-26.693035980352903

1423981_20201_2_0,9b6r6n4icz,-0.7851691276791555,-90.48113941040998,-20.39878119505886

2215314_20201_2_0,9bhr4p4icz,-2.820179058907571,-142.78281106589105,-35.65809421486122

4919504_20201_2_0,9bi27p4icz,0.5933349876241393,-66.33444603888543,-35.69590071935889

5580704_20201_2_0,9bm1bp4icz,-2.452050570840185,-75.6921056690183,-29.192748168499662

2883635_20201_2_0,9bqmap4icz,1.4001393069322798,-49.62312404237028,-44.975309011766115

4062749_20201_2_0,9c0jeo4icz,-2.6972184067090534,-75.86332103294023,-16.01939496776059

2193364_20201_2_0,9c16bn4icz,0.8762005422790592,-134.02205222752823,-16.676272631116746

2179644_20201_2_0,9c74co4icz,-2.3693237279104955,-146.58243387105492,-23.189842490076344

3224438_20201_2_0,9c754o4icz,-0.9510374478135635,-72.89926714406133,-35.00321785963469

5240200_20201_2_0,9c7tfp4icz,4.818183554503858,-28.419909826301193,-33.52542491286877

2286205_20201_2_0,9c9ugo4icz,-2.2372108157904504,-87.31407578034134,-28.54765955628868

1936171_20201_2_0,9cblep4icz,0.45833268648555736,-92.74836037145394,-37.646295995063056

1686427_20201_2_0,9cdoin4icz,-0.015844971083422164,-52.69323601521015,-34.11860134279395

1356058_20201_2_0,9cemap4icz,-0.6270418869052659,-128.14802251771013,-26.230806218252596

2934290_20201_2_0,9cfaip4icz,-1.2247415332318004,-64.22356246529873,-41.99488825213197

1504080_20201_2_0,9cfygo4icz,-3.302188830299557,-76.28642597566414,-18.92328692162893

4241612_20201_2_0,9ck3xn4icz,6.6002201389864865,-74.91142090040148,-63.18174318707891

2478222_20201_2_0,9coyho4icz,-2.5807697924332955,-108.06506286844757,-16.944889592875526

2348584_20201_2_0,9csn8o4icz,0.38343300512217915,-75.43386628175722,-26.34533545002529

5334431_20201_2_0,9cu8qn4icz,-1.2379522119200301,-65.73612848118523,-39.58546296896998

3429155_20201_2_0,9cvdvn4icz,-0.2952342260849072,-77.15021940620787,-45.89224965181327

4982547_20201_2_0,9cwppn4icz,-0.02757475681257943,-106.96773902780734,-26.26763170889336

3841623_20201_2_0,9cyejn4icz,-11.934219161950024,-128.13880603202696,45.563051795877755

4552274_20201_2_0,9d17ao4icz,0.5707729559440322,-92.75201141340602,-37.44446634642986

4658925_20201_2_0,9d1n5p4icz,-1.558489178734099,-118.6984198385033,-49.064573160807726

2797606_20201_2_0,9d7fyo4icz,1.0438732272946694,-69.08776449993076,-22.08216071943211

3537502_20201_2_0,9d7rjn4icz,0.07394314588805546,-94.3388933637842,-33.30522510323175

5563680_20201_2_0,9d8ojo4icz,1.0007538180473834,-80.71332757179363,-40.297443168449405

1194535_20201_2_0,9d95fo4icz,2.896025175347157,-111.2160071838685,-46.95474845728921

2567593_20201_2_0,9dbqbn4icz,0.21730980848217768,-109.21615487732487,-37.223593723530655

5829190_20201_2_0,9ddu0p4icz,-2.3001687049547286,-114.42410214420039,-30.454731893716456

1983694_20201_2_0,9deskn4icz,20.463735079843556,-28.7971291347923,-133.63103534907071

5289849_20201_2_0,9dfk1o4icz,4.000498313588239,-78.31962999577115,-37.213807283698074

1773446_20201_2_0,9dge1o4icz,-0.5693334862916639,-82.02258757725542,-38.01113191561427

4141403_20201_2_0,9drhkn4icz,0.24350263811858222,-139.15878473473435,-44.99760481907609

2082017_20201_2_0,9dscwn4icz,-1.387564876805709,-135.4582868017975,-11.112588145821377

5653110_20201_2_0,9dxegn4icz,-0.9414613238510178,-124.1463836707079,-25.108040049465643

1605814_20201_2_0,9dydkn4icz,-0.293952450018068,-83.65690609414958,-64.51224335123116

5266633_20201_2_0,9dz9no4icz,-2.555932652808265,-92.0423950436381,-16.591760520191073

1719819_20201_2_0,9e1a9p4icz,0.8233164019758558,-102.75494097812185,-54.16843378255601

4933040_20201_2_0,9e4ero4icz,-0.5772380683894301,-80.7538947226947,-45.92089080105579

2923172_20201_2_0,9e4l0p4icz,-0.8574156209772483,-114.72864789672087,-10.534048121461112

5825530_20201_2_0,9e4zln4icz,0.3989548411455299,-102.22398351498805,-19.643575763339868

3869156_20201_2_0,9e9pmo4icz,4.121726877255348,-52.83483443310104,-72.22775872413504

1206950_20201_2_0,9ea8tn4icz,-0.46909168544823865,-113.76750430180931,-29.74782782390922

2735001_20201_2_0,9ecmxo4icz,-0.06942960924322432,-79.65823979791449,-23.43978912352196

2489490_20201_2_0,9ed19p4icz,1.8342020839472188,-105.9880743203004,-44.38195369379221

2232944_20201_2_0,9edpto4icz,-1.5796973388534388,-94.22496960489104,-23.799950864988432

2226296_20201_2_0,9ee6to4icz,0.2152720811515495,-61.914761688413876,-52.56216986039661

4539289_20201_2_0,9eqqro4icz,2.4743024752961715,-103.8611269493363,-58.25470072221789

3082433_20201_2_0,9es5wn4icz,-2.72879087140598,-127.05819285943258,-21.480007259477006

3919061_20201_2_0,9essqn4icz,1.6715957892837163,-102.81583408742307,-52.07061505091926

2967667_20201_2_0,9ewiun4icz,-3.014895031324908,-72.1947866989999,-32.70729391146935

1127725_20201_2_0,2a6w3p4icz,0.44258987479083967,-59.53339579419088,-35.681942804828836

2864323_20201_2_0,9exhxo4icz,0.33301453420621835,-80.75155171311746,-40.993970342836406

4781409_20201_2_0,9eye1o4icz,-1.114423264239829,-119.28116836471574,-29.751991002213657

3740825_20201_2_0,9f49fo4icz,-4.898037569243402,-131.50479668148444,-0.06597520599538598

3341336_20201_2_0,9f94lo4icz,-2.1053410158268266,-118.65859069757667,-50.26080650724013

6024004_20201_2_0,9fbjyo4icz,16.31377742373475,31.418730315408084,191.37205535898875

4004888_20201_2_0,9fcp6o4icz,-0.1356124996715495,-71.46043213138299,-31.483846278290656

3720590_20201_2_0,9fefrn4icz,-3.1074555014035834,-74.30892140186137,-30.62501658944207

3351270_20201_2_0,9fgejn4icz,-0.6373986598585035,-89.67083182014133,-39.43978222122769

5827122_20201_2_0,9fs15o4icz,-14.930869416031715,-162.47560086469656,57.09410181887458

2814164_20201_2_0,9fsowo4icz,-2.4359875170843317,-187.5473942263587,-32.594285417296604

4255133_20201_2_0,9fy6bp4icz,-1.0373381032424438,-77.92236529356373,-41.06959478717306

3326122_20201_2_0,9fy9kn4icz,0.07979396576269719,-82.55425959024035,-22.100535711353587

4027183_20201_2_0,9g191o4icz,-2.863179159675125,-89.46266540395223,-7.031321124177282

2695523_20201_2_0,9g4iip4icz,-2.393304348832239,-111.85926944405062,-19.756041863824763

2292073_20201_2_0,9g8ygo4icz,3.0453089309858483,-70.37657792884318,-71.91583487721854

1469732_20201_2_0,9gaukn4icz,-1.8478570476796177,-71.27396707418336,-30.077467927001223

1911140_20201_2_0,9gc9jn4icz,1.1403284375129386,-112.46632451884616,-43.05252890278612

3888837_20201_2_0,9gp1wn4icz,0.7152992532448538,-93.42119296625503,-45.74571682006933

5047532_20201_2_0,9gp6vn4icz,0.7378913595621789,-69.0855413696064,-36.49716104341158

5804723_20201_2_0,9gp7ao4icz,2.6959167878970467,-124.48468599209042,-54.140443652752055

3099029_20201_2_0,9gqbrn4icz,-1.3205611929277938,-87.08551422005945,-37.67147790556298

5016001_20201_2_0,9gqmco4icz,0.2569007441221835,-78.75418092768712,-24.908034501720024

4402944_20201_2_0,eykuep4icz,6.112564828938066,-98.62582493572464,-60.55220473892712

1256254_20201_2_0,9guoro4icz,0.0330955173404072,-75.24142200870793,-42.32164880684627

2065361_20201_2_0,9gvk3o4icz,0.5144710359180955,-84.72799151626177,-41.75236945335159

3736099_20201_2_0,9gzyxo4icz,-0.025306867655301078,-91.08972861660015,-39.518442065543766

1170076_20201_2_0,9h6lvn4icz,-0.5013893318128152,-121.60169584104815,-46.01292522304831

4167720_20201_2_0,9h83bo4icz,-1.855757864978726,-78.45706130315338,-14.38081486556979

5888384_20201_2_0,9ha4jp4icz,1.3049887472636226,-84.9769618043834,-42.90826893740828

5012083_20201_2_0,9hk45p4icz,0.9247505397375743,-87.58605068410958,-47.80966006772596

3374326_20201_2_0,9hpejn4icz,-1.0226371782323098,-135.97764323634527,-24.002061176898692

1456851_20201_2_0,9hqcjn4icz,-0.8311383424507441,-111.69192765562008,-28.377693888269917

3335411_20201_2_0,9hu84p4icz,-1.9177610383332373,-93.40554555653964,-44.76724761816914

3674594_20201_2_0,9hxf9p4icz,2.622778198628838,-99.17048097029934,-41.98797212345572

3411929_20201_2_0,9i1djn4icz,5.289097944550212,-90.78203826336681,-72.07475968881542

2398084_20201_2_0,9i729o4icz,-2.7014627548006382,-130.26310787662297,-24.521330375351084

1424213_20201_2_0,9i7u3p4icz,-0.8216068976522282,-76.73163107282537,-28.86049236808806

3127339_20201_2_0,9iasro4icz,0.3840274283566595,-105.65039314855372,-29.81718187759087

4988281_20201_2_0,9ikgan4icz,-3.2400849572928214,-67.3518376161289,-18.748961340662618

5776005_20201_2_0,9il91p4icz,0.8677046666176583,-46.73108980442899,-45.46744336304003

2386218_20201_2_0,9ile8p4icz,1.0625346820467572,-65.01896446747307,-34.22563854937236

4731426_20201_2_0,9isp8o4icz,-0.531795632820564,-89.89286039803179,-35.38026361609484

1744877_20201_2_0,9iw6fo4icz,1.0288816442543072,-91.29248175918741,-44.155482595537805

5801553_20201_2_0,9iwu7p4icz,1.0909232553416457,-95.95584964705856,-46.957389679834634

3079409_20201_2_0,9iz15o4icz,6.92482261122373,-80.33221552519996,-59.28896971299514

4268289_20201_2_0,9j42ln4icz,-0.9291164312981166,-125.19323871226959,-41.750525509953775

4105663_20201_2_0,9j53qn4icz,-2.3580061013544262,-136.18837311390973,-19.696294998782804

5464807_20201_2_0,9j65ho4icz,-0.19728416985205136,-64.52906987610646,-36.188105806523936

1657093_20201_2_0,9jbj3p4icz,0.19235179339307054,-85.95228982868738,-23.03932172438715

5635513_20201_2_0,9jg8gp4icz,-1.7170544109294648,-72.29912160495388,-25.273263342529432

5457334_20201_2_0,9jhsbn4icz,0.5400407195027612,-109.23143629864674,-34.84711508524765

4125814_20201_2_0,9jkesn4icz,-1.595837794384312,-130.1609588123033,-27.496533195547812

4804734_20201_2_0,9jkisn4icz,-3.2391017994845983,-131.9975410284544,-21.588455938828645

5633494_20201_2_0,9jl18o4icz,-0.1683115836972576,-83.41221345862604,-39.72704680104323

4655325_20201_2_0,9jmcso4icz,0.7972968506602017,-54.90262448223271,-24.498435298947356

3665391_20201_2_0,9jmiao4icz,4.016921116892982,-115.93213490501458,-53.80569122319764

1702111_20201_2_0,9jn5hp4icz,1.811739686663219,-58.28454940939832,-58.48178331404408

2635744_20201_2_0,e4w0vn4icz,12.22257404731211,-24.706362608502957,-97.43375141939033

3335643_20201_2_0,9ju73p4icz,0.23079023651968064,-92.07861917134053,-39.750612347669644

5941223_20201_2_0,9julun4icz,-2.4118333380985297,-110.63045863543462,-28.226526847990954

4484660_20201_2_0,9jwizo4icz,-1.2028678336069565,-89.92611801578806,-26.229449250428118

5655856_20201_2_0,9jx0ip4icz,0.3564637253436333,-103.45920840989288,-43.2775382703628

5485300_20201_2_0,9jy8ln4icz,-0.8746621623872137,-129.74272978133317,-31.202967212822642

2875841_20201_2_0,9k1ckn4icz,-2.543582462829879,-103.32298877058199,-35.711203947473095

3461680_20201_2_0,9k1l7p4icz,1.7661275201350197,-96.15613071028429,-49.366506121071936

4564848_20201_2_0,9k1r2o4icz,-1.394193441686052,-116.20829427310883,-35.99774700495871

5144820_20201_2_0,9k62hp4icz,-2.6221788009339053,-100.96387363342467,-36.77327123464093

4137678_20201_2_0,9k8e4p4icz,-0.13238749671511071,-116.9275143096703,-15.488694795592991

3041320_20201_2_0,9kax1p4icz,1.4909359409269565,-105.08575104246648,-43.92455187710705

5105178_20201_2_0,9kbqun4icz,-0.884698784509746,-98.64602294282395,-32.76975971935818

3444575_20201_2_0,9kciap4icz,-0.1621205802100083,-75.34488085877803,-32.17094091243007

3523090_20201_2_0,9kfuvn4icz,-0.6134692140631611,-101.76781555544201,-41.93034898360172

4118089_20201_2_0,9kgm3p4icz,1.0571961439638866,-94.20146750353678,-39.45525775455174

4644762_20201_2_0,9kjmen4icz,-0.7643334232126734,-91.16633383705559,-40.028921048082296

2071511_20201_2_0,9kmstn4icz,-2.976091767265024,-71.73166228077775,-27.038228032100193

5904209_20201_2_0,9kub5p4icz,0.5227478710346597,-109.82309869795927,-27.31415027335227

5112124_20201_2_0,9kugen4icz,-0.7366541318359197,-127.54744336279055,-28.66539688149679

1342184_20201_2_0,9kwyao4icz,1.4372088006693449,-70.44571458910667,-35.84770640507929

4304210_20201_2_0,9l8fjo4icz,5.0172575436864015,-126.66913737185854,-57.93276163665293

4700848_20201_2_0,9l8x6p4icz,-2.1547576963113904,-120.82588091156381,-19.97337159065404

1273464_20201_2_0,9li0ap4icz,-1.0558842161807338,-89.43875676873907,-33.136707790636706

4235785_20201_2_0,9liogn4icz,-1.414593280657379,-68.01803296227433,-21.73298567349731

1048871_20201_2_0,9lmhio4icz,0.37458890838366066,-124.4394069224742,-40.10181461000272

3287939_20201_2_0,9lq3zo4icz,5.057898787596914,-87.65005581826694,-73.41708057612658

4238538_20201_2_0,9lrw9p4icz,-1.7456058343399032,-119.69392527600678,-38.860816554976736

2455002_20201_2_0,9ltthp4icz,2.9398394958965173,-57.66515541132196,-54.864832619263794

3993425_20201_2_0,9lvpdp4icz,-4.245656419355944,-81.16300565409648,-9.693625346761038

3234092_20201_2_0,9lw5ap4icz,13.109027975707827,-4.361138889303874,-100.53002226127099

1375621_20201_2_0,9lznnn4icz,0.5413317434071603,-123.78134779636792,-50.10108006691628

1616561_20201_2_0,9lzrln4icz,-7.766889931776306,-146.8525937442039,17.696420707757994

3303879_20201_2_0,9m30eo4icz,-2.4026981907438754,-103.01710603356935,-35.47085965872307

5940006_20201_2_0,9m8pdp4icz,1.0117492929189102,-81.72453506304896,-23.33067916783159

2740337_20201_2_0,9mcg2p4icz,-2.4480546681390694,-87.74595747798796,-27.80062983333309

2518644_20201_2_0,9mgrip4icz,0.3575407192217919,-123.00155828434552,-14.285061505792697

3258255_20201_2_0,9mhlyo4icz,-1.6268227724824857,-60.7354366521341,-22.73902336986508

3001724_20201_2_0,9moorn4icz,2.3188274149739714,-105.09015229008344,-45.58899867971158

5210339_20201_2_0,9mqvzo4icz,0.13568669768868857,-75.53045935622083,-43.09850331099864

5404711_20201_2_0,9mqyln4icz,-11.830733912890052,-131.0258136962794,29.589496531266704

2090082_20201_2_0,9n3uyo4icz,-0.9585755898696026,-86.00911352569324,-35.71483331849362

5560485_20201_2_0,9n7f8p4icz,-0.3460736761042676,-94.82421375370106,-43.42770748677127

2132326_20201_2_0,9nah7p4icz,-0.7882487061002688,-71.67813917158628,-40.07912784970085

1347322_20201_2_0,9nbr8o4icz,4.587864050439299,-81.8048757701794,-57.98458462207665

4438622_20201_2_0,9ni5dp4icz,1.8015133334841096,-94.08115613267321,-50.6306414122991

1096217_20201_2_0,9njrao4icz,0.5530463756286067,-116.48000720000778,-44.23013055523958

4192161_20201_2_0,9nm06n4icz,-0.49725828140241085,-51.31602773002197,-31.81538964225308

2309637_20201_2_0,9nnnxn4icz,0.10846370980508006,-76.45994225289525,-37.07027678695361

1100175_20201_2_0,9ntdgo4icz,-0.22433842517950825,-96.12510724879985,-36.278048928766026

1567630_20201_2_0,9ntp8o4icz,0.06520706775423488,-125.4833609334325,-48.48711442617511

2334682_20201_2_0,9nuizo4icz,3.7048391411531414,-73.26493611086272,-72.18232728733233

1944180_20201_2_0,9nwj2p4icz,-0.9548560700324381,-100.11619495175302,-27.128608443467428

5312976_20201_2_0,9nx66p4icz,-1.2601031748927123,-130.74644676524153,-32.506411598191534

5968927_20201_2_0,9nzz6n4icz,0.04660048473116182,-122.38421540369802,-45.08406331526865

4499233_20201_2_0,9o43fn4icz,-2.0194424817658936,-129.467746660047,-21.47676471395161

2338125_20201_2_0,9o587o4icz,0.09443653806714002,-76.65464364516521,-26.64886308764983

5989780_20201_2_0,9o80nn4icz,-2.265230801754841,-123.59490791174491,1.7278588368408379

4420237_20201_2_0,9oay6o4icz,0.9088910300379496,-77.05147079612254,-38.099861723414065

4120087_20201_2_0,9odozo4icz,-0.38196443077197173,-57.24932742197501,-26.612530104078886

5026853_20201_2_0,9oelfn4icz,-1.5961272824719086,-113.87497324844199,-38.03174003277036

5612748_20201_2_0,9ohfbo4icz,-9.30958494810411,-117.00503146446383,22.970902025072945

4747774_20201_2_0,9oi3ho4icz,1.7494914457710666,-45.411772987280415,-62.89964154842781

3065997_20201_2_0,9ojmeo4icz,3.6523436129056526,-66.17327149042612,-73.245110418264

5286660_20201_2_0,9ojmno4icz,-2.8278502005699813,-109.05235353864174,-7.284678597590215

2653520_20201_2_0,9onlsn4icz,-4.203701372345206,-96.99406629966097,-35.5300997490788

3747314_20201_2_0,9ontun4icz,-2.6636480077244165,-129.17780986172343,-18.91863737555981

2011060_20201_2_0,9oql2o4icz,0.85619601648693,-102.05444727899788,-40.555417449211674

1009496_20201_2_0,9oqwro4icz,-0.7886461170945762,-53.717948280448184,-18.72659376022702

3237726_20201_2_0,9p35kp4icz,-3.6961348887942593,-126.95436366432378,-26.018091224656473

5095936_20201_2_0,9p90hp4icz,-2.3676977634784713,-97.58081294838601,-27.402664023803624

5791994_20201_2_0,9pd0eo4icz,0.5039724105413566,-100.5054737090889,-45.84001630294405

1795582_20201_2_0,9pdm5o4icz,-3.4915768102323486,-133.51316964179279,0.7440894945345349

3503989_20201_2_0,9pe3jn4icz,-0.5062662197802696,-144.66102588717618,-21.776691647641698
 46%|████▌     | 371/810 [19:26<19:53,  2.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 372/810 [19:29<20:01,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 373/810 [19:34<24:46,  3.40s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 374/810 [19:39<27:25,  3.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▋     | 375/810 [19:41<25:09,  3.47s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▋     | 376/810 [19:44<23:24,  3.24s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 377/810 [19:47<22:07,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 378/810 [19:52<26:58,  3.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 379/810 [19:55<25:16,  3.52s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 380/810 [19:58<23:22,  3.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 381/810 [20:01<22:29,  3.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 382/810 [20:04<24:08,  3.38s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 383/810 [20:07<22:36,  3.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 384/810 [20:10<21:44,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 385/810 [20:12<20:30,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 386/810 [20:15<20:21,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 387/810 [20:20<23:45,  3.37s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 388/810 [20:27<31:08,  4.43s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 389/810 [20:30<28:32,  4.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 390/810 [20:34<28:20,  4.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 391/810 [20:37<25:50,  3.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 392/810 [20:40<23:37,  3.39s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▊     | 393/810 [20:42<22:01,  3.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▊     | 394/810 [20:45<21:37,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 395/810 [20:49<22:11,  3.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 396/810 [20:51<21:28,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 397/810 [20:54<21:02,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 398/810 [20:57<20:32,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 399/810 [21:00<20:18,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 400/810 [21:03<19:42,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|████▉     | 401/810 [21:06<20:34,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|████▉     | 402/810 [21:09<20:46,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|████▉     | 403/810 [21:12<20:11,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|████▉     | 404/810 [21:15<19:25,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 405/810 [21:19<22:44,  3.37s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 406/810 [21:22<21:21,  3.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 407/810 [21:25<20:34,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 408/810 [21:28<20:13,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 409/810 [21:31<19:51,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 410/810 [21:33<19:07,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 411/810 [21:36<19:22,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 412/810 [21:39<19:51,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 413/810 [21:42<19:09,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 414/810 [21:45<18:48,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 415/810 [21:50<24:09,  3.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████▏    | 416/810 [21:53<22:02,  3.36s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████▏    | 417/810 [21:56<20:59,  3.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 418/810 [21:59<20:25,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 419/810 [22:01<19:24,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 420/810 [22:04<18:40,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 421/810 [22:07<18:15,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 422/810 [22:10<19:51,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 423/810 [22:13<19:20,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 424/810 [22:17<19:45,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 425/810 [22:21<21:55,  3.42s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 426/810 [22:24<20:52,  3.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 427/810 [22:26<20:02,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 428/810 [22:29<19:38,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 429/810 [22:32<19:14,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 430/810 [22:35<18:29,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 431/810 [22:40<22:14,  3.52s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 432/810 [22:43<20:51,  3.31s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 433/810 [22:46<20:10,  3.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▎    | 434/810 [22:48<19:14,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▎    | 435/810 [22:51<18:47,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 436/810 [22:54<18:41,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 437/810 [22:57<18:12,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 438/810 [22:59<17:09,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 439/810 [23:04<19:30,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 440/810 [23:06<18:44,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 441/810 [23:09<18:57,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▍    | 442/810 [23:12<17:58,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▍    | 443/810 [23:15<17:37,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▍    | 444/810 [23:18<17:26,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▍    | 445/810 [23:31<35:47,  5.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▌    | 446/810 [23:34<31:19,  5.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▌    | 447/810 [23:37<27:34,  4.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▌    | 448/810 [23:40<24:34,  4.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▌    | 449/810 [23:43<22:14,  3.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 450/810 [23:46<20:25,  3.40s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 451/810 [23:48<19:05,  3.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 452/810 [23:51<18:13,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 453/810 [23:54<17:40,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 454/810 [23:58<19:12,  3.24s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 455/810 [24:00<18:00,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▋    | 456/810 [24:03<17:43,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▋    | 457/810 [24:06<17:12,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 458/810 [24:09<16:28,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 459/810 [24:11<16:23,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 460/810 [24:14<16:15,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 461/810 [24:17<16:14,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 462/810 [24:19<15:49,  2.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 463/810 [24:22<15:39,  2.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 464/810 [24:25<15:39,  2.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 465/810 [24:28<15:42,  2.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 466/810 [24:31<15:58,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 467/810 [24:33<16:09,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 468/810 [24:36<16:05,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 469/810 [24:39<15:45,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 470/810 [24:42<15:44,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 471/810 [24:45<15:53,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 472/810 [24:47<15:30,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 473/810 [24:50<15:16,  2.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▊    | 474/810 [24:53<15:25,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▊    | 475/810 [24:56<15:34,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 476/810 [24:58<15:12,  2.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 477/810 [25:01<15:18,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 478/810 [25:04<15:25,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 479/810 [25:06<15:11,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 480/810 [25:09<15:23,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 481/810 [25:17<23:18,  4.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|█████▉    | 482/810 [25:20<21:45,  3.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|█████▉    | 483/810 [25:24<20:23,  3.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|█████▉    | 484/810 [25:26<18:55,  3.48s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|█████▉    | 485/810 [25:29<18:03,  3.34s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|██████    | 486/810 [25:32<17:02,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|██████    | 487/810 [25:35<16:26,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|██████    | 488/810 [25:38<15:47,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|██████    | 489/810 [25:41<15:41,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|██████    | 490/810 [25:44<15:41,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 491/810 [25:51<22:01,  4.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 492/810 [25:53<20:03,  3.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 493/810 [25:56<18:49,  3.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 494/810 [25:59<17:52,  3.39s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 495/810 [26:03<18:03,  3.44s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 496/810 [26:06<17:12,  3.29s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████▏   | 497/810 [26:09<16:23,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████▏   | 498/810 [26:12<16:19,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 499/810 [26:15<16:07,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 500/810 [26:18<16:06,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 501/810 [26:21<15:17,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 502/810 [26:23<14:55,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 503/810 [26:27<15:06,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 504/810 [26:29<15:01,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 505/810 [26:33<15:23,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 506/810 [26:36<15:09,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 507/810 [26:41<18:07,  3.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 508/810 [26:43<17:01,  3.38s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 509/810 [26:46<15:59,  3.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 510/810 [26:49<15:01,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 511/810 [26:52<14:34,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 512/810 [26:54<14:19,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 513/810 [26:57<14:17,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 514/810 [27:00<14:07,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▎   | 515/810 [27:04<15:44,  3.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▎   | 516/810 [27:08<16:45,  3.42s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 517/810 [27:11<15:54,  3.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 518/810 [27:17<19:59,  4.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 519/810 [27:21<19:30,  4.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 520/810 [27:23<17:22,  3.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 521/810 [27:26<16:04,  3.34s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 522/810 [27:29<15:08,  3.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▍   | 523/810 [27:32<14:39,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▍   | 524/810 [27:35<14:48,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▍   | 525/810 [27:38<14:17,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▍   | 526/810 [27:41<14:05,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▌   | 527/810 [27:45<15:35,  3.31s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▌   | 528/810 [27:50<18:57,  4.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▌   | 529/810 [27:53<17:15,  3.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▌   | 530/810 [27:56<15:51,  3.40s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 531/810 [27:59<15:14,  3.28s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 532/810 [28:02<14:38,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 533/810 [28:04<13:53,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 534/810 [28:07<13:30,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 535/810 [28:11<13:55,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 536/810 [28:14<14:40,  3.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▋   | 537/810 [28:17<13:56,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▋   | 538/810 [28:20<14:00,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 539/810 [28:23<13:33,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 540/810 [28:25<13:01,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 541/810 [28:28<13:11,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 542/810 [28:31<13:04,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 543/810 [28:34<12:44,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 544/810 [28:37<12:26,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 545/810 [28:39<12:14,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 546/810 [28:42<12:19,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 547/810 [28:45<12:19,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 548/810 [28:48<12:17,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 549/810 [28:51<11:54,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 550/810 [28:53<11:47,  2.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 551/810 [28:57<12:27,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 552/810 [28:59<12:16,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 553/810 [29:02<11:50,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 554/810 [29:05<11:48,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▊   | 555/810 [29:07<11:43,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▊   | 556/810 [29:10<11:38,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 557/810 [29:13<11:43,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 558/810 [29:16<12:01,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 559/810 [29:19<12:35,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 560/810 [29:22<12:15,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 561/810 [29:25<12:02,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 562/810 [29:28<11:48,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|██████▉   | 563/810 [29:30<11:39,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|██████▉   | 564/810 [29:33<11:38,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|██████▉   | 565/810 [29:36<11:22,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|██████▉   | 566/810 [29:39<11:10,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|███████   | 567/810 [29:41<10:58,  2.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|███████   | 568/810 [29:44<11:02,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|███████   | 569/810 [29:47<11:00,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|███████   | 570/810 [29:50<11:08,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|███████   | 571/810 [29:52<11:06,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 572/810 [29:55<10:56,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 573/810 [29:58<11:02,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 574/810 [30:01<11:07,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 575/810 [30:04<11:00,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 576/810 [30:06<10:51,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 577/810 [30:09<11:05,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████▏  | 578/810 [30:12<10:56,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████▏  | 579/810 [30:15<10:54,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 580/810 [30:19<11:36,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 581/810 [30:21<11:06,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 582/810 [30:25<11:44,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 583/810 [30:38<22:49,  6.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 584/810 [30:40<18:55,  5.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 585/810 [30:43<16:09,  4.31s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 586/810 [30:46<14:19,  3.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 587/810 [30:48<12:57,  3.49s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 588/810 [30:51<11:59,  3.24s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 589/810 [30:54<11:07,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 590/810 [30:56<10:57,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 591/810 [30:59<10:40,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 592/810 [31:02<10:19,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 593/810 [31:04<09:59,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 594/810 [31:08<10:26,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 595/810 [31:10<10:18,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▎  | 596/810 [31:13<09:58,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▎  | 597/810 [31:16<09:46,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 598/810 [31:19<09:48,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 599/810 [31:21<09:42,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 600/810 [31:35<20:54,  5.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 601/810 [31:48<28:06,  8.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 602/810 [31:51<22:43,  6.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 603/810 [31:53<18:37,  5.40s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▍  | 604/810 [31:56<15:44,  4.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▍  | 605/810 [31:59<14:01,  4.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▍  | 606/810 [32:02<12:44,  3.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▍  | 607/810 [32:05<11:40,  3.45s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▌  | 608/810 [32:17<20:55,  6.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▌  | 609/810 [32:21<17:56,  5.36s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▌  | 610/810 [32:23<15:06,  4.53s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▌  | 611/810 [32:26<13:14,  3.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 612/810 [32:34<16:50,  5.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 613/810 [32:47<24:19,  7.41s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 614/810 [32:53<23:13,  7.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 615/810 [32:56<18:43,  5.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 616/810 [32:59<15:57,  4.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 617/810 [33:01<13:47,  4.29s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▋  | 618/810 [33:04<12:25,  3.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▋  | 619/810 [33:07<11:20,  3.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 620/810 [33:10<10:38,  3.36s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 621/810 [33:13<10:16,  3.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 622/810 [33:16<09:44,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 623/810 [33:29<18:47,  6.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 624/810 [33:32<16:07,  5.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 625/810 [33:36<14:34,  4.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 626/810 [33:38<12:38,  4.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 627/810 [33:41<11:41,  3.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 628/810 [33:44<10:46,  3.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 629/810 [33:47<09:54,  3.29s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 630/810 [33:50<09:22,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 631/810 [33:53<09:02,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 632/810 [33:56<09:21,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 633/810 [33:59<08:51,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 634/810 [34:02<08:46,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 635/810 [34:04<08:34,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▊  | 636/810 [34:07<08:29,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▊  | 637/810 [34:10<08:13,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 638/810 [34:13<07:57,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 639/810 [34:17<09:40,  3.39s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 640/810 [34:20<09:00,  3.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 641/810 [34:23<08:31,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 642/810 [34:26<08:14,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 643/810 [34:28<08:09,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|███████▉  | 644/810 [34:31<07:57,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|███████▉  | 645/810 [34:34<07:44,  2.82s/it] 80%|███████▉  | 646/810 [34:39<09:23,  3.43s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|███████▉  | 647/810 [34:41<08:34,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 648/810 [34:44<08:07,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 649/810 [34:47<07:59,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 650/810 [34:50<07:52,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 651/810 [34:53<07:40,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 652/810 [34:55<07:35,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).

5325571_20201_2_0,9pgisn4icz,-1.8305820964877046,-108.48407078677701,-18.349770306398057

2532659_20201_2_0,9pib3p4icz,3.604485516872994,-56.64876207880937,-40.9598018844826

5022936_20201_2_0,9pjg8o4icz,1.3592212759564404,-65.14628677521361,-56.75095312578084

1004532_20201_2_0,9pn1qn4icz,2.4190511236446133,-130.17086462905633,-53.02861922064906

2477629_20201_2_0,9pnsbp4icz,4.544311891208266,-100.72877582719713,-62.31753588896737

2584519_20201_2_0,9povao4icz,-2.5454462273990104,-94.71018296981981,-28.005321530755396

5156348_20201_2_0,9psnho4icz,3.3141966525427944,-80.87619086847161,-46.725626670142674

5653593_20201_2_0,9q15fn4icz,0.1762996308113055,-117.45094683426188,-36.42389879573442

1596401_20201_2_0,9q1vqn4icz,0.6076527446682648,-73.46236567892657,-45.4814662612599

5880303_20201_2_0,9q3dcp4icz,-0.470637070686792,-100.86877228587167,-38.97022613549741

3620208_20201_2_0,9q8agp4icz,0.6918317815146123,-129.8666819978242,-31.196328705927755

1963340_20201_2_0,9q9nto4icz,-2.998450969140489,-96.93836106626338,-7.190597171776275

4095738_20201_2_0,9qcg4p4icz,1.9585755877646556,-62.99628855857944,-70.9517397104002

3223852_20201_2_0,9qf7nn4icz,-0.28903031929124134,-107.2333163355207,-55.513163500940195

5322573_20201_2_0,9qlhon4icz,2.0488866928644534,-65.94750387003299,-34.08386541511666

2637223_20201_2_0,9qmqkn4icz,-5.905169983127267,-145.22281969469148,5.944917693111577

4477227_20201_2_0,9qo55o4icz,1.014009842118806,-72.53854358322113,-51.317643607102795

2822183_20201_2_0,9qqe8p4icz,-0.4464547502811201,-127.74225130413018,-45.71678035823142

1970907_20201_2_0,9qrgjo4icz,2.2055548949209745,-90.59520651915827,-43.54860670115637

3080250_20201_2_0,9qs0po4icz,-0.7785038098940339,-116.37278480314885,-39.72963441877707

4198694_20201_2_0,9qtexo4icz,-3.4589069217374724,-78.24049573593436,-13.828120888020877

4376788_20201_2_0,9qtvco4icz,1.0736838016986383,-77.60478555848442,-46.2240965856284

1614014_20201_2_0,9qxrjp4icz,-1.5289779872870735,-96.39455195838366,-41.98518785379717

4296487_20201_2_0,9r01kp4icz,1.8834471106478035,-79.66666138547401,-54.38722890220075

5348578_20201_2_0,9r089o4icz,0.2793597364209926,-87.2967185598263,-33.464412148215686

2356347_20201_2_0,9r6e6o4icz,0.7271228936219228,-72.3643116510251,-25.0962253547645

3245009_20201_2_0,9re5jn4icz,1.194028746779215,-113.82289509795572,-76.20274505609217

3655348_20201_2_0,9ri9fp4icz,2.3673042635729944,-98.99684852045002,-60.58588156750248

1486713_20201_2_0,9rje8o4icz,0.5643699950872988,-103.24528909777527,-43.47989627884529

3330875_20201_2_0,9rm4tn4icz,-1.6771896669449027,-116.5081467241792,-16.1672807287448

3847300_20201_2_0,9rotpn4icz,0.33913248561166914,-94.13309437680181,-42.21796951401228

3820484_20201_2_0,9rrcjn4icz,0.0017094386376124554,-101.53785881054387,-35.96649821254759

4703674_20201_2_0,9rvkwo4icz,1.8896189329223538,-94.5309744323653,-44.41274651009989

5902732_20201_2_0,9ryezo4icz,-0.8263408216058811,-92.46122919820442,-35.64575701093791

2374575_20201_2_0,9s75zo4icz,-0.2598315157125988,-111.07007777435658,-41.12642173796671

5514637_20201_2_0,9sd9ln4icz,-6.530989426260333,-119.70241232282743,-4.094897655538688

3540503_20201_2_0,9sdbbn4icz,-2.201366235500628,-141.54021100605613,-35.90164683268465

4508717_20201_2_0,9sf14o4icz,-2.40511612216306,-129.30196784493052,-22.92764950810266

2427762_20201_2_0,9sffyo4icz,-0.8736621556206204,-71.05930773467423,-28.053870886288195

3405491_20201_2_0,9si4no4icz,0.23304027426081336,-98.89530169380802,-30.05275733740858

4031650_20201_2_0,9sk5en4icz,0.5708723716006906,-85.93923619692185,-32.29216156972247

2816116_20201_2_0,9slhtn4icz,-4.927633858827271,-123.32458937682296,-5.556884236537655

6016701_20201_2_0,9snbtn4icz,0.4499073438956768,-68.08966644667498,-34.96697679783395

5533189_20201_2_0,9so78p4icz,0.005982470036649833,-82.10699684994731,-52.54956930920288

2041617_20201_2_0,9sofvn4icz,1.451507334160228,-82.76457766019305,-38.58140258018071

5831850_20201_2_0,9sr7lo4icz,-3.633482409865908,-96.12080932995042,-20.724800122421343

5489302_20201_2_0,9svbbo4icz,-1.1597960987369864,-104.27604669519715,-17.042041852595474

5187448_20201_2_0,9sywao4icz,0.6229956614207919,-87.30787494755327,-29.670570205638867

5039700_20201_2_0,9t0a2o4icz,2.7153899856299994,-76.42884769350024,-36.52041603071493

4889143_20201_2_0,9t2jwo4icz,-0.5255718725571351,-71.6933069696579,-45.04202198084545

5014600_20201_2_0,9t96io4icz,2.5052984199975925,-54.467258609856685,-43.91989385130108

2321577_20201_2_0,9tarsn4icz,4.388697876100926,-77.86106935521502,-59.06824563377121

3595442_20201_2_0,9tf7jn4icz,0.009446267732471205,-111.97474120785412,-33.84732325190009

2700219_20201_2_0,9thugo4icz,0.9084364736602539,-80.48264619862894,-46.093729791981886

3567284_20201_2_0,9tm5zo4icz,1.375823494003879,-93.82910534023992,-49.102032425853764

5829664_20201_2_0,9tmrun4icz,5.51357174768397,-120.41205353570487,-62.57744846815609

2890102_20201_2_0,9tw16p4icz,0.8549888370351464,-134.0783925754958,-32.91858301283847

3463959_20201_2_0,9u2w0o4icz,-1.4059908361464106,-70.9723781714253,-31.270271828752044

1781963_20201_2_0,9u436o4icz,-2.1844889682228215,-103.10962808672397,-19.68558480160445

3767504_20201_2_0,9u47qo4icz,-1.8434220574635078,-59.24986587787265,-35.33821338872619

5650602_20201_2_0,9uco3o4icz,1.74492104060624,-103.94745086794632,-22.19948530589076

5988888_20201_2_0,9ul2cp4icz,0.6448595564753726,-132.20118329941087,-43.01763923829971

4960370_20201_2_0,9utn8p4icz,1.1610420343066916,-65.44681629297642,-55.49737412128181

5263362_20201_2_0,9utt8p4icz,-2.6954673760217682,-103.9060817173789,-27.592996624241437

4007090_20201_2_0,9v3bxo4icz,1.0318890641118081,-94.09184198946005,-34.46934402880622

4018410_20201_2_0,9v9fuo4icz,0.9197572161932395,-63.740438716452616,-35.62488530081279

1390162_20201_2_0,9vbizo4icz,0.86281726153574,-78.85595605311178,-43.15401037257949

2482669_20201_2_0,9vbw4o4icz,-1.938719012169954,-50.55959899917269,-32.78207354012736

5526137_20201_2_0,9vdyfn4icz,0.7790582093293529,-79.49773379773629,-41.33916385502084

2435921_20201_2_0,9vg3zo4icz,-0.26200411605713697,-155.66289993675616,-37.98722341432868

3159934_20201_2_0,9vhbeo4icz,-1.3013487518146871,-82.01431554231937,-21.692169069580757

3215032_20201_2_0,9vy2oo4icz,-0.49309406441584513,-109.4535669615799,-36.28565532770068

1989870_20201_2_0,9w29ho4icz,-4.039198507974153,-91.9237339016,-12.064200983699592

3654682_20201_2_0,9w5fwn4icz,-1.1675325979004265,-107.27320041581493,-42.104853464586796

4929969_20201_2_0,9w623o4icz,-1.655988210874757,-96.35003194325594,-14.005487443082302

2630313_20201_2_0,9wbeon4icz,-1.5606119205295919,-74.68702927312918,-37.236643190816864

2396885_20201_2_0,9wdqnn4icz,-2.8082799624871257,-130.10788234745237,-8.482713786954676

2926067_20201_2_0,9wlh7p4icz,-1.937268442071246,-129.4470961933074,-16.203061310821326

4303952_20201_2_0,9wmsep4icz,1.1329577983825874,-102.25279148030344,-47.72189444945391

1806906_20201_2_0,9wpicn4icz,-2.008668294285068,-131.40244080055822,-15.035235230357046

2399471_20201_2_0,9wqc8p4icz,-3.3966882488991144,-131.08516527343784,-19.994241228973067

2823038_20201_2_0,30hx9n4icz,-0.6854307350197076,-130.17755517653654,-36.30590737189311

2016387_20201_2_0,9wrrap4icz,1.9648211007765914,-92.48213131876469,-34.426582975587536

2718257_20201_2_0,9wu7po4icz,2.1184535388311296,-96.97132031382074,-50.93197196204093

3779706_20201_2_0,9wx17o4icz,-1.286926721944671,-102.61334286094285,-5.555463723813119

5707419_20201_2_0,9wz1lo4icz,-1.0404944658949717,-125.47930771757368,-10.98436699033212

6020076_20201_2_0,9x4r2o4icz,0.7555952914584493,-72.66537960662859,-19.19962566489359

1686661_20201_2_0,9x7skn4icz,0.6834242239685304,-63.6862398003758,-22.071351204198592

2884381_20201_2_0,9xdp0p4icz,-3.6904475533034082,-56.09634916007593,-31.04630016653627

1820624_20201_2_0,9xdt6o4icz,0.12720911620226158,-81.76031820436228,-25.69210103765485

3697138_20201_2_0,9xem3o4icz,-2.332769987784167,-83.95642942543736,-16.00141876498455

1863220_20201_2_0,9xknvo4icz,-2.949135363663991,-42.060072530833565,-27.17746738517657

3117361_20201_2_0,9xn9ap4icz,2.2613170048298903,-122.92433669116195,-36.95244742250517

2972547_20201_2_0,9xnbgn4icz,-1.8865545002757413,-122.3582428150109,-25.828819306397776

1372682_20201_2_0,9xtdgp4icz,-2.409852922770868,-86.55682262289125,-19.323448119469916

5169468_20201_2_0,9xwg3o4icz,-1.348459937063766,-116.69259630617,-35.2798623727203

5739115_20201_2_0,9xwmyo4icz,-0.7098038810533398,-56.65304926166044,-28.96181751647066

2585460_20201_2_0,9xwz0p4icz,-1.3831412284397764,-60.18899279146976,-42.94521667190898

5392594_20201_2_0,9xywqo4icz,2.0058621509807266,-81.21557412738716,-40.15904121410772

2162703_20201_2_0,9y6y7p4icz,-1.7394743666071755,-113.08420779749292,-8.700721168958523

3299774_20201_2_0,9yd8po4icz,-1.1673258308370658,-86.79171530649705,-37.23401489494459

1848025_20201_2_0,9yekhp4icz,-1.8553780719833504,-100.25493439698872,-25.946612479633245

3350999_20201_2_0,9ygyon4icz,-5.772474227012734,-132.4247039460198,-0.44162136611555525

3444715_20201_2_0,9yjwpo4icz,4.554238301677251,-76.34599887904301,-51.923860684639976

2954085_20201_2_0,9ypx9o4icz,8.573551357498172,-38.23606364339298,-80.20600718558921

2780827_20201_2_0,9yr1ao4icz,-2.241014603420645,-116.70964831071387,-16.527799904764933

2361367_20201_2_0,9ysy5n4icz,-1.3478598670530517,-93.35150019630814,-32.96134137611614

5534889_20201_2_0,9yw46p4icz,3.5602655146119604,-126.1302272565529,-35.5939250372746

5332318_20201_2_0,9z09co4icz,0.7263632370254772,-154.94283571130467,-45.15067740672356

2098775_20201_2_0,9z4tfn4icz,-23.382369002826938,-141.5023953725049,118.2176834733583

3835975_20201_2_0,9z51mn4icz,-2.2965680847399,-100.760835636345,-19.970173344333688

5420232_20201_2_0,9z63qn4icz,2.7824735396032807,-132.18611804702596,-42.150448853050634

5375953_20201_2_0,9zgk9n4icz,1.819190591092675,-176.59674882515338,-39.4749015195829

3800481_20201_2_0,9zlfcp4icz,-1.3478986019826937,-107.98188721361501,-37.95713210321878

3784856_20201_2_0,9zsz3p4icz,-3.822927086498134,-124.84153204609731,-18.0953944940929

4276124_20201_2_0,9zvi7o4icz,-3.1332231348225865,-88.65093547787725,-20.172199510993963

2122870_20201_2_0,9zz5yo4icz,-0.04059134266519445,-117.95226341004386,-29.405674190418836

3955428_20201_2_0,a0bbao4icz,0.11733748479547056,-101.70593629484301,-30.47931830625147

3014621_20201_2_0,a0bzeo4icz,-2.999475122385601,-72.13649736512048,-12.333116956295797

2739569_20201_2_0,a0gcto4icz,1.651245037445794,-85.45066886252954,-35.11961098584278

1517324_20201_2_0,a0iejo4icz,3.165229219772571,-81.9448323155716,-42.929930520468474

1358527_20201_2_0,a0l84o4icz,0.9690095730316894,-84.6820551746813,-29.03893672960993

5641110_20201_2_0,a0n9jp4icz,0.5695888356147588,-106.95618182761623,-41.398081052043565

2291957_20201_2_0,a0nrzn4icz,-0.9301686935849917,-135.16121806748356,-22.918077587594382

3370496_20201_2_0,a0sqyo4icz,3.100934544696939,-87.7463411391256,-43.76656828887508

4987868_20201_2_0,a0ssip4icz,2.375437161391874,-60.51658681581489,-41.83259168005826

2136779_20201_2_0,a0zahp4icz,-2.7589895838718763,-116.9762013605287,-20.231659441474818

4510307_20201_2_0,a0zr7n4icz,4.010998265749932,-126.79161454407279,-72.63399742092201

2518603_20201_2_0,a17u5p4icz,-1.2387011243838317,-169.65280114773986,-17.44176873252961

4662307_20201_2_0,a18f0o4icz,-2.7696753485205527,-119.25578370735118,-22.693804238228978

5860072_20201_2_0,a1gilo4icz,-0.44306309218214535,-88.51979666387177,-29.56304585059408

1987352_20201_2_0,a1hz9n4icz,0.5194921862787366,-131.96429746028983,-43.71529289569436

4681284_20201_2_0,a1l4bo4icz,1.5379231912924025,-116.20039734582176,-39.57740979198297

1370441_20201_2_0,a1l8xo4icz,0.6364289285002278,-54.348575277843,-46.00967541607166

2478431_20201_2_0,a1mxnn4icz,3.082395997822827,-68.73698554690566,-61.80962178454385

5845762_20201_2_0,a1q9hp4icz,-4.329730533923221,-163.87277493731528,-28.47344337480945

2585205_20201_2_0,a1yjjn4icz,-0.20803585466396982,-79.12301597811964,-29.679561196132653

2021199_20201_2_0,a1yqip4icz,1.047367508232654,-108.38133447599026,-23.94258926948467

5340213_20201_2_0,a20kjn4icz,0.5035761160167599,-123.01389816397278,-44.23930442274455

2982523_20201_2_0,a24j0o4icz,-0.6682922836760941,-109.53741347340403,-33.59714588420111

4449211_20201_2_0,a25ngp4icz,0.8069257417581291,-100.78915382152275,-39.528819173793536

4350472_20201_2_0,a269ho4icz,0.8197696078108613,-96.10740958058636,-26.13401592678197

2312579_20201_2_0,a29d3o4icz,-0.282669483590882,-101.68004593343852,-21.244649215021738

3260575_20201_2_0,a29u7p4icz,-5.9963816657650515,-131.5046890170546,-19.32041315126068

5370545_20201_2_0,a2ad3o4icz,0.828554551603681,-66.56319997932903,-30.99442083005883

4159847_20201_2_0,a2baro4icz,-3.3102430860557566,-73.93815121187694,-18.087668159635996

1845254_20201_2_0,a2bb1o4icz,-2.2154771020569974,-150.53210312951217,-15.331628485528682

5932662_20201_2_0,a2d03o4icz,0.6423119180226815,-98.31991432811478,-38.50896185548561

3719970_20201_2_0,a2dcbo4icz,-1.9407655477316004,-98.47818680509747,-40.958579001951065

1423215_20201_2_0,a2geho4icz,-1.8789380415522645,-105.49757617335112,-16.5201736162539

5354223_20201_2_0,a2h18p4icz,0.4567111289683675,-80.43818357646592,-50.14597829516144

4344728_20201_2_0,a2jnro4icz,0.7205170274311534,-52.71680147085169,-35.299714381881984

1198381_20201_2_0,a2o07p4icz,-0.23708210892415724,-124.61068026613577,-32.96953537222302

3546912_20201_2_0,a2t6to4icz,-1.221366569389734,-131.59162117453891,-31.96146638778592

4051443_20201_2_0,a2tqon4icz,-7.256670635656802,-132.7708784638729,-3.956516174540667

2299170_20201_2_0,a2z3un4icz,0.8037680873274131,-77.06343276550419,-32.25716653290584

1097679_20201_2_0,a2zceo4icz,0.29695725404892137,-117.78406963630107,-26.127929664042938

2029176_20201_2_0,a32ato4icz,0.15500247399370612,-118.47861374289451,-43.27691173521211

4327893_20201_2_0,a32bfp4icz,-0.6881290974667105,-126.1086241340312,-36.3700690401737

1701028_20201_2_0,a32lgp4icz,-1.9704292932361323,-131.49515825219743,-33.01128773327807

3177964_20201_2_0,a32z8p4icz,-0.977167709579129,-104.80944754846138,-22.605787738085724

1151620_20201_2_0,a374ap4icz,0.8596539467895301,-82.9476815689057,-46.53899624988418

1760349_20201_2_0,a3dcdp4icz,-8.112284440491283,-122.22337846626894,16.310608202039674

4976076_20201_2_0,a3doep4icz,-2.5381791501396798,-110.63483136956634,-36.50992112796226

3385647_20201_2_0,a3fo7n4icz,2.468201331327961,-115.64049528188528,-57.151717312385

4464946_20201_2_0,a3h8mo4icz,0.20817664304524539,-105.24756607059089,-31.456387123106722

1556674_20201_2_0,a3ho0o4icz,-0.5854676745342267,-74.48361314986451,-38.04660041741681

4399116_20201_2_0,a3iw5p4icz,-4.019846324137951,-88.44265810662773,-1.3610076243374465

4232847_20201_2_0,y9m47p4icz,4.831605863155061,-78.4344937131562,-78.14756230733758

2837734_20201_2_0,a3mkln4icz,2.373510522220398,-117.8092434968487,-67.33262997046735

3149528_20201_2_0,a3n6bo4icz,-0.13357360101117344,-81.51201642138719,-28.216676229043387

2423202_20201_2_0,a3p69o4icz,-2.4682959980121217,-109.3990011574991,-18.887462823599932

3830742_20201_2_0,a3p6fo4icz,-0.4277207889896028,-71.72238184819795,-31.099956390646184

3769905_20201_2_0,a3u78p4icz,-0.8292594351313306,-118.12181174320801,-32.315384024475094

4125865_20201_2_0,a3vkin4icz,1.8344541186049943,-115.66546129808924,-33.44814158119317

4242357_20201_2_0,a3yf0p4icz,-0.021593433323630673,-131.75066510539466,-40.296943908574974

5964496_20201_2_0,a48s3p4icz,-3.3785909319159524,-84.22175278404205,-19.329684536939496

2549599_20201_2_0,a4evho4icz,2.1404731583603547,-54.95879490161187,-17.79383906608939

2071955_20201_2_0,a4k3ao4icz,-2.188440359598753,-112.5528564434301,-24.379700342914845

1929148_20201_2_0,a4nlto4icz,-2.0296027310373024,-100.48802420040928,-32.93696461707613

4024902_20201_2_0,a4wlbp4icz,12.102668406934473,-90.02673057037455,-83.4356640395778

1181520_20201_2_0,a4yrho4icz,2.8780556963518884,-52.76883742718948,-43.67108915951093

4303668_20201_2_0,a51hyn4icz,-1.2000481645331402,-87.14164000910915,-35.958844305246586

5047411_20201_2_0,a51iip4icz,1.784842390491529,-91.50547639562956,-57.19657289842995

2678783_20201_2_0,a51x8n4icz,0.5166829166528565,-89.54689662531297,-37.01876749854533

5220983_20201_2_0,a52mfo4icz,0.8714030958928248,-45.653627955772805,-23.847561284135708

4877927_20201_2_0,a598bp4icz,-2.795560058816641,-96.29789788159573,-43.44139808585287

5167430_20201_2_0,a5aoso4icz,-3.114990493686477,-98.98984502085614,-24.337324778015073

1996564_20201_2_0,a5khdo4icz,1.8379719768863596,-108.27302876318078,-27.099947559149797

2160110_20201_2_0,a5ldlo4icz,2.458221472004686,-106.355967149637,-44.810963801829175

3706727_20201_2_0,a5lxeo4icz,-1.3263617357927215,-96.90100484508739,-25.91089855817988

4555964_20201_2_0,a5o2wo4icz,-0.612862279255733,-70.96449747311041,-33.008323342451334

4691417_20201_2_0,a5rmio4icz,3.213540987480235,-77.9826251227783,-55.55122334078153

3438287_20201_2_0,a5ry6o4icz,3.336044550012173,-77.0807565838656,-48.380953485092746

3754079_20201_2_0,a5uq7p4icz,3.3591460143090544,-71.35340975754855,-79.09775090935703

5103982_20201_2_0,a5uqkn4icz,2.033374170154211,-92.20958406204093,-72.63141799984652

3213509_20201_2_0,a5yvcp4icz,-0.6707990053378089,-131.17823938030304,-33.72688554395191

3836952_20201_2_0,a65qpn4icz,-1.4841128878968983,-87.17397491718856,-39.07742694395529

1591482_20201_2_0,a6hv1o4icz,-8.440780404590305,-140.87932816200154,20.58642478045543

2282750_20201_2_0,a6iixo4icz,-3.295681405283631,-115.02758796115506,-24.69655784522081

2016156_20201_2_0,a6lbin4icz,1.531283841495607,-76.04839621296958,-43.3349112640482

3239485_20201_2_0,a6p97p4icz,-0.29693798204695393,-126.42726738486104,-47.04705687201006

5373049_20201_2_0,a6r8ho4icz,-1.451837208765045,-105.10289678574802,-11.653595656471154

1699190_20201_2_0,a6s11o4icz,2.3295390754442438,-75.181639642537,-43.409371627533915

4780616_20201_2_0,a6tmpn4icz,-1.4231836901578365,-96.91230506204056,-31.744001533448753

5136026_20201_2_0,a6wbeo4icz,-3.4496376495765433,-68.07621691373922,-18.873565131678603

2366799_20201_2_0,a6y13p4icz,2.525169175305044,-69.62805933192993,-66.23695007474282

2079444_20201_2_0,a6zkpo4icz,-1.3035466563608766,-72.54761289936084,-18.793057950727857

2755452_20201_2_0,a711fn4icz,-0.5053594076008109,-120.59135621604446,-25.060286132332294

2535082_20201_2_0,a71xmo4icz,1.7854853682019318,-47.76785482361362,-52.9743983295169

4734177_20201_2_0,a746cp4icz,-1.501744681241679,-128.8404226771571,-18.416984622022312

5378964_20201_2_0,a7556p4icz,2.36143275459639,-97.97022358099218,-63.58641151633762

4535197_20201_2_0,a7b2rn4icz,-0.40932784403323197,-89.25668305865494,-43.969264824110724

1628069_20201_2_0,t2108p4icz,0.9236523832788983,-95.97380609502716,-27.705887097918136

3781647_20201_2_0,a7fy6o4icz,0.596947934017716,-85.29341206366638,-41.444001113984385

5476424_20201_2_0,a7gf3p4icz,5.281608035273962,-89.42546831038189,-70.20561176390949

2493741_20201_2_0,a7omco4icz,-1.1152621711621584,-82.10948292341965,-26.712051310978666

4462952_20201_2_0,a7yxdn4icz,5.725990363425225,-76.6808969186666,-69.40788312746511

4509665_20201_2_0,a7zmkn4icz,0.1298770810030548,-83.67555827808565,-35.704533076843035

4584279_20201_2_0,a81gvo4icz,0.8882598682276177,-80.54246489230172,-44.82395790814351

3345738_20201_2_0,a84w9o4icz,0.5299293404999621,-103.37137704142529,-27.29258495544282

5944518_20201_2_0,a858bo4icz,2.2979256312149814,-53.07856533336292,-44.408009925707745

4704907_20201_2_0,a86m8p4icz,-2.920330156328421,-85.07129492859318,-21.810571024583723

2469681_20201_2_0,a86vbp4icz,-3.2685445448657635,-141.07789855681258,-32.27833584696283

4872239_20201_2_0,a88mao4icz,0.6571442885995121,-128.2710368791199,-37.592004413820575

2987615_20201_2_0,a8bnan4icz,0.8301423050640945,-109.00577665486037,-40.378136851229

2169528_20201_2_0,a8k1hp4icz,0.008241541269765361,-101.74312142025295,-41.04311255798042

2571736_20201_2_0,a8k2bo4icz,0.03836020847929147,-98.1830569856917,-22.274195447250406

3712786_20201_2_0,a8oeln4icz,0.16805916689222228,-104.91499970129698,-32.75823392511175

1072398_20201_2_0,a8psro4icz,0.7360089627996736,-129.85590253910465,-11.095663268549458

5789908_20201_2_0,a8rc1o4icz,-2.3062012178857842,-141.9648228837941,-17.5165017755736

2903275_20201_2_0,a8syfn4icz,2.3851982842271524,-89.61430823394747,-48.811895782312845

3028147_20201_2_0,a8w75p4icz,-1.7691441244096284,-79.75952043742654,-36.616463240535566

2629374_20201_2_0,a8y8bp4icz,-3.41097934133155,-106.2391491842497,5.533593749414095

1826040_20201_2_0,a9087p4icz,-1.8067213694250965,-82.80269906748316,-26.941599665077547

2480633_20201_2_0,a94a8n4icz,-0.6309984267493246,-96.04769028054525,-42.58027211687545

1502074_20201_2_0,a95man4icz,-3.8743903320298942,-104.00751288671708,-22.13541617111524

4574487_20201_2_0,a9g3mo4icz,-1.0960913384253506,-104.73818125007335,-32.378353243472915

1183756_20201_2_0,a9g4cp4icz,0.8820063491552185,-83.30714899526245,-61.28835873772064

5530257_20201_2_0,a9knqn4icz,-2.2658141583705667,-62.521795815210055,-22.6772209360459

3666942_20201_2_0,a9lsgo4icz,4.076492950391422,-76.73931579106315,-56.20647004116948

1727122_20201_2_0,a9pzeo4icz,-1.707952219595857,-70.32228804287874,-32.808359858554724

2734258_20201_2_0,a9s3co4icz,-1.2045583638564403,-130.81672593151924,-26.467486974568203

4652944_20201_2_0,a9vdio4icz,-1.1212114347771418,-70.3265302433669,-24.818271168429916

1495256_20201_2_0,aa2w5o4icz,2.065338088264857,-118.57527728977885,-40.690784619772344

4246636_20201_2_0,aa8hbo4icz,0.6823395691605737,-92.75393831897927,-20.096659783725414

2503204_20201_2_0,aaa7dp4icz,2.2904186563039004,-107.30085507351461,-51.23871866879446

4344516_20201_2_0,aabjdo4icz,-0.10373942545626362,-56.58278647889176,-21.37878142845331

3334519_20201_2_0,aagazn4icz,2.8162097890972912,-53.471349100353024,-62.19431899113573

6025779_20201_2_0,aagwkn4icz,-0.9636025922567196,-116.13386744040974,-13.478539142913348

5079133_20201_2_0,aahdlo4icz,-3.743273959298181,-137.69236168133926,-13.370449451287243

4664651_20201_2_0,aan6dn4icz,-0.7801257796514532,-121.06598738326247,-46.85445352753884

4097558_20201_2_0,aandpn4icz,-0.7769470597580662,-107.3316364385768,-38.48146711338288

2477077_20201_2_0,aanorn4icz,0.03657951367902416,-56.68073374906217,-41.567415050903975

4620085_20201_2_0,aazbbp4icz,2.30758310609221,-43.910797099694946,-53.88960693713989

1457964_20201_2_0,ab071o4icz,-5.1893507804262065,-79.8439328101372,-17.331916421972352

3095056_20201_2_0,ab1d1o4icz,0.6916685312153331,-71.45193627202144,-34.64032048003574

1064698_20201_2_0,ab2ain4icz,-0.6439861296528535,-128.16281542176543,-39.13876701426328

5401569_20201_2_0,ab6aip4icz,-1.8723193201375372,-86.79677311865967,-31.487292675730615

2258949_20201_2_0,ab8onn4icz,-7.723749763330488,-67.66588630774783,-3.8990767997234173

4874155_20201_2_0,ab9tbp4icz,4.045415317107778,-96.22956764215147,-78.37109892900877

2211944_20201_2_0,abay7p4icz,-1.651364899378894,-78.61554943680338,-30.49073920019049

5486706_20201_2_0,abbgdo4icz,-2.0896789475465747,-104.96033589313686,-16.497479344260242

3059867_20201_2_0,abcqcp4icz,0.8746967587074346,-106.64924333110719,-49.88114314961224

2609061_20201_2_0,abd4mn4icz,1.7345332185049616,-107.68945768172847,-42.45933045700875

5239534_20201_2_0,abdjvn4icz,7.989538540959096,-83.9634365958691,-68.13407789884819

1370385_20201_2_0,abdxen4icz,1.3004815956743094,-90.44386098322806,-30.870789240371053

4203558_20201_2_0,abe3xo4icz,-1.250093964604366,-92.92212184017731,-36.93556332261818

3909799_20201_2_0,abog8p4icz,0.2973153231844863,-89.12520857232172,-34.02635445323186

4867753_20201_2_0,abq2no4icz,0.16756888095377268,-103.43492447731882,-37.08263181018839

1422603_20201_2_0,abrgnn4icz,-3.744045282626069,-131.31662823073304,-8.119101139981993

2671077_20201_2_0,abwfon4icz,0.5487360615560198,-105.72148598038581,-27.869321176205887

2706849_20201_2_0,ac11yo4icz,0.4506500348110673,-118.5167706257835,-24.330033623763825

5858885_20201_2_0,ac39un4icz,1.0329416981904134,-96.58731732104144,-36.494937689980475

3458794_20201_2_0,ac3qso4icz,-8.411388664052826,-104.48589446513631,-3.5491020981514794

3531761_20201_2_0,ac4vqn4icz,3.7726839935161083,-77.86999320454146,-52.43726602467015

5593806_20201_2_0,ac9khp4icz,-0.37667096901512753,-99.74161173965555,-33.59496787577051

3938930_20201_2_0,acclmo4icz,1.745547295116903,-80.00176209763367,-44.98292884096411

1856966_20201_2_0,acd0jp4icz,2.0077548283117173,-94.87422801601338,-56.18068570908014

4113859_20201_2_0,acnrho4icz,-0.3352940327636868,-86.31559557538944,-26.252554556681446

2816010_20201_2_0,acqtun4icz,4.789322457642916,-82.51994830147936,-42.15163328362881

4173890_20201_2_0,acqzeo4icz,-0.3460915840489629,-69.54136595348373,-25.733343929667612
 81%|████████  | 653/810 [34:58<07:35,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 654/810 [35:01<07:42,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 655/810 [35:04<07:33,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 656/810 [35:07<07:23,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 657/810 [35:10<07:16,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 658/810 [35:12<07:04,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████▏ | 659/810 [35:15<06:57,  2.76s/it] 81%|████████▏ | 660/810 [35:18<07:10,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 661/810 [35:22<07:31,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 662/810 [35:25<07:24,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 663/810 [35:27<07:07,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 664/810 [35:30<06:59,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 665/810 [35:33<06:56,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 666/810 [35:36<06:51,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 667/810 [35:39<06:49,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 668/810 [35:42<06:46,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 669/810 [35:44<06:28,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 670/810 [35:47<06:34,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 671/810 [35:50<06:27,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 672/810 [35:53<06:34,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 673/810 [35:55<06:22,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 674/810 [35:58<06:23,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 675/810 [36:01<06:23,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 676/810 [36:04<06:12,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▎ | 677/810 [36:07<06:27,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▎ | 678/810 [36:10<06:24,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 679/810 [36:13<06:20,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 680/810 [36:15<06:07,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 681/810 [36:19<06:17,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 682/810 [36:22<06:14,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 683/810 [36:24<05:59,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 684/810 [36:27<05:56,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▍ | 685/810 [36:30<05:46,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▍ | 686/810 [36:32<05:44,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▍ | 687/810 [36:35<05:47,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▍ | 688/810 [36:38<05:41,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▌ | 689/810 [36:41<05:32,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▌ | 690/810 [36:43<05:27,  2.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▌ | 691/810 [36:46<05:32,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▌ | 692/810 [36:49<05:23,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 693/810 [36:52<05:20,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 694/810 [36:54<05:18,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 695/810 [36:57<05:15,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 696/810 [37:00<05:18,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 697/810 [37:07<07:19,  3.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 698/810 [37:09<06:33,  3.51s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▋ | 699/810 [37:12<06:01,  3.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▋ | 700/810 [37:20<08:35,  4.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 701/810 [37:23<07:32,  4.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 702/810 [37:26<06:45,  3.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 703/810 [37:29<06:15,  3.51s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 704/810 [37:31<05:50,  3.31s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 705/810 [37:34<05:22,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 706/810 [37:37<05:13,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 707/810 [37:39<04:57,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 708/810 [37:42<04:53,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 709/810 [37:45<04:46,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 710/810 [37:49<05:31,  3.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 711/810 [37:53<05:28,  3.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 712/810 [37:56<05:28,  3.35s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 713/810 [37:59<05:16,  3.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 714/810 [38:02<05:01,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 715/810 [38:05<04:48,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 716/810 [38:08<04:37,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▊ | 717/810 [38:11<04:35,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▊ | 718/810 [38:13<04:25,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 719/810 [38:16<04:21,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 720/810 [38:19<04:20,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 721/810 [38:22<04:18,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 722/810 [38:25<04:11,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 723/810 [38:28<04:27,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 724/810 [38:31<04:10,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|████████▉ | 725/810 [38:34<04:02,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|████████▉ | 726/810 [38:36<03:50,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|████████▉ | 727/810 [38:39<03:48,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|████████▉ | 728/810 [38:42<03:44,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 729/810 [38:44<03:46,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 730/810 [38:47<03:44,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 731/810 [38:50<03:42,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 732/810 [38:53<03:36,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 733/810 [38:56<03:32,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 734/810 [38:58<03:32,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 735/810 [39:01<03:25,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 736/810 [39:04<03:21,  2.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 737/810 [39:06<03:15,  2.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 738/810 [39:09<03:13,  2.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 739/810 [39:12<03:08,  2.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████▏| 740/810 [39:14<03:11,  2.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████▏| 741/810 [39:17<03:08,  2.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 742/810 [39:20<03:07,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 743/810 [39:23<03:02,  2.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 744/810 [39:25<02:58,  2.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 745/810 [39:28<02:57,  2.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 746/810 [39:31<03:02,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 747/810 [39:34<02:56,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 748/810 [39:37<02:52,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 749/810 [39:39<02:49,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 750/810 [39:42<02:48,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 751/810 [39:45<02:49,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 752/810 [39:48<02:44,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 753/810 [39:51<02:42,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 754/810 [39:54<02:39,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 755/810 [39:57<02:35,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 756/810 [39:59<02:31,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 757/810 [40:02<02:26,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▎| 758/810 [40:05<02:22,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▎| 759/810 [40:22<06:08,  7.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 760/810 [40:28<05:35,  6.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 761/810 [40:31<04:28,  5.49s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 762/810 [40:33<03:43,  4.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 763/810 [40:36<03:17,  4.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 764/810 [40:40<02:58,  3.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 765/810 [40:42<02:41,  3.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▍| 766/810 [40:45<02:26,  3.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▍| 767/810 [40:48<02:13,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▍| 768/810 [40:51<02:09,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▍| 769/810 [40:54<02:03,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▌| 770/810 [40:56<01:57,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▌| 771/810 [40:59<01:54,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▌| 772/810 [41:02<01:48,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▌| 773/810 [41:05<01:42,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 774/810 [41:07<01:40,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 775/810 [41:11<01:42,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 776/810 [41:13<01:37,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 777/810 [41:16<01:34,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 778/810 [41:23<02:10,  4.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 779/810 [41:26<01:55,  3.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▋| 780/810 [41:29<01:42,  3.41s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▋| 781/810 [41:31<01:33,  3.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 782/810 [41:34<01:25,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 783/810 [41:37<01:20,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 784/810 [41:40<01:17,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 785/810 [41:43<01:13,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 786/810 [41:45<01:07,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 787/810 [41:48<01:05,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 788/810 [41:51<01:02,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 789/810 [41:54<00:59,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 790/810 [41:56<00:54,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 791/810 [41:59<00:53,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 792/810 [42:02<00:51,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 793/810 [42:05<00:47,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 794/810 [42:08<00:43,  2.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 795/810 [42:10<00:41,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 796/810 [42:13<00:39,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 797/810 [42:16<00:36,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▊| 798/810 [42:19<00:34,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▊| 799/810 [42:22<00:32,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 800/810 [42:25<00:28,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 801/810 [42:28<00:25,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 802/810 [42:31<00:22,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 803/810 [42:37<00:26,  3.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 804/810 [42:40<00:21,  3.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 805/810 [42:43<00:16,  3.38s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|█████████▉| 806/810 [42:46<00:12,  3.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|█████████▉| 807/810 [42:48<00:09,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|█████████▉| 808/810 [42:51<00:05,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|█████████▉| 809/810 [42:54<00:02,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|██████████| 810/810 [42:58<00:00,  3.18s/it]100%|██████████| 810/810 [42:58<00:00,  3.18s/it]

2480367_20201_2_0,actxro4icz,1.1814440274997744,-60.808226517771516,-51.412811260236396

1676441_20201_2_0,acux5p4icz,0.19655147383368313,-91.52972775429134,-27.839656305168276

5869291_20201_2_0,acvgwo4icz,-2.045836589334587,-69.40985025869273,-22.103910548591173

2580681_20201_2_0,aczlqn4icz,2.6173503799960267,-66.9442072853958,-45.87965044644977

4093967_20201_2_0,ad2pkn4icz,0.45190943054170896,-87.57494825466807,-36.46107324947677

1945651_20201_2_0,ad63kp4icz,2.48625028425641,-94.52572283592289,-53.026921208617736

5993089_20201_2_0,add0bn4icz,-0.6545066161566359,-98.1507822454231,-35.34261740580821

2732872_20201_2_0,adfudo4icz,-0.7813725910388424,-76.59433547664167,-35.17918355622655

1134896_20201_2_0,adg7eo4icz,-1.2310124334977217,-46.674982750367406,-8.650837821455482

4248283_20201_2_0,adgl0p4icz,2.799064699896609,-83.70415907942638,-55.11360596154178

4009584_20201_2_0,adiudn4icz,-0.202916445374074,-101.67140865698326,-32.250697944396705

5001630_20201_2_0,adjsin4icz,-0.2093881011792623,-65.86916589164832,-27.681829697388366

3714098_20201_2_0,adlvsn4icz,0.8845234158411919,-113.36080551486455,-53.874646025162434

2694732_20201_2_0,adm9wn4icz,0.46221209757371484,-57.138406942222474,-38.593555629612425

2813679_20201_2_0,adn56p4icz,-0.684883565892007,-106.61589009920033,-42.690068663550804

4953168_20201_2_0,adnomn4icz,0.01913219057575584,-101.26241593093397,-35.48935287443963

2821769_20201_2_0,adoicp4icz,-0.6698530545818344,-77.98468533488546,-41.43655902607891

5013460_20201_2_0,adq0ep4icz,-2.1072770777232352,-97.23343728051478,-39.08907472011319

3052180_20201_2_0,adzkpn4icz,0.8747762953331282,-62.404598202426996,-39.02520713709019

1909350_20201_2_0,ae0l9n4icz,-1.2663856947410943,-66.7684093653489,-27.490121559578526

4736530_20201_2_0,aefv3o4icz,2.0144492922386394,-53.09931861553045,-36.67996130126093

2667473_20201_2_0,aekqtn4icz,-0.7941537732567185,-111.9776596389751,-29.6270541999163

4140346_20201_2_0,aemnip4icz,-1.506610396776771,-111.0173649285224,-82.61818542394947

1172294_20201_2_0,aenocp4icz,4.620253037382036,-29.09413958231488,-45.79513843236697

5526893_20201_2_0,aeq1sn4icz,0.8179406761975384,-71.57616322081387,-34.35716382237584

4071220_20201_2_0,aeq6yo4icz,-1.6468500368175942,-86.51808589556487,-31.741668661084987

2118899_20201_2_0,aeursn4icz,-1.7291203538303472,-97.9989414910697,-25.183761849391644

2016795_20201_2_0,af41ro4icz,0.4313074742846907,-112.0814466613424,-34.989632606827

4278125_20201_2_0,af4kjo4icz,4.733376248252099,-65.1725264366471,-49.34839495652008

4916913_20201_2_0,af4rbo4icz,0.5273593032544475,-89.60525377633465,-36.57032897127117

1079004_20201_2_0,af545p4icz,-0.5672482142832957,-61.45898989827586,-15.616921385441643

5140364_20201_2_0,af5rgp4icz,-0.3536686287443296,-86.63873681137537,-47.16988287479968

3782642_20201_2_0,afgwdo4icz,0.5381826799251038,-91.56778955001963,-53.44490376942558

4075462_20201_2_0,afkuon4icz,-0.03997146036289049,-97.32961283268276,-45.815532131156175

1017984_20201_2_0,afrp4p4icz,1.158712275262473,-108.30537763652643,-41.488893612145304

1399236_20201_2_0,afrumo4icz,-0.5491002481211251,-118.22228878463989,-29.791397532885497

4858427_20201_2_0,aft4mn4icz,0.5105774139726598,-62.686637446438965,-35.25938821073366

1948021_20201_2_0,ag3qjp4icz,-0.882893229576588,-109.61831327939791,-37.55073043352816

4424872_20201_2_0,ag4cdn4icz,0.2899269728592948,-103.63015908574837,-21.397394139140985

4516028_20201_2_0,ag4ypo4icz,-0.7895083524388543,-116.10346430590275,-29.29815101389636

5244160_20201_2_0,ag7tjn4icz,-2.6179299544644654,-103.61435022440338,-24.93193274734554

1361969_20201_2_0,ag7u7p4icz,-0.5211500114559777,-122.14675599426374,-31.32677119928678

3519247_20201_2_0,agapvo4icz,-1.0068460421342358,-78.21471366370531,-26.890845066336112

4660660_20201_2_0,agbm5o4icz,2.3174437367066028,-144.34487115537635,-52.87999555705542

3339238_20201_2_0,agbn6o4icz,-5.518677734609086,-96.3214141359768,-27.183053396520776

4068020_20201_2_0,agipto4icz,-0.23657565543123735,-115.51218425446947,-31.540063876855555

5162857_20201_2_0,agjexn4icz,-1.8674411908586586,-104.17892948653088,-17.10965384437506

5595248_20201_2_0,agqf9o4icz,-1.6890774567782054,-79.0930664321298,-25.06811417550351

1380210_20201_2_0,ags44o4icz,-0.5798248818116969,-121.63176677134823,-32.22004333539232

3534955_20201_2_0,agufdn4icz,1.8481666054337873,-98.62724663779073,-49.725766378156024

3425761_20201_2_0,agx93p4icz,-1.920816863615456,-109.96592701188084,-18.772673825107418

2083552_20201_2_0,ah2m3o4icz,-1.3043422074074498,-109.1655806372481,-40.53854155788342

1514069_20201_2_0,ahawyo4icz,0.41573148041390456,-97.65953016868943,-44.28378862448491

4658864_20201_2_0,ahcono4icz,-0.219415564092649,-61.370833767033474,-33.06929391963948

5161775_20201_2_0,ahftjo4icz,-3.1448654706105805,-118.94869918941353,-36.37644179185514

3186668_20201_2_0,ahfxjp4icz,-0.9777731110884865,-125.62260068993578,-40.87980394676403

1538812_20201_2_0,ahl8on4icz,-0.10332977194333175,-109.73875134727277,-25.317428034417816

1800901_20201_2_0,ahlfjp4icz,8.974799973642277,-56.05724410790049,-60.99233276463747

5654255_20201_2_0,ahm6do4icz,-4.3178190508953636,-98.25951815100188,-15.806599548375104

1713734_20201_2_0,ahpoeo4icz,-5.58097922249337,-125.81000431068219,3.9161488267541813

5086342_20201_2_0,ahqcmo4icz,-2.3120286717213525,-80.62431823042616,-19.802910888837616

1333201_20201_2_0,ahurjp4icz,-4.227624692241521,-110.38185339012145,-23.010856737317397

3690086_20201_2_0,ahuuip4icz,-2.2517037741643895,-130.90474634429566,-22.224358977417566

1602326_20201_2_0,ahz4dp4icz,-10.091329135337384,-193.7049472187241,-11.18186073454767

5311339_20201_2_0,v389so4icz,2.69782200389781,-78.72903282134396,-56.89036548336601

4090823_20201_2_0,ai3x6o4icz,-2.181079738852079,-118.23201478561592,-31.573673620620383

1476371_20201_2_0,ai6dnn4icz,0.8945427481598616,-67.50653771416214,-47.541759740552365

2090936_20201_2_0,aic5xn4icz,-4.915710357544454,-107.46096364609352,-17.894431201858765

5324225_20201_2_0,aiiqgp4icz,2.06740010145881,-101.35123983821109,-46.094897959840836

1849513_20201_2_0,ains0o4icz,-1.512739943475112,-65.91072987320561,-17.250468350310186

4363987_20201_2_0,airfbn4icz,-0.14881805410947893,-75.75207651869945,-39.965740516600064

5737787_20201_2_0,aiv5eo4icz,0.20509418336423904,-93.04175983598563,-33.58818880022987

3698025_20201_2_0,5rfozo4icz,1.1291268955426421,-83.23073781951723,-49.913158062485635

2411017_20201_2_0,aj0dqo4icz,0.718797649121481,-115.36127868145641,-55.718536121064844

2321179_20201_2_0,aj19mo4icz,0.1798640956365512,-98.3603657231489,-31.548605208454887

3655853_20201_2_0,aj230p4icz,0.9294564463660631,-76.14926883725832,-46.05801139177831

1413439_20201_2_0,ajcmen4icz,1.3382147749338251,-125.25432086004884,-87.67255631813066

4836411_20201_2_0,ajd9cp4icz,0.66094617701523,-102.41488653893418,-48.60383190060212

5285473_20201_2_0,ajgudn4icz,3.4124526335678116,-41.012035988519244,-44.08227966810517

4365321_20201_2_0,ajh2io4icz,-0.1945071812749987,-90.2426419003157,-36.2900724695605

1776421_20201_2_0,ajkwfo4icz,1.0328116568715862,-97.56476339111595,-38.6202989592627

3649763_20201_2_0,ajqnmo4icz,0.7472322903316814,-93.04697612933273,-55.28364790761398

2277752_20201_2_0,ajw9io4icz,-9.307198028144574,-133.7575404502158,20.18225519447853

3712749_20201_2_0,ajxehp4icz,-3.1814603343358985,-111.68135309920734,-11.950504026895587

4191988_20201_2_0,ajxl2p4icz,0.8320009519528953,-57.4329159385789,-37.25519502753221

3229437_20201_2_0,ajybyn4icz,-6.84495589796787,-100.25918797919229,0.5349576088189849

5208221_20201_2_0,ajypen4icz,86.95130275066448,342.82033201747174,-286.31537440392844

3155078_20201_2_0,ak2deo4icz,0.7770312181186206,-76.58794175973091,-47.71414431089829

4294517_20201_2_0,ak7hnn4icz,2.9453801020676313,-104.18052691858355,-33.472836750194276

2905558_20201_2_0,ak7uwo4icz,0.6239212476618022,-86.4048682179095,-44.25958540504446

2099782_20201_2_0,ak803o4icz,-1.362933124100266,-98.66564077752315,-22.85733049613944

5893679_20201_2_0,akb2bn4icz,-0.10656636945176717,-139.7194503360678,-50.2866279875103

4199505_20201_2_0,akbavo4icz,1.5750554661867304,-39.387987880260994,-49.27172012131135

2372399_20201_2_0,ake8ep4icz,-2.035522801228527,-84.23091828557074,-1.4198321747173992

2066556_20201_2_0,akfcto4icz,-3.3075601601601807,-138.27361309996954,-33.05460785213185

2521813_20201_2_0,akfvco4icz,1.5904368172561996,-67.995621676117,-47.87898546918639

1172762_20201_2_0,akk8tn4icz,-1.8603168481311998,-92.83340581823163,-32.812665949594205

4519909_20201_2_0,akl6qn4icz,-3.68245529037014,-111.39859811426672,-11.457724447141288

1384082_20201_2_0,akpwvo4icz,0.9126457966114961,-107.65591162381412,-42.761829248775314

2145793_20201_2_0,aksbio4icz,-1.122586868812559,-76.91496781570203,-42.82463434740188

2438883_20201_2_0,aksyip4icz,148.7602697910369,377.06234921310624,-161.3058812739034

4724761_20201_2_0,aktshn4icz,-0.4217339391970654,-101.89271433054401,-30.768959661071122

5662465_20201_2_0,akwewn4icz,-0.10200156508227175,-105.76889365524138,-41.80497834261419

1914759_20201_2_0,al0oun4icz,2.4142390740318533,-101.48048016609317,-58.683306297654994

1105609_20201_2_0,al2c2o4icz,-3.6403748367380966,-126.91867824662788,-23.344599181919804

2783900_20201_2_0,al7e8o4icz,-0.3038562034993529,-84.01671666445256,-32.68955552513363

4610553_20201_2_0,ald86o4icz,-7.985479585182814,-107.34122558304006,-1.4682903322293868

5411925_20201_2_0,algk1o4icz,-0.05844746862045555,-101.0343528369228,-36.55530495048488

4840938_20201_2_0,alng7n4icz,3.0390535348079726,-83.69501450116266,-49.58808788972614

3360882_20201_2_0,alnrjn4icz,-2.1218460610900047,-124.1727968261543,-26.51718451846247

3042111_20201_2_0,alod7p4icz,-1.15177161413347,-92.91967008617004,-37.61235553489058

1525567_20201_2_0,alon8p4icz,1.3661465585268169,-123.67543955777853,-36.69360078397345

5923166_20201_2_0,alpcdo4icz,1.3593534257542346,-99.7311005699973,-43.24673025759704

1895480_20201_2_0,alrb2o4icz,-0.8685688238843164,-76.57407515545103,-14.684016593175869

2984609_20201_2_0,alrxwn4icz,0.505929319387518,-100.79512730860566,-41.95236417640365

2685267_20201_2_0,alshkn4icz,2.916803058924092,-97.90709816843236,-35.712208875327406

5544623_20201_2_0,alu13o4icz,-3.871393432348288,-112.66921432709435,-11.764785287104445

2143788_20201_2_0,alxmjp4icz,-1.155547963503365,-99.01983338512156,-18.019777970716405

3934701_20201_2_0,am096p4icz,-2.2116546671121493,-80.06192430662685,-39.43463350320508

4488261_20201_2_0,am4qgn4icz,-5.163734894266281,-104.03150493035247,-9.800259232462281

4373979_20201_2_0,am6bjo4icz,0.3002255107486079,-133.51759166819832,-39.759107367354304

2719339_20201_2_0,am80hp4icz,0.7343359838371643,-111.02052705660753,-44.883208532381815

3556462_20201_2_0,amdbnn4icz,-1.6400381649973075,-93.15366827354256,-19.17164256620569

5489515_20201_2_0,amdcvn4icz,-14.912064802590066,-181.44039406938572,40.9415870285288

5130469_20201_2_0,amdgsn4icz,-0.724989561539324,-103.71776146636199,-72.31478155506618

5439304_20201_2_0,amerdp4icz,-0.84793276468435,-127.85028511901481,-38.12030544886164

3596324_20201_2_0,amik5o4icz,-0.7174077153244877,-97.00686747473037,-48.10405524298503

5060757_20201_2_0,ammbyo4icz,1.2684672069078056,-45.92937871830159,-38.52785093872099

1304457_20201_2_0,amob5p4icz,0.1714410664281849,-77.5806278354955,-23.042271315243894

4903479_20201_2_0,amqhko4icz,2.6661309946786185,-97.13501945173732,-51.00178345805928

3690602_20201_2_0,amzd7p4icz,0.7235142527810271,-100.73046727168185,-47.35721059052361

3978799_20201_2_0,an1gto4icz,1.3341448021290627,-116.44555003821074,-29.857017453041095

2562115_20201_2_0,an2fln4icz,1.0831168135351474,-104.3330588886891,-42.26194190903176

3326239_20201_2_0,an4pto4icz,-0.008523339038260264,-89.07926602020805,-39.98499215984651

4833860_20201_2_0,an56gn4icz,0.9950593018637418,-110.58998806252254,-33.366120224692466

1117936_20201_2_0,an5e8o4icz,-2.553799329495279,-121.43468897542303,-27.867245060409715

3212408_20201_2_0,an7hco4icz,0.8205389641696998,-100.4118310056947,-45.86987825345403

5426474_20201_2_0,an7q5o4icz,-3.5193782466048806,-86.1603022667565,-15.853961360138868

3587582_20201_2_0,angaxo4icz,0.2047876646836967,-53.466556872816,-34.5735022162701

5699149_20201_2_0,anldvn4icz,-2.2469472787001923,-86.30436321164635,-34.95573625456559

5771244_20201_2_0,anlthp4icz,2.611371335678892,-75.11631945527174,-40.37028366545265

3328307_20201_2_0,anmv1o4icz,-3.98879566711333,-92.88380718354972,-0.8876721403777594

1527518_20201_2_0,anteun4icz,-1.4131307639765445,-97.36579908090027,-33.625769091844674

1225467_20201_2_0,anvm7p4icz,-1.5304638556821661,-66.2632570828668,-25.563942349799703

2224777_20201_2_0,anwjfp4icz,-1.7377651364697284,-66.4539211045522,-24.166809264675038

4936373_20201_2_0,anwzpn4icz,-1.5844577454164073,-145.18108413302934,-18.22323836278433

2317419_20201_2_0,anzveo4icz,-2.614470011236689,-110.60922413562128,-22.670618800705597

5943888_20201_2_0,ao1wpn4icz,0.5790364815192955,-133.49197318403867,-34.49783946673513

5769221_20201_2_0,ao3b8o4icz,-1.8192791776329282,-93.17440261530396,-28.80338968435774

1148790_20201_2_0,ao43to4icz,-2.1087012051683045,-96.50229440953808,-23.367466885053958

2423548_20201_2_0,ao9t4p4icz,-1.1954546200815377,-84.32176174426826,-29.7858614375765

5234003_20201_2_0,aob2pn4icz,0.16630292328301438,-79.84342491696714,-38.539220777367746

5025524_20201_2_0,aoo5zo4icz,-1.9287920749672784,-108.19262345832797,-30.35693514075585

3769949_20201_2_0,aounao4icz,0.14823528918283552,-81.79063205588858,-26.79094874536105

5140495_20201_2_0,aowmpo4icz,-1.1737429251349636,-119.98973123668455,-36.42694822271757

5919865_20201_2_0,aoxgrn4icz,-0.8764786147727678,-86.25137480166308,-27.24197789740309

4123516_20201_2_0,aoxlso4icz,-4.9164340609466475,-49.168904130161536,-5.274815391014528

5229749_20201_2_0,aoyorn4icz,-1.176139399607603,-111.44217816420138,-39.35599435389271

2680476_20201_2_0,ap0n3p4icz,-2.3522469881536474,-74.94475632737198,-18.557534392511016

4409789_20201_2_0,ap15xn4icz,-0.3716979823079914,-96.14679568522263,-19.755579087089536

3006779_20201_2_0,ap3z6p4icz,-1.296806086690308,-110.37321631841988,-48.89122292497912

1051384_20201_2_0,ap55mo4icz,1.2867013912250613,-107.73912219062382,-43.753907570567605

3734506_20201_2_0,ap8q5o4icz,0.2946390632565987,-78.00376892347754,-23.971611095174154

5173483_20201_2_0,g3prxo4icz,0.4422336094964316,-49.58596242045081,-41.55815055633991

5867177_20201_2_0,apn9wn4icz,-0.11269091788709715,-67.83205026387097,-35.065701619497716

4186802_20201_2_0,apvcqn4icz,-1.868350359668725,-94.26101051182596,-30.714007310542073

2418271_20201_2_0,apw5yo4icz,-2.499918270418208,-86.54336314854956,-39.702788737131016

5112148_20201_2_0,apykrn4icz,-6.183824698878803,-120.83425946322222,4.441933985599064

5645157_20201_2_0,aq3tfn4icz,0.5014112404714429,-102.9886385018456,-36.93031561387454

5522728_20201_2_0,aq5ocp4icz,0.5594526177819283,-88.92154679550012,-47.77448455127201

2246933_20201_2_0,aqg5nn4icz,0.49598898333812835,-116.10767625443972,-42.55886401724287

2939788_20201_2_0,aqh3jn4icz,-0.5442646294635871,-112.40203378063563,-30.169734792660208

5104300_20201_2_0,aqotdp4icz,2.1423008990590553,-138.1020673459856,-64.02939079105039

4548406_20201_2_0,aqrcso4icz,-1.2180848154944803,-85.50033312210107,-34.65636125268877

5575553_20201_2_0,aqv1co4icz,0.3222331396450281,-108.5092589508082,-37.115626429479136

3005751_20201_2_0,aqvijp4icz,0.014257894300775863,-112.84375009946257,-25.934083926182637

5167646_20201_2_0,aqwlsn4icz,0.8642791589421148,-69.04943049174005,-37.65541049323022

4536193_20201_2_0,aqwp4p4icz,3.9840266356882905,-53.70623516954748,-44.663165596651154

4580800_20201_2_0,aqy0tn4icz,-0.8877440151787879,-88.42542043134219,-27.97751790892231

3052978_20201_2_0,aqz3cp4icz,-1.610792628705229,-115.73008740182348,-64.90668638079529

1928143_20201_2_0,ar3f5o4icz,-3.018979802407666,-97.06749184673362,-16.87577268832959

1676046_20201_2_0,ar8spn4icz,1.2391003098026352,-106.56284937770118,-36.71753728064077

2077126_20201_2_0,arb6tn4icz,-1.220556152132108,-114.10692824521738,-42.65820035313061

4186859_20201_2_0,are1do4icz,-2.565214114592967,-104.75852606376725,-17.876307563260653

4959194_20201_2_0,arkmln4icz,0.479916719220861,-143.7701997294559,-37.68789112276741

5804829_20201_2_0,arsyoo4icz,-0.7709686683948116,-107.15697961907858,-42.26831163308016

4403287_20201_2_0,arvwko4icz,-3.0129092216276487,-78.70651331043425,-33.13981934158457

2177617_20201_2_0,arvzgo4icz,-0.5366419924731703,-52.98204972183376,-41.97043766920689

2281430_20201_2_0,arwlvo4icz,0.6182533329290734,-26.34180285241598,-44.808059744692514

1904653_20201_2_0,arxhip4icz,0.7111990930180287,-70.32546130086985,-45.89901821087523

5394977_20201_2_0,as2pbp4icz,0.13584869002063085,-132.34085543798446,-33.82929093190131

1126843_20201_2_0,as4ivo4icz,-0.4257933757669036,-91.57424354029152,-27.21287240754897

2229648_20201_2_0,asbbeo4icz,-1.3914814466931793,-134.25209107541232,-49.60700735932831

4608425_20201_2_0,asf8mo4icz,2.359414559229607,-80.56859025125988,-54.646118504278775

5245815_20201_2_0,asfcfn4icz,0.4230517481815745,-89.72700564462895,-42.052920811411326

2987786_20201_2_0,ashamo4icz,-1.1552181347258232,-50.4894877058031,-22.56633272202201

5494538_20201_2_0,asivhp4icz,0.08510099482113767,-83.73157527835957,-40.987515489355644

4063331_20201_2_0,asmrjo4icz,2.469214065066962,-80.64018778606064,-54.02266995314025

5441629_20201_2_0,asrd0p4icz,2.5208511949571752,-70.43600394615763,-31.097797395641805

5757027_20201_2_0,asu7rn4icz,-0.35489253094613016,-74.39979915523176,-36.75323666528486

5377183_20201_2_0,asuo2o4icz,-0.8747100590935494,-81.07441432195208,-35.095490394562276

2396303_20201_2_0,asus6o4icz,0.0685880107307769,-119.34509079826546,-30.54108644682593

2469280_20201_2_0,aswu0p4icz,0.4418356401514426,-101.99748178692775,-43.58642986343166

2190162_20201_2_0,asxk7p4icz,-2.3420848773776224,-71.86289458364138,-12.345814817176318

4357367_20201_2_0,ata7co4icz,-1.0932635514621234,-32.902160920854726,-34.554114952933375

5960664_20201_2_0,atgs9o4icz,-3.8711438169928436,-58.681996364036365,-27.429713797129523

3059091_20201_2_0,atgy9p4icz,1.2117887416490978,-129.33856010560092,-33.18925150894428

2578113_20201_2_0,athf9p4icz,0.720209223368048,-89.3695039691462,-39.02763649265789

1049278_20201_2_0,atj3xo4icz,9.179393309732678,-68.52109371710299,-96.6810702609447

4840907_20201_2_0,atjw8n4icz,-0.5455347623522868,-73.68990242831384,-35.623707119507884

2693850_20201_2_0,atkzlo4icz,-0.7583368103960243,-66.33464556286094,-43.42656242022527

3835456_20201_2_0,atp69p4icz,-3.6190203138131545,-97.32178992391147,-17.127618604257307

4447017_20201_2_0,atytjo4icz,1.442685438922021,-106.4998699353603,-47.53304241875364

1913648_20201_2_0,au0n7p4icz,-1.7743801812423536,-95.06638834832447,-36.96901296105344

5899077_20201_2_0,au39ho4icz,-1.6045105176791745,-112.20310002941326,-13.75569684803844

4324389_20201_2_0,aue7oo4icz,1.2883918511190569,-98.31860606795297,-36.8554789558833

5147986_20201_2_0,auje8p4icz,-1.2806270622188687,-100.15572201096859,-36.5211740842081

3643185_20201_2_0,aujwvo4icz,-0.23611739376711355,-90.99591222356182,-38.18579123681374

2697452_20201_2_0,aums6n4icz,0.37136185975877045,-122.98878974685823,-54.98156214446281

1674418_20201_2_0,auoubp4icz,-0.5464837452288771,-100.36082452786533,-33.24166379324673

2574739_20201_2_0,auq39n4icz,0.8749479419488831,-98.77080910736774,-47.09122810535793

4894469_20201_2_0,auud6n4icz,-6.100159704855746,-127.2384311680546,3.6990751692010093

3207814_20201_2_0,auwwfo4icz,3.2263659259892234,-84.306879540652,-54.664766253526864

5081899_20201_2_0,auz7ro4icz,2.91820223864673,-41.24689446492846,-42.65907243296803

4389290_20201_2_0,av2ego4icz,-3.0461839890680102,-101.11724894431342,-9.801259428917987

1941619_20201_2_0,av69ap4icz,-1.5053787679689319,-109.52773981942033,-28.26607080537792

5086650_20201_2_0,av971p4icz,1.60065890826795,-73.41964106294236,-54.314754487267635

4580780_20201_2_0,ava7vo4icz,0.28938655627239745,-100.95863770182225,-39.48179492499642

3926854_20201_2_0,avfqgo4icz,2.9367781852818897,-57.81228425871987,-51.81359076232485

4216405_20201_2_0,avhldo4icz,2.0780544170944277,-98.97565303611128,-54.04953430576521

3924196_20201_2_0,avl14p4icz,0.018380280082815035,-67.949811581224,-37.032216122461364

2764326_20201_2_0,avn27o4icz,-0.9515311833964796,-84.16844967286949,-23.040939047715483

2011624_20201_2_0,avxj8n4icz,-0.05172123759478813,-94.93191770886256,-51.571716574935095

5230907_20201_2_0,aw2hgn4icz,-5.400624048782673,-111.28946901379584,-2.1629773273279227

2296376_20201_2_0,aw6jlo4icz,2.1442209682763784,-57.08950902697424,-41.30882573693842

3139638_20201_2_0,aw8slo4icz,1.2934761931506338,-156.94378951428436,-48.62177616810257

3365680_20201_2_0,awcd3p4icz,0.6517960218220209,-76.9125110567212,-46.55419558157217

2239793_20201_2_0,awekco4icz,-0.7535699767443774,-105.28955537855529,-36.00422064535151

3013116_20201_2_0,awg89o4icz,-1.9358438752850957,-138.65324231366623,-26.362331897271716

2406788_20201_2_0,awh3cn4icz,-0.6973794357899422,-79.80033921842897,-32.68447538287914

5091000_20201_2_0,awpefo4icz,-3.688346137457722,-76.1723508695897,6.648267207662926

1684869_20201_2_0,awrknn4icz,0.07187371566279464,-140.21381300353394,-26.221559572200576

4993073_20201_2_0,awscdp4icz,0.46579974697529886,-100.51395471586673,-34.759668113039

2409347_20201_2_0,awsw4o4icz,1.3530693960472988,-74.49075147970032,-47.85098728683785

5841013_20201_2_0,awz7go4icz,-0.6452673113903992,-113.35973421283751,-42.05373836918464

2477152_20201_2_0,ax0bhp4icz,-1.7370225546437235,-61.01039958031393,-21.879456587667235

2832212_20201_2_0,ax3b5o4icz,2.332566575999334,-73.54622092480432,-45.02712824763542

3411219_20201_2_0,ax3fuo4icz,2.089233164781107,-72.70955740041055,-28.39412848113659

5122032_20201_2_0,axahno4icz,-2.7863151835846867,-82.0220138415541,-23.561458395274684

3776699_20201_2_0,axai2p4icz,-3.4038114425988084,-100.29581918726893,-25.34109051542717

2065567_20201_2_0,gpxcgn4icz,-4.653458373128822,-125.98314926413323,-9.44742031133373

/users/rhydian/anaconda3/envs/torch_env/lib/python3.7/site-packages/torch/cuda/__init__.py:52: UserWarning: CUDA initialization: Found no NVIDIA driver on your system. Please check that you have an NVIDIA GPU and installed a driver from http://www.nvidia.com/Download/index.aspx (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729006826/work/c10/cuda/CUDAFunctions.cpp:100.)
  return torch._C._cuda_getDeviceCount() > 0
  0%|          | 0/101 [00:00<?, ?it/s]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 1/101 [00:03<05:21,  3.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 2/101 [00:06<05:13,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 3/101 [00:09<05:01,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/101 [00:12<05:20,  3.30s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▍         | 5/101 [00:15<05:02,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 6/101 [00:18<04:51,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 7/101 [00:21<04:36,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 8/101 [00:23<04:26,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 9/101 [00:27<04:53,  3.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|▉         | 10/101 [00:32<05:20,  3.52s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 11/101 [00:35<05:01,  3.34s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 12/101 [00:37<04:41,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 13/101 [00:40<04:32,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 14/101 [00:43<04:28,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▍        | 15/101 [00:50<05:51,  4.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 16/101 [00:53<05:15,  3.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 17/101 [00:55<04:49,  3.44s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 18/101 [00:58<04:30,  3.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 19/101 [01:01<04:13,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|█▉        | 20/101 [01:04<04:00,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 21/101 [01:06<03:50,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 22/101 [01:09<03:48,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 23/101 [01:12<03:42,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 24/101 [01:15<03:40,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▍       | 25/101 [01:18<03:31,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 26/101 [01:20<03:30,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 27/101 [01:24<03:34,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 28/101 [01:26<03:24,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▊       | 29/101 [01:29<03:20,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|██▉       | 30/101 [01:32<03:21,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 31/101 [01:35<03:17,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 32/101 [01:37<03:14,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 33/101 [01:40<03:15,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▎      | 34/101 [01:43<03:10,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▍      | 35/101 [01:46<03:10,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 36/101 [01:49<03:06,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 37/101 [01:52<03:02,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 38/101 [01:55<03:00,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▊      | 39/101 [01:58<03:02,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|███▉      | 40/101 [02:01<03:01,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 41/101 [02:04<02:56,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 42/101 [02:06<02:47,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 43/101 [02:09<02:43,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▎     | 44/101 [02:12<02:40,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▍     | 45/101 [02:15<02:36,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 46/101 [02:17<02:32,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 47/101 [02:20<02:28,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 48/101 [02:23<02:25,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▊     | 49/101 [02:26<02:26,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|████▉     | 50/101 [02:30<02:44,  3.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 51/101 [02:33<02:33,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████▏    | 52/101 [02:35<02:26,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 53/101 [02:38<02:22,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 54/101 [02:41<02:15,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 55/101 [02:44<02:11,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▌    | 56/101 [02:47<02:08,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▋    | 57/101 [02:50<02:04,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 58/101 [02:53<02:03,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 59/101 [02:55<01:59,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 60/101 [02:58<01:55,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|██████    | 61/101 [03:01<01:56,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████▏   | 62/101 [03:04<01:50,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 63/101 [03:07<01:47,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 64/101 [03:09<01:41,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 65/101 [03:12<01:40,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▌   | 66/101 [03:15<01:37,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▋   | 67/101 [03:18<01:37,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 68/101 [03:21<01:36,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 69/101 [03:24<01:32,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 70/101 [03:27<01:29,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|███████   | 71/101 [03:29<01:25,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████▏  | 72/101 [03:32<01:23,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 73/101 [03:35<01:20,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 74/101 [03:38<01:17,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 75/101 [03:41<01:18,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▌  | 76/101 [03:44<01:14,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 77/101 [03:48<01:12,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 78/101 [03:50<01:09,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 79/101 [03:54<01:06,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 80/101 [03:56<01:01,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 81/101 [03:59<00:57,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 82/101 [04:24<03:00,  9.50s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 83/101 [04:27<02:14,  7.49s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 84/101 [04:29<01:42,  6.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 85/101 [04:32<01:21,  5.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▌ | 86/101 [04:35<01:06,  4.44s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 87/101 [04:38<00:54,  3.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 88/101 [04:41<00:46,  3.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 89/101 [04:43<00:40,  3.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 90/101 [04:46<00:34,  3.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 91/101 [04:49<00:31,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 92/101 [04:56<00:37,  4.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 93/101 [04:59<00:30,  3.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 94/101 [05:02<00:24,  3.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 95/101 [05:05<00:19,  3.29s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▌| 96/101 [05:08<00:16,  3.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 97/101 [05:10<00:12,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 98/101 [05:13<00:08,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 99/101 [05:16<00:05,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 100/101 [05:19<00:02,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|██████████| 101/101 [05:33<00:00,  6.24s/it]100%|██████████| 101/101 [05:33<00:00,  3.30s/it]
Trying to load from /users/rhydian/self-supervised-project/model_weights/SSECEncodersBothBoth
==> Resuming model trained for 106 epochs...
Trying to load from ../model_weights/angle_regressor4
==> Resuming model trained for 7 epochs...
3045014_20201_2_0,9hy7uo4icz,-0.564016412701886,-75.7290957612741,-33.3289079880179

2293427_20201_2_0,9inyoo4icz,-0.8985057839287712,-93.31106885595312,-33.193202218790674

5664449_20201_2_0,9j7ebo4icz,-2.1981963538219245,-68.84136016453223,-16.392636988180598

4329711_20201_2_0,uzfh7p4icz,4.409285498755278,-127.30478874903051,-56.793742212296536

1222390_20201_2_0,9jgcho4icz,-1.0058822521880144,-104.72103877564399,-52.72934317812164

3738046_20201_2_0,9jtz9n4icz,-0.7724195938692395,-100.12957278255811,-23.85279415118754

2660709_20201_2_0,9k25vn4icz,-0.6547711740260611,-113.93824634513928,-39.94984644084904

4870281_20201_2_0,9k2kun4icz,-0.3501651570591032,-100.29194656541847,-38.133287216454406

4593543_20201_2_0,9l8qwn4icz,3.1385753232967226,-130.66007983711202,-29.102353630240813

5790549_20201_2_0,9ls0bn4icz,1.1340222226777057,-131.41976066963994,-49.28908544082135

1383196_20201_2_0,9lvnjn4icz,-2.4123850694082978,-106.1084401349951,-39.1331227526844

2842025_20201_2_0,9mj4po4icz,-1.3654886816792344,-109.83097925454962,-41.25295992508822

4531108_20201_2_0,9nps9p4icz,0.8972876230310689,-87.676732081497,-44.178447861009545

5445878_20201_2_0,9o7jyn4icz,-2.1207803743268188,-108.6129344654615,-25.725960953454774

4145693_20201_2_0,9oa9oo4icz,2.881609830124468,-83.374818552958,-57.54486648708614

3331488_20201_2_0,9pfuep4icz,1.4564562863637,-117.97532955438345,-56.95927010933812

1525932_20201_2_0,9ra8bo4icz,-4.438085993694813,-117.08951546349184,-13.172950264993588

4732914_20201_2_0,9rkzuo4icz,0.34572358098726347,-42.21182597571732,-28.055800251649202

1152869_20201_2_0,9rn8gp4icz,0.333609577382817,-61.963761059069185,-35.88164924680997

3893504_20201_2_0,9ruv9o4icz,3.9554098175183046,-53.32265840253629,-60.846222701153906

2075776_20201_2_0,9s4pep4icz,0.38663027386093224,-114.41346695001647,-60.21505519047557

6007773_20201_2_0,9sidlo4icz,-1.2236229649921857,-101.71118717552503,-53.11050152040045

2119426_20201_2_0,9slgen4icz,-1.7386701480878928,-96.9358218184656,-20.300961744733584

2987751_20201_2_0,9sy8dp4icz,-3.2446800051427145,-96.50028018139801,-10.989706368912195

3268075_20201_2_0,9t32wn4icz,3.8755641405478287,-53.53206186529374,-55.483658472916105

3371420_20201_2_0,9tyzdn4icz,1.8690791099605253,-66.9068520903648,-75.62622312646134

4858003_20201_2_0,9w6qzo4icz,1.8251084042579402,-73.38573441111203,-54.828368646216205

4958111_20201_2_0,9w8nxn4icz,-0.17273674242460696,-66.3047526855693,-31.869966365541814

5456261_20201_2_0,9wmx5p4icz,12.691096572751812,-35.727117121034155,-110.08879855033891

2670974_20201_2_0,9wyx0p4icz,1.378705409327028,-65.86115125443095,-40.36292774161558

2576030_20201_2_0,9xcdjo4icz,0.8136456879316762,-81.84162512598016,-41.121062703239204

4964270_20201_2_0,9xgavo4icz,3.5099805523406107,-72.39419304908955,-54.62801202323186

3157480_20201_2_0,9xpnln4icz,0.7380184581164807,-91.89259313907621,-32.71195328542099

2707302_20201_2_0,9yhnvn4icz,0.36801609871978186,-125.03148455482747,-34.795725188347916

3351827_20201_2_0,9zbp9p4icz,1.7755643898482467,-84.36512969817153,-30.59415346030221

5891868_20201_2_0,9zxasn4icz,2.6954972713646312,-99.65534965954961,-48.978012864823825

2790708_20201_2_0,a05oao4icz,-9.17712958808879,-80.81184221293978,-2.9672372843660497

5369745_20201_2_0,a106rn4icz,-1.7363538829008085,-105.91680303317392,-3.891769042286114

4312482_20201_2_0,a1npun4icz,2.9630070669997535,-109.98691402301796,-54.22411357635778

5013753_20201_2_0,a1onon4icz,-2.6162003872377437,-87.92442940441862,-15.587378038146042

3046877_20201_2_0,a2lwqn4icz,0.0892297458597399,-103.76833959513252,-41.862434812024105

1114891_20201_2_0,a3gd1p4icz,-1.5244320728583596,-82.73846079876276,-4.824241270510726

4387899_20201_2_0,a48xlo4icz,-0.993669336380414,-88.69122402207978,-36.35849923794828

2257259_20201_2_0,a4r56p4icz,-0.6934489891825288,-150.66194499303296,-28.43761153194106

5796407_20201_2_0,a4tguo4icz,0.7439815558916629,-128.88450713248642,-28.71333777266672

3354549_20201_2_0,a5v97o4icz,6.492700864366816,-51.508408432844675,-79.40644587326322

3580327_20201_2_0,a7208p4icz,0.583456875265604,-58.08898944481544,-38.257821551974246

4626462_20201_2_0,a82e6n4icz,9.71829593461014,-93.31277882533055,-50.16197162563411

3179439_20201_2_0,a8358o4icz,5.376304472057219,-71.77888707192929,-64.52357035602668

5680443_20201_2_0,a8b7uo4icz,-0.8947324914634287,-94.08990749100232,-24.277256224819496

1404446_20201_2_0,a8qpzo4icz,-36.12303173352782,-170.5924083210719,189.0128006834884

1353237_20201_2_0,a95zqn4icz,-1.1326420199371612,-102.52915410244168,-40.78663332922855

5757193_20201_2_0,a9swbp4icz,1.4603653649287864,-115.44676073945558,-49.94116144354979

5686944_20201_2_0,aa0rbn4icz,-2.322405277099243,-126.56496767372968,-18.02953348223467

1694742_20201_2_0,aabvfo4icz,-2.6568265019217217,-107.90110845639015,-25.796591104459495

3069547_20201_2_0,aav07p4icz,-0.4111973251091191,-94.74846250213989,-29.633366543869556

5614001_20201_2_0,abonfp4icz,-5.1006204219074975,-106.70877951551068,2.6623732164823934

2095809_20201_2_0,abubuo4icz,0.2575296658332662,-55.38970482479857,-33.35233382699427

5121084_20201_2_0,ac237p4icz,-1.8036417404347105,-43.55853417848962,-48.68633637085708

3289626_20201_2_0,ac9hdn4icz,-2.7198033550433656,-116.43102081746866,-5.797685976398782

5117607_20201_2_0,adguon4icz,0.019974850866228303,-80.08752259732478,-42.20466409960319

2688867_20201_2_0,adjdgo4icz,-0.14783840808269527,-80.0480582391063,-38.69131060010356

3459624_20201_2_0,adra8p4icz,-0.7233179880721774,-106.42515939035906,-29.787451414656132

4432916_20201_2_0,aezpao4icz,-0.5407566308627189,-113.31918379701102,-38.954507817210526

4482985_20201_2_0,af1lyo4icz,0.9387213235918094,-91.87187979159427,-37.4388055057604

3496314_20201_2_0,af4p0p4icz,-1.353119894993714,-144.4105473758535,-32.72695275688554

5936608_20201_2_0,afholn4icz,1.420072415740366,-73.1313579366439,-50.39751841846402

5016327_20201_2_0,agay5p4icz,-3.0767234069014746,-132.16104463905572,-10.324876285838215

5031648_20201_2_0,ahol4p4icz,-0.0420447647525021,-102.60765002775244,-26.578250018379293

4668117_20201_2_0,ahz46p4icz,6.295588680305387,-67.82992189189568,-72.3167471913399

2938308_20201_2_0,ai39en4icz,-2.4492435232084078,-89.19699471495056,-27.98445440628157

3791907_20201_2_0,aib5xn4icz,-1.089233639996989,-71.16245495034684,-32.72512482804194

3486052_20201_2_0,aigmyn4icz,-2.819029208119071,-113.26845848394618,-16.017526227905705

4235237_20201_2_0,aihfuo4icz,-2.635762207518785,-106.2718317293423,-10.256078734992883

5629007_20201_2_0,ajj1qn4icz,-0.5603842749680233,-71.28206795146582,-36.95994195040038

1893395_20201_2_0,ajpbbn4icz,-1.6719974211387492,-120.55745691998641,-28.024400178113893

3013366_20201_2_0,akr4kp4icz,1.9820056560386041,-68.09507096837245,-58.16532729602423

2154502_20201_2_0,akvtln4icz,-2.0173274013226283,-125.03134061205895,-20.667874970620403

4611872_20201_2_0,alptfp4icz,1.9402169306398203,-137.73855837933934,-46.90589885722416

3192145_20201_2_0,amso5p4icz,2.2144952231371495,-73.00555513410526,-45.06708074320835

1825556_20201_2_0,ao7nbp4icz,1.3291616138181945,-92.63473928159448,-47.20239518754377

1185279_20201_2_0,ao8yko4icz,-1.0658717797927553,-101.61913167753988,-44.07458845576076

3623737_20201_2_0,aoefmn4icz,-18.994355182950926,-205.61497190033228,70.38237026123753

2280488_20201_2_0,aoi0io4icz,-0.21746364619684155,-98.47234877500912,-25.494685370374526

3372708_20201_2_0,aq0v6o4icz,-0.5571040344316908,-127.70248171060814,-17.81488802895373

4488423_20201_2_0,aq83xn4icz,-3.0718639136075074,-104.20569755462446,-24.54581577088554

4489618_20201_2_0,aqeu5p4icz,1.9813813715560276,-100.94535587009844,-49.84577748183244

1739538_20201_2_0,aqocqo4icz,-13.058638359176792,-100.10807762150012,29.821925226344035

5631564_20201_2_0,aqvasn4icz,-0.47821497230361876,-106.83820867294298,-43.188849959617755

2138023_20201_2_0,ar4cyo4icz,-18.804866639327848,-76.96033717010744,33.37000899359333

4654976_20201_2_0,ar59en4icz,-3.333776675954026,-80.44568155253728,-33.48182585934086

1144691_20201_2_0,arjy9p4icz,-3.543597176864874,-121.20587174802625,-14.635399634796272

4179719_20201_2_0,arnoro4icz,2.150165160731971,-69.06668151893038,-48.813563437884056

5467696_20201_2_0,asmaan4icz,0.2271277910887897,-91.17915497353815,-50.607599914793624

1027946_20201_2_0,at7xco4icz,-3.1090855704923457,-124.0110673507757,-5.2008805047910585

2386723_20201_2_0,atg2cp4icz,0.40431604380778013,-97.84771710452259,-37.63957820117716

1023156_20201_2_0,aupezo4icz,-0.5694115730057603,-69.23318086691012,-26.78286404218082

3008452_20201_2_0,auvmgp4icz,0.5997965445564338,-84.40949796142957,-45.55304222650459

2406243_20201_2_0,av9gxn4icz,2.5603400736088426,-95.45228055223512,-52.6775556022738

3265127_20201_2_0,avyqko4icz,-1.3277699088177963,-105.94058144742158,-30.413707671651082

2139775_20201_2_0,qp8vfo4icz,-0.5157937771015966,-120.55383474492791,-31.543469835197442

/users/rhydian/anaconda3/envs/torch_env/lib/python3.7/site-packages/torch/cuda/__init__.py:52: UserWarning: CUDA initialization: Found no NVIDIA driver on your system. Please check that you have an NVIDIA GPU and installed a driver from http://www.nvidia.com/Download/index.aspx (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729006826/work/c10/cuda/CUDAFunctions.cpp:100.)
  return torch._C._cuda_getDeviceCount() > 0
  0%|          | 0/102 [00:00<?, ?it/s]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 1/102 [00:03<05:11,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 2/102 [00:05<05:01,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 3/102 [00:09<05:12,  3.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/102 [00:12<04:54,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▍         | 5/102 [00:14<04:42,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 6/102 [00:17<04:36,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 7/102 [00:30<09:20,  5.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 8/102 [00:33<07:45,  4.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 9/102 [00:36<06:39,  4.29s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|▉         | 10/102 [00:38<05:51,  3.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 11/102 [00:41<05:19,  3.51s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 12/102 [00:45<05:19,  3.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 13/102 [00:47<04:50,  3.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▎        | 14/102 [01:00<08:53,  6.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▍        | 15/102 [01:03<07:29,  5.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 16/102 [01:06<06:21,  4.44s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 17/102 [01:09<05:38,  3.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 18/102 [01:11<05:03,  3.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▊        | 19/102 [01:14<04:43,  3.41s/it] 20%|█▉        | 20/102 [01:17<04:18,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 21/102 [01:20<04:07,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 22/102 [01:23<04:22,  3.28s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 23/102 [01:27<04:15,  3.24s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▎       | 24/102 [01:29<04:04,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▍       | 25/102 [01:32<03:56,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▌       | 26/102 [01:35<03:51,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▋       | 27/102 [01:38<03:41,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 28/102 [01:41<03:38,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 29/102 [01:44<03:32,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 30/102 [01:47<03:27,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|███       | 31/102 [01:49<03:18,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███▏      | 32/102 [01:52<03:10,  2.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 33/102 [01:55<03:09,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 34/102 [01:57<03:04,  2.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 35/102 [02:01<03:11,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▌      | 36/102 [02:03<03:04,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▋      | 37/102 [02:06<02:57,  2.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 38/102 [02:09<03:11,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 39/102 [02:12<03:04,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 40/102 [02:15<03:02,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|████      | 41/102 [02:19<03:16,  3.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 42/102 [02:22<03:17,  3.30s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 43/102 [02:26<03:11,  3.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 44/102 [02:29<03:14,  3.36s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 45/102 [02:32<03:03,  3.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▌     | 46/102 [02:35<02:50,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 47/102 [02:37<02:42,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 48/102 [02:40<02:35,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 49/102 [02:43<02:32,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 50/102 [02:46<02:31,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 51/102 [02:49<02:33,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 52/102 [02:53<02:41,  3.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 53/102 [02:56<02:30,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 54/102 [02:59<02:35,  3.24s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 55/102 [03:02<02:26,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▍    | 56/102 [03:05<02:19,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 57/102 [03:12<03:14,  4.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 58/102 [03:15<02:53,  3.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 59/102 [03:18<02:34,  3.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 60/102 [03:21<02:21,  3.37s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|█████▉    | 61/102 [03:25<02:24,  3.51s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 62/102 [03:28<02:11,  3.29s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 63/102 [03:31<02:07,  3.28s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 64/102 [03:34<01:58,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▎   | 65/102 [03:36<01:52,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▍   | 66/102 [03:39<01:48,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 67/102 [03:42<01:41,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 68/102 [03:45<01:40,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 69/102 [03:48<01:33,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▊   | 70/102 [03:51<01:30,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|██████▉   | 71/102 [03:53<01:26,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 72/102 [03:56<01:25,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 73/102 [03:59<01:23,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 74/102 [04:02<01:19,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▎  | 75/102 [04:05<01:15,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▍  | 76/102 [04:08<01:14,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▌  | 77/102 [04:11<01:11,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▋  | 78/102 [04:13<01:07,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 79/102 [04:16<01:04,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 80/102 [04:19<01:01,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 81/102 [04:22<00:58,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 82/102 [04:25<00:58,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████▏ | 83/102 [04:28<00:56,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 84/102 [04:31<00:52,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 85/102 [04:33<00:47,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 86/102 [04:36<00:46,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▌ | 87/102 [04:39<00:42,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▋ | 88/102 [04:42<00:38,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 89/102 [04:45<00:38,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 90/102 [04:48<00:34,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 91/102 [04:50<00:30,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 92/102 [04:53<00:27,  2.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 93/102 [04:56<00:25,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 94/102 [04:59<00:23,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 95/102 [05:02<00:20,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 96/102 [05:05<00:18,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▌| 97/102 [05:12<00:21,  4.30s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 98/102 [05:15<00:15,  3.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 99/102 [05:18<00:10,  3.50s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 100/102 [05:21<00:06,  3.28s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 101/102 [05:24<00:03,  3.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|██████████| 102/102 [05:27<00:00,  3.25s/it]100%|██████████| 102/102 [05:27<00:00,  3.21s/it]
Trying to load from /users/rhydian/self-supervised-project/model_weights/SSECEncodersBothBoth
==> Resuming model trained for 106 epochs...
Trying to load from ../model_weights/angle_regressor4
==> Resuming model trained for 7 epochs...
4834786_20201_2_0,8zqbeo4icz,1.197153119178995,-104.21160886369194,-38.27899392415344

2947000_20201_2_0,90h2rn4icz,0.5283038222901303,-100.37620404429305,-31.417238231492803

4395805_20201_2_0,90m2bo4icz,-2.892801878470678,-108.50983668038032,-25.92418881603163

1561993_20201_2_0,921nkn4icz,-2.200547743384705,-83.4444002126441,-20.761831818557766

5916297_20201_2_0,932vao4icz,3.2251679431927167,-101.00371537930457,-72.21649030183096

4711931_20201_2_0,9485dp4icz,-4.785058045718037,-166.3516251761016,-5.75883851037905

3715338_20201_2_0,957hjp4icz,-1.0808170196110483,-132.68926832783794,-25.416101310904963

2004375_20201_2_0,95hbyo4icz,-2.867361795869064,-106.33169929730633,-22.758623114624143

3960551_20201_2_0,97lmlo4icz,-1.21837132796184,-37.171817081167035,-28.61063760968719

1809935_20201_2_0,985p6o4icz,-2.1136413759908206,-111.22415861941482,-37.7445072195182

3313212_20201_2_0,99s8sn4icz,-0.7744251573389601,-112.37600394081196,-40.48557266899317

2616694_20201_2_0,f5x02o4icz,2.393646391183162,-61.88905338848335,-63.94764529286908

4911703_20201_2_0,9atm7o4icz,-1.5546450769266231,-129.61761816519237,-19.769139755754125

3303268_20201_2_0,9c5wwo4icz,-0.9769101521832094,-122.73911356804388,-20.176121598181936

3952806_20201_2_0,9d61do4icz,-8.699719663479968,-141.78396244705817,17.819673233672106

4200071_20201_2_0,9dkabo4icz,-0.3691684303962968,-95.07702299476188,-39.34746878847707

3185806_20201_2_0,9f1kko4icz,-0.846049528015722,-76.91855901117964,-57.357265350617695

2966750_20201_2_0,9f4gqn4icz,2.9561451579032414,-86.52046397452548,-51.43449311604887

1170508_20201_2_0,9flyip4icz,0.37276610214377576,-160.9431428569556,-32.98430485435756

4358173_20201_2_0,9fugnn4icz,-85.5458466526994,311.6706161615388,484.85659306041373

1457118_20201_2_0,9gg2bo4icz,-0.7116237484848846,-95.5564647029563,-23.305980055786932

5761190_20201_2_0,9gsu2p4icz,0.8198228259419154,-86.02312153214825,-46.307465233220626

3129234_20201_2_0,9gvz9p4icz,-0.6028060421339442,-66.81835344487322,-41.40807741395432

3578913_20201_2_0,9htafo4icz,2.0973224929199548,-102.68078247607215,-47.9187905505909

2899177_20201_2_0,9hwybp4icz,4.9114190315467665,-142.42884284311495,-48.37531346828827

1492147_20201_2_0,9ifesn4icz,-0.1271884749700356,-94.30612268907512,-42.60273447013738

2544516_20201_2_0,9jh25p4icz,5.533073308135813,-81.56367912073779,-71.116808969071

2345676_20201_2_0,9k32ep4icz,-0.8513206432999232,-87.56459431009864,-30.432471422773304

4451678_20201_2_0,9k8ido4icz,-4.762798923608616,-98.0163392997394,-25.47981839067019

3880645_20201_2_0,9k8nfo4icz,0.6768620076315042,-96.26120515325121,-34.02830597011736

1618393_20201_2_0,9kf8qn4icz,0.4631475147128146,-58.73859704896873,-30.7657493154189

4277652_20201_2_0,9mjoyo4icz,-16.056955791439393,-98.69460678756334,59.06100293836124

4213777_20201_2_0,9mmkso4icz,-2.184005525939594,-71.64771752215756,-26.597404654770358

5674399_20201_2_0,9ng47o4icz,-0.9420929298060826,-131.16449967267175,-38.29345150818884

3418602_20201_2_0,9nju7p4icz,1.6357642135523391,-87.21243512356759,-43.01152818531891

2580267_20201_2_0,9ny4xn4icz,0.30204613923912677,-103.74260505939677,-34.63760748446529

2289149_20201_2_0,9ozn3o4icz,-0.4330837733179314,-74.76453334609184,-26.07521295047499

1257311_20201_2_0,9phojp4icz,0.6435273712010113,-102.91563968192881,-38.394763603026234

2932586_20201_2_0,9pj9cp4icz,1.0248222454985498,-86.88512799661044,-50.87247576972685

1034443_20201_2_0,9r59dp4icz,-6.775344879161025,-93.9598817263948,-15.30009046523756

3593093_20201_2_0,9r5oun4icz,-1.242263916736878,-120.11969702382456,-17.729695953399386

5705644_20201_2_0,9rl3oo4icz,-0.6393221001779175,-84.11029736617522,-27.587501596544612

4644631_20201_2_0,9rpl0p4icz,2.5213380435866974,-109.00378594748645,-65.27172718419546

1453091_20201_2_0,9s4m5o4icz,-1.361072001725772,-99.43420226411257,-39.4811094154406

4158553_20201_2_0,9tap2o4icz,-2.3040277268765403,-75.40365702117501,-48.283455338531724

3115106_20201_2_0,9tc3mo4icz,0.2992427250919097,-131.642712223989,-43.58036451139037

5489825_20201_2_0,9ti6tn4icz,-0.2798411964242428,-134.7269715155228,-46.639534403364806

6004527_20201_2_0,9tyjzn4icz,3.198581222485519,-93.70215303034445,-43.00399142346744

4914410_20201_2_0,9urhxn4icz,-0.5183811392837919,-87.67941556024928,-28.217234537865366

4652346_20201_2_0,9wipxo4icz,0.3056243084947746,-57.43135215354283,-47.550701953689796

5191740_20201_2_0,9wq13o4icz,4.454574008717951,-75.15109778050504,-50.4964076536459

3495297_20201_2_0,9x2map4icz,-0.16939908540202517,-62.73543235919038,-23.82165731679146

3786025_20201_2_0,5e52uo4icz,3.1450077606130753,-73.21751155676782,-51.30592128109413

1795930_20201_2_0,9y8fnn4icz,0.8408031548807811,-133.85879436380503,-47.381603740467256

4224590_20201_2_0,9yarfo4icz,-0.5178236133048824,-77.12464018098515,-36.83049373164529

5739780_20201_2_0,9yncun4icz,5.3567580709542275,-79.28711344271096,-53.76108560246192

3834593_20201_2_0,yqcscp4icz,1.6070180692143075,-77.98276453812403,-34.0099331398459

4272237_20201_2_0,9yskap4icz,4.948063399877983,-100.46470611834516,-87.59513497772019

4376027_20201_2_0,9yxajn4icz,-1.4293786358641016,-84.7129353097645,-33.12716728967956

4455135_20201_2_0,9z81to4icz,-6.305401505498102,-94.76073919067287,-5.024588577432908

3011318_20201_2_0,3bawpo4icz,1.3223963171150366,-62.63872678293674,-49.52408699655251

4345289_20201_2_0,9zsf5p4icz,-1.0639138134578696,-130.36320703215947,-27.068103043495555

5175835_20201_2_0,a0k6vn4icz,1.7047081429136193,-103.25823824809615,-24.870894400872686

4716704_20201_2_0,a1p2gp4icz,1.5295395429808818,-133.13427163517642,-33.099268198086705

3091134_20201_2_0,a21onn4icz,0.8575714432201074,-99.81917493149922,-39.663370243753036

1881235_20201_2_0,a4z1fp4icz,3.048617792126344,-110.09713561064197,-42.414527923757134

5459086_20201_2_0,a524so4icz,1.5087914072387156,-78.70089555440615,-41.49254409828957

4289800_20201_2_0,a5zoyo4icz,0.18616187913020563,-78.72583676667284,-60.13473592703343

4735044_20201_2_0,a6cpjn4icz,-1.1023815521126286,-130.85104149356604,-19.949319552322436

3115793_20201_2_0,a6frfp4icz,14.656031154711547,41.736309144622254,-115.14325637982287

1854867_20201_2_0,a6lfwo4icz,3.811422453925601,-47.63327897315946,-62.215217970559564

3710482_20201_2_0,a6n0lo4icz,-28.919203642126366,-155.10445476701554,118.2474992184792

1194830_20201_2_0,a7abso4icz,1.2819272697903228,-63.02311266805532,-26.56624097197664

5198669_20201_2_0,a7au9p4icz,-0.41986865551268937,-71.19380640959778,-42.415046356942796

1868725_20201_2_0,ack4gp4icz,1.8759328567550528,-95.57792771954641,-55.75054636134283

3812019_20201_2_0,acnhon4icz,4.177466458343306,-123.41009631658756,-55.77254488778968

2653625_20201_2_0,acnymn4icz,0.33104034617978606,-91.86034634149127,-35.57550756073525

3330607_20201_2_0,ad4qso4icz,-3.372748473100696,-89.71826453662302,-2.110731880020907

1537195_20201_2_0,ad8q7o4icz,-1.2296778775501247,-95.89206559345166,-36.66688114908493

1020865_20201_2_0,adnv3p4icz,0.8988278891320091,-130.8803022577754,-37.01997060866691

1060920_20201_2_0,ae3qnn4icz,7.652032509416208,-98.38674554604609,-114.36819965907188

4386843_20201_2_0,nd6rzn4icz,0.014810988543559857,-79.24137962905701,-30.723046054408798

1761760_20201_2_0,aetvhp4icz,-1.7147056503970806,-84.62214866450492,-28.77690145297136

3959420_20201_2_0,af27dp4icz,-1.3088551311491408,-100.04331196140532,-17.4179492036603

4931773_20201_2_0,ahawbo4icz,0.6686624064660079,-89.16217593986357,-33.56562045436604

4030581_20201_2_0,ahhblo4icz,-2.7445901354016917,-106.14444363151986,-24.785654441272015

2165676_20201_2_0,ahpj9p4icz,-1.403459667528386,-135.5898988752708,-17.430103848717607

3908764_20201_2_0,ahs4gp4icz,4.361361886066021,-90.58859087314434,-81.99876739671367

1394233_20201_2_0,aiwd5p4icz,-2.044005474810955,-108.17025795145315,-25.18944713885614

1662472_20201_2_0,aj7owo4icz,-1.7542178477590913,-53.406943146208675,-51.54465771333048

5288123_20201_2_0,ajfq3p4icz,2.072758725643162,-129.50206489429934,-57.999690130735274

3178892_20201_2_0,ajiown4icz,1.4960532373841051,-92.69411868844182,-44.245637803644456

5896464_20201_2_0,ajsdko4icz,1.4465614683675683,-98.14960140256875,-35.54442819953259

3679851_20201_2_0,nchojo4icz,10.92599454602283,-61.246516760830986,-57.286858808881306

3295614_20201_2_0,ajzrwo4icz,-0.014672810738312496,-118.52273523046597,-33.6686305342802

3086209_20201_2_0,ak0rro4icz,1.0547935029001492,-141.3757406177427,-38.376290791274286

3552151_20201_2_0,al5e6o4icz,1.1201258990512184,-105.07388790876533,-28.623895941111854

5879467_20201_2_0,ali3ln4icz,-1.2930389713388084,-120.00886434550796,-34.95061274494151

4073356_20201_2_0,amqgzo4icz,-0.15828264025687708,-76.90550310447867,-31.966482702793684

3164905_20201_2_0,apprao4icz,1.5717615333091193,-132.18751518305308,-55.88016412833862

2895183_20201_2_0,aq536n4icz,-1.187015587095703,-80.45081619965842,-35.156926749865605

1139297_20201_2_0,nu19ln4icz,-0.4791598782587049,-74.3413856975279,-37.45326601407682

