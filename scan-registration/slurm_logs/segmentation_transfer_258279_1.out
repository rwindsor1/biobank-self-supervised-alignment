1 th decile
.05
.10
/users/rhydian/anaconda3/envs/torch_env/lib/python3.7/site-packages/torch/cuda/__init__.py:52: UserWarning: CUDA initialization: Found no NVIDIA driver on your system. Please check that you have an NVIDIA GPU and installed a driver from http://www.nvidia.com/Download/index.aspx (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729006826/work/c10/cuda/CUDAFunctions.cpp:100.)
  return torch._C._cuda_getDeviceCount() > 0
  0%|          | 0/811 [00:00<?, ?it/s]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  0%|          | 1/811 [00:32<7:20:07, 32.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  0%|          | 2/811 [00:35<5:18:26, 23.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  0%|          | 3/811 [00:37<3:53:18, 17.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  0%|          | 4/811 [00:40<2:53:53, 12.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 5/811 [00:43<2:12:02,  9.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 6/811 [00:46<1:43:44,  7.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 7/811 [00:48<1:22:52,  6.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 8/811 [00:51<1:08:22,  5.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 9/811 [00:55<1:04:09,  4.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 10/811 [01:00<1:05:20,  4.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|▏         | 11/811 [01:03<56:46,  4.26s/it]  Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|▏         | 12/811 [01:05<49:52,  3.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 13/811 [01:08<45:26,  3.42s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 14/811 [01:11<42:49,  3.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 15/811 [01:13<40:18,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 16/811 [01:17<44:03,  3.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 17/811 [01:20<41:56,  3.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 18/811 [01:23<40:18,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 19/811 [01:26<41:31,  3.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 20/811 [01:29<39:04,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 21/811 [01:31<38:01,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 22/811 [01:34<37:24,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 23/811 [01:37<36:19,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 24/811 [01:39<35:22,  2.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 25/811 [01:42<34:37,  2.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 26/811 [01:45<35:04,  2.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 27/811 [01:47<34:48,  2.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 28/811 [01:50<35:29,  2.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▎         | 29/811 [01:53<34:53,  2.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▎         | 30/811 [01:55<35:15,  2.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 31/811 [01:58<35:44,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 32/811 [02:02<40:31,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 33/811 [02:05<38:29,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 34/811 [02:08<37:20,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 35/811 [02:10<36:15,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 36/811 [02:13<35:17,  2.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▍         | 37/811 [02:16<35:53,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▍         | 38/811 [02:18<34:58,  2.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▍         | 39/811 [02:22<38:03,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▍         | 40/811 [02:24<36:45,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▌         | 41/811 [02:27<36:34,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▌         | 42/811 [02:30<35:49,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▌         | 43/811 [02:32<35:11,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▌         | 44/811 [02:35<34:27,  2.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 45/811 [02:38<33:41,  2.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 46/811 [02:40<34:25,  2.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 47/811 [02:43<33:57,  2.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 48/811 [02:46<33:57,  2.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 49/811 [02:48<34:09,  2.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 50/811 [02:51<33:53,  2.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▋         | 51/811 [02:54<33:59,  2.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▋         | 52/811 [02:58<38:16,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 53/811 [03:00<37:00,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 54/811 [03:03<35:31,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 55/811 [03:06<37:01,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 56/811 [03:09<36:22,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 57/811 [03:22<1:15:38,  6.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 58/811 [03:25<1:04:16,  5.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 59/811 [03:28<54:50,  4.38s/it]  Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 60/811 [03:31<50:19,  4.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 61/811 [03:34<45:58,  3.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 62/811 [03:37<42:07,  3.37s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 63/811 [03:39<39:25,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 64/811 [03:42<37:15,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 65/811 [03:44<35:52,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 66/811 [03:47<35:02,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 67/811 [03:50<34:38,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 68/811 [03:52<33:58,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▊         | 69/811 [03:55<34:07,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▊         | 70/811 [03:58<33:43,  2.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 71/811 [04:01<33:22,  2.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 72/811 [04:03<33:43,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 73/811 [04:06<33:25,  2.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 74/811 [04:09<33:03,  2.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 75/811 [04:12<35:17,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 76/811 [04:15<34:28,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 77/811 [04:17<34:01,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|▉         | 78/811 [04:20<34:18,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|▉         | 79/811 [04:23<34:05,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|▉         | 80/811 [04:26<33:28,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|▉         | 81/811 [04:28<33:48,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|█         | 82/811 [04:31<34:25,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|█         | 83/811 [04:34<34:50,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|█         | 84/811 [04:37<34:49,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|█         | 85/811 [04:40<35:04,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 86/811 [04:43<34:48,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 87/811 [04:46<36:12,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 88/811 [04:49<36:26,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 89/811 [04:52<35:36,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 90/811 [04:55<35:35,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 91/811 [04:58<34:32,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█▏        | 92/811 [05:01<34:50,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█▏        | 93/811 [05:04<34:29,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 94/811 [05:06<33:43,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 95/811 [05:10<35:06,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 96/811 [05:13<35:22,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 97/811 [05:16<35:27,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 98/811 [05:19<35:39,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 99/811 [05:22<35:06,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 100/811 [05:26<38:55,  3.28s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 101/811 [05:28<37:32,  3.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 102/811 [05:31<36:28,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 103/811 [05:34<36:29,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 104/811 [05:39<40:19,  3.42s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 105/811 [05:42<38:34,  3.28s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 106/811 [05:45<38:09,  3.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 107/811 [05:49<40:44,  3.47s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 108/811 [05:52<38:52,  3.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 109/811 [05:55<38:58,  3.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▎        | 110/811 [05:58<37:42,  3.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▎        | 111/811 [06:01<36:41,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 112/811 [06:04<36:15,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 113/811 [06:07<35:45,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 114/811 [06:10<35:30,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 115/811 [06:13<35:23,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 116/811 [06:18<40:49,  3.52s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 117/811 [06:21<38:25,  3.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▍        | 118/811 [06:24<37:16,  3.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▍        | 119/811 [06:27<36:14,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▍        | 120/811 [06:29<34:32,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▍        | 121/811 [06:32<34:56,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▌        | 122/811 [06:35<34:49,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▌        | 123/811 [06:38<34:06,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▌        | 124/811 [06:41<33:39,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▌        | 125/811 [06:44<33:37,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 126/811 [06:47<33:25,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 127/811 [06:50<33:23,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 128/811 [06:53<33:50,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 129/811 [06:56<32:50,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 130/811 [07:03<48:36,  4.28s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 131/811 [07:07<48:15,  4.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▋        | 132/811 [07:10<43:45,  3.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▋        | 133/811 [07:13<40:53,  3.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 134/811 [07:16<38:46,  3.44s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 135/811 [07:20<37:56,  3.37s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 136/811 [07:22<35:43,  3.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 137/811 [07:25<34:50,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 138/811 [07:28<33:35,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 139/811 [07:31<32:55,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 140/811 [07:34<32:32,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 141/811 [07:37<32:30,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 142/811 [07:39<32:18,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 143/811 [07:43<33:16,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 144/811 [07:45<32:50,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 145/811 [07:49<33:33,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 146/811 [07:52<33:26,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 147/811 [07:55<33:36,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 148/811 [07:58<33:41,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 149/811 [08:01<33:55,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 150/811 [08:04<33:28,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▊        | 151/811 [08:07<33:19,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▊        | 152/811 [08:10<32:13,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 153/811 [08:13<33:17,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 154/811 [08:16<32:11,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 155/811 [08:19<32:47,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 156/811 [08:22<32:08,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 157/811 [08:24<31:43,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 158/811 [08:27<31:29,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|█▉        | 159/811 [08:30<31:09,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|█▉        | 160/811 [08:33<31:47,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|█▉        | 161/811 [08:37<33:26,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|█▉        | 162/811 [08:39<32:26,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|██        | 163/811 [08:42<32:32,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|██        | 164/811 [08:46<35:29,  3.29s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|██        | 165/811 [08:49<34:38,  3.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|██        | 166/811 [08:52<33:31,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 167/811 [08:56<33:51,  3.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 168/811 [08:58<32:56,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 169/811 [09:02<33:07,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 170/811 [09:04<31:58,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 171/811 [09:07<32:00,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 172/811 [09:10<31:09,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██▏       | 173/811 [09:13<31:29,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██▏       | 174/811 [09:16<31:20,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 175/811 [09:24<46:37,  4.40s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 176/811 [09:27<41:07,  3.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 177/811 [09:29<37:47,  3.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 178/811 [09:32<35:49,  3.40s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 179/811 [09:35<33:53,  3.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 180/811 [09:38<33:15,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 181/811 [09:41<32:44,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 182/811 [09:46<36:51,  3.52s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 183/811 [09:49<34:50,  3.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 184/811 [09:52<33:51,  3.24s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 185/811 [09:54<32:24,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 186/811 [09:58<32:48,  3.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 187/811 [10:00<31:10,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 188/811 [10:11<55:22,  5.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 189/811 [10:14<47:55,  4.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 190/811 [10:17<42:45,  4.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▎       | 191/811 [10:20<39:19,  3.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▎       | 192/811 [10:23<37:01,  3.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 193/811 [10:26<34:45,  3.37s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 194/811 [10:29<33:06,  3.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 195/811 [10:32<31:57,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 196/811 [10:35<33:39,  3.28s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 197/811 [10:38<32:28,  3.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 198/811 [10:41<31:38,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▍       | 199/811 [10:44<31:24,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▍       | 200/811 [10:47<30:34,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▍       | 201/811 [10:50<30:24,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▍       | 202/811 [10:53<29:52,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▌       | 203/811 [10:56<29:42,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▌       | 204/811 [10:59<31:17,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▌       | 205/811 [11:02<30:14,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▌       | 206/811 [11:05<29:56,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 207/811 [11:08<30:05,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 208/811 [11:11<30:28,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 209/811 [11:14<29:22,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 210/811 [11:16<28:36,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 211/811 [11:20<29:02,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 212/811 [11:22<29:09,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▋       | 213/811 [11:25<29:01,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▋       | 214/811 [11:28<29:16,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 215/811 [11:32<31:10,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 216/811 [11:36<32:17,  3.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 217/811 [11:39<31:41,  3.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 218/811 [11:42<31:40,  3.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 219/811 [11:44<30:09,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 220/811 [11:48<30:42,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 221/811 [11:51<29:52,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 222/811 [11:54<32:08,  3.27s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 223/811 [12:00<39:38,  4.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 224/811 [12:03<36:54,  3.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 225/811 [12:06<34:25,  3.52s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 226/811 [12:09<32:40,  3.35s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 227/811 [12:12<31:06,  3.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 228/811 [12:15<30:33,  3.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 229/811 [12:18<29:36,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 230/811 [12:21<29:34,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 231/811 [12:24<28:49,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▊       | 232/811 [12:27<27:59,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▊       | 233/811 [12:30<28:05,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 234/811 [12:33<29:11,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 235/811 [12:36<29:00,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 236/811 [12:39<29:26,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 237/811 [12:42<30:09,  3.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 238/811 [12:45<28:59,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 239/811 [12:48<29:18,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|██▉       | 240/811 [12:51<28:52,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|██▉       | 241/811 [12:54<28:26,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|██▉       | 242/811 [12:57<27:35,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|██▉       | 243/811 [13:01<29:56,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|███       | 244/811 [13:04<29:08,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|███       | 245/811 [13:07<30:04,  3.19s/it] 30%|███       | 246/811 [13:10<29:22,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|███       | 247/811 [13:13<28:43,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 248/811 [13:16<28:22,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 249/811 [13:19<29:03,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 250/811 [13:22<27:48,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 251/811 [13:25<29:09,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 252/811 [13:28<28:12,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 253/811 [13:31<27:48,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███▏      | 254/811 [13:34<27:21,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███▏      | 255/811 [13:37<27:20,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 256/811 [13:40<27:48,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 257/811 [13:46<36:49,  3.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 258/811 [13:49<33:01,  3.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 259/811 [13:52<31:06,  3.38s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 260/811 [13:55<30:54,  3.37s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 261/811 [13:58<29:32,  3.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 262/811 [14:01<28:48,  3.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 263/811 [14:04<27:45,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 264/811 [14:07<29:11,  3.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 265/811 [14:10<29:17,  3.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 266/811 [14:14<28:45,  3.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 267/811 [14:16<28:10,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 268/811 [14:20<28:35,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 269/811 [14:23<28:20,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 270/811 [14:26<27:51,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 271/811 [14:29<27:28,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▎      | 272/811 [14:33<29:45,  3.31s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▎      | 273/811 [14:36<29:16,  3.27s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 274/811 [14:39<28:19,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 275/811 [14:42<28:03,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 276/811 [14:45<27:03,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 277/811 [14:48<26:26,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 278/811 [14:50<26:08,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 279/811 [14:53<26:08,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▍      | 280/811 [14:58<30:08,  3.41s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▍      | 281/811 [15:01<28:45,  3.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▍      | 282/811 [15:03<27:02,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▍      | 283/811 [15:07<27:52,  3.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▌      | 284/811 [15:10<27:35,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▌      | 285/811 [15:13<27:15,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▌      | 286/811 [15:16<27:03,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▌      | 287/811 [15:19<26:16,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 288/811 [15:43<1:22:36,  9.48s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 289/811 [15:57<1:33:21, 10.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 290/811 [16:01<1:15:02,  8.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 291/811 [16:04<1:00:03,  6.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 292/811 [16:06<48:53,  5.65s/it]  Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 293/811 [16:10<42:45,  4.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▋      | 294/811 [16:13<37:16,  4.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▋      | 295/811 [16:15<33:11,  3.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▋      | 296/811 [16:18<31:19,  3.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 297/811 [16:21<29:09,  3.40s/it] 37%|███▋      | 298/811 [16:24<27:28,  3.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 299/811 [16:29<30:46,  3.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 300/811 [16:32<30:01,  3.53s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 301/811 [16:35<30:06,  3.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 302/811 [16:38<28:18,  3.34s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 303/811 [16:41<27:21,  3.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 304/811 [16:45<28:57,  3.43s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 305/811 [16:48<28:04,  3.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 306/811 [16:51<26:48,  3.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 307/811 [16:55<28:01,  3.34s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 308/811 [16:59<28:50,  3.44s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 309/811 [17:01<27:26,  3.28s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 310/811 [17:05<29:18,  3.51s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 311/811 [17:08<27:11,  3.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 312/811 [17:11<26:19,  3.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▊      | 313/811 [17:15<27:39,  3.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▊      | 314/811 [17:29<54:28,  6.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 315/811 [17:32<44:56,  5.44s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 316/811 [17:35<38:32,  4.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 317/811 [17:37<33:49,  4.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 318/811 [17:41<31:44,  3.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 319/811 [17:44<29:13,  3.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 320/811 [17:47<28:17,  3.46s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|███▉      | 321/811 [17:50<27:03,  3.31s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|███▉      | 322/811 [17:53<26:16,  3.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|███▉      | 323/811 [18:01<37:57,  4.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|███▉      | 324/811 [18:04<33:12,  4.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|████      | 325/811 [18:07<30:52,  3.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|████      | 326/811 [18:10<28:15,  3.50s/it] 40%|████      | 327/811 [18:12<26:20,  3.27s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|████      | 328/811 [18:15<25:04,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 329/811 [18:18<24:40,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 330/811 [18:21<24:43,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 331/811 [18:24<23:51,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 332/811 [18:27<23:48,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 333/811 [18:30<23:12,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 334/811 [18:33<23:28,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████▏     | 335/811 [18:37<26:45,  3.37s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████▏     | 336/811 [18:40<25:34,  3.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 337/811 [18:43<25:06,  3.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 338/811 [18:46<25:07,  3.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 339/811 [18:49<24:26,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 340/811 [18:52<23:42,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 341/811 [18:55<23:10,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 342/811 [18:58<23:24,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 343/811 [19:01<23:16,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 344/811 [19:04<23:04,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 345/811 [19:06<22:39,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 346/811 [19:09<22:31,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 347/811 [19:12<23:00,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 348/811 [19:15<22:33,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 349/811 [19:18<22:48,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 350/811 [19:21<22:27,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 351/811 [19:24<21:40,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 352/811 [19:27<22:29,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▎     | 353/811 [19:30<22:16,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▎     | 354/811 [19:34<24:13,  3.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 355/811 [19:38<27:28,  3.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 356/811 [19:41<25:37,  3.38s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 357/811 [19:44<24:02,  3.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 358/811 [19:47<24:25,  3.24s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 359/811 [19:51<25:59,  3.45s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 360/811 [19:54<24:58,  3.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▍     | 361/811 [19:57<23:51,  3.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▍     | 362/811 [20:00<22:41,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▍     | 363/811 [20:03<24:08,  3.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▍     | 364/811 [20:07<24:06,  3.24s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▌     | 365/811 [20:10<23:27,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▌     | 366/811 [20:12<22:39,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▌     | 367/811 [20:26<46:35,  6.30s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▌     | 368/811 [20:30<39:54,  5.41s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▌     | 369/811 [20:43<58:21,  7.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 370/811 [20:46<47:28,  6.46s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 371/811 [20:49<39:28,  5.38s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Trying to load from /users/rhydian/self-supervised-project/model_weights/SSECEncodersBothBoth
==> Resuming model trained for 106 epochs...
Trying to load from ../model_weights/angle_regressor4
==> Resuming model trained for 7 epochs...
1513483_20201_2_0,1s8jpn4icz,-0.39227307230692426,-106.34365491271674,-31.531027129461307

4117285_20201_2_0,1s9dyn4icz,2.035336530061836,-140.40466934794966,-38.752464528140564

1795553_20201_2_0,1s9exn4icz,-0.7809367019460646,-91.2504963607168,-4.5495681428234604

1521878_20201_2_0,1scwbp4icz,-0.7294676695539585,-133.01555783245612,-27.650758707286357

1053258_20201_2_0,1sdogo4icz,-2.8376834352034965,-134.9329847380356,-28.328917039582294

2671629_20201_2_0,1shs7p4icz,-1.7368356205104627,-94.73119105594739,-15.843311903668408

2401244_20201_2_0,1sl3cn4icz,0.49832459678234975,-110.17147136102693,-38.64150622776317

1874103_20201_2_0,1sprwn4icz,-7.410946887660994,-88.55911239951575,0.2365023686954828

5541971_20201_2_0,1ssjmn4icz,1.5544228192032774,-73.10711644486238,-46.157268762273574

5768790_20201_2_0,1su0rn4icz,1.3074940711208773,-143.95252771467705,-36.1697798692046

2799620_20201_2_0,1sw1ao4icz,-0.11577315135452315,-125.4002476607443,-31.248732447522542

1577224_20201_2_0,1swfvo4icz,0.5372810195953536,-74.50620836718102,-35.640818194471805

3283724_20201_2_0,1szeap4icz,-3.080009943219905,-108.04962553177717,-7.7492147925577655

2103759_20201_2_0,1t1uzo4icz,-1.5388121808538087,-130.6341851582058,-16.379963549743707

2056467_20201_2_0,1t97xo4icz,-1.8451451892197481,-129.01395708187243,-25.825186637895555

5734445_20201_2_0,1tbp2p4icz,-2.116949754017372,-155.4405166800892,-28.698408955223073

5347382_20201_2_0,1tffuo4icz,-0.2709821761223337,-65.4358028026771,-31.191314605244287

3265776_20201_2_0,1tppfp4icz,1.5157618526779413,-114.29646315986287,-51.18753447737143

2955410_20201_2_0,1tqmyn4icz,-0.08322226821358077,-87.27227922728261,-41.01615886722712

5860471_20201_2_0,1txfdo4icz,0.4572776740343729,-140.17954305597374,-38.13270479627846

1776628_20201_2_0,1u0z3o4icz,-0.8121707485217894,-114.06101996428171,-10.517786698615879

4047594_20201_2_0,1u387p4icz,0.01302794599507372,-103.07962448789533,-41.00143169435033

1247178_20201_2_0,1u3tvo4icz,1.6370140074585484,-87.30873952080825,-56.6838053924662

2209792_20201_2_0,1u6kjo4icz,0.019768399301152685,-62.57355142302234,-42.29098276648138

3635304_20201_2_0,1u6y0o4icz,0.24288249751510338,-117.55054821914962,-35.22782683382292

1577127_20201_2_0,1ubaio4icz,0.8197888416032582,-58.23353149832775,-54.44854300701098

1322945_20201_2_0,1ueftn4icz,-5.635587372403008,-125.46792172210698,-4.852838787316472

4111317_20201_2_0,1ugn6o4icz,-0.18136479760798727,-82.66039550313442,-21.240211832808157

3198578_20201_2_0,1uiqgn4icz,6.731065446537184,-113.67867035207149,-65.68933806964264

5078250_20201_2_0,1ujubn4icz,-2.76222200271238,-116.67838819407623,-21.83946197973094

4241107_20201_2_0,1un1cn4icz,1.5719961907012934,-84.21318256467296,-44.837452043906254

1889700_20201_2_0,1uow7p4icz,-2.9048253504026476,-101.62947783992291,-36.73547575233093

1711772_20201_2_0,1uubgp4icz,-3.485927908107061,-95.1222561694394,-18.21918350435918

3991716_20201_2_0,1uwf6o4icz,5.206093048376951,-28.620824469800652,-69.00316819819355

5738548_20201_2_0,1v8qgn4icz,-0.9291430474427919,-88.34850133704921,-13.315053545194488

3424609_20201_2_0,1v9zxo4icz,0.6176935760776822,-115.79561778049799,-22.797335852618716

5841504_20201_2_0,1vaoap4icz,-2.5741547934000395,-123.72743249805595,-28.776382766167444

4279105_20201_2_0,1ve6rn4icz,0.12532411799844398,-124.50111231021114,-34.11426966406225

5563732_20201_2_0,1viq9n4icz,-3.6717726681331255,-90.29758471354913,-16.84592291843873

2041880_20201_2_0,1vlf7o4icz,-1.664609714307814,-119.94048824312853,-4.378296006209965

2015319_20201_2_0,1vmqro4icz,-4.856444934328755,-79.00236616091249,-14.135175611473755

4534593_20201_2_0,1voa2p4icz,-0.7989325722690779,-103.5849295328174,-26.985526819256066

3808459_20201_2_0,1vtfkn4icz,0.28358815515073715,-104.69079722701986,-21.831544265016333

3742424_20201_2_0,1vx2xn4icz,0.528407376087966,-149.85722200062833,-44.56625479900656

3916172_20201_2_0,1vx9pn4icz,-0.4433393527905079,-120.30718319105651,-24.426298518171194

5439656_20201_2_0,1w2d3o4icz,-0.011459052912182075,-64.64313604812563,-26.49222973932011

2967856_20201_2_0,1w2heo4icz,-4.038626334700321,-123.41257015407899,-15.580514825537847

1930221_20201_2_0,1w78wo4icz,2.076386123803755,-58.53354174128657,-59.0213959485539

3393654_20201_2_0,1wamap4icz,-0.36352726397509455,-78.18805387063111,-31.16113879687144

3149082_20201_2_0,1wcugp4icz,1.4697919041974898,-119.16090692550495,-39.494925594359884

5630449_20201_2_0,1wgqep4icz,-4.497701229558613,-97.94341062442288,-2.7532415452316457

3724979_20201_2_0,ssvn8p4icz,-0.866938648791249,-132.42665727339306,-31.385967330563517

2091397_20201_2_0,1whscp4icz,4.328072000709054,-107.72936549954056,-51.4731082254403

4276989_20201_2_0,1wiinn4icz,-0.47069532432552746,-124.4816800248305,-43.12736567239065

5114576_20201_2_0,1wouon4icz,2.7102168731195895,-103.35066972044942,-62.39136236733839

4266054_20201_2_0,1wqe1p4icz,-0.5498593199590867,-72.64348747435508,-35.57374952534447

2026540_20201_2_0,1wqfbo4icz,7.956348039016029,-84.50869659527444,-58.419860640877516

4639428_20201_2_0,1ws2yo4icz,-0.20968600407373317,-61.14831914157324,-32.24690693619253

5296663_20201_2_0,1wvjan4icz,-0.09966072746752172,-76.0751628123329,-37.85670650624898

1552308_20201_2_0,1wvuqn4icz,0.7858629330311654,-129.23680867888098,-44.66114986117368

1468040_20201_2_0,1wznlo4icz,4.02173208244915,-48.564783875145935,-53.157704549665596

4029662_20201_2_0,1x4lio4icz,-2.894324527410233,-119.53574447623285,-19.93349667709694

2570430_20201_2_0,1x5b8p4icz,-2.0314364682629926,-88.97196843323994,-24.822929046297816

5751694_20201_2_0,1xevlo4icz,1.0082399300497245,-102.43228507276308,-42.61606561478649

1148950_20201_2_0,1xgxnn4icz,-0.24968813231169618,-91.39538642445484,-30.05894585157121

1284631_20201_2_0,1xnt6p4icz,-0.4586943545411315,-123.90417639710162,-16.196516758578014

1588948_20201_2_0,1xow8n4icz,0.4253012869030284,-110.62521703301832,-46.78075394738303

3394833_20201_2_0,1xp9lo4icz,-0.5455868913359401,-106.14935704182085,-31.532545086625333

5820500_20201_2_0,1xtmtn4icz,-2.611345695625801,-107.54911991916157,-35.34416415240372

2878576_20201_2_0,1xvwmo4icz,-2.779669161837606,-100.01535068606617,-20.679699634798766

5120214_20201_2_0,1xyitn4icz,1.6999543659197096,-96.48883117445263,-41.432265189393206

2626568_20201_2_0,1y1iko4icz,-2.4287293141065236,-145.43642562295028,-35.294187914461205

1413933_20201_2_0,1y5cbo4icz,-2.4538539785982287,-120.3882438902796,-26.381910957358343

2962695_20201_2_0,1yaqnn4icz,-2.0977606420863895,-108.26701436771168,-38.201811641601154

2963962_20201_2_0,q108cp4icz,-0.7844389104097378,-81.65388261403456,-31.42916450285486

3030910_20201_2_0,1ycc8o4icz,-1.7027326360242763,-95.72152717501857,-24.18851361361847

2283207_20201_2_0,1yelmn4icz,-0.6343442055899905,-93.538781268496,-28.533030674075988

5462022_20201_2_0,1yildn4icz,0.29704962969087334,-103.45803155064092,-39.19283199103698

4475790_20201_2_0,1yiqep4icz,-3.0076592267781956,-142.44357690082248,-25.173614335316472

4246011_20201_2_0,1z1wyo4icz,2.5202785943934733,-107.42284837500245,-60.91938733554083

5361211_20201_2_0,1z505o4icz,0.3719070248035646,-115.81865934616766,-27.76429274962952

5702939_20201_2_0,1z52jp4icz,1.679247911954525,-113.34826143266875,-66.79185252014575

3019141_20201_2_0,1z878n4icz,10.514201447725705,-43.9543764407382,-95.89797838600548

5394531_20201_2_0,1zdy7p4icz,-4.29264021522266,-77.50476061249572,-29.040664876092677

1064955_20201_2_0,1zh0lo4icz,-6.537589384754687,-149.07528453799503,7.24938063767965

1231950_20201_2_0,1zkefp4icz,-0.5797901385783242,-116.95979079155313,-28.258851951582116

6011313_20201_2_0,1zo0eo4icz,1.658895994745605,-84.06540114199237,-64.7994729809916

1183075_20201_2_0,1zoowo4icz,-0.778246932826755,-96.15670789610272,-40.41519734913328

4893683_20201_2_0,1zwtuo4icz,-5.805412884217686,-83.97007528191165,9.54537620331007

5219845_20201_2_0,200ron4icz,0.8680654900900512,-119.29121833571969,-38.50019937692349

3868559_20201_2_0,201n9n4icz,-0.42351733948929415,-106.91314647757224,-41.75810743079512

1489472_20201_2_0,2026jp4icz,-1.0556504480841915,-116.51143094007398,-26.5471105751715

1637409_20201_2_0,202oln4icz,0.18528767234582494,-62.73111558483248,-43.88572100288047

1393834_20201_2_0,205bun4icz,0.9817441495935734,-91.33362313114813,-30.363100483950518

2557668_20201_2_0,20atfo4icz,-2.0861236774279246,-95.54678415550609,0.8339916882182195

1271906_20201_2_0,20ciln4icz,0.4866162899685755,-107.61150188829512,-44.68139445917008

3542822_20201_2_0,20czho4icz,1.3419518446405365,-58.724402317244284,-39.000261007429444

1350870_20201_2_0,20e7xo4icz,0.1792622496702794,-87.16087146869921,-34.705239386076286

1571072_20201_2_0,20efno4icz,0.690492903572583,-107.90882472698149,-51.749556133924

2296554_20201_2_0,20fkdp4icz,-1.6146304786963963,-145.09689588834226,-20.881351841017235

3900165_20201_2_0,20kuto4icz,-0.8534852029649888,-97.03827999175013,-26.00553332729379

2466428_20201_2_0,20m8fo4icz,-2.948078669898122,-166.34478727137702,-0.5138927430475775

5424326_20201_2_0,20mjqn4icz,-1.477072624039834,-121.02070997649832,-24.42213332774763

6013369_20201_2_0,20r75p4icz,0.11720415113162802,-113.99436475026434,-31.7705059849755

1880891_20201_2_0,20xbyo4icz,-0.4060518744351204,-88.44064817257555,-27.930422047443486

3390238_20201_2_0,20xw8o4icz,-8.87828593766157,-23.676751532526737,9.446287689634133

3355717_20201_2_0,20zjto4icz,1.4102804592324207,-93.94279980612089,-54.343952369655184

5428757_20201_2_0,211jno4icz,3.1179788273275553,-60.41515265836421,-52.76740560948832

1497629_20201_2_0,2138wo4icz,-3.298251829245962,-101.87889285730154,-22.97724125845292

4925347_20201_2_0,215syn4icz,4.398358098912427,-99.47362762728434,-74.28501746276774

1852431_20201_2_0,217jvn4icz,0.007579431061450554,-104.3629859592138,-26.32162283161165

2749582_20201_2_0,21a67o4icz,0.9904283484317664,-62.115878211639284,-34.7934182515053

4584972_20201_2_0,21jfgn4icz,0.9964061895354933,-103.11550391574923,-23.07979401936342

5317856_20201_2_0,21lpon4icz,2.617945096487639,-109.22176433803205,-47.447459539652584

3530959_20201_2_0,21ualn4icz,-1.8696865680524373,-94.99907717169194,-22.85004136361735

1630295_20201_2_0,21ubgo4icz,-0.6771271905881545,-78.95006773316734,-30.144225668045706

4090438_20201_2_0,21w6xo4icz,-0.905912604267249,-106.06975156953288,-37.98723133450579

5059212_20201_2_0,21x88n4icz,2.4977770596035667,-119.54963923638726,-63.32356640571318

2037633_20201_2_0,21xmtn4icz,0.2003867381844503,-113.63446382575177,-32.12818104896914

1423033_20201_2_0,21xyip4icz,6.927431779614251,-53.71181108904935,-90.98372092775088

3987563_20201_2_0,221gvn4icz,-0.7014785176288448,-126.72756839266867,-39.64411029139164

4255742_20201_2_0,22589o4icz,-2.860809609937623,-113.79091860511866,-7.972480534917906

5485271_20201_2_0,22836o4icz,-5.831075635776746,-80.9790665462296,-1.2928361628444947

2008647_20201_2_0,22atjn4icz,-0.10272422065391133,-103.23941633418403,-36.20555559517365

5855146_20201_2_0,22beho4icz,-0.2991419068636573,-57.33490263605833,-26.22893785025198

2241218_20201_2_0,22cc4o4icz,-2.040782258838685,-131.9270488972112,-13.776568163715353

5269582_20201_2_0,22fzwo4icz,-1.7771908392798583,-85.12612529247212,-28.883943233846026

2438632_20201_2_0,22gnbo4icz,5.1822076278857585,-93.06015066473623,-67.80095752677697

3618264_20201_2_0,22jcxn4icz,0.4293915322073576,-85.38404000337394,-48.274266226865194

5312100_20201_2_0,22k7ao4icz,-0.13700290281879496,-105.40637638655735,-19.36524422977827

2964079_20201_2_0,22klro4icz,2.966085402090713,-53.14310309490574,-49.629168760773354

2318648_20201_2_0,22lsip4icz,-0.026193504646710268,-93.20411150790605,-42.08424254442562

3427910_20201_2_0,22ugsn4icz,0.7169783086530022,-88.83364767879138,-41.18554741217001

1278259_20201_2_0,22x9vn4icz,1.7692043367248849,-86.71006436225946,-50.30366642653479

2881151_20201_2_0,234sln4icz,-0.19371349305543398,-91.00951380205134,-44.13247852974297

1069880_20201_2_0,23athn4icz,-0.6883163418499474,-135.65680602979506,-21.544378472693552

2258672_20201_2_0,23av8o4icz,-2.7180319186844693,-86.7892036625779,-18.58016877631519

1846855_20201_2_0,23dbzo4icz,-0.7179311757954918,-64.17684453381958,-34.54982611317345

2014792_20201_2_0,23iono4icz,0.8290456248625473,-98.1791206600015,-39.64541903752679

5936335_20201_2_0,23qato4icz,-0.27228168138608577,-83.78958636022287,-42.60803887981251

1658250_20201_2_0,23r33o4icz,-0.32255215057312575,-99.70029385350387,-41.72067990729724

5372514_20201_2_0,240ofp4icz,-1.0754396957674404,-108.2738872774741,-40.292337326678876

2477730_20201_2_0,24a9jo4icz,-0.050302607933955704,-111.23861900295037,-44.76658225923509

3793808_20201_2_0,24kvlo4icz,1.8305008778839449,-124.93402137309198,-51.9417387682704

2777597_20201_2_0,24lkgn4icz,-1.6754159049791777,-75.27246159050833,-38.71702742182643

2366496_20201_2_0,24stln4icz,-0.009739999214552734,-94.10130628232048,-42.48496768837681

4441024_20201_2_0,24tqmn4icz,0.3475179320561331,-77.42308223314728,-30.800621970900636

1525727_20201_2_0,250jlo4icz,-0.06377899416857132,-102.64072522726681,-30.5549228530477

5328617_20201_2_0,257pvn4icz,0.9190701294797999,-107.57383719886204,-37.49149055214134

2455158_20201_2_0,2581vn4icz,-11.104575267997909,-151.57486008619395,15.408197529599335

4459979_20201_2_0,258dno4icz,0.16580924194500493,-105.59572630748107,-27.54847850419256

1777820_20201_2_0,259arn4icz,-0.5651309554364169,-89.25174288558583,-60.96725738298527

3349679_20201_2_0,25aoln4icz,-0.8973960087494645,-115.7491133287921,-33.28199475560804

3396907_20201_2_0,25da9p4icz,0.050666269940054826,-96.85408709911812,-28.22880005761806

2774783_20201_2_0,25fdep4icz,1.959700675131931,-81.04692047418365,-52.5785220149057

2987670_20201_2_0,25h42o4icz,0.16163413488469994,-71.44940279360736,-42.71954059765858

4337515_20201_2_0,25llon4icz,5.618486308088137,-68.39028602340525,-64.88853568701498

1552592_20201_2_0,25m1qn4icz,0.6445436139993902,-72.7297401053917,-32.27391676414001

5455728_20201_2_0,25mfpo4icz,0.13107572886241392,-89.65801810781682,-42.42204605753085

2933910_20201_2_0,25rzlo4icz,-2.173880844017509,-86.13087651626111,-15.11044303227824

4221254_20201_2_0,25s6gp4icz,-1.5199693202504452,-103.66924223767259,-22.315055486149404

1065448_20201_2_0,25vdip4icz,-1.3252339843466676,-83.8369190468772,-34.92124075934777

5915699_20201_2_0,25y7yo4icz,17.687424259585143,-45.91422593128607,-125.51849631219523

6014121_20201_2_0,25z8xn4icz,-1.7537364297170577,-86.56927734850711,-31.11151237284676

1627593_20201_2_0,262sao4icz,2.004440101770959,-69.63340782400033,-46.72781200978798

3370042_20201_2_0,265d8p4icz,-2.1285648109556656,-125.12749626189975,-25.717149532581544

2533801_20201_2_0,36azhp4icz,2.024168503088668,-108.19370252221776,-50.75928840108348

5305580_20201_2_0,268nvo4icz,0.8309507972645982,-100.29827417225314,-45.47910678543231

2453150_20201_2_0,26ax1o4icz,0.31465912147702857,-108.80274781864742,-41.5711351801596

4897678_20201_2_0,26b7ho4icz,-1.09902130554958,-110.37352796111017,-15.168959165329142

2669274_20201_2_0,26bgko4icz,-0.6188765863465635,-92.58892157669749,-38.08321004585193

4492349_20201_2_0,26d0rn4icz,-2.5815045570405717,-112.4729222832091,-20.91816338480379

1832894_20201_2_0,26l6on4icz,-2.4303552873150127,-128.65040940236315,-1.9668496620430034

2621311_20201_2_0,26nqin4icz,0.843841361699705,-119.72253391038976,-28.516462054128468

3926660_20201_2_0,26u18p4icz,1.6253064004087108,-102.45544549446998,-44.351011387437424

4035515_20201_2_0,26vfep4icz,2.515442161675736,-7.608419756387178,-71.49798295282129

4796099_20201_2_0,26w3hp4icz,-4.7340795465079015,-68.45772635873072,-19.575383598940007

2025791_20201_2_0,26xcoo4icz,-2.2653269823387188,-60.73126020552263,-35.80719421989467

4749459_20201_2_0,26y2kp4icz,2.1290280681457197,-52.011566068910895,-33.21001107727915

2502523_20201_2_0,2725oo4icz,0.799964341087346,-115.95041455381752,-31.074268589495603

3917861_20201_2_0,272t6o4icz,-3.4658227748781645,-76.66310491468946,-27.827210142941567

1447232_20201_2_0,hj02no4icz,-0.8762452424697491,-76.09350670486438,-36.98323706771046

2354219_20201_2_0,273y3p4icz,3.6674591945742128,-91.27056175367377,-68.15142705565245

1034645_20201_2_0,2747hp4icz,-1.0722807252295652,-57.37172287874694,-34.24092970575457

5697443_20201_2_0,276fwo4icz,3.1847726305357997,-71.49697086592153,-72.71281928630707

2115054_20201_2_0,27blgp4icz,-0.8265983157730704,-131.80685270313313,-33.86258261308042

3052230_20201_2_0,27d7hp4icz,0.37864366448033104,-107.34763034567652,-36.97105009372348

2612685_20201_2_0,27exsn4icz,-1.0736355894959029,-110.08091575175297,-24.201856120598478

5232998_20201_2_0,27f1sn4icz,-2.707139480208378,-128.55469762710754,-25.671864287079913

4737434_20201_2_0,27fzjo4icz,-2.2864847210978714,-113.95972327565971,-17.35509087236659

1931342_20201_2_0,27jgen4icz,-2.1834534289231495,-71.87324197530401,-14.321332664163506

4690212_20201_2_0,27lr8o4icz,-0.3679274293132271,-59.60602210579509,-35.790574606052445

3950054_20201_2_0,27lu0o4icz,-2.6519243203791896,-101.84470342151741,-24.920590811657192

3750941_20201_2_0,27n1en4icz,3.275527270063025,-83.05864931141565,-52.97325760481243

5469376_20201_2_0,27nguo4icz,4.1865923713606294,-67.29464279209466,-66.19663181466754

5695277_20201_2_0,zfrnsn4icz,-2.022731526614883,-111.71935643159762,-12.686980281220883

2626151_20201_2_0,27w7ro4icz,-0.1981535633839823,-77.83551152584519,-22.340840405081792

4120245_20201_2_0,281ayo4icz,2.3939038316412375,-68.65147200447404,-30.700758538539702

3163560_20201_2_0,284abo4icz,0.12264058723921778,-106.6723511842228,-43.092137644686986

4442526_20201_2_0,284mco4icz,-1.462256470702372,-134.66677970700417,-24.53527714098145

1278018_20201_2_0,285ado4icz,0.09900945803196155,-51.167516712103094,-25.23299718059981

3221341_20201_2_0,285tvo4icz,2.7359144038144985,-41.697445884780535,-51.76371338040748

3002936_20201_2_0,2876jp4icz,-2.912217896236871,-76.32606328138527,-24.68902907550474

5851678_20201_2_0,287znn4icz,3.2440567265322433,-98.07999809671756,-59.86182629144325

2023614_20201_2_0,288lkn4icz,7.758957198442238,-85.30379349579155,-71.25213543091729

2885980_20201_2_0,28bsap4icz,-1.693495661173098,-123.66536550316434,-23.688986749816294

3881577_20201_2_0,28fi3o4icz,-1.1606955222167816,-98.64942192035039,-27.652462161239868

5508062_20201_2_0,28fzin4icz,-1.733434292124206,-81.77147970057416,-12.897392466933923

3346505_20201_2_0,28ibwn4icz,-3.2334474155101125,-92.42405341736995,-4.693481402844938

1569892_20201_2_0,28tazn4icz,-0.6691291759332613,-88.71327285447518,-40.84270959717084

5769243_20201_2_0,28tiep4icz,-2.7442629249369555,-66.61400770226004,-25.197339547552744

5535789_20201_2_0,28wi3p4icz,1.393054376374412,-101.23244323039881,-53.37149543544187

5683787_20201_2_0,28wtjp4icz,0.21330540661822917,-67.93381797427651,-27.45484893996361

3679158_20201_2_0,28xcsn4icz,0.2134245498332814,-63.8042918014026,-31.815492959365983

1129471_20201_2_0,290pyo4icz,-3.6816991954644913,-71.88743286153743,-27.575848909602854

1933796_20201_2_0,292s5o4icz,3.534254929122389,-66.3454580161343,-50.62603434934725

2405271_20201_2_0,29ai4p4icz,-0.23534739130160012,-68.31809246575247,-31.989630710074877

4164979_20201_2_0,29b05p4icz,1.4357673719870712,-96.65540960494525,-41.1434968928412

2950912_20201_2_0,29ikcp4icz,-0.7586263452771288,-115.43642945360148,-30.623771383452365

2317682_20201_2_0,29m1so4icz,2.554931532656784,-106.9549224145388,-62.83986965578896

4133683_20201_2_0,29mr6o4icz,-1.5120909060461736,-117.99494749467343,-34.27467552824727

4320118_20201_2_0,8i8ueo4icz,1.7224563926857432,-137.68130504578215,-61.265714949906354

4932440_20201_2_0,29pmjp4icz,-0.282463459912122,-103.08979140847327,-39.50998766173194

4869352_20201_2_0,29pxpn4icz,-1.3858914305923418,-105.3199548505853,-42.32825880681317

5873924_20201_2_0,29q5so4icz,2.043064390996321,-102.79039280282097,-54.16149447504843

4852392_20201_2_0,29tmcp4icz,-1.2857696221287769,-146.59573744315088,-27.225377678033823

1394840_20201_2_0,29uk3o4icz,-2.0399476360127378,-77.38445892028116,-18.57518036399709

5619882_20201_2_0,29uudp4icz,-1.5483039560337621,-140.4248772494139,-31.377073884800296

2452989_20201_2_0,29xfmn4icz,-5.191055640594982,-129.38935512128927,-17.061742789036558

3837471_20201_2_0,2a59ap4icz,2.3399785291994792,-115.82707630406784,-30.930242620622025

3331104_20201_2_0,2a6bun4icz,-2.5476077688693826,-108.17616138840185,-21.11617204415188

1127725_20201_2_0,2a6w3p4icz,0.44258987479083967,-59.53339579419088,-35.681942804828836

2903496_20201_2_0,2a73on4icz,-1.862572463486567,-118.76623029437803,-17.0235660526686

5176238_20201_2_0,2a8gho4icz,0.8471483781201514,-143.30175283033384,-35.85595330309778

4050725_20201_2_0,2aa0lo4icz,3.2272488301764417,-67.83148582236663,-57.061957957635215

2443340_20201_2_0,2abypo4icz,3.1843190944330253,-74.14407388013319,-58.828037731610706

2094182_20201_2_0,2acr6n4icz,-3.0219071481048183,-106.48164730321426,-33.86871941670995

5300996_20201_2_0,2adlfn4icz,-0.5619090370221428,-119.30129370782046,-23.010628088182145

2482610_20201_2_0,2adlgo4icz,-1.1001322301412335,-36.024638859004654,-41.963592755451714

2322591_20201_2_0,2advdp4icz,1.4197798416522422,-116.5549283416772,-50.018018391136124

2274206_20201_2_0,2aiqbo4icz,-4.066360160953528,-94.1349214571407,5.185445753132484

5968613_20201_2_0,2ak7wo4icz,-1.681695710761023,-80.4088888655331,-25.872839789158775

5391798_20201_2_0,2ana4o4icz,-1.1116979686078734,-86.22447560010514,-34.32303816479417

5559644_20201_2_0,2ao9ep4icz,7.843555039213745,-19.55506833697345,-67.31811689393437

4461255_20201_2_0,2apydp4icz,0.8705941454912127,-115.7034485118838,-49.41087262410154

4294071_20201_2_0,2aqd7p4icz,-140.36326283186074,570.5093133526723,244.33043938724944

3069035_20201_2_0,2at8xn4icz,-0.0061958911174651125,-87.56978906755339,-41.38436847194342

1690016_20201_2_0,2aubio4icz,2.5972917651968124,-92.84376120135201,-43.346732962026806

1879052_20201_2_0,2awdip4icz,-0.18297356947618507,-64.89633175996408,-35.479330482749376

5272210_20201_2_0,2az6vo4icz,0.02746622215965731,-65.70713532223704,-38.42239531366613

6005610_20201_2_0,2b226p4icz,0.10658904033955956,-116.54290955278373,-25.219402476032073

2625373_20201_2_0,2b4tfp4icz,0.12767246360163262,-108.07677910925997,-36.74550455843777

3916497_20201_2_0,2b5sun4icz,-2.953282163807545,-136.90261337897758,-17.957640352570124

1532425_20201_2_0,2b8cdp4icz,-0.8209909409492835,-94.7503632235414,-48.03639105714318

3705175_20201_2_0,2bdvxo4icz,0.7419502009602329,-95.87361510121343,-21.90807666919936

3214680_20201_2_0,2be7lo4icz,0.31067705807518003,-80.35725148490297,-52.44092310567689

1829607_20201_2_0,2bivfp4icz,-1.1183483429240288,-77.87375741184994,-45.411715687989044

1816129_20201_2_0,2bom7p4icz,1.3430068444550813,-117.6668165247277,-32.51291236197281

2670535_20201_2_0,2bzsqn4icz,2.5201655614836898,-126.75433085957894,-42.48999977004337

1422327_20201_2_0,2c0kao4icz,0.27367559568234123,-120.16162237084046,-42.329197631734985

5571847_20201_2_0,2c33qn4icz,0.40998123953815124,-85.44103370900788,-40.71027785814296

1096744_20201_2_0,2c4vdo4icz,-1.4776045132810476,-124.0380078778924,-22.673497665444458

2211567_20201_2_0,2cde2p4icz,-1.0640235843806163,-67.18694409658741,-35.51933899730655

5793807_20201_2_0,2cf0ap4icz,0.43247747431575095,-100.16931751663671,-51.141841639332895

1887102_20201_2_0,2ckqyo4icz,3.0464111890917698,-98.10667062892509,-52.306953331321125

5298371_20201_2_0,2cnrap4icz,-5.029759108069762,-74.8072992157413,-9.389968341906268

2220315_20201_2_0,2cosbo4icz,1.4150756614547548,-92.54536940219916,-49.22957431572806

2513649_20201_2_0,2csuyo4icz,0.0457293734900019,-82.30468959306316,-36.859500805548294

1882152_20201_2_0,2d7z8p4icz,0.007703450178687165,-85.23495570938579,-25.580835587915402

4920027_20201_2_0,2d92eo4icz,1.7392185885088023,-84.60191588011972,-52.14727213220425

3416346_20201_2_0,2dhfwo4icz,-3.2877232061220854,-77.62040329225619,-23.236802800122504

3940473_20201_2_0,2dio3o4icz,2.4427062721093122,-77.00164698405217,-53.93346010596298

1370127_20201_2_0,2dkk3p4icz,-4.814935526042344,-123.51284282376537,-5.537934397975633

2755434_20201_2_0,2dn6qn4icz,-6.521536587966791,-117.33898611661394,4.2186506189387245

4475557_20201_2_0,2dnvwn4icz,-0.10991007868480455,-95.69648172582666,-48.00675444504893

1435701_20201_2_0,2dodep4icz,7.887134724303468,-22.502540671619784,-94.51361987465268

3385410_20201_2_0,2dt6ko4icz,-29.618564326712658,-114.8004956591414,116.86336332748631

5535754_20201_2_0,2dvs2p4icz,1.5044045711312233,-99.10738769616205,-49.39737922431229
 46%|████▌     | 372/811 [20:52<33:52,  4.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 373/811 [20:55<30:04,  4.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 374/811 [20:58<28:04,  3.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 375/811 [21:01<26:02,  3.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▋     | 376/811 [21:04<23:53,  3.30s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▋     | 377/811 [21:07<22:57,  3.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 378/811 [21:10<22:31,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 379/811 [21:13<22:08,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 380/811 [21:16<21:30,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 381/811 [21:19<21:20,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 382/811 [21:21<20:44,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 383/811 [21:24<20:45,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 384/811 [21:27<20:54,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 385/811 [21:30<20:59,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 386/811 [21:33<20:02,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 387/811 [21:36<19:57,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 388/811 [21:39<20:21,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 389/811 [21:41<20:06,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 390/811 [21:44<20:01,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 391/811 [21:49<24:35,  3.51s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 392/811 [21:52<23:17,  3.34s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 393/811 [21:55<21:50,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▊     | 394/811 [21:58<20:57,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▊     | 395/811 [22:00<20:25,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 396/811 [22:03<20:50,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 397/811 [22:06<20:38,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 398/811 [22:10<21:44,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 399/811 [22:13<21:24,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 400/811 [22:19<27:35,  4.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 401/811 [22:22<25:19,  3.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|████▉     | 402/811 [22:25<24:00,  3.52s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|████▉     | 403/811 [22:28<23:07,  3.40s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|████▉     | 404/811 [22:31<22:02,  3.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|████▉     | 405/811 [22:34<21:08,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 406/811 [22:39<24:48,  3.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 407/811 [22:42<23:09,  3.44s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 408/811 [22:45<22:35,  3.36s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 409/811 [22:48<21:24,  3.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 410/811 [22:51<20:38,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 411/811 [22:53<19:50,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 412/811 [22:56<19:37,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 413/811 [22:59<19:29,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 414/811 [23:03<20:25,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 415/811 [23:06<20:13,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████▏    | 416/811 [23:09<20:15,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████▏    | 417/811 [23:12<20:26,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 418/811 [23:15<20:09,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 419/811 [23:18<19:27,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 420/811 [23:21<19:22,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 421/811 [23:24<19:17,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 422/811 [23:27<19:05,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 423/811 [23:29<18:32,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 424/811 [23:32<18:05,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 425/811 [23:36<20:50,  3.24s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 426/811 [23:39<19:47,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 427/811 [23:42<20:12,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 428/811 [23:45<19:38,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 429/811 [23:48<19:14,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 430/811 [23:51<19:01,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 431/811 [23:54<18:37,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 432/811 [23:57<19:12,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 433/811 [24:00<19:16,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▎    | 434/811 [24:04<19:58,  3.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▎    | 435/811 [24:06<19:25,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 436/811 [24:10<19:16,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 437/811 [24:13<19:16,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 438/811 [24:16<19:10,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 439/811 [24:18<18:30,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 440/811 [24:21<18:01,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 441/811 [24:24<17:54,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▍    | 442/811 [24:27<17:34,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▍    | 443/811 [24:30<17:40,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▍    | 444/811 [24:33<17:48,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▍    | 445/811 [24:36<17:57,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▍    | 446/811 [24:39<18:34,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▌    | 447/811 [24:42<18:15,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▌    | 448/811 [24:45<18:26,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▌    | 449/811 [24:48<17:50,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▌    | 450/811 [24:51<17:56,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 451/811 [24:54<17:41,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 452/811 [24:57<17:48,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 453/811 [25:00<17:43,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 454/811 [25:03<17:21,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 455/811 [25:06<17:22,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 456/811 [25:08<17:19,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▋    | 457/811 [25:20<33:21,  5.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▋    | 458/811 [25:23<28:14,  4.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 459/811 [25:26<24:45,  4.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 460/811 [25:29<22:27,  3.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 461/811 [25:32<21:11,  3.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 462/811 [25:35<19:45,  3.40s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 463/811 [25:38<18:34,  3.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 464/811 [25:41<17:38,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 465/811 [25:48<24:57,  4.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 466/811 [25:51<22:15,  3.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 467/811 [25:53<20:24,  3.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 468/811 [25:56<19:17,  3.37s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 469/811 [26:00<18:48,  3.30s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 470/811 [26:02<17:58,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 471/811 [26:05<17:27,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 472/811 [26:08<17:09,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 473/811 [26:11<17:02,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 474/811 [26:14<16:49,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▊    | 475/811 [26:17<16:27,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▊    | 476/811 [26:20<16:16,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 477/811 [26:23<16:00,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 478/811 [26:26<16:30,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 479/811 [26:29<16:01,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 480/811 [26:32<16:46,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 481/811 [26:35<16:03,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 482/811 [26:40<19:40,  3.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|█████▉    | 483/811 [26:43<19:19,  3.53s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|█████▉    | 484/811 [26:46<18:16,  3.35s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|█████▉    | 485/811 [26:49<17:42,  3.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|█████▉    | 486/811 [26:53<18:07,  3.35s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|██████    | 487/811 [26:56<17:50,  3.31s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|██████    | 488/811 [26:59<17:42,  3.29s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|██████    | 489/811 [27:03<18:47,  3.50s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|██████    | 490/811 [27:06<17:58,  3.36s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 491/811 [27:10<18:44,  3.51s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 492/811 [27:17<24:09,  4.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 493/811 [27:20<22:31,  4.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 494/811 [27:23<20:18,  3.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 495/811 [27:26<18:54,  3.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 496/811 [27:29<17:46,  3.38s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████▏   | 497/811 [27:32<16:55,  3.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████▏   | 498/811 [27:35<16:28,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 499/811 [27:38<16:00,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 500/811 [27:41<15:25,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 501/811 [27:44<15:40,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 502/811 [27:49<19:03,  3.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 503/811 [27:52<18:15,  3.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 504/811 [27:56<17:40,  3.45s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 505/811 [27:59<17:08,  3.36s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 506/811 [28:02<16:41,  3.28s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 507/811 [28:05<16:17,  3.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 508/811 [28:08<15:48,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 509/811 [28:13<19:08,  3.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 510/811 [28:16<17:41,  3.53s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 511/811 [28:19<16:18,  3.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 512/811 [28:22<16:17,  3.27s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 513/811 [28:25<15:48,  3.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 514/811 [28:28<15:11,  3.07s/it] 64%|██████▎   | 515/811 [28:31<14:47,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▎   | 516/811 [28:34<14:42,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▎   | 517/811 [28:37<14:28,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 518/811 [28:40<14:36,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 519/811 [28:43<14:39,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 520/811 [28:46<14:26,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 521/811 [28:49<14:41,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 522/811 [28:52<14:29,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 523/811 [28:56<15:40,  3.27s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▍   | 524/811 [28:58<15:01,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▍   | 525/811 [29:01<14:45,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▍   | 526/811 [29:04<14:13,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▍   | 527/811 [29:07<14:07,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▌   | 528/811 [29:10<14:16,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▌   | 529/811 [29:13<14:06,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▌   | 530/811 [29:16<14:03,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▌   | 531/811 [29:19<13:40,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 532/811 [29:22<13:53,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 533/811 [29:26<14:47,  3.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 534/811 [29:29<14:20,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 535/811 [29:31<13:51,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 536/811 [29:35<15:09,  3.31s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 537/811 [29:39<14:48,  3.24s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▋   | 538/811 [29:41<14:21,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▋   | 539/811 [29:44<13:35,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 540/811 [29:47<13:17,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 541/811 [29:50<13:45,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 542/811 [29:53<13:25,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 543/811 [29:56<13:25,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 544/811 [29:59<13:16,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 545/811 [30:02<12:58,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 546/811 [30:05<12:46,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 547/811 [30:07<12:31,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 548/811 [30:10<12:39,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 549/811 [30:13<12:48,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 550/811 [30:16<12:50,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 551/811 [30:19<12:44,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 552/811 [30:23<13:55,  3.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 553/811 [30:26<13:25,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 554/811 [30:29<13:10,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 555/811 [30:32<13:02,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▊   | 556/811 [30:37<15:21,  3.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▊   | 557/811 [30:40<14:13,  3.36s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 558/811 [30:42<13:19,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 559/811 [30:45<12:38,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 560/811 [30:58<24:37,  5.89s/it] 69%|██████▉   | 561/811 [31:01<20:52,  5.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 562/811 [31:03<18:04,  4.35s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 563/811 [31:07<16:40,  4.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|██████▉   | 564/811 [31:10<15:35,  3.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|██████▉   | 565/811 [31:13<14:28,  3.53s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|██████▉   | 566/811 [31:16<13:49,  3.39s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|██████▉   | 567/811 [31:19<13:13,  3.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|███████   | 568/811 [31:24<15:11,  3.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|███████   | 569/811 [31:27<13:50,  3.43s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|███████   | 570/811 [31:29<13:14,  3.30s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|███████   | 571/811 [31:32<12:36,  3.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 572/811 [31:35<12:20,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 573/811 [31:38<12:10,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 574/811 [31:41<11:44,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 575/811 [31:44<11:35,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 576/811 [31:47<11:27,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 577/811 [31:50<11:23,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████▏  | 578/811 [31:52<11:11,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████▏  | 579/811 [31:55<11:03,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 580/811 [31:59<11:45,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 581/811 [32:02<11:37,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 582/811 [32:05<11:34,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 583/811 [32:08<11:38,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 584/811 [32:11<11:16,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 585/811 [32:14<11:05,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 586/811 [32:17<11:22,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 587/811 [32:20<11:44,  3.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 588/811 [32:23<11:24,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 589/811 [32:33<18:40,  5.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 590/811 [32:36<16:04,  4.36s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 591/811 [32:52<29:17,  7.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 592/811 [32:55<23:23,  6.41s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 593/811 [32:58<19:30,  5.37s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 594/811 [33:01<16:41,  4.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 595/811 [33:04<15:06,  4.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 596/811 [33:07<13:36,  3.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▎  | 597/811 [33:10<12:48,  3.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▎  | 598/811 [33:13<12:24,  3.50s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 599/811 [33:16<11:57,  3.38s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 600/811 [33:19<11:24,  3.24s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 601/811 [33:22<11:03,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 602/811 [33:25<11:14,  3.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 603/811 [33:28<10:34,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 604/811 [33:31<10:28,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▍  | 605/811 [33:34<10:30,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▍  | 606/811 [33:37<10:32,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▍  | 607/811 [33:41<10:48,  3.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▍  | 608/811 [33:43<10:20,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▌  | 609/811 [33:46<10:03,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▌  | 610/811 [33:49<10:04,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▌  | 611/811 [33:52<09:47,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▌  | 612/811 [33:56<11:02,  3.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 613/811 [34:00<10:56,  3.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 614/811 [34:03<10:32,  3.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 615/811 [34:06<10:12,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 616/811 [34:08<09:44,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 617/811 [34:11<09:51,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 618/811 [34:17<12:08,  3.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▋  | 619/811 [34:20<11:12,  3.50s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▋  | 620/811 [34:23<10:31,  3.31s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 621/811 [34:25<09:54,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 622/811 [34:28<09:44,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 623/811 [34:32<10:03,  3.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 624/811 [34:37<12:08,  3.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 625/811 [34:40<11:10,  3.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 626/811 [34:43<10:24,  3.38s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 627/811 [34:46<09:48,  3.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 628/811 [34:49<09:27,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 629/811 [34:52<09:21,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 630/811 [34:54<08:57,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 631/811 [34:57<08:52,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 632/811 [35:00<08:50,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 633/811 [35:03<08:47,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 634/811 [35:07<08:59,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 635/811 [35:10<09:01,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 636/811 [35:13<08:52,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▊  | 637/811 [35:16<08:57,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▊  | 638/811 [35:19<08:33,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 639/811 [35:22<08:48,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 640/811 [35:25<08:35,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 641/811 [35:28<08:23,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 642/811 [35:31<08:20,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 643/811 [35:34<08:29,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 644/811 [35:37<08:16,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|███████▉  | 645/811 [35:39<08:08,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|███████▉  | 646/811 [35:42<08:05,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|███████▉  | 647/811 [35:45<07:58,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|███████▉  | 648/811 [35:48<07:59,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 649/811 [35:51<07:51,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 650/811 [35:54<07:44,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 651/811 [35:57<07:31,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 652/811 [36:10<15:32,  5.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 653/811 [36:22<20:52,  7.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).

3848034_20201_2_0,2dw22o4icz,-5.386582716646169,-114.8138519428,7.224212852273425

3860750_20201_2_0,2dznan4icz,-1.921734983937922,-116.08934581284154,-21.138828376442646

3547942_20201_2_0,2e6v8p4icz,-0.7247652904723515,-59.18378018451162,-22.084896352323312

1262783_20201_2_0,2e7shp4icz,-0.2942258901661087,-92.95163218872739,-32.76794167907066

1407875_20201_2_0,2e82rn4icz,2.192518869324703,-55.882903231919414,-53.62412040339939

1564224_20201_2_0,2e8wro4icz,0.15780857006172097,-89.34502783087993,-29.36088428558736

1220573_20201_2_0,2e8wvn4icz,8.325563579142186,-76.85025393340402,-71.69847092601883

5048908_20201_2_0,2ebzao4icz,-3.558244728587453,-106.7301273772905,0.4279100394775526

5745235_20201_2_0,2eed7p4icz,-0.0011459410444177004,-111.90497169953326,-35.89603495437416

3249749_20201_2_0,2eikfp4icz,1.437812179947548,-107.45126653175194,-44.755327925711896

5607023_20201_2_0,2eo8mo4icz,1.8415754647326852,-106.31792322732534,-33.621723423653506

1105916_20201_2_0,2eq8vo4icz,2.4313465281979245,-79.83231510402487,-57.83689471547481

4633647_20201_2_0,2eruro4icz,-0.7560341686584119,-95.79605150520828,-35.56039890577634

1588862_20201_2_0,2f19ao4icz,2.7155802949853314,-120.07530281388048,-38.927122535550154

5305085_20201_2_0,2f70zo4icz,3.351709479048818,-58.80669770319227,-50.46867581421705

1628382_20201_2_0,2f72eo4icz,0.19417207592743163,-72.26445381551324,-40.78917136019345

1915679_20201_2_0,2fbexn4icz,-1.850090983847884,-86.99011919584967,-38.54330143912108

4348450_20201_2_0,2fc2ro4icz,1.3323291357554878,-72.83511017636701,-27.197483894478495

5238453_20201_2_0,2fe6ro4icz,4.282154785645433,-114.36150779297245,-58.99721865557497

2096377_20201_2_0,2fe8ip4icz,-158.50044987181852,584.2582220706117,101.72836650738385

5049397_20201_2_0,2fhmpn4icz,-0.8429101849660531,-97.44659278598601,-23.131084418711325

1870904_20201_2_0,grpa6p4icz,1.6292891700210805,-86.95928803250462,-41.79112397629592

5655289_20201_2_0,2fk4cp4icz,1.016163628166373,-106.4395965903905,-39.51371488074827

4074341_20201_2_0,2fkguo4icz,-0.8116711934269346,-107.51369754344262,-40.51951723029359

4780491_20201_2_0,2flymo4icz,-0.3211767136307633,-62.51218056515424,-27.547370351517998

5390589_20201_2_0,wkqcao4icz,1.5603345938254096,-50.02518887368518,-47.69305517743919

3263284_20201_2_0,2fmdkn4icz,-3.186632177512734,-115.89775802079066,-18.795818131518047

6012625_20201_2_0,2fox3p4icz,-1.1727335916439763,-105.50299291809011,-28.401718633661233

1463061_20201_2_0,2fvc1p4icz,0.7031807957498734,-84.33190568567088,-33.59306820585789

5665968_20201_2_0,2fy2tn4icz,-0.13361889531845647,-88.41906365910114,-39.96384948498924

3658015_20201_2_0,2g0pmn4icz,-3.372787720321431,-140.70438382269927,-4.616847508932537

1955322_20201_2_0,2g44wn4icz,2.7967626232187737,-51.173292118643076,-57.94393260795819

2248908_20201_2_0,2g7bap4icz,1.99522954764369,-86.70154815588816,-46.694111733399765

2866198_20201_2_0,2ga4yo4icz,2.9529724435735787,-127.97627350126459,-67.9329089692967

4163688_20201_2_0,2ggjbp4icz,0.3352355971934335,-103.76341048611559,-25.333903633219535

3382068_20201_2_0,2glfon4icz,-0.5590664031939592,-95.57125474260249,-29.876426756281944

5268587_20201_2_0,2gnejn4icz,-1.3995514325542655,-116.63502365868692,-42.017447336911914

2391217_20201_2_0,2gqwmn4icz,-1.4922714999887772,-107.75825227280825,-45.54890793932981

2244196_20201_2_0,2h0mxo4icz,0.9845299464468517,-86.83270168166891,-46.601826636516705

1839564_20201_2_0,2h1sfp4icz,-1.6114548646701852,-107.35025948726394,-30.891319593627756

1224771_20201_2_0,2h3bwn4icz,-0.5929849076833272,-88.91622431914072,-23.29984544823401

1473653_20201_2_0,2h3xvo4icz,-1.2413470169679952,-86.33574914180929,-13.899989480218807

1834092_20201_2_0,2h5djo4icz,-1.8846786610695538,-97.77634240511955,-32.29904756281874

5219722_20201_2_0,2h6ado4icz,-2.8356899136775073,-106.73828743941675,-19.12369908279436

4085280_20201_2_0,2hc80p4icz,3.2697058929710163,-77.30478051193299,-69.49444671273024

1907767_20201_2_0,2hcl2p4icz,1.7935889291143503,-91.83073377099174,-39.753506046546065

3848964_20201_2_0,2hikzo4icz,1.9762608563991355,-70.67387191614176,-54.21506117721131

2696182_20201_2_0,2hm59n4icz,-1.4920918715705356,-112.42905051179733,-39.1234561235418

4583200_20201_2_0,2hmojp4icz,-70.7415372813834,-44.19558370077948,362.30809576908865

3307938_20201_2_0,2hnezo4icz,-0.5970021724893695,-84.27991839721938,-23.963077008280194

5513281_20201_2_0,2ho07o4icz,2.2599311782586384,-96.07537376963086,-60.6938565309909

3985846_20201_2_0,2hoxao4icz,0.9192166092144688,-139.14219652911993,-32.264437260962524

3824922_20201_2_0,2hr9ro4icz,0.9562256038986902,-67.3679428467199,-34.22972045695457

3025236_20201_2_0,2htlip4icz,0.7775699532413239,-104.66161056194989,-59.998707961387026

3622582_20201_2_0,2hw62o4icz,0.02120638213225518,-110.45042667730036,-12.963119177909817

4507101_20201_2_0,2i3ton4icz,1.2944562068912475,-138.52570834473053,-28.94205166742256

2042424_20201_2_0,2i973o4icz,-1.0380561179738552,-93.39271829739278,-37.7869532934357

3164553_20201_2_0,2iftun4icz,3.1469220976138934,-124.1523004154624,-44.00796906205626

4243176_20201_2_0,2iguyo4icz,-2.5469555229058,-81.9268720325027,-34.691170760535485

3450531_20201_2_0,2imljn4icz,0.4105944766933338,-85.88884363206083,-45.562853517551915

4900462_20201_2_0,2iswmo4icz,4.705688704542757,-46.92463512484258,-60.10744532658414

3125175_20201_2_0,2iu6qn4icz,-0.8769800636236129,-96.0649642101028,-41.134072053258606

4026415_20201_2_0,2izubo4icz,-1.3386828140619722,-103.95279448486974,-34.96325055585069

2968284_20201_2_0,2j5jpn4icz,-0.3387648910753303,-94.48179661270677,-25.148734697955703

4682320_20201_2_0,2j65jn4icz,-1.8042249573006728,-142.84525738505846,-23.403199565804357

1407213_20201_2_0,2j8qln4icz,-1.5383543322182958,-72.37902017104,-20.688997712953665

5054505_20201_2_0,2jc38p4icz,1.53663673158989,-58.18241429997096,-46.24925022472556

3609484_20201_2_0,2jjnmo4icz,0.3854440307467689,-132.45428493891995,-23.840720651330003

5606379_20201_2_0,2jk7nn4icz,1.3038598339987386,-131.7401739205834,-39.49003699614303

2706942_20201_2_0,2jmogo4icz,-1.7228033886789549,-85.76704517092608,-10.299984945614085

4230893_20201_2_0,2jogao4icz,0.24738023789259442,-85.53945948956977,-46.26588425726747

5969411_20201_2_0,2jovfp4icz,-1.7043649589975007,-70.181999847273,-18.478907729076624

2358693_20201_2_0,2jq45p4icz,0.8224102364080669,-90.41760716576798,-46.36718220119228

1821693_20201_2_0,2ju0ep4icz,-1.8884895740850194,-97.99295883859361,-16.44799618757449

3694089_20201_2_0,2ju4io4icz,-23.831316288164896,-195.2616522868868,111.25785405869145

5868247_20201_2_0,2jx5po4icz,1.4807152282941276,-118.47749200545158,-45.167637640139205

5746617_20201_2_0,2jznjo4icz,2.4397879430674903,-45.213587442299996,-56.53877678239506

5003481_20201_2_0,2k0r7p4icz,1.844944587801162,-99.98634014810463,-61.07599666362367

1790983_20201_2_0,2k2r2o4icz,-1.7856624301255573,-129.78627676223118,-31.45204204575589

2058152_20201_2_0,2k3con4icz,5.041011256984298,-48.550877573899015,-55.71560916649173

5539922_20201_2_0,2kcefo4icz,2.214760370062078,-59.19656349984575,-54.86942186898034

4380923_20201_2_0,2kekxo4icz,-4.845909596062054e-05,-85.13529210550152,-52.62134201430811

5287167_20201_2_0,2kgmcp4icz,1.2970867316599608,-118.77173883558876,-44.41459084075986

2525410_20201_2_0,2kgoeo4icz,2.3474353992341532,-85.13167836537053,-43.2472860342242

3765393_20201_2_0,2khwqn4icz,-2.3230547955268444,-100.68980192868227,-16.600106554137923

2316151_20201_2_0,2klhyo4icz,-0.9084478873014821,-86.93611133992303,-41.720008823416606

2158920_20201_2_0,2kllip4icz,0.6591807893290478,-128.17152248411708,-46.18149403336446

1850812_20201_2_0,2kny4o4icz,1.2904899948342679,-111.83451896659278,-46.26177385628438

2517639_20201_2_0,2kplvo4icz,-1.6557412709199688,-66.4084450991497,-24.85609562531309

3270899_20201_2_0,2kqq3p4icz,-0.9354303386007665,-78.85794985433441,-9.868883663793781

4324501_20201_2_0,2ksq9p4icz,2.433354228969773,-132.997036362245,-56.46994098523464

1887836_20201_2_0,2ksrjp4icz,-0.5145656759355988,-121.8273951201179,-44.72753841122716

1964469_20201_2_0,2l33fo4icz,2.252191505507854,-47.17870779772406,-49.64990691063616

1287761_20201_2_0,2l4j5p4icz,-1.6711872769541614,-107.33681879935901,-32.769338982878864

4345949_20201_2_0,2l705o4icz,0.055231535363821804,-81.21352336731681,-26.85528647965377

2238688_20201_2_0,2l8ofp4icz,-2.240011223375254,-88.26130056316376,-32.048180466483615

2219082_20201_2_0,2lbhgn4icz,0.9662237709160959,-126.83879379949803,-39.28730575167455

4304755_20201_2_0,2li9un4icz,-0.8975963416312259,-81.0092639670377,-36.71007973786578

4032504_20201_2_0,2lmb7o4icz,-18.460859916454183,-105.5165260840048,79.37627166298549

3192865_20201_2_0,2lthqn4icz,-0.5573685085599029,-117.32569602154774,-36.48761347126927

2297758_20201_2_0,2lupwn4icz,0.37302617784454867,-133.18577365370865,-34.39618570413421

1813720_20201_2_0,2lvs0o4icz,0.859503813100546,-56.434042467269535,-36.34841190771259

1246123_20201_2_0,2lyv5o4icz,0.042147304411410846,-101.29008857468156,-30.82469847412746

5964947_20201_2_0,2m6wro4icz,2.9507678737891547,-77.63299488494354,-61.59130696809957

1603988_20201_2_0,2m874p4icz,1.518116659156314,-97.14402912472642,-49.53693362425496

1189182_20201_2_0,2mbfjo4icz,0.6287742160024059,-104.49197360166679,-38.84118742451368

1587226_20201_2_0,2mdpsn4icz,-3.8257280319998235,-76.29794520808267,-19.31375771238443

4211847_20201_2_0,2meqjo4icz,1.205697162333132,-66.50528986302649,-36.76730194052672

4237674_20201_2_0,2mgzln4icz,-0.25030064140263897,-106.62552153682708,-51.84227309443705

5315387_20201_2_0,2mjn6p4icz,0.4254044655121013,-72.35214178582902,-43.02670793618924

4763157_20201_2_0,2mxbip4icz,-2.323724631055128,-123.25084474626004,-7.280056200731792

1314140_20201_2_0,2myvyo4icz,-1.1930213484413437,-112.83660890408888,-21.56553317640831

2921599_20201_2_0,2n3xoo4icz,2.2036987522090543,-103.39235554167587,-63.97343829204672

1434579_20201_2_0,2n4d3p4icz,-1.4259549951944281,-71.59110007024177,-24.471409544188944

3567555_20201_2_0,2n7lyo4icz,-0.05656338993912828,-99.45922821571864,-42.37920608496641

4109444_20201_2_0,2nee6o4icz,0.7434683316601749,-112.33170456114706,-46.00962604682377

2512584_20201_2_0,2nl8bp4icz,-0.09846013190253565,-121.69285073229051,-37.506566640521015

1711203_20201_2_0,2nlsyo4icz,2.222501916532887,-110.0760857362842,-73.28912347903699

3075131_20201_2_0,2noecn4icz,2.887928032424946,-105.28147033740521,-70.78216463267194

3807650_20201_2_0,6ky0gp4icz,2.5718010609707935,-86.04145866120837,-47.79652892311205

3351241_20201_2_0,2nrzpn4icz,-0.5934400237388961,-119.04616890298786,-31.384432087979178

4071160_20201_2_0,2nvlzo4icz,-2.7641800203645737,-112.41573909394828,-12.778652036875954

4043147_20201_2_0,2nxsfn4icz,0.6229015404594411,-122.29736157479101,-37.98404572353181

1439605_20201_2_0,2o3nio4icz,0.9155807857337654,-67.22655470362767,-43.60480107885644

1130153_20201_2_0,2o3nmn4icz,-1.5960051922431773,-102.20326558183754,-3.117261577592899

5664600_20201_2_0,2ob9cp4icz,-1.2232193203376975,-70.47597418888398,-21.152690507170448

1989976_20201_2_0,2ohb5p4icz,2.311130142706189,-91.499583010388,-25.116301136552607

5288305_20201_2_0,2oib8p4icz,-3.219643956259749,-123.85823189958333,-34.77014549751111

2083066_20201_2_0,2oifno4icz,-3.3801047756289244,-85.96614002487897,-35.331270711455886

3108800_20201_2_0,2okbcp4icz,2.667794787502259,-124.32752258698977,-64.71239824183971

5247269_20201_2_0,2oks9p4icz,2.1561121533407688,-94.0162891124669,-69.34315347793176

5297419_20201_2_0,2olvun4icz,-1.492123142896153,-120.15819203756041,-36.07211015196191

2061485_20201_2_0,2orxen4icz,-2.2729370206353936,-71.75309865666776,-24.49671941748825

5830816_20201_2_0,2oy79o4icz,-1.0080736062931424,-121.1907556424616,-26.216774810895743

5783137_20201_2_0,2p0pbp4icz,4.016790791129104,-106.72484589885181,-61.96016927240865

4546533_20201_2_0,2p178p4icz,-0.0951855158439135,-79.98650501123643,-36.923886462233085

4492330_20201_2_0,2p1i2p4icz,0.3504045133056854,-106.79724533350591,-35.3872409102041

4085979_20201_2_0,2p1lpn4icz,1.7389490613830378,-93.50957990416723,-53.716052816131835

1477215_20201_2_0,2p5hep4icz,-3.3524352922680483,-65.7937381792772,-37.61913854071662

4062134_20201_2_0,2pf89o4icz,0.32006715900305555,-101.06358116820317,-40.77205680236871

5229831_20201_2_0,2pftdp4icz,2.548022997113019,-76.4408791673801,-50.516089275538505

5434536_20201_2_0,2pjl9p4icz,0.5349654490433831,-108.89307912875708,-30.062508268620974

3608071_20201_2_0,2pkj0o4icz,0.3258863645033225,-118.79659581354227,-37.46545173462394

5181720_20201_2_0,2poj8o4icz,-0.8957312389218012,-117.3763532542585,-36.454180450429206

1806844_20201_2_0,2ppfyn4icz,3.112003168634615,-111.14027079101359,-41.1342736345708

2548042_20201_2_0,2pqyfp4icz,0.7669381955953573,-68.36051957541761,-43.03671234319944

3658375_20201_2_0,2q23dp4icz,1.1303519122253178,-89.6357798682977,-66.45359391383596

5603375_20201_2_0,2q2hwo4icz,-0.9801606291245403,-62.830726383893875,-34.99664676155066

5068767_20201_2_0,2q5f8p4icz,-1.2479922644042685,-119.49544645672626,-34.4694313294213

1747017_20201_2_0,2q78dn4icz,1.3001653621495213,-137.07709120378246,-34.55643893349233

5853577_20201_2_0,2qdjgp4icz,0.3350394145421836,-76.05220286925535,-27.97642146872124

5620402_20201_2_0,2qmjtn4icz,2.5383830288045828,-80.8280815280578,-68.00487702285707

1720956_20201_2_0,2qo7lo4icz,-1.855301633834451,-86.20296216860302,-33.1503217416859

2920640_20201_2_0,2qroto4icz,-3.6885030519086133,-120.17715033976287,-15.045028773122155

2473100_20201_2_0,2qteap4icz,3.137842594434491,-76.57459803592906,-58.24618755574433

3327131_20201_2_0,ddjqyn4icz,-1.7694126890848523,-134.82221656361537,-30.041600781686682

2015900_20201_2_0,2r25fn4icz,-1.0684784148034288,-112.30130519995276,-21.128973743422776

4784957_20201_2_0,2rc54p4icz,0.5445883275575285,-48.81849878013108,-46.42153161565709

1003531_20201_2_0,2rd45p4icz,0.35237561009995993,-91.97069761776936,-33.66739576009013

2631741_20201_2_0,2rdohp4icz,6.663277992471096,-76.32473542525673,-61.71404490220442

3171280_20201_2_0,2rgtho4icz,4.1297448497592635,-79.04839929589409,-44.88729572315577

5806400_20201_2_0,2rhh4o4icz,1.4858004524397106,-51.30887676477164,-40.588678918984925

5386523_20201_2_0,2rhpko4icz,0.2846623312154807,-36.87960298663347,-43.821374346056245

4589693_20201_2_0,2rhubo4icz,-0.6955044131251352,-70.3658870650797,-27.370326856898572

5432237_20201_2_0,2rjmso4icz,0.7838612326980048,-72.2979122829723,-37.945028497934075

2382896_20201_2_0,2rl2mn4icz,-3.13158789488511,-107.98316640916903,-16.145355316877186

1193377_20201_2_0,2rnnip4icz,1.6582922277108139,-111.05898055711293,-57.691480350489456

4769429_20201_2_0,2rpp4p4icz,-0.02096633444562119,-86.23665461835336,-38.52897705217717

4107499_20201_2_0,2rz3gn4icz,-0.8221070156348268,-122.18205116070021,-29.314694271366164

2261766_20201_2_0,2s25on4icz,9.873708149543377,-44.00271397539433,-74.26718813482299

3140849_20201_2_0,2s3e4p4icz,0.32309985784860396,-106.90519189621776,-32.3361632363175

2361841_20201_2_0,2s3ywo4icz,1.0953164180919794,-60.6770543760386,-44.45333836220952

4810279_20201_2_0,2s5ixn4icz,-4.138849900809135,-107.38810788917255,-34.80120084075267

2879826_20201_2_0,2s8yro4icz,0.7922531732376668,-141.68700909491648,-34.226963747763705

3572294_20201_2_0,2seu9p4icz,3.2032133421011197,-57.58461996816504,-40.548999661458566

1907210_20201_2_0,2sgopn4icz,-0.9069988910299921,-117.27470792422602,-31.03596015894702

2570087_20201_2_0,2soefo4icz,-0.5705116941844155,-113.49751326407176,-18.338766755675536

4829394_20201_2_0,2sqqbn4icz,2.3909588688222074,-109.28649058906456,-73.02900948644543

3612070_20201_2_0,2sspjn4icz,3.431823261524214,-84.58475134961114,-43.74270559269773

5050747_20201_2_0,2styvo4icz,0.8606119999385518,-55.84556774509633,-57.15527206495656

3212224_20201_2_0,2svkep4icz,10.198243917199566,-14.931338037670798,-84.40725407518784

2893267_20201_2_0,2sxcap4icz,0.5458015387826753,-104.08950690918519,-35.787619706699516

3203355_20201_2_0,2t6u7n4icz,-1.0264835819947762,-144.39059210958288,-26.409805039327296

5394540_20201_2_0,2tbb8p4icz,-2.9533022258032964,-108.7959072276424,-27.728377105475502

4337636_20201_2_0,2tfamo4icz,-1.4453619590409983,-69.31269344299568,-19.811386591586754

3780438_20201_2_0,2tg4io4icz,1.5931346335254932,-67.34111551244789,-38.43358093737926

1996141_20201_2_0,2th7ln4icz,-2.3476192392717037,-70.15262728133769,-34.20236442277549

1745864_20201_2_0,2tivho4icz,-1.817803486447946,-86.70101956550377,-31.23748827212708

5870160_20201_2_0,2tkqap4icz,1.2055500452868608,-82.7829977787894,-28.369679224145827

3077160_20201_2_0,2tl0wo4icz,3.039797013469909,-88.72581957008376,-53.41037415830908

3256131_20201_2_0,2tlwmo4icz,-0.310772522549779,-78.85666671413466,-28.55471757937582

4679018_20201_2_0,2tmrcn4icz,-2.1428060040136194,-128.22221676919293,-40.53028136609731

1989581_20201_2_0,2toa6o4icz,5.464486953570798,-87.52631523821171,-68.81641202725736

3445698_20201_2_0,2tp0rn4icz,-0.622675266383358,-128.5638033919012,-47.62716349838931

2035182_20201_2_0,2tpavn4icz,0.14307428828037955,-111.23843424463465,-42.689476503566084

3850983_20201_2_0,2tx3ap4icz,4.346576721714507,-66.26491461224441,-83.84123749932371

4383527_20201_2_0,2txfyo4icz,0.06228195284814579,-95.77815000868827,-32.04898095117052

3404524_20201_2_0,2u06nn4icz,-0.4153058450732437,-77.36385109675592,-40.33745784781574

4455030_20201_2_0,2u1m8o4icz,-1.9341566769502734,-76.29039963052534,-17.762269660988068

4568607_20201_2_0,2u2wco4icz,-0.3789824204506339,-111.57310144979755,-35.707271176183426

4149480_20201_2_0,2u3y9n4icz,-1.2448978369302777,-113.48717711135438,-6.111078208885246

1954397_20201_2_0,2u4utn4icz,-1.954142916587281,-104.51319942798136,-14.15111653045716

2178132_20201_2_0,2u6ivo4icz,-1.5321818829209815,-96.97677525779847,-26.142455703951654

4566687_20201_2_0,2u6oho4icz,-3.368575508756514,-75.04045911932621,-11.585595349880975

5344563_20201_2_0,2u8c4o4icz,-4.253491084607,-182.97428412274573,-14.31589149687639

1497152_20201_2_0,2u98to4icz,0.2931251945054133,-26.816645486901507,-38.165402012473166

4520793_20201_2_0,2uchpn4icz,1.8924790173686303,-62.76354260741587,-41.48087309788295

2405958_20201_2_0,2udb5o4icz,0.4363153029475305,-93.06234884954051,-34.862520757624424

4098048_20201_2_0,2udcxn4icz,-0.4936056672027023,-84.33461676157626,-38.66541119806692

5694840_20201_2_0,2umc1o4icz,0.9056835871343175,-93.20397757579141,-41.73660978157305

3267068_20201_2_0,2updtn4icz,1.795759104451629,-92.67657021367054,-24.32163993443467

5834550_20201_2_0,2uwafp4icz,2.3524550716613373,-84.47849097691608,-54.12110189205842

4740516_20201_2_0,2uxtgo4icz,39.4493180183223,11.012852714261413,-128.69255852380653

5731482_20201_2_0,ivh6io4icz,1.2987365657621308,-135.98318580445402,-46.60324476265373

5102208_20201_2_0,2v34bn4icz,-0.6908343985826633,-131.67530244224594,-35.92131284907691

2447159_20201_2_0,2v4jgp4icz,-1.1812219686902494,-76.28751954487439,-42.82659608193107

5137605_20201_2_0,2v99ap4icz,-9.021313023547004,-133.26906715515906,16.076480641469374

1071503_20201_2_0,2vbckn4icz,-0.9340858540808264,-132.44300784398607,-34.20679713524149

2576911_20201_2_0,2vca9o4icz,-1.2335578569588126,-91.74920604703746,-24.934710886817754

5048596_20201_2_0,2vhejn4icz,-2.7142483970355538,-114.64292351735531,-16.450299129035912

1428724_20201_2_0,2vhfgn4icz,7.905741948806553,-69.76036459280698,-62.939295032837606

1584202_20201_2_0,2vif7o4icz,4.5880592497302075,-54.21233200710165,-69.54635786657116

2109002_20201_2_0,2vkr8p4icz,-3.0223680269855873,-135.86820636890326,-14.902748629915521

4519928_20201_2_0,2vn6fo4icz,-0.12501792093787825,-109.428899773806,-34.75680238522463

2338552_20201_2_0,2vre8o4icz,-1.043445545330029,-103.04295961639701,-28.54255016496036

2037193_20201_2_0,2vtjcn4icz,1.2672852553866283,-84.23906851623522,-64.62093145779595

5582121_20201_2_0,2vtkwo4icz,3.382185783035034,-66.37654664589334,-68.06142530650318

5022839_20201_2_0,2vw6xn4icz,-0.4305443937078433,-84.45335141968721,-37.46884528863262

1461081_20201_2_0,2vx99n4icz,0.9201231875373481,-85.15720380742772,-35.78472537595444

2685470_20201_2_0,2w7jmn4icz,0.7564574477562358,-97.9199739326144,-39.3327512371267

4841524_20201_2_0,2wddgo4icz,-4.0438258031331245,-104.30229132666909,-6.580127810059196

4311380_20201_2_0,2whmwo4icz,5.083554200905068,-56.931361942077245,-50.417576255699174

1139315_20201_2_0,2wm7ao4icz,-1.176667784354947,-88.39323934611153,-32.11881888269603

1747236_20201_2_0,2wr0tn4icz,0.7401638841185337,-112.38911479482996,-55.13140687273233

2559649_20201_2_0,2wrkln4icz,1.274023888072953,-68.41822721055729,-33.38046539489433

4514420_20201_2_0,2wu4kp4icz,-3.2604029426098093,-115.67760649486621,-3.695597513915004

1511077_20201_2_0,2wvubp4icz,-33.04985335372978,90.98570059775004,406.63829112173653

5969356_20201_2_0,2x31gp4icz,-1.3912714199954745,-106.58345496667337,-29.39948948124514

2736547_20201_2_0,2x69qn4icz,-0.42225898428558367,-55.603809538572534,-52.67231435782528

2380412_20201_2_0,2xcngp4icz,0.7000679064167888,-108.10541762407036,-52.68775205482201

3439346_20201_2_0,2xe7so4icz,-0.3760490087921946,-60.11316610268375,-32.26360201904279

3012714_20201_2_0,2xg5cn4icz,-1.196564990440659,-157.9564457022471,-39.945694573217835

5766246_20201_2_0,2xhb5o4icz,-6.600822576063598,-140.71912501400612,0.4913230781810114

2444491_20201_2_0,2xi1kp4icz,-3.025979714263725,-121.58479062800961,-13.302180790694692

3904591_20201_2_0,2xm0tn4icz,-0.3509540596861841,-112.53588680369927,-46.617229488152915

5034714_20201_2_0,2xnado4icz,-0.09619654240421557,-101.36258485125552,-26.394234108957747

2422418_20201_2_0,2xom3o4icz,-0.1823265905807975,-73.68348395456428,-8.86789538821246

5699826_20201_2_0,2xr73o4icz,0.3837421551385648,-72.70061203207177,-21.615419326116395

3319375_20201_2_0,2xs3uo4icz,-0.9480781986727694,-114.34393399352876,-40.52067860593394

2685502_20201_2_0,2xtudn4icz,-3.148675642727269,-109.26931664401013,-20.732156262639364

5456819_20201_2_0,2y0fgn4icz,1.639602113180371,-58.28820414759576,-40.82799416369954

4778083_20201_2_0,2y24eo4icz,-0.6742212086012654,-81.13153033719115,-35.80023653317893

2904788_20201_2_0,2y651o4icz,-0.14345469128795701,-27.60198498751396,-55.7553047263533

2590767_20201_2_0,2yanvo4icz,2.9621018143798516,-92.86265473671921,-47.515820196330594

1176363_20201_2_0,ugkqlo4icz,0.9137261939188459,-122.92530613193676,-38.938881112008644

1625213_20201_2_0,2ychwo4icz,-0.08192726585573919,-95.20050352432278,-40.13362321692614

1978046_20201_2_0,2ycmjn4icz,3.548817279616312,-116.45407834786616,-62.4663492857525

2540367_20201_2_0,2yi1vo4icz,0.052931233662891125,-118.63702242160988,-34.03670289880958

5762439_20201_2_0,2yoklo4icz,0.5994152538498888,-63.40453354859534,-30.538907950626026

2316745_20201_2_0,2yozwn4icz,0.24751753075733857,-116.8577615457142,-34.705971003882

4877951_20201_2_0,2ysu7p4icz,1.4922093011614264,-85.60766950677899,-55.36963843981667

4112465_20201_2_0,2yu5ln4icz,-0.962338493179834,-99.65280412764923,-31.360768331905888

1966948_20201_2_0,2yv2fo4icz,-3.0137052628167407,-85.86518065962966,-24.49967397110396

4275313_20201_2_0,2yw7ep4icz,2.8399091099735685,-28.545953993856415,-43.01002698468196

2296282_20201_2_0,2z12uo4icz,-0.15215588762466364,-88.54432603645864,-21.443012389128427

4386435_20201_2_0,2zahuo4icz,-16.859030127716224,-131.82117949109832,40.31619189343263

5637192_20201_2_0,2zbqap4icz,-0.006881306757177845,-61.17565417605536,-41.04252740446745

4533584_20201_2_0,2zf09o4icz,0.026314674607569182,-88.25299755241238,-38.31430160274165

1992173_20201_2_0,2zih5p4icz,-1.6317733719530463,-112.67527165518933,-26.189913164089475

3500578_20201_2_0,2zl0mn4icz,0.17401103378553467,-95.45943911269302,-32.72310176615889

3345742_20201_2_0,2zlbno4icz,1.0853139362708761,-94.01306311383212,-57.36765362313636

5822185_20201_2_0,2zlhvo4icz,0.9065747330426163,-50.354727767065725,-42.80103923678695

3468345_20201_2_0,2zwgwn4icz,-4.528031283897462,-99.03976440515515,-8.518054848838261

1209134_20201_2_0,2zyxeo4icz,-1.1077011827413443,-63.62628074977238,-36.218517855762144

4737662_20201_2_0,302kjn4icz,-1.9909271045592183,-115.53739268288922,-20.779064512326443

4256477_20201_2_0,30552p4icz,-4.4387386537988665,-121.72393124515159,-16.98047173700718

2696527_20201_2_0,305e7p4icz,2.539556770935634,-60.25330776803054,-25.814823768532392

3055739_20201_2_0,3071xo4icz,1.4759047187817962,-100.61044154096172,-29.988675965324347

4812939_20201_2_0,3094eo4icz,-0.35075676710848375,-80.9769127894703,-21.2577437856703

4478596_20201_2_0,309c9p4icz,1.656335053600252,-120.07587446712913,-35.727404612688886

3979474_20201_2_0,30evoo4icz,-0.40098254308299425,-80.17496992266831,-28.182251449904086

2006831_20201_2_0,30fn9p4icz,0.5847923141318101,-103.33040608433225,-38.4559581535473
 81%|████████  | 654/811 [36:25<16:50,  6.43s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 655/811 [36:28<14:02,  5.40s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 656/811 [36:31<12:08,  4.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 657/811 [36:34<10:37,  4.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 658/811 [36:37<09:45,  3.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████▏ | 659/811 [36:40<08:54,  3.51s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████▏ | 660/811 [36:43<08:30,  3.38s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 661/811 [36:46<08:06,  3.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 662/811 [36:49<07:44,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 663/811 [36:52<07:35,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 664/811 [36:55<07:22,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 665/811 [36:59<08:13,  3.38s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 666/811 [37:06<10:52,  4.50s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 667/811 [37:09<09:32,  3.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 668/811 [37:12<08:39,  3.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 669/811 [37:19<11:20,  4.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 670/811 [37:22<10:06,  4.30s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 671/811 [37:36<16:54,  7.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 672/811 [37:39<13:37,  5.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 673/811 [37:42<11:28,  4.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 674/811 [37:45<09:56,  4.36s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 675/811 [37:48<09:16,  4.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 676/811 [37:51<08:31,  3.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 677/811 [37:55<07:59,  3.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▎ | 678/811 [37:58<07:39,  3.45s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▎ | 679/811 [38:00<07:08,  3.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 680/811 [38:03<06:51,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 681/811 [38:06<06:42,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 682/811 [38:09<06:28,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 683/811 [38:12<06:23,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 684/811 [38:25<12:39,  5.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 685/811 [38:28<10:34,  5.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▍ | 686/811 [38:31<09:16,  4.45s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▍ | 687/811 [38:34<08:18,  4.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▍ | 688/811 [38:37<07:36,  3.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▍ | 689/811 [38:40<07:04,  3.48s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▌ | 690/811 [38:43<06:44,  3.34s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▌ | 691/811 [38:46<06:42,  3.36s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▌ | 692/811 [38:49<06:20,  3.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▌ | 693/811 [38:52<05:57,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 694/811 [38:55<06:04,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 695/811 [38:58<05:52,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 696/811 [39:01<05:40,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 697/811 [39:03<05:27,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 698/811 [39:06<05:22,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 699/811 [39:09<05:18,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▋ | 700/811 [39:12<05:11,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▋ | 701/811 [39:15<05:09,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 702/811 [39:17<05:03,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 703/811 [39:20<04:58,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 704/811 [39:23<04:52,  2.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 705/811 [39:27<05:37,  3.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 706/811 [39:30<05:25,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 707/811 [39:33<05:16,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 708/811 [39:36<05:06,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 709/811 [39:39<05:02,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 710/811 [39:41<04:58,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 711/811 [39:45<05:01,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 712/811 [39:47<04:46,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 713/811 [39:50<04:40,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 714/811 [39:53<04:33,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 715/811 [39:56<04:37,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 716/811 [39:59<04:41,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 717/811 [40:02<04:39,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▊ | 718/811 [40:05<04:39,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▊ | 719/811 [40:08<04:38,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 720/811 [40:11<04:37,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 721/811 [40:14<04:33,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 722/811 [40:17<04:27,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 723/811 [40:25<06:29,  4.42s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 724/811 [40:28<05:47,  4.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 725/811 [40:31<05:19,  3.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|████████▉ | 726/811 [40:34<04:55,  3.48s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|████████▉ | 727/811 [40:38<04:57,  3.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|████████▉ | 728/811 [40:40<04:32,  3.29s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|████████▉ | 729/811 [40:43<04:26,  3.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 730/811 [40:46<04:16,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 731/811 [40:49<04:07,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 732/811 [40:52<04:01,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 733/811 [40:55<03:56,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 734/811 [40:58<03:51,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 735/811 [41:01<03:43,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 736/811 [41:04<03:46,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 737/811 [41:07<03:40,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 738/811 [41:10<03:32,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 739/811 [41:13<03:27,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 740/811 [41:16<03:25,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████▏| 741/811 [41:22<04:42,  4.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████▏| 742/811 [41:25<04:16,  3.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 743/811 [41:28<03:58,  3.51s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 744/811 [41:31<03:42,  3.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 745/811 [41:35<03:48,  3.46s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 746/811 [41:38<03:44,  3.45s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 747/811 [41:41<03:33,  3.34s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 748/811 [41:44<03:23,  3.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 749/811 [41:47<03:12,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 750/811 [41:50<03:05,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 751/811 [41:53<03:09,  3.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 752/811 [41:57<03:04,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 753/811 [41:59<02:55,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 754/811 [42:02<02:50,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 755/811 [42:05<02:46,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 756/811 [42:08<02:38,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 757/811 [42:11<02:36,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 758/811 [42:14<02:32,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▎| 759/811 [42:17<02:31,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▎| 760/811 [42:20<02:30,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 761/811 [42:23<02:27,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 762/811 [42:25<02:22,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 763/811 [42:28<02:20,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 764/811 [42:31<02:15,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 765/811 [42:36<02:39,  3.47s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 766/811 [42:39<02:34,  3.43s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▍| 767/811 [42:42<02:24,  3.27s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▍| 768/811 [42:45<02:15,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▍| 769/811 [42:48<02:10,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▍| 770/811 [42:51<02:03,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▌| 771/811 [42:54<01:56,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▌| 772/811 [42:57<01:55,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▌| 773/811 [43:00<01:53,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▌| 774/811 [43:03<01:48,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 775/811 [43:05<01:42,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 776/811 [43:08<01:40,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 777/811 [43:11<01:39,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 778/811 [43:14<01:34,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 779/811 [43:17<01:31,  2.87s/it] 96%|█████████▌| 780/811 [43:20<01:31,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▋| 781/811 [43:23<01:28,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▋| 782/811 [43:26<01:25,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 783/811 [43:29<01:22,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 784/811 [43:33<01:32,  3.41s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 785/811 [43:36<01:24,  3.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 786/811 [43:39<01:18,  3.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 787/811 [43:42<01:12,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 788/811 [43:45<01:08,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 789/811 [43:47<01:04,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 790/811 [43:53<01:19,  3.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 791/811 [43:56<01:10,  3.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 792/811 [44:00<01:06,  3.49s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 793/811 [44:03<01:00,  3.37s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 794/811 [44:06<00:57,  3.36s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 795/811 [44:09<00:52,  3.29s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 796/811 [44:12<00:48,  3.24s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 797/811 [44:15<00:44,  3.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 798/811 [44:18<00:40,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▊| 799/811 [44:22<00:39,  3.28s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▊| 800/811 [44:25<00:35,  3.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 801/811 [44:28<00:31,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 802/811 [44:31<00:27,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 803/811 [44:34<00:24,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 804/811 [44:37<00:22,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 805/811 [44:40<00:18,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 806/811 [44:43<00:15,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|█████████▉| 807/811 [44:46<00:12,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|█████████▉| 808/811 [44:49<00:08,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|█████████▉| 809/811 [44:52<00:05,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|█████████▉| 810/811 [44:55<00:03,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|██████████| 811/811 [44:59<00:00,  3.31s/it]100%|██████████| 811/811 [44:59<00:00,  3.33s/it]

5501441_20201_2_0,30gn8o4icz,-79.50326625774356,351.2858813590953,321.6742111749862

4446317_20201_2_0,30hpqn4icz,15.674666330956933,7.2253458982681025,-127.08496301553402

4066094_20201_2_0,30hsin4icz,2.7927986500864592,-70.64563748994394,-56.03314591663283

2823038_20201_2_0,30hx9n4icz,-0.6854307350197076,-130.17755517653654,-36.30590737189311

1997205_20201_2_0,30ut3p4icz,-1.4432874632146453,-124.3544319263884,-18.8985622468133

4594271_20201_2_0,30uyzo4icz,5.646474048569446,-110.9609068387102,-69.60246776258975

5969065_20201_2_0,3142so4icz,-2.238485668847631,-96.71682301945671,-31.482894531550173

3945987_20201_2_0,316ydo4icz,-0.6849738429476565,-113.76189801093258,-60.872422901733856

3459347_20201_2_0,317l0p4icz,1.6794552356549914,-72.29615506022449,-36.94573395177804

5996355_20201_2_0,319ckn4icz,2.2298992767503494,-119.66205636119213,-51.48094791291234

3554150_20201_2_0,31auwn4icz,-1.7106936798978298,-95.77527456762436,-37.887787419915995

5623337_20201_2_0,31bw7p4icz,-27.098031428355746,-186.19214627793218,123.2609218882429

2016138_20201_2_0,31dgun4icz,-1.3688574752439644,-84.31554775466407,-32.27922939050174

4096340_20201_2_0,31fvxo4icz,2.205028712291512,-49.212653455459275,-50.83490967341686

3117268_20201_2_0,31irip4icz,1.823900284181196,-110.18081806238519,-39.649615818611096

1364719_20201_2_0,31iy0p4icz,1.8434945326146317,-70.37768482109428,-62.13751613195302

2017370_20201_2_0,31tihp4icz,1.2149279918911355,-67.95498052134738,-39.87272396014707

4210740_20201_2_0,324ujp4icz,0.8190645964651266,-62.409999614016954,-22.568013714482035

3283331_20201_2_0,328c2o4icz,-0.9679658337722166,-116.99160255300944,-32.745879970990515

1873709_20201_2_0,328qin4icz,-0.5360531013987463,-120.26570245459189,-30.944250955792555

4364761_20201_2_0,328urn4icz,15.926379957458305,-21.507701235534455,-191.5431652945609

3261156_20201_2_0,329f9o4icz,-0.6271142824630518,-75.52116376415196,-36.147069689124265

2619234_20201_2_0,32dh7p4icz,0.6856572925886396,-96.26486901848841,-27.602174138563782

4526743_20201_2_0,32h93o4icz,-0.6741609044630756,-136.22958556109776,-16.12544954204536

3378355_20201_2_0,32hm3o4icz,-4.406519681393395,-124.8288556985633,-11.935300373726193

1177450_20201_2_0,32iemo4icz,1.8323456747123539,-59.88489258245568,-42.48547632765472

3231385_20201_2_0,32l7uo4icz,-1.1965502555211436,-78.22328130335538,-35.065098557119995

5913169_20201_2_0,32pyfp4icz,-0.20204054025912968,-95.45936706609584,-40.113965630921825

2131767_20201_2_0,32qmpn4icz,-3.2024934416558146,-130.77778686128093,-10.07797158056951

4742903_20201_2_0,32qn2p4icz,-4.394711905167896,-86.05177656105414,1.2697730309624689

2460912_20201_2_0,32szrn4icz,-0.8672690904992689,-96.8732968516164,-27.348951581995806

1254809_20201_2_0,32w47p4icz,-11.974901256879026,-88.23973777510889,46.68232312430395

2130904_20201_2_0,331dsn4icz,-0.22788507899499988,-82.90704177416345,-40.77507572961596

3445417_20201_2_0,334ckn4icz,-1.4212406723142117,-91.47233322328097,-20.682961081934664

3111215_20201_2_0,33il2o4icz,2.151633803244231,-63.22657951800102,-24.82610427937078

4927818_20201_2_0,33sjko4icz,-2.9219308222007703,-74.16082657597417,-35.35202101769359

5573480_20201_2_0,33t3ap4icz,0.21586997587836504,-58.991336775901914,-35.44922732173916

5869170_20201_2_0,33v29o4icz,2.483424458785705,-105.93154209378676,-55.34590169855542

5682946_20201_2_0,33wo7o4icz,-0.9881275465235406,-111.73212631944281,-39.23573233114975

5064875_20201_2_0,3464cp4icz,-0.2035060120538797,-91.07204049292051,-48.7202035509215

2250673_20201_2_0,346l0p4icz,-2.8897529020786386,-132.68656725224466,-15.990944513911046

1576991_20201_2_0,349d8p4icz,-1.6372290279491002,-79.85262260581499,-46.21553441054017

5017135_20201_2_0,34ayyo4icz,1.4374941576768578,-63.25258558364709,-39.416705331041996

3686957_20201_2_0,34bymo4icz,-5.231065103589857,-116.94042128424778,-8.214070191070448

5602130_20201_2_0,34clmn4icz,2.661158307114989,-73.04497403195643,-60.17708884605524

4954092_20201_2_0,34dt2p4icz,-1.329130626831955,-98.83765467166955,-38.384012950362816

5228530_20201_2_0,34e0wn4icz,2.2785403743329353,-101.17297088844978,-38.76422130426778

3668857_20201_2_0,34g91o4icz,-0.8844121670442954,-58.643525496119935,-13.339997298021501

1362890_20201_2_0,34hmjo4icz,-5.271812367090564,-133.43352472695932,-1.2972492043656132

5362554_20201_2_0,34hq5o4icz,-1.51571164958105,-106.12275655123523,-22.343843831440083

4843460_20201_2_0,34hven4icz,-2.3064407319933315,-116.45958954538781,-35.16330937201019

1587323_20201_2_0,34jl0p4icz,-0.7102006797260488,-66.83114211036553,-39.575052558973965

1116102_20201_2_0,34k0ep4icz,-5.046040884038201,-64.81192224575432,-5.898113001952311

5187132_20201_2_0,34mtao4icz,-0.07706640889529612,-116.46126549974045,-24.143493265888296

4601783_20201_2_0,34pbuo4icz,-4.767613251075709,-127.9479832209602,-14.04841797527476

1822500_20201_2_0,34tnqo4icz,-1.5458457212162315,-119.65186459943129,-37.22442725374381

3787802_20201_2_0,34vfkn4icz,-0.8995823257715482,-87.859395162237,-12.44450130795694

3821638_20201_2_0,34vqep4icz,0.8955562835634792,-144.52849495855148,-35.790773174045825

1374399_20201_2_0,34za8o4icz,-0.5402208745215717,-108.70556323583904,-19.203092103583117

2739342_20201_2_0,35814p4icz,2.154577087532638,-78.05861843604538,-55.96879662752862

1200882_20201_2_0,358upn4icz,-0.5998467988730157,-128.3439814027074,-38.91582995321487

2165275_20201_2_0,35bf9o4icz,0.12868784183270696,-86.77716423757593,-39.846088446135596

2580547_20201_2_0,35bx1o4icz,1.8302251201434798,-65.30301975115282,-29.63479007887382

4688267_20201_2_0,35camo4icz,1.754036336914479,-91.73376384456807,-48.44076994451247

2105044_20201_2_0,35jk1o4icz,1.524884541057696,-100.7862259566744,-42.96842487893133

3277080_20201_2_0,35jy4o4icz,3.91119231612852,-76.95194961859016,-57.745969727430094

4319360_20201_2_0,35l0tn4icz,-0.14214641990846133,-93.27089445356796,-48.31607855004438

3258318_20201_2_0,35l2po4icz,2.3637454766405512,-55.39566767043192,-48.223582332740264

2725308_20201_2_0,35qfto4icz,-7.59535932950242,-56.576664364094256,-2.938362878093315

3631698_20201_2_0,35sjsn4icz,-2.667524297104164,-81.977695089294,-33.20467522460572

1470155_20201_2_0,35t3gn4icz,-1.0891807278477266,-80.33595231159492,-29.325654832902046

2389515_20201_2_0,35tvun4icz,-1.3283512395144652,-87.52941561406044,-13.548104532114948

1279854_20201_2_0,35wajn4icz,-0.898635034592064,-135.51287104138993,-38.86338783741

3608397_20201_2_0,35x00p4icz,-4.193860416895283,-112.96311731345546,-2.7405180003325995

3400368_20201_2_0,35z8so4icz,2.144623486802373,-56.71673769926855,-41.44191585880337

1378328_20201_2_0,3619un4icz,-0.22185937168181988,-104.3408627001607,-23.969798605572464

3295873_20201_2_0,362mcn4icz,-1.94991808514778,-117.61933558303019,-23.24724068627451

4142151_20201_2_0,365ujp4icz,2.460234152676692,-87.08878167655058,-36.12049780648569

1947414_20201_2_0,3662go4icz,0.06483005294951837,-86.78739683801692,-42.086603388693575

1879083_20201_2_0,368wkn4icz,3.703094746417634,-96.0742904012751,-54.673177967982

2533801_20201_2_0,36azhp4icz,2.024168503088668,-108.19370252221776,-50.75928840108348

5439642_20201_2_0,36desn4icz,0.23684480579181438,-81.35412688988464,-50.822775452742604

2975427_20201_2_0,36f0wn4icz,-2.6745093816294214,-84.32648341377015,-19.207491410199736

1286668_20201_2_0,36icxo4icz,0.8165395015176977,-123.83012694161647,-38.29228201699925

5626328_20201_2_0,36j7fp4icz,-0.7920392025288039,-141.17797686409068,-22.92008102686077

5936831_20201_2_0,36lp4p4icz,-2.072717630468512,-88.20499607875846,-22.362475005458634

1431608_20201_2_0,36r4yo4icz,1.5552227624032542,-100.24553258931496,-42.91942933143268

1327732_20201_2_0,36uwmo4icz,-1.5366675649923691,-62.252489764367795,-29.308470352110646

3709774_20201_2_0,37041p4icz,1.2260948436816697,-115.65809891470363,-54.41790890495868

1076756_20201_2_0,37201p4icz,-3.365203424438349,-121.12842849213038,-26.82381752486114

4132442_20201_2_0,3721qn4icz,-3.043990069831968,-102.78557949090793,-9.388216680265515

4703105_20201_2_0,37bc7p4icz,-0.43356007633729166,-96.15726752465076,-30.11520032215438

3664847_20201_2_0,37bh3p4icz,-4.656707607106929,-109.23390685787484,-19.126052254602712

3652589_20201_2_0,386fgn4icz,-0.572719534978358,-85.97851239298825,-23.222806174010316

3666499_20201_2_0,38958p4icz,-0.1727007927691117,-61.43502601454941,-27.428864332776257

5884822_20201_2_0,38cyqn4icz,6.296563529724952,-68.15536708708476,-58.97819928349929

4801205_20201_2_0,38e4po4icz,1.2371912331871426,-56.16351674383418,-32.517456511792744

5808467_20201_2_0,38fa8n4icz,2.2081865875941995,-116.07568886716808,-56.98940382167592

3867945_20201_2_0,38jl8o4icz,-2.8444806398594418,-89.16110975843338,-20.109364867681876

4152026_20201_2_0,38kgxo4icz,-0.4347738243166817,-133.44623084218927,-51.01612838754869

3066639_20201_2_0,38rysn4icz,1.8346624553156554,-135.31957307373514,-50.994753575698965

5806821_20201_2_0,3916uo4icz,-1.1933309252604096,-124.52376076854941,-26.902827739056036

1929510_20201_2_0,39267p4icz,-3.3834735005302363,-119.02980815649465,-2.199541168268553

3089969_20201_2_0,395a3p4icz,-1.2551864347321142,-119.10199637470981,-10.227734416943207

3125266_20201_2_0,39732p4icz,-0.8496363652199244,-117.79604414425924,-15.38468611010758

1777618_20201_2_0,39d3hp4icz,-1.6954242197927902,-71.2484084483819,-25.348087217549732

2773334_20201_2_0,39l5co4icz,1.7048155511140866,-77.80851417624038,-51.37725675888912

2263436_20201_2_0,39vafo4icz,0.9895598399576063,-68.83861402451782,-40.72290574391788

4061028_20201_2_0,39wcfp4icz,-1.331238356223573,-125.9251174703964,-10.159457463667124

4347190_20201_2_0,39x0mn4icz,-2.723190365009646,-89.02100004407535,-10.033955895610347

5353293_20201_2_0,wtnkep4icz,-3.7191489732253955,-129.64869233330978,-13.046224035410745

3731751_20201_2_0,39ys4p4icz,-0.7355525671727338,-83.83964919461752,-20.872569349943163

5186217_20201_2_0,3a07to4icz,-0.1784816355964259,-74.17101019767293,-32.25179113528398

1463607_20201_2_0,3a0jgp4icz,-2.931215963118094,-110.43291259136245,-28.08554600191968

4113884_20201_2_0,3a261p4icz,-4.364517242525405,-89.4329305285761,-13.602452877024135

3113706_20201_2_0,3a69nn4icz,0.19610232149196766,-95.44736910176621,-29.53782131557655

1482826_20201_2_0,3a891o4icz,-3.7030797040122665,-147.33712363959148,-19.78336984810366

4560472_20201_2_0,3acpto4icz,0.018285808525967086,-73.51826899859284,-45.8266869121904

1210651_20201_2_0,3aegcn4icz,-2.187846378644388,-126.95691410365737,-17.60004852225363

3982465_20201_2_0,3ajzpn4icz,1.3359227198325676,-131.6751967288702,-49.596431838542884

5530896_20201_2_0,3apbio4icz,-0.9502905216393664,-70.7534373633103,-34.066231919778076

5247984_20201_2_0,3aqasn4icz,-2.044478294996554,-116.43597454699932,-31.68776422482705

5472997_20201_2_0,3aqi1o4icz,0.9900394779126421,-74.44588736998872,-63.04390775086799

2314323_20201_2_0,3arghp4icz,-7.285535701441543,-116.24620441626519,-3.4725395636033767

2504258_20201_2_0,3auvzo4icz,0.07766379733858839,-99.27068429525536,-36.056030653121354

2832935_20201_2_0,3auxpo4icz,3.2747524574036735,-94.55141628325637,-57.52376502416223

3994055_20201_2_0,3axgen4icz,0.9686948870671146,-111.72415404144317,-42.557909164121

3098470_20201_2_0,3b1rip4icz,-0.024172430157956133,-138.30655474904245,-18.39366539856674

3829586_20201_2_0,3b74wo4icz,-0.16084276581392135,-118.91550906056372,-41.92698964956216

3636570_20201_2_0,3bazln4icz,1.6134827177405595,-131.90800897467776,-34.874181749754044

4212471_20201_2_0,3be5sn4icz,-0.7395015452854693,-145.2585912632887,-37.061425176117055

3975964_20201_2_0,3bhbwo4icz,-0.1998456829765017,-80.59435517798494,-31.44680683474934

2339656_20201_2_0,3bkb8p4icz,17.54996984777206,-50.74804945133258,-98.38780370976468

5326395_20201_2_0,3bma0p4icz,-2.0613731215630366,-74.89047145605491,-37.76986462132754

2816707_20201_2_0,3bmm5p4icz,-13.68581572297476,-142.85771603963553,45.8862674188907

2352800_20201_2_0,3bmt6p4icz,1.37415940380237,-88.68843664078923,-48.53804198325628

2739363_20201_2_0,3bno5p4icz,0.6074015081591166,-97.26067545055983,-28.31414972564943

3203403_20201_2_0,3btk3o4icz,-1.4344778609866906,-80.559897631036,-22.551508060473424

2859059_20201_2_0,3byeno4icz,0.11364186558753338,-113.31604682440144,-31.969407051458987

1296511_20201_2_0,3bynhp4icz,0.7095370020688292,-62.52558480557258,-49.82738693188426

3632822_20201_2_0,3c114o4icz,-2.8508623864959026,-129.5102042820922,-33.9285389177349

5330389_20201_2_0,3cdbfp4icz,-0.2850258210023209,-122.93723868969721,-36.60045102935142

4014901_20201_2_0,3cdgzo4icz,1.4286124274979415,-110.94505966094377,-54.25537647515699

5446700_20201_2_0,3cgh9o4icz,-2.066729369685991,-102.21751514097326,-5.562088628453353

5082033_20201_2_0,3cj8fo4icz,6.4350582645365195,-76.11919654379071,-48.5902698246456

3042798_20201_2_0,3co9hp4icz,-2.7116652418369314,-90.77885944156284,-34.68142928014127

2070497_20201_2_0,3csa8o4icz,1.6643666152895928,-93.26549435132392,-41.736845976731956

5056869_20201_2_0,3cur6p4icz,-0.10820826167092945,-136.30816694107156,-44.37290095756268

5218360_20201_2_0,3cwydp4icz,0.4688649020261024,-79.29469269680891,-47.96056555126887

1520872_20201_2_0,3cy44p4icz,2.3407839184843366,-79.89097217590538,-35.060377310812896

1713198_20201_2_0,3cy5co4icz,1.7996260215675774,-83.32077394678274,-28.59178134728468

2160614_20201_2_0,3d01io4icz,-0.9595607306127889,-99.46775006221603,-12.762879552849398

2754005_20201_2_0,3d2nip4icz,0.6492455120134291,-86.80452211034708,-28.99723722939885

2915474_20201_2_0,3d5h7p4icz,0.5832787556407855,-117.27142194403382,-29.924695810357633

2448033_20201_2_0,3d9hco4icz,0.2716781219121086,-77.73650701215553,-37.00226691256347

2751009_20201_2_0,3dh6do4icz,-1.3790404372451572,-62.57641247147032,-41.30963784152388

4081630_20201_2_0,3dkpvn4icz,-1.2112092326573214,-73.0700324296601,-27.601369614586275

4149144_20201_2_0,3dnpvo4icz,-1.3475172990154651,-103.2653157889616,-29.98288920133109

4035881_20201_2_0,3dprcn4icz,-1.3754961350795687,-71.87998328268492,-24.5879164441196

3339256_20201_2_0,3dqp6p4icz,1.082071265329165,-75.95053281539506,-49.62268881922323

2613529_20201_2_0,3dsieo4icz,1.7823530699367935,-126.01192287543827,-49.40313324950782

3150298_20201_2_0,3dufgp4icz,5.913163436617846,-93.32021706009667,-66.80007713119745

4966815_20201_2_0,3dvwvo4icz,1.8293172671063906,-55.67513457389228,-51.69914339070044

5677245_20201_2_0,3dwu6p4icz,-2.7194733589204554,-101.34634229480409,-14.771602333638114

5114125_20201_2_0,3dxono4icz,0.3727115543703566,-116.50964065727626,-35.94325030968723

4208776_20201_2_0,3e5zso4icz,3.7488492642879105,-57.789778529631235,-34.69142902134561

3280105_20201_2_0,3e9huo4icz,1.6777214261621185,-106.56405672192221,-49.55081477097504

3839423_20201_2_0,3eb1oo4icz,0.5765879695502454,-73.00315437210367,-37.16833507192254

3052715_20201_2_0,3ecbao4icz,-1.5304076042968306,-103.36155070999104,-46.30821788527189

5065034_20201_2_0,3eduin4icz,1.7874867245416382,-82.8794099075798,-50.63341465191246

3619028_20201_2_0,3ejwbp4icz,-1.1518062891696632,-86.20979262342436,-18.26696473843309

2482312_20201_2_0,3eludn4icz,-1.5272951900802747,-79.25780921484244,-20.040967348152904

4973442_20201_2_0,3erlqo4icz,2.0062030839283995,-45.90603811376354,-48.6760720460328

3066155_20201_2_0,3etx9n4icz,6.381375488287322,-85.21601870119588,-79.25379477572615

1927247_20201_2_0,3ex4mo4icz,-4.44163074041636,-82.89194038696951,-16.306513438561026

5538406_20201_2_0,3f04nn4icz,-1.14535133639499,-99.94140574307997,-37.62596265680895

4611635_20201_2_0,3f18vn4icz,-6.516050618164338,-140.3214304284287,12.961919322912522

5744236_20201_2_0,3f2ebo4icz,-2.5643945580112355,-129.51306968593806,-11.215286430515178

3545280_20201_2_0,3f2gmn4icz,-0.7394235201761066,-82.3889856232349,-23.892764604892278

1683589_20201_2_0,3f4pro4icz,0.9442729288400455,-105.66932361745444,-23.3967015564822

4279516_20201_2_0,3fbgon4icz,-1.070473131992953,-81.29678240456869,-48.90231478775202

4507708_20201_2_0,3fgd5o4icz,-5.314105274233561,-121.04771642643544,-2.0704487958131494

2021575_20201_2_0,3fit4p4icz,0.5784489769693634,-69.25101879238511,-44.56462326089566

3872062_20201_2_0,3frexo4icz,-2.019443442328463,-86.17471310708385,-40.15787992902756

4740173_20201_2_0,3ftmin4icz,-1.5460188809789248,-95.77822913654882,-25.69522920775553

3821832_20201_2_0,3fuefp4icz,0.32942197014256036,-122.66903605204112,-49.31838364940779

3904460_20201_2_0,3fvhvo4icz,2.180059562072997,-64.60975035622076,-40.71279691901624

1097907_20201_2_0,3fwjbp4icz,-0.04551671719629668,-93.71208632690809,-34.06261022843394

4747950_20201_2_0,3fxqgo4icz,0.8667895091708131,-54.130617621523925,-48.80082987742358

2259307_20201_2_0,3fxyfp4icz,0.9830334925765927,-73.44270391616683,-52.247340748086785

5171389_20201_2_0,5wyaap4icz,-5.748732318368925,-143.50217431039525,9.19331847641621

2041836_20201_2_0,3g10co4icz,-3.1218809161436085,-81.19361735300106,-8.825430310788164

3633705_20201_2_0,3g923o4icz,-2.1871909205324305,-69.9917678068094,-36.458417770289515

5371436_20201_2_0,3gi0wo4icz,-0.05405359376299949,-123.34472778413047,-34.91975738902437

2164159_20201_2_0,3gi9eo4icz,2.287470287167835,-68.46432366450114,-63.99497225379511

1138380_20201_2_0,3gij0o4icz,-2.463661318905625,-92.69868153953902,-23.506673042489183

4511214_20201_2_0,3gkwyo4icz,16.94863144334424,-36.80256751965766,-129.63222088032285

1994347_20201_2_0,3gmugp4icz,1.6062421762313945,-81.74677842011079,-48.05487603970724

5825854_20201_2_0,3gmxen4icz,-1.2069907126860457,-120.53974556266454,-27.399467156278234

5531873_20201_2_0,3gplsn4icz,-1.6304813952380035,-119.77432339884379,-28.461821401185375

4388739_20201_2_0,3gs7pn4icz,-0.19627741934822246,-69.7272689299975,-34.000214439560025

2258052_20201_2_0,3gtmio4icz,-1.9837867087839567,-75.71706074405313,-17.649560971412043

5122738_20201_2_0,3gvysn4icz,-0.7743374528849178,-79.03343428077622,-42.33003197850178

4769151_20201_2_0,3gzt7o4icz,-0.3856425303054435,-96.18326849488585,-39.49321235163629

5120107_20201_2_0,3gzxyo4icz,-1.6352225939867515,-91.20689215751048,-40.43806488530909

2702960_20201_2_0,3h3oso4icz,4.255542102283729,-77.18840246890579,-62.56958311917212

2719186_20201_2_0,3h5msn4icz,3.992130431568138,-106.5983998967503,-65.81754915180989

2533370_20201_2_0,3h8u7o4icz,-1.2661850941229889,-52.488868002693664,-25.59791212547111

4626166_20201_2_0,3h9vbp4icz,0.7452534105922964,-111.58743957109152,-52.92567393976496

4938385_20201_2_0,3hg3hp4icz,-4.472995096039117,-110.70707746802822,-18.658574072127877

4252619_20201_2_0,3hkrln4icz,-1.6348625596669477,-123.02584890884754,-30.543844445909087

2748088_20201_2_0,3hlhko4icz,-0.27637455193984994,-128.4256023930824,-31.75037370378749

1629841_20201_2_0,3hnuon4icz,-2.8914589099264316,-98.75500883506132,-25.291720309079892

3653789_20201_2_0,3hvuto4icz,-5.230325631853897,-98.18054405563669,7.57470135167614

5536728_20201_2_0,3hw1lo4icz,-1.0284976170755695,-105.58283903233792,-18.194667149529522

1895849_20201_2_0,3i2efo4icz,1.305088399035657,-83.0367963134039,-26.99925571616032

5239493_20201_2_0,3i2rdo4icz,-0.5613769770590648,-103.75693709380411,-31.00010066503168

5148050_20201_2_0,3i34go4icz,-0.0011758246912321082,-77.28444239489033,-36.80658962770357

6006979_20201_2_0,3i9a8n4icz,-0.2812911386959588,-117.30679630486517,-25.409254560226202

2144971_20201_2_0,3iadin4icz,-177.8862131717306,622.0806278653172,-32.32006368845359

4458759_20201_2_0,3ib3ln4icz,1.3940881882968827,-85.1612015656547,-38.49650420421108

4719551_20201_2_0,3ic1ko4icz,1.6610258517901648,-52.70789773618094,-38.281369032839194

5626981_20201_2_0,3iiukn4icz,-1.352292512550137,-90.18205281071465,-32.6539787391842

1997741_20201_2_0,3ijiqo4icz,3.8706123193969035,-85.92637487613479,-75.26237258290811

4478495_20201_2_0,3infep4icz,-0.3591108887171287,-60.38728423450701,-31.115495751958505

3751105_20201_2_0,3isfgp4icz,-7.004074358421683,-125.36400209524535,-40.60379328245449

5702308_20201_2_0,3iwj4o4icz,2.008674554260101,-103.55502906781331,-38.7173829558847

5368509_20201_2_0,3izvpo4icz,0.7679633057388313,-74.12786650562904,-37.890078930542444

4983901_20201_2_0,3j06wn4icz,-0.4027484420709758,-56.552625132856406,-39.74009585108216

3470068_20201_2_0,3j1xjo4icz,0.8056283975074207,-35.973648990475425,-32.279938960856725

2822197_20201_2_0,3j328p4icz,-0.6486311217475184,-83.79536454620461,-38.76118410765784

5338386_20201_2_0,3j76rn4icz,3.4100548379453377,-69.38315814426014,-61.44601239444421

3179920_20201_2_0,3javso4icz,5.677764432338419,5.262061823118302,-70.19051599177602

4480999_20201_2_0,3jg2go4icz,1.9965911337119469,-100.69693575301119,-52.603856849337944

2334389_20201_2_0,3joftn4icz,-3.5351367628143615,-143.3232917754136,-24.60059361584716

4782746_20201_2_0,3jp7go4icz,-0.5010236076756365,-83.56344601376279,-37.94172907703296

2327502_20201_2_0,3jpxno4icz,0.7235121352167111,-75.26310013805306,-44.936994713551115

1877131_20201_2_0,3jq4bn4icz,1.783021693344092,-120.72020839120367,-48.126027011108036

4048892_20201_2_0,u60slo4icz,0.09456527618718814,-111.28046637031323,-57.436927097448404

3203911_20201_2_0,3js07o4icz,-1.4448651115471633,-100.97386095557601,-29.69010267799939

5051499_20201_2_0,3jtjmo4icz,-2.1553743408444217,-71.94071358425515,-18.10125506475157

1676992_20201_2_0,3jyd7p4icz,2.5640225112900694,-104.27907666476878,-54.55028581151278

5642010_20201_2_0,3k0ymn4icz,6.035138661179807,-82.2695803672026,-58.20983362686947

3037820_20201_2_0,3k2pro4icz,1.5050964401597475,-114.71179811845673,-59.90806933425242

2900810_20201_2_0,3k2ujp4icz,-0.7028635840160355,-116.91311777839596,-30.821953324525822

1442739_20201_2_0,3k32no4icz,3.8960129299737067,-84.8948373183647,-66.10212287243513

3222472_20201_2_0,3k78ko4icz,-0.2093338056258844,-115.09708447479326,-22.831940672154943

4140268_20201_2_0,3k7hin4icz,0.20322929889605726,-70.47543085637506,-25.464067506365865

4235500_20201_2_0,3k7rsn4icz,-0.20129442374447507,-79.92631179353413,-43.957611215361624

5083860_20201_2_0,3k9rbp4icz,2.259022111067032,-103.46613776426437,-58.254266167357585

1339488_20201_2_0,dd1fpn4icz,-0.9071613052178498,-121.24204927194046,-24.950316414585785

/users/rhydian/anaconda3/envs/torch_env/lib/python3.7/site-packages/torch/cuda/__init__.py:52: UserWarning: CUDA initialization: Found no NVIDIA driver on your system. Please check that you have an NVIDIA GPU and installed a driver from http://www.nvidia.com/Download/index.aspx (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729006826/work/c10/cuda/CUDAFunctions.cpp:100.)
  return torch._C._cuda_getDeviceCount() > 0
  0%|          | 0/101 [00:00<?, ?it/s]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 1/101 [00:03<05:05,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 2/101 [00:06<05:10,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 3/101 [00:09<05:01,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/101 [00:12<05:00,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▍         | 5/101 [00:15<04:53,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 6/101 [00:18<04:41,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 7/101 [00:21<04:38,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 8/101 [00:24<04:48,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 9/101 [00:28<05:07,  3.34s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|▉         | 10/101 [00:31<05:07,  3.37s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 11/101 [00:35<04:56,  3.30s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 12/101 [00:38<04:45,  3.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 13/101 [00:40<04:30,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 14/101 [00:43<04:25,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▍        | 15/101 [00:46<04:17,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 16/101 [00:49<04:05,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 17/101 [00:52<04:02,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 18/101 [00:55<04:04,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 19/101 [00:57<03:55,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|█▉        | 20/101 [01:00<03:50,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 21/101 [01:03<03:49,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 22/101 [01:06<03:48,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 23/101 [01:09<03:44,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 24/101 [01:12<03:39,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▍       | 25/101 [01:15<03:38,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 26/101 [01:18<03:41,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 27/101 [01:21<03:34,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 28/101 [01:23<03:28,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▊       | 29/101 [01:26<03:24,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|██▉       | 30/101 [01:29<03:22,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 31/101 [01:32<03:23,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 32/101 [01:35<03:23,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 33/101 [01:38<03:15,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▎      | 34/101 [01:41<03:09,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▍      | 35/101 [01:44<03:12,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 36/101 [01:47<03:11,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 37/101 [01:50<03:07,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 38/101 [01:52<03:04,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▊      | 39/101 [01:55<03:00,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|███▉      | 40/101 [01:58<02:58,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 41/101 [02:03<03:22,  3.38s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 42/101 [02:06<03:09,  3.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 43/101 [02:12<03:56,  4.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▎     | 44/101 [02:16<03:58,  4.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▍     | 45/101 [02:19<03:37,  3.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 46/101 [02:22<03:19,  3.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 47/101 [02:26<03:08,  3.50s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 48/101 [02:29<02:57,  3.34s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▊     | 49/101 [02:31<02:46,  3.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|████▉     | 50/101 [02:34<02:38,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 51/101 [02:37<02:35,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████▏    | 52/101 [02:40<02:29,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 53/101 [02:43<02:25,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 54/101 [02:46<02:18,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 55/101 [02:54<03:22,  4.41s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▌    | 56/101 [02:57<03:00,  4.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▋    | 57/101 [03:00<02:39,  3.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 58/101 [03:03<02:25,  3.39s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 59/101 [03:06<02:17,  3.28s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 60/101 [03:08<02:07,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|██████    | 61/101 [03:11<02:00,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████▏   | 62/101 [03:14<01:56,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 63/101 [03:17<02:00,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 64/101 [03:20<01:53,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 65/101 [03:23<01:50,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▌   | 66/101 [03:26<01:46,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▋   | 67/101 [03:29<01:40,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 68/101 [03:32<01:36,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 69/101 [03:35<01:32,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 70/101 [03:38<01:30,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|███████   | 71/101 [03:41<01:27,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████▏  | 72/101 [03:44<01:26,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 73/101 [03:47<01:21,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 74/101 [03:50<01:18,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 75/101 [03:52<01:15,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▌  | 76/101 [03:55<01:13,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 77/101 [03:58<01:09,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 78/101 [04:01<01:08,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 79/101 [04:04<01:04,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 80/101 [04:07<01:02,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 81/101 [04:10<00:58,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 82/101 [04:13<00:55,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 83/101 [04:16<00:52,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 84/101 [04:19<00:49,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 85/101 [04:22<00:46,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▌ | 86/101 [04:25<00:43,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 87/101 [04:27<00:40,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 88/101 [04:30<00:37,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 89/101 [04:33<00:34,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 90/101 [04:36<00:31,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 91/101 [04:39<00:29,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 92/101 [04:42<00:26,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 93/101 [04:45<00:23,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 94/101 [04:48<00:20,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 95/101 [04:51<00:17,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▌| 96/101 [04:54<00:14,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 97/101 [04:57<00:11,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 98/101 [05:00<00:08,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 99/101 [05:02<00:05,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 100/101 [05:05<00:02,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|██████████| 101/101 [05:09<00:00,  3.19s/it]100%|██████████| 101/101 [05:09<00:00,  3.07s/it]
Trying to load from /users/rhydian/self-supervised-project/model_weights/SSECEncodersBothBoth
==> Resuming model trained for 106 epochs...
Trying to load from ../model_weights/angle_regressor4
==> Resuming model trained for 7 epochs...
1284047_20201_2_0,1os31o4icz,-0.5090616513496821,-75.64085202467186,-35.33238353829452

1566824_20201_2_0,1puexo4icz,-1.5983666047436123,-121.75022460979653,-40.40351333989672

5613653_20201_2_0,1rbkco4icz,-2.3780149173718583,-97.35156489448437,-24.284914391625236

2077448_20201_2_0,1rixln4icz,-0.1815937141802456,-127.9736444782705,-24.016449496083197

3087156_20201_2_0,1rpkgo4icz,-1.6131792001493113,-89.26170722584328,-27.12989551009069

2694819_20201_2_0,1tn53p4icz,1.0313934998333871,-94.89687550968893,-29.406544286667355

3818617_20201_2_0,1tt1fo4icz,0.6218782029926438,-42.03666845119977,-35.40408936970147

4352246_20201_2_0,1urecn4icz,-1.122111845864698,-66.81401408671056,-39.08827743860789

3821377_20201_2_0,1vfmhp4icz,1.530514741120145,-75.93524190487398,-32.883873602203906

3108210_20201_2_0,1x6j9p4icz,-4.24762800470636,-68.91529537244747,-32.001521037613486

5956835_20201_2_0,206lpo4icz,5.58300271427881,-45.553307916815925,-46.99942551519807

2006335_20201_2_0,24ttuo4icz,2.756849943384087,-96.91381335874502,-34.218189582878864

3207932_20201_2_0,252kln4icz,1.8632626471048144,-66.00424415011514,-60.65867869863396

3387713_20201_2_0,258kao4icz,0.09966028384947338,-85.88056555714599,-20.30596073323153

3780220_20201_2_0,25m1kp4icz,-2.029918159431687,-89.7577633825833,-24.62507473226934

1567417_20201_2_0,26gzeo4icz,-2.7081407091688474,-62.692086339261124,-37.8686113424442

3587414_20201_2_0,26mz3o4icz,-1.8108649785615083,-111.92448736309711,-15.969295483660176

1574181_20201_2_0,270t6o4icz,-0.5251251705638752,-83.54851560671014,-19.43274656898845

3429917_20201_2_0,276dao4icz,3.0190374365933614,-84.98821323377396,-46.703191820865555

2821951_20201_2_0,27c1do4icz,-2.246636072969517,-120.64455775291796,-19.34790183711685

1722368_20201_2_0,27kmlo4icz,2.4377373172487466,-79.17904688088419,-44.66671965065939

1781095_20201_2_0,27oamo4icz,-1.0944933397562358,-84.26607280468306,-42.97494295884803

5270503_20201_2_0,28mhto4icz,-0.36296757559646725,-129.01673543890422,-54.568580834791135

2754815_20201_2_0,29hnro4icz,-3.018539863973438,-62.788653812619486,-25.719794995766534

2863556_20201_2_0,2a0hwn4icz,0.7724413947469188,-109.14370514779304,-45.73198128237979

5182947_20201_2_0,2abvbp4icz,0.14890104753866623,-101.99589815137412,-34.239435874028686

4512063_20201_2_0,2baueo4icz,-0.10078932236204263,-84.60290245059878,-31.763259985702348

2009790_20201_2_0,2c2q3p4icz,-1.4160678550220251,-73.02483862255139,-17.24419470505694

5578861_20201_2_0,2cxd9p4icz,1.2758102377639784,-121.20401754237201,-66.06797958620027

2444100_20201_2_0,2damzo4icz,0.9675795679223523,-130.13296937954573,-29.18491309157845

1552693_20201_2_0,2e0ykn4icz,-0.08957440943475034,-126.07597739169591,-42.64721116088539

3625861_20201_2_0,2edx6p4icz,-0.2699471723614227,-66.28956454188256,-51.49989072682767

3672453_20201_2_0,2f2qnn4icz,-7.2943580600082365,-146.53244837258345,4.261908061374214

1489309_20201_2_0,2g69fp4icz,0.6491525655842707,-126.1686807298747,-42.15090295467482

1967880_20201_2_0,2gj49o4icz,1.7124221865501987,-97.72108473908276,-42.9435693451087

4055615_20201_2_0,2gvplo4icz,0.922847093859834,-74.45467404237138,-26.594495742051038

2287527_20201_2_0,2gxcqo4icz,1.2319309278913384,-115.25766107847838,-43.571207300980944

2264832_20201_2_0,2gyqro4icz,-0.2774269551406417,-88.56047942413883,-27.904819326051268

2482632_20201_2_0,2hmloo4icz,-6.482598845153555,-95.52359066665062,-8.8422001293482

5261379_20201_2_0,2hnndp4icz,0.6391898775012782,-96.38593366475533,-77.4712267528281

2652332_20201_2_0,2ht86o4icz,-2.188078951980323,-98.87879625093998,-35.4792083735674

4305504_20201_2_0,2idd7o4icz,0.5596123249874031,-82.54992480645672,-32.74047588810117

1517792_20201_2_0,2iqo9n4icz,-0.72279423003614,-100.01341356721267,-31.44112093883396

4170817_20201_2_0,2jdxzo4icz,1.0506408275404877,-97.86462353934598,-38.904386055695966

5052939_20201_2_0,2l04co4icz,3.65338450870167,-57.66431038805263,-27.91441724934441

2894623_20201_2_0,2nkb7o4icz,1.4371926196734528,-78.64540773749752,-46.96682537428863

3381283_20201_2_0,2nmxjp4icz,-1.9834912429781977,-79.66713517605405,-10.768254308383945

2706805_20201_2_0,2nvkdn4icz,-0.8827546977930508,-123.15102765572388,-37.265723176786935

2226243_20201_2_0,2o8bap4icz,9.17571621591959,-73.15654341681639,-90.18633089979215

5949616_20201_2_0,2oa0zo4icz,1.748117289976915,-87.94078586199308,-48.12385347697885

3261649_20201_2_0,2ospso4icz,1.2782922515595065,-92.1557076927655,-32.321036913079055

5098018_20201_2_0,2ota8n4icz,-1.470045852746007,-122.46300791391764,-22.378546111463862

3104255_20201_2_0,2pd49p4icz,-3.421780592367233,-102.26002426461059,-14.893521329631966

5108156_20201_2_0,2pstao4icz,-1.171125749615402,-113.61239871488544,-25.88880230719937

1514514_20201_2_0,2q75fo4icz,2.377463629578895,-109.62955855233207,-16.26401478348815

4502396_20201_2_0,2q7vdo4icz,3.4265525296314006,-101.9785215435229,-36.81067521048361

1352274_20201_2_0,2r67zo4icz,2.126647811623051,-81.98705068644855,-59.71911458686988

4078022_20201_2_0,2r68gp4icz,-0.4175085422129286,-65.17800878764754,-46.02032814227725

2059226_20201_2_0,2sbabo4icz,0.8695429505795316,-43.287340933042486,-39.68653745787978

3754961_20201_2_0,2slqgo4icz,2.648977217618871,-85.21646429298318,-47.513676395068586

4879269_20201_2_0,2tdxso4icz,-0.45896126345492516,-99.11850218100892,-37.37954092337283

5157447_20201_2_0,2thrvo4icz,0.07194146493124401,-83.457251475762,-49.65785829591967

4707373_20201_2_0,2u15mo4icz,-1.9926356335767197,-115.87103137150476,-5.2270568489553995

4560535_20201_2_0,2u5rfn4icz,-0.6757113076159292,-138.76446723499515,-45.456402690149005

5182889_20201_2_0,2w4hen4icz,-1.5299017931655625,-121.51639845297825,-25.098907411166635

1403566_20201_2_0,2wksto4icz,0.11084649712348563,-40.59818221123206,-26.29824681852881

5862410_20201_2_0,2x1lyn4icz,-1.0861848420397298,-82.27573551688945,-39.35164729910571

2015381_20201_2_0,2y0vcn4icz,1.8402641420905639,-102.34638274431686,-34.24686584868125

3236919_20201_2_0,2zpt3p4icz,-2.1225655317124597,-62.762176231088034,-15.387843573669699

3331333_20201_2_0,30kcdp4icz,-0.7057592729882753,-79.44747542669955,-55.77627827820179

5700478_20201_2_0,32tuoo4icz,1.305820774873398,-138.5534141757567,-38.89401656775274

3031355_20201_2_0,33i7so4icz,1.746412734923447,-96.26373564713495,-53.24349143052912

2500037_20201_2_0,344ymn4icz,0.4769568405904866,-61.77631629731627,-32.45418513259543

4265811_20201_2_0,347ayo4icz,5.899858514924994,-40.4366132476124,-64.86954251381371

2269039_20201_2_0,34fyyo4icz,1.4519088400889981,-91.51370943828772,-48.936559491606374

4364219_20201_2_0,359dco4icz,0.1468476410655385,-113.79969467384433,-31.411195383409478

3453533_20201_2_0,36a9nn4icz,-2.184072984713487,-99.18088137791554,-26.68580611557283

4407962_20201_2_0,36gs3p4icz,-1.642116357506037,-70.92898354853699,-35.56008381183368

3511483_20201_2_0,36y5uo4icz,-0.003535443277528727,-103.72869354746058,-33.6361801010724

1666148_20201_2_0,37e4yo4icz,2.063958572510196,-63.77091382955851,-61.64296948198715

2084492_20201_2_0,37f1xn4icz,-1.5618317840561493,-97.80708924790133,-17.064587528849266

1623670_20201_2_0,38azuo4icz,1.5716881141344086,-74.35383837213558,-35.38625138015064

2392682_20201_2_0,38fwgp4icz,5.138231873281413,-101.83016639803358,-58.70274286771257

3110125_20201_2_0,39nlbp4icz,0.1168335658694829,-56.541553940646224,-33.54678678333521

1308789_20201_2_0,3aiwdo4icz,-0.9600613033895801,-106.90143120041549,-28.82677643954321

2470545_20201_2_0,3anwmo4icz,1.3909275389530877,-77.76043908129947,-44.626871082488876

2386952_20201_2_0,3b2isn4icz,0.2137026745838018,-76.3570838306041,-39.400064760197864

3358856_20201_2_0,3cmorn4icz,7.528099563435955,-124.8711056681297,-75.85764935830014

4385503_20201_2_0,3djlmn4icz,0.16042819305081785,-97.19436380441144,-34.76768942714129

4351712_20201_2_0,3dkaxn4icz,0.21020975533736735,-120.0495760099993,-45.29226582068313

1684803_20201_2_0,3dqeao4icz,0.6091067927596994,-102.2702259903833,-32.920166147977056

2880852_20201_2_0,3ep2bn4icz,0.9025938891904551,-39.651115079528495,-53.76886000761857

3369322_20201_2_0,3f04hp4icz,3.1966247579326366,-111.95250253763817,-52.98402352539074

1890505_20201_2_0,3fv6do4icz,2.114415907274902,-46.35522955970853,-45.08792541696292

3211122_20201_2_0,3gqwbp4icz,27.58177375099328,103.4922275822299,-169.1675725303463

2386808_20201_2_0,3ho2ko4icz,0.2316988701041109,-98.08683580817151,-35.77340569968665

5443006_20201_2_0,3i0lio4icz,4.479987033255245,-72.39803045132976,-63.659195510620364

4422648_20201_2_0,3iz4vn4icz,-4.005390756303788,-146.03161034115234,-1.823701497802901

1180351_20201_2_0,3l069n4icz,2.8375361615391648,-110.03585318255236,-42.782738539436906

2159134_20201_2_0,3m3mun4icz,-0.9226457185939199,-113.49965037919057,-41.45081683862017

4501837_20201_2_0,gjdp4p4icz,-0.360436672966334,-53.77171904013758,-37.72344726440039

/users/rhydian/anaconda3/envs/torch_env/lib/python3.7/site-packages/torch/cuda/__init__.py:52: UserWarning: CUDA initialization: Found no NVIDIA driver on your system. Please check that you have an NVIDIA GPU and installed a driver from http://www.nvidia.com/Download/index.aspx (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729006826/work/c10/cuda/CUDAFunctions.cpp:100.)
  return torch._C._cuda_getDeviceCount() > 0
  0%|          | 0/101 [00:00<?, ?it/s]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 1/101 [00:02<04:52,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 2/101 [00:05<04:50,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 3/101 [00:09<05:06,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/101 [00:12<04:57,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▍         | 5/101 [00:16<05:14,  3.28s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 6/101 [00:19<05:17,  3.34s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 7/101 [00:22<05:07,  3.27s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 8/101 [00:25<04:51,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 9/101 [00:28<04:41,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|▉         | 10/101 [00:31<04:47,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 11/101 [00:34<04:33,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 12/101 [00:37<04:32,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 13/101 [00:41<04:57,  3.38s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 14/101 [00:54<09:08,  6.30s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▍        | 15/101 [01:18<16:23, 11.44s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 16/101 [01:22<13:02,  9.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 17/101 [01:25<10:11,  7.28s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 18/101 [01:28<08:15,  5.97s/it] 19%|█▉        | 19/101 [01:34<08:30,  6.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|█▉        | 20/101 [01:38<07:11,  5.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 21/101 [01:41<06:09,  4.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 22/101 [01:44<05:30,  4.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 23/101 [01:47<04:53,  3.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 24/101 [01:50<04:36,  3.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▍       | 25/101 [01:53<04:16,  3.37s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 26/101 [01:56<04:03,  3.24s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 27/101 [01:58<03:52,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 28/101 [02:01<03:44,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▊       | 29/101 [02:04<03:37,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|██▉       | 30/101 [02:07<03:31,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 31/101 [02:20<06:58,  5.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 32/101 [02:23<05:53,  5.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 33/101 [02:26<05:08,  4.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▎      | 34/101 [02:29<04:30,  4.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▍      | 35/101 [02:32<04:01,  3.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 36/101 [02:35<03:41,  3.41s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 37/101 [02:38<03:36,  3.38s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 38/101 [02:41<03:23,  3.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▊      | 39/101 [02:44<03:20,  3.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|███▉      | 40/101 [02:47<03:12,  3.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 41/101 [02:50<03:05,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 42/101 [02:54<03:17,  3.35s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 43/101 [02:57<03:06,  3.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▎     | 44/101 [03:00<02:57,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▍     | 45/101 [03:03<02:54,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 46/101 [03:06<02:45,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 47/101 [03:09<02:40,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 48/101 [03:12<02:35,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▊     | 49/101 [03:14<02:28,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|████▉     | 50/101 [03:17<02:28,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 51/101 [03:20<02:27,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████▏    | 52/101 [03:24<02:27,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 53/101 [03:28<02:42,  3.40s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 54/101 [03:35<03:28,  4.43s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 55/101 [03:38<03:03,  3.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▌    | 56/101 [03:40<02:43,  3.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▋    | 57/101 [03:43<02:28,  3.37s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 58/101 [04:08<06:57,  9.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 59/101 [04:11<05:21,  7.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 60/101 [04:13<04:15,  6.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|██████    | 61/101 [04:16<03:29,  5.24s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████▏   | 62/101 [04:20<03:05,  4.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 63/101 [04:23<02:38,  4.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 64/101 [04:26<02:21,  3.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 65/101 [04:29<02:05,  3.49s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▌   | 66/101 [04:33<02:10,  3.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▋   | 67/101 [04:36<01:56,  3.44s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 68/101 [04:38<01:47,  3.27s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 69/101 [04:42<01:42,  3.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 70/101 [04:44<01:36,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|███████   | 71/101 [04:47<01:31,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████▏  | 72/101 [04:50<01:26,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 73/101 [04:53<01:24,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 74/101 [04:56<01:21,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 75/101 [05:06<02:09,  4.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▌  | 76/101 [05:09<01:51,  4.45s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 77/101 [05:12<01:34,  3.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 78/101 [05:15<01:24,  3.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 79/101 [05:18<01:15,  3.44s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 80/101 [05:20<01:05,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 81/101 [05:23<01:02,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 82/101 [05:27<01:04,  3.38s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 83/101 [05:30<00:57,  3.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 84/101 [05:33<00:52,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 85/101 [05:36<00:48,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▌ | 86/101 [05:39<00:45,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 87/101 [05:42<00:42,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 88/101 [05:45<00:39,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 89/101 [05:48<00:35,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 90/101 [05:51<00:33,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 91/101 [05:54<00:31,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 92/101 [05:57<00:27,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 93/101 [06:00<00:24,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 94/101 [06:03<00:20,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 95/101 [06:06<00:17,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▌| 96/101 [06:09<00:14,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 97/101 [06:12<00:11,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 98/101 [06:15<00:09,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 99/101 [06:18<00:06,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 100/101 [06:24<00:04,  4.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|██████████| 101/101 [06:27<00:00,  3.75s/it]100%|██████████| 101/101 [06:27<00:00,  3.84s/it]
Trying to load from /users/rhydian/self-supervised-project/model_weights/SSECEncodersBothBoth
==> Resuming model trained for 106 epochs...
Trying to load from ../model_weights/angle_regressor4
==> Resuming model trained for 7 epochs...
1174958_20201_2_0,1pm7pn4icz,-0.7769982743049227,-130.78785591683493,-18.10534734691258

1659565_20201_2_0,1q758p4icz,-1.418418640384254,-55.33248038456415,-53.778463349741216

2347030_20201_2_0,d0tado4icz,1.68993092072086,-90.40411542006518,-63.91843245592236

4487220_20201_2_0,1qxlzo4icz,2.0120044403447737,-84.84394820988373,-41.15359018558304

2810204_20201_2_0,1rjdcp4icz,-0.7334164267537304,-129.5719396169862,-32.168007365906746

4984465_20201_2_0,1rlicp4icz,-0.6253473678179843,-78.07336426296058,-47.45251446715787

4652300_20201_2_0,1rwktn4icz,-0.31347421873951825,-76.45902812015404,-32.415689352569245

1982861_20201_2_0,1t84ep4icz,5.302892628748836,-77.38736550397411,-63.56165673681261

4331318_20201_2_0,1tcico4icz,2.546379857076563,-73.75525803921886,-25.439480695762526

5086685_20201_2_0,1tp6bp4icz,-4.616745144785357,-103.82733814602392,-5.494416663108453

3414446_20201_2_0,1u7xho4icz,0.5117222149194796,-118.6204985217866,-46.40121461203053

4616307_20201_2_0,1ub5vo4icz,0.24051160335273594,-43.34153458721602,-42.41828556746846

5063692_20201_2_0,1v16pn4icz,3.0808796605355537,-93.62829743291212,-56.14714367906075

3412006_20201_2_0,1v7ago4icz,4.032933365267809,-61.64845997268847,-39.795988542304784

2410386_20201_2_0,1vwr3o4icz,1.043601851630375,-91.94752587191329,-46.254707367073124

4496209_20201_2_0,1whg4p4icz,-6.744483499429345,-86.06320112790453,-7.97018966554073

2497620_20201_2_0,1wrubo4icz,0.2755057881557471,-96.91275983370792,-25.837438597005885

4764247_20201_2_0,1xp3cn4icz,-0.07408132527496715,-86.4218389339417,-25.166199990357967

2948952_20201_2_0,1xq1uo4icz,59.97610138352101,156.38391871794957,-292.11461456569

5603400_20201_2_0,1xzb5p4icz,0.2833736558524497,-93.23396819422416,-32.631555116282826

4640918_20201_2_0,1xzjdp4icz,-1.722746244414909,-102.38786539817443,-29.809932539733097

4970460_20201_2_0,ofoqmn4icz,-2.4125187327108355,-107.5350202335845,-35.5574250591111

1197281_20201_2_0,1yi7ho4icz,-0.323147428287874,-102.35639073993258,-50.01080544952707

6018036_20201_2_0,1yj5qo4icz,0.09793940691911841,-41.64879486118144,-34.14374264624652

2005472_20201_2_0,1ylvzo4icz,1.5554655292390653,-72.60288539470548,-52.377871558525314

5992008_20201_2_0,1z0x8p4icz,0.13603480389371467,-77.62682432722497,-46.45462894264875

4838913_20201_2_0,1zcqso4icz,-0.06720137544707004,-114.27108186916035,-24.29192123641596

5258670_20201_2_0,1zhl4p4icz,0.050117374253304106,-125.26167823069085,-31.506100075104726

3051398_20201_2_0,20a98o4icz,-1.1519281970401072,-93.82255750362157,-25.206363047183117

4790413_20201_2_0,22ypjp4icz,0.12099111494339115,-64.0520966012578,-45.69101260164483

5027746_20201_2_0,23gado4icz,1.3854484380144514,-78.26967378665813,-63.17989850208555

1094953_20201_2_0,23r8bp4icz,1.1565007197111743,-141.04807124498214,-37.72434618149424

4555347_20201_2_0,24wign4icz,-5.708887563806518,-90.78669732325295,-2.1926825414636966

2368669_20201_2_0,260pep4icz,19.794887214031597,28.605769974915717,-114.39570253883372

3751164_20201_2_0,27a5xn4icz,-1.0878951207096579,-139.94463764301796,-23.59769772765526

3749520_20201_2_0,27ti5n4icz,0.031859312929990835,-99.51797291292283,-35.04334264784394

4105797_20201_2_0,28u1un4icz,-0.39187550389874365,-97.90409763307818,-23.90887734585003

1489071_20201_2_0,29mftn4icz,0.812340528409717,-128.8384473424472,-45.61146364722363

2960687_20201_2_0,pbzhqn4icz,0.1891298200642062,-92.93106903076398,-36.0090627683191

5571989_20201_2_0,2a85to4icz,6.249434828550509,-82.61237495939329,-39.179814963135044

4887632_20201_2_0,2ak7en4icz,-1.0228708235375263,-122.13535088075119,-39.02731756542684

4769502_20201_2_0,xq8lyo4icz,-0.4155641128526364,-83.81254612652486,-25.60628795202655

4151016_20201_2_0,2ecygp4icz,1.2770739031042555,-85.84218814888519,-24.415648582195075

4338062_20201_2_0,2exvpn4icz,-0.5844321886850818,-119.28981414075508,-39.07552987252528

3142104_20201_2_0,2fmmeo4icz,-0.5678292622934918,-57.516849094386714,-37.30651018965874

5378333_20201_2_0,2fw4mo4icz,8.097979239234768,-88.30295610253202,-84.88384365467209

3114573_20201_2_0,2gij5p4icz,20.091695284213365,-15.209901965844011,-122.16051803753948

4659691_20201_2_0,2gjkao4icz,3.1322427842030995,-142.16904960697215,-58.302460928430506

5060695_20201_2_0,2gjz5p4icz,-9.711724760890654,-130.41535784463537,23.755755381551396

3057931_20201_2_0,2j7g4p4icz,2.144547203595291,-133.84318326371138,-33.39000047685421

1600506_20201_2_0,2jfwmn4icz,-0.14718197275977565,-71.09209500059697,-35.10431796388417

2941048_20201_2_0,2jl5nn4icz,0.6465286311051687,-79.62683105673321,-38.28835941160338

3140345_20201_2_0,2m1wbo4icz,-0.922913844965407,-70.12831761094927,-32.64002299632597

1944900_20201_2_0,2m5ywo4icz,5.141314509785912,-56.672677000715595,-61.97142414839675

5204768_20201_2_0,2n90rn4icz,5.909477284610059,-88.02262561673456,-36.440967304375704

3494185_20201_2_0,2nhm3p4icz,-3.7619382523115577,-80.21873971362209,-4.024691629444646

1744190_20201_2_0,2ojwkn4icz,-2.6573067544589524,-151.2472007941606,-26.940120476610957

5824451_20201_2_0,2ougho4icz,-10.938402759804845,-150.69484024523072,39.622935924378126

4029900_20201_2_0,2p6s7o4icz,-2.948257912960034,-99.81296675323853,-13.633994229319214

2501919_20201_2_0,2pum9p4icz,-0.4985651758120912,-79.40184175413671,-44.32347495881683

2826649_20201_2_0,2qjnsn4icz,-0.32505777054581686,-40.89240693209095,-19.19765952580066

1080068_20201_2_0,2qkvhp4icz,-0.616999627627753,-62.17243919098419,-30.37075169188188

1029158_20201_2_0,2qqdyn4icz,-1.2152591007097906,-87.96431079507829,-10.015018637457985

4973580_20201_2_0,2rfe9p4icz,31.09190888791622,153.1639395155102,-225.1372643008093

2931702_20201_2_0,2rvx9n4icz,0.4569142696578863,-127.22249987642022,-51.18745429606851

2033014_20201_2_0,osnpmo4icz,-0.974306479293429,-71.26942971399882,-29.364432134746963

5584370_20201_2_0,2vn7un4icz,-0.18590351008877687,-88.6373665059956,-37.335348833283135

2562042_20201_2_0,2vsudn4icz,-0.48400265717900437,-94.14748991364317,-35.939265619191886

2246889_20201_2_0,2vxtep4icz,0.9799693215071431,-137.2923599603189,-54.266693484864575

1865844_20201_2_0,2wbl7p4icz,-0.016005490176613266,-107.6225219386717,-28.157030562249474

1114638_20201_2_0,2xx2ko4icz,-1.6020569086655476,-94.2766659940192,-20.347446688180412

2765554_20201_2_0,2y68on4icz,-5.0413182045165135,-145.6977232018238,4.070079577433972

3791424_20201_2_0,2y8hcp4icz,-3.4242042207949206,-100.92480934781847,-24.366454448826772

2205046_20201_2_0,2ye2gp4icz,-3.012973415791388,-75.78151461527105,-17.443963146513838

2444098_20201_2_0,2zrk3p4icz,0.4923265443350217,-85.29685545248006,-32.56033022665352

5943712_20201_2_0,30u5no4icz,-0.6343650477187187,-127.27567014637,-41.246136363312885

2594070_20201_2_0,32efio4icz,-0.4467047247637078,-128.92582939724346,-25.180984132287122

4509208_20201_2_0,32uasn4icz,3.521364641018698,-89.69400288422437,-38.26994714752357

2299081_20201_2_0,33twfo4icz,1.7941388220667067,-53.762869079951315,-50.65490070573651

3375796_20201_2_0,33vqfn4icz,-0.9127876915364832,-117.11361256614882,-13.71213630536485

4992540_20201_2_0,35bdyn4icz,1.886372939322071,-104.22089746197872,-45.245100725296595

2547041_20201_2_0,35p1un4icz,0.5979339294625375,-101.67963553036938,-60.23046408851752

5667146_20201_2_0,35y4mn4icz,-0.4680978889041184,-108.47355713731025,-34.59216340575318

4568022_20201_2_0,37k7wn4icz,0.2428760641765889,-50.98358985968366,-44.0376946741428

4048599_20201_2_0,37xq9p4icz,0.76106153194623,-88.27949600581647,-37.32639360219629

1328220_20201_2_0,384l5p4icz,-0.35271857880011837,-98.19481113224668,-24.01943592479732

5340595_20201_2_0,38omyn4icz,0.09981511285219226,-113.55757112929362,-50.21298017881625

4932261_20201_2_0,39c09n4icz,-6.938168539129575,-71.64277180006286,1.224720901900426

5649199_20201_2_0,39g69o4icz,-2.0921955542816733,-118.85711560082794,-21.958090970162885

2837745_20201_2_0,39t5so4icz,-4.179407445139944,-55.62352554428492,-10.899803965794618

3225487_20201_2_0,39u9cp4icz,8.378197658325787,4.457694748295921,-28.158600918151137

1051648_20201_2_0,3aim5n4icz,-1.2607142307951638,-99.52820523628907,-15.139651402600308

4833131_20201_2_0,3archp4icz,-0.0033132094904376025,-115.55646445743642,-27.78147222990765

3011318_20201_2_0,3bawpo4icz,1.3223963171150366,-62.63872678293674,-49.52408699655251

3319326_20201_2_0,3bp8to4icz,1.1825945383576224,-98.8639719573224,-56.25726364225582

2680286_20201_2_0,3caayo4icz,1.0604104838726964,-84.42286089102367,-40.19462824357649

3062657_20201_2_0,3cc09o4icz,-3.401327957193091,-106.8772721423436,-15.97048347638389

3204817_20201_2_0,3clmgo4icz,1.2322782021193643,-75.2493274177337,-47.17467830411192

3858439_20201_2_0,3ev4mo4icz,1.8723289976126154,-89.608756325477,-50.99302888348848

2915233_20201_2_0,3f6wgo4icz,-1.32835598675716,-110.10103261905982,-33.92933839311635

1112256_20201_2_0,6w4w5p4icz,0.9093114009190071,-117.92143422328618,-44.264360445037966

