9 th decile
.45
.50
/users/rhydian/anaconda3/envs/torch_env/lib/python3.7/site-packages/torch/cuda/__init__.py:52: UserWarning: CUDA initialization: Found no NVIDIA driver on your system. Please check that you have an NVIDIA GPU and installed a driver from http://www.nvidia.com/Download/index.aspx (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729006826/work/c10/cuda/CUDAFunctions.cpp:100.)
  return torch._C._cuda_getDeviceCount() > 0
  0%|          | 0/811 [00:00<?, ?it/s]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  0%|          | 1/811 [00:33<7:36:23, 33.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  0%|          | 2/811 [00:46<6:09:53, 27.43s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  0%|          | 3/811 [00:49<4:30:04, 20.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  0%|          | 4/811 [01:01<3:59:22, 17.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 5/811 [01:04<2:58:17, 13.27s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 6/811 [01:06<2:14:35, 10.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 7/811 [01:09<1:43:54,  7.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 8/811 [01:11<1:22:15,  6.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 9/811 [01:14<1:07:07,  5.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 10/811 [01:18<1:04:45,  4.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|▏         | 11/811 [01:21<55:05,  4.13s/it]  Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|▏         | 12/811 [01:23<48:16,  3.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 13/811 [01:27<50:08,  3.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 14/811 [01:30<46:00,  3.46s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 15/811 [01:32<41:37,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 16/811 [01:35<39:21,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 17/811 [01:38<40:58,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 18/811 [01:41<38:33,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 19/811 [01:43<37:01,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 20/811 [01:46<35:50,  2.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 21/811 [01:48<34:05,  2.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 22/811 [01:50<33:21,  2.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 23/811 [01:53<33:22,  2.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 24/811 [01:56<34:36,  2.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 25/811 [01:58<33:56,  2.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 26/811 [02:01<33:57,  2.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 27/811 [02:03<33:28,  2.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 28/811 [02:07<37:24,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▎         | 29/811 [02:10<36:47,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▎         | 30/811 [02:12<35:50,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 31/811 [02:15<34:49,  2.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 32/811 [02:17<34:25,  2.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 33/811 [02:20<33:27,  2.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 34/811 [02:23<35:18,  2.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 35/811 [02:26<34:58,  2.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 36/811 [02:29<37:07,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▍         | 37/811 [02:31<35:30,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▍         | 38/811 [02:34<34:17,  2.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▍         | 39/811 [02:36<33:38,  2.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▍         | 40/811 [02:39<33:03,  2.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▌         | 41/811 [02:41<32:40,  2.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▌         | 42/811 [02:44<32:04,  2.50s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▌         | 43/811 [02:46<32:46,  2.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▌         | 44/811 [02:49<32:12,  2.52s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 45/811 [02:51<31:44,  2.49s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 46/811 [02:54<32:19,  2.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 47/811 [02:56<31:58,  2.51s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 48/811 [02:59<32:42,  2.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 49/811 [03:01<32:13,  2.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 50/811 [03:04<32:04,  2.53s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▋         | 51/811 [03:06<31:42,  2.50s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▋         | 52/811 [03:10<35:10,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 53/811 [03:14<38:36,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 54/811 [03:16<37:06,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 55/811 [03:19<35:57,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 56/811 [03:21<34:22,  2.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 57/811 [03:24<33:32,  2.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 58/811 [03:26<32:58,  2.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 59/811 [03:29<32:40,  2.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 60/811 [03:32<34:50,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 61/811 [03:35<33:50,  2.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 62/811 [03:37<33:40,  2.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 63/811 [03:40<33:11,  2.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 64/811 [03:43<33:26,  2.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 65/811 [03:45<33:48,  2.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 66/811 [03:48<33:08,  2.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 67/811 [03:50<32:16,  2.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 68/811 [03:53<31:57,  2.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▊         | 69/811 [03:56<32:12,  2.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▊         | 70/811 [03:58<32:10,  2.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 71/811 [04:01<31:34,  2.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 72/811 [04:03<31:08,  2.53s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 73/811 [04:06<31:51,  2.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 74/811 [04:08<30:55,  2.52s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 75/811 [04:11<30:50,  2.51s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 76/811 [04:13<30:17,  2.47s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 77/811 [04:16<30:03,  2.46s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|▉         | 78/811 [04:18<30:39,  2.51s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|▉         | 79/811 [04:21<32:21,  2.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|▉         | 80/811 [04:24<31:45,  2.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|▉         | 81/811 [04:26<32:35,  2.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|█         | 82/811 [04:29<32:05,  2.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|█         | 83/811 [04:32<32:31,  2.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|█         | 84/811 [04:34<32:07,  2.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|█         | 85/811 [04:37<32:12,  2.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 86/811 [04:40<32:25,  2.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 87/811 [04:43<33:40,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 88/811 [04:45<32:36,  2.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 89/811 [04:48<31:52,  2.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 90/811 [04:51<32:36,  2.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 91/811 [04:54<33:04,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█▏        | 92/811 [04:57<33:37,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█▏        | 93/811 [04:59<33:46,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 94/811 [05:02<32:47,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 95/811 [05:05<32:46,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 96/811 [05:07<32:29,  2.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 97/811 [05:10<32:43,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 98/811 [05:13<33:06,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 99/811 [05:16<32:27,  2.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 100/811 [05:18<32:37,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 101/811 [05:21<32:06,  2.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 102/811 [05:26<40:48,  3.45s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 103/811 [05:29<38:29,  3.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 104/811 [05:32<36:00,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 105/811 [05:35<35:27,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 106/811 [05:37<34:17,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 107/811 [05:40<33:03,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 108/811 [05:43<33:46,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 109/811 [05:46<34:00,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▎        | 110/811 [05:50<37:31,  3.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▎        | 111/811 [05:52<35:50,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 112/811 [05:55<34:38,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 113/811 [05:58<34:21,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 114/811 [06:01<33:47,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 115/811 [06:04<33:55,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 116/811 [06:07<35:48,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 117/811 [06:10<34:44,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▍        | 118/811 [06:13<33:46,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▍        | 119/811 [06:16<33:22,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▍        | 120/811 [06:19<34:37,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▍        | 121/811 [06:22<34:03,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▌        | 122/811 [06:25<34:19,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▌        | 123/811 [06:28<33:19,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▌        | 124/811 [06:30<32:36,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▌        | 125/811 [06:33<32:20,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 126/811 [06:36<31:16,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 127/811 [06:39<31:41,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 128/811 [06:41<30:31,  2.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 129/811 [06:44<30:51,  2.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 130/811 [06:47<30:59,  2.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 131/811 [06:49<31:08,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▋        | 132/811 [06:52<31:13,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▋        | 133/811 [06:55<30:45,  2.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 134/811 [06:58<31:10,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 135/811 [07:05<45:13,  4.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 136/811 [07:09<44:54,  3.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 137/811 [07:11<40:41,  3.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 138/811 [07:14<38:24,  3.42s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 139/811 [07:17<36:35,  3.27s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 140/811 [07:20<35:36,  3.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 141/811 [07:23<34:27,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 142/811 [07:26<33:33,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 143/811 [07:29<32:46,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 144/811 [07:31<32:05,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 145/811 [07:34<32:10,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 146/811 [07:37<31:56,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 147/811 [07:40<31:27,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 148/811 [07:43<31:38,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 149/811 [07:46<31:17,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 150/811 [07:48<30:35,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▊        | 151/811 [07:51<30:40,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▊        | 152/811 [07:54<31:08,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 153/811 [07:57<32:03,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 154/811 [08:00<31:22,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 155/811 [08:03<31:01,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 156/811 [08:05<30:30,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 157/811 [08:08<30:12,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 158/811 [08:11<30:42,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|█▉        | 159/811 [08:14<31:27,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|█▉        | 160/811 [08:17<31:10,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|█▉        | 161/811 [08:20<31:12,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|█▉        | 162/811 [08:23<32:26,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|██        | 163/811 [08:26<32:51,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|██        | 164/811 [08:29<31:25,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|██        | 165/811 [08:31<30:38,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|██        | 166/811 [08:34<30:02,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 167/811 [08:37<29:26,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 168/811 [08:39<28:53,  2.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 169/811 [08:43<32:40,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 170/811 [08:47<35:36,  3.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 171/811 [08:50<33:11,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 172/811 [08:53<31:57,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██▏       | 173/811 [08:55<30:25,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██▏       | 174/811 [08:58<30:30,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 175/811 [09:01<30:30,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 176/811 [09:04<29:48,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 177/811 [09:06<30:06,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 178/811 [09:09<30:13,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 179/811 [09:13<31:50,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 180/811 [09:16<31:03,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 181/811 [09:18<30:01,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 182/811 [09:25<43:32,  4.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 183/811 [09:28<39:08,  3.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 184/811 [09:31<35:57,  3.44s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 185/811 [09:34<34:11,  3.28s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 186/811 [09:37<32:34,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 187/811 [09:39<31:39,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 188/811 [09:42<31:02,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 189/811 [09:45<31:22,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 190/811 [09:48<30:31,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▎       | 191/811 [09:51<29:50,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▎       | 192/811 [09:54<29:18,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 193/811 [09:56<28:46,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 194/811 [09:59<29:02,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 195/811 [10:02<28:22,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 196/811 [10:07<36:59,  3.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 197/811 [10:10<34:03,  3.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 198/811 [10:14<37:06,  3.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▍       | 199/811 [10:17<34:09,  3.35s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▍       | 200/811 [10:20<31:38,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▍       | 201/811 [10:22<30:26,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▍       | 202/811 [10:25<30:15,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▌       | 203/811 [10:28<29:31,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▌       | 204/811 [10:31<28:30,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▌       | 205/811 [10:34<29:28,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▌       | 206/811 [10:37<28:42,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 207/811 [10:40<29:08,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 208/811 [10:43<30:51,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 209/811 [10:46<29:57,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 210/811 [10:48<28:44,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 211/811 [10:51<28:02,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 212/811 [10:54<27:39,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▋       | 213/811 [10:57<28:26,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▋       | 214/811 [11:00<28:19,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 215/811 [11:02<28:19,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 216/811 [11:05<27:39,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 217/811 [11:09<29:48,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 218/811 [11:11<28:58,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 219/811 [11:14<28:22,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 220/811 [11:17<28:43,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 221/811 [11:20<28:06,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 222/811 [11:23<28:19,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 223/811 [11:26<28:43,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 224/811 [11:29<28:23,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 225/811 [11:31<27:46,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 226/811 [11:34<27:34,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 227/811 [11:37<26:47,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 228/811 [11:40<27:08,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 229/811 [11:43<27:46,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 230/811 [11:46<27:42,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 231/811 [11:48<27:26,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▊       | 232/811 [11:51<28:09,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▊       | 233/811 [11:54<28:03,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 234/811 [12:00<37:05,  3.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 235/811 [12:03<33:55,  3.53s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 236/811 [12:07<33:36,  3.51s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 237/811 [12:09<31:16,  3.27s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 238/811 [12:12<30:00,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 239/811 [12:15<29:04,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|██▉       | 240/811 [12:18<28:09,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|██▉       | 241/811 [12:21<28:06,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|██▉       | 242/811 [12:24<27:44,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|██▉       | 243/811 [12:26<27:25,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|███       | 244/811 [12:29<27:14,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|███       | 245/811 [12:32<26:33,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|███       | 246/811 [12:35<26:19,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|███       | 247/811 [12:38<26:43,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 248/811 [12:40<26:28,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 249/811 [12:43<26:08,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 250/811 [12:46<26:06,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 251/811 [12:49<26:16,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 252/811 [12:51<25:53,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 253/811 [12:54<25:47,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███▏      | 254/811 [12:57<25:51,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███▏      | 255/811 [13:01<30:07,  3.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 256/811 [13:04<28:12,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 257/811 [13:07<27:23,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 258/811 [13:09<26:49,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 259/811 [13:12<26:13,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 260/811 [13:15<26:05,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 261/811 [13:18<25:41,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 262/811 [13:21<25:36,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 263/811 [13:23<25:59,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 264/811 [13:26<25:42,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 265/811 [13:29<26:13,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 266/811 [13:32<26:52,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 267/811 [13:35<25:55,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 268/811 [13:38<26:02,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 269/811 [13:41<25:51,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 270/811 [13:43<25:19,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 271/811 [13:48<29:32,  3.28s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▎      | 272/811 [13:51<28:13,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▎      | 273/811 [13:53<27:13,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 274/811 [13:57<28:14,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 275/811 [14:00<27:08,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 276/811 [14:08<41:36,  4.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 277/811 [14:12<38:35,  4.34s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 278/811 [14:15<34:49,  3.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 279/811 [14:17<31:32,  3.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▍      | 280/811 [14:21<30:58,  3.50s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▍      | 281/811 [14:24<29:37,  3.35s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▍      | 282/811 [14:26<28:03,  3.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▍      | 283/811 [14:29<27:16,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▌      | 284/811 [14:33<29:42,  3.38s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▌      | 285/811 [14:37<30:09,  3.44s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▌      | 286/811 [14:40<28:58,  3.31s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▌      | 287/811 [14:43<27:34,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 288/811 [14:46<26:35,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 289/811 [14:48<25:45,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 290/811 [14:51<25:21,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 291/811 [14:54<24:40,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 292/811 [14:57<24:17,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 293/811 [14:59<23:53,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▋      | 294/811 [15:02<24:13,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▋      | 295/811 [15:05<24:33,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▋      | 296/811 [15:08<23:57,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 297/811 [15:11<23:57,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 298/811 [15:13<24:01,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 299/811 [15:16<23:55,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 300/811 [15:20<25:37,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 301/811 [15:24<29:25,  3.46s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 302/811 [15:27<28:07,  3.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 303/811 [15:30<27:03,  3.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 304/811 [15:58<1:28:56, 10.53s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 305/811 [16:11<1:36:43, 11.47s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 306/811 [16:24<1:39:35, 11.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 307/811 [16:29<1:22:46,  9.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 308/811 [16:32<1:04:10,  7.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 309/811 [16:35<53:19,  6.37s/it]  Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 310/811 [16:38<44:05,  5.28s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 311/811 [16:41<37:47,  4.53s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 312/811 [16:44<33:19,  4.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▊      | 313/811 [16:47<30:44,  3.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▊      | 314/811 [16:50<28:52,  3.49s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 315/811 [16:52<27:13,  3.29s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 316/811 [16:56<28:26,  3.45s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 317/811 [16:59<27:58,  3.40s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 318/811 [17:12<50:58,  6.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 319/811 [17:16<44:51,  5.47s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 320/811 [17:20<40:47,  4.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|███▉      | 321/811 [17:22<34:47,  4.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|███▉      | 322/811 [17:25<30:57,  3.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|███▉      | 323/811 [17:28<29:32,  3.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|███▉      | 324/811 [17:31<27:27,  3.38s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|████      | 325/811 [17:34<25:41,  3.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|████      | 326/811 [17:37<25:02,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|████      | 327/811 [17:40<24:22,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|████      | 328/811 [17:42<23:40,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 329/811 [17:45<23:05,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 330/811 [17:48<22:55,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 331/811 [17:51<23:11,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 332/811 [17:54<22:56,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 333/811 [17:56<22:32,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 334/811 [18:02<30:08,  3.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████▏     | 335/811 [18:05<28:10,  3.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████▏     | 336/811 [18:08<26:08,  3.30s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 337/811 [18:11<24:37,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 338/811 [18:14<24:01,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 339/811 [18:17<23:25,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 340/811 [18:19<23:02,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 341/811 [18:22<22:08,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 342/811 [18:25<22:01,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 343/811 [18:28<22:00,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 344/811 [18:30<22:05,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 345/811 [18:33<22:21,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 346/811 [18:38<25:45,  3.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 347/811 [18:40<24:12,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 348/811 [18:44<23:59,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 349/811 [18:46<22:39,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 350/811 [18:49<22:19,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 351/811 [18:52<21:39,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 352/811 [18:54<21:17,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▎     | 353/811 [18:57<21:23,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▎     | 354/811 [19:00<21:57,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 355/811 [19:03<22:45,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 356/811 [19:06<22:08,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 357/811 [19:09<22:04,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 358/811 [19:12<21:38,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 359/811 [19:14<20:45,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 360/811 [19:17<21:00,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▍     | 361/811 [19:20<20:46,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▍     | 362/811 [19:23<20:34,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▍     | 363/811 [19:25<20:44,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▍     | 364/811 [19:28<20:52,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▌     | 365/811 [19:31<20:47,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▌     | 366/811 [19:35<22:47,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▌     | 367/811 [19:39<25:54,  3.50s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▌     | 368/811 [19:42<24:51,  3.37s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▌     | 369/811 [19:45<23:03,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 370/811 [19:48<22:28,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 371/811 [19:52<25:14,  3.44s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 372/811 [19:55<24:31,  3.35s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Trying to load from /users/rhydian/self-supervised-project/model_weights/SSECEncodersBothBoth
==> Resuming model trained for 106 epochs...
Trying to load from ../model_weights/angle_regressor4
==> Resuming model trained for 7 epochs...
5700839_20201_2_0,gi9rto4icz,3.1631022442811267,-88.25901182779569,-52.09079432875778

1372536_20201_2_0,giclep4icz,2.2439597923862244,-54.58316348486329,-50.858891958173416

3600797_20201_2_0,gifqtn4icz,1.5499603735827496,-92.47066373570817,-39.29791723923702

1303913_20201_2_0,gijeon4icz,-3.9708856467714755,-128.01537080470848,-5.994676453979025

2297775_20201_2_0,gijw7p4icz,2.317563425816562,-120.5302371210959,-42.24461747644078

1777961_20201_2_0,gimfko4icz,-0.17802584354616952,-94.31524678717372,-44.154503923536694

4763048_20201_2_0,ginj4o4icz,-4.768632799978924,-134.109917609187,-9.911010869148825

2638462_20201_2_0,giqlbo4icz,-1.1991781724407746,-111.36846006952811,-34.8731565185395

3475800_20201_2_0,gir1oo4icz,1.3718719021930188,-96.18445034893873,-40.34106127674161

4549338_20201_2_0,giroep4icz,-0.19532152861002583,-67.55150422684693,-40.38953468742491

2008574_20201_2_0,giwken4icz,0.5197508917361756,-117.08108606397982,-39.51569892171118

1857193_20201_2_0,gixfkn4icz,-1.637832034219038,-79.93374472669691,-16.920502094059145

1170890_20201_2_0,gj3r4p4icz,-0.24086499806268175,-64.63112209728808,-30.44953882416698

5898210_20201_2_0,gj4jeo4icz,-1.4718758240711896,-135.68837410186086,-11.921717906078527

4401457_20201_2_0,gj4v4p4icz,1.1625479527959197,-109.53349435954794,-39.70381463994744

5585477_20201_2_0,gj9pbp4icz,3.1176706848345095,-65.29240251201406,-69.41934044048493

1584991_20201_2_0,gjokun4icz,-2.8212811358044685,-96.83944246897988,-28.500487338908556

2583477_20201_2_0,gjqgjp4icz,0.7178311927837194,-72.95085121087746,-30.687885424395006

2796414_20201_2_0,gjv9kn4icz,-3.7251072269646657,-105.21713141318384,-19.254702510919984

3881416_20201_2_0,gk0kfp4icz,1.0283847981769354,-99.32158850338402,-61.797088430455204

6003757_20201_2_0,gk36jp4icz,-1.4980010651459015,-112.49475056557833,-33.04411756978854

4574027_20201_2_0,gk8m4p4icz,1.7643043528112745,-138.6131315608831,-47.53815344983431

1050470_20201_2_0,gka6tn4icz,1.0138149077261063,-131.8162267867944,-28.360358074348355

3220052_20201_2_0,gkcfco4icz,0.5673859375240767,-70.29486409592468,-44.21936733027964

3940646_20201_2_0,gkdmao4icz,-0.5297541546635258,-99.22497174851495,-38.01985783186933

5949647_20201_2_0,gkg9jp4icz,1.7708757101691255,-62.46564459371538,-41.02475961009665

2278372_20201_2_0,gkh8vo4icz,0.7086189017369985,-62.42173826678996,-42.66678151978246

2259155_20201_2_0,hl59un4icz,3.6999039921165746,-53.914008558481584,-81.40864051486449

5439595_20201_2_0,gkshgp4icz,-2.4912439666113593,-128.7033882660876,-39.542843700228815

3046156_20201_2_0,gkuq0o4icz,1.473967454656882,-75.46804027814781,-37.64594164169385

4472000_20201_2_0,gkwyvo4icz,-0.8501615657031432,-47.01656711268569,-30.006139161054563

1143926_20201_2_0,gkx2dp4icz,-2.0088127291035396,-107.72774629681666,-32.71783144312943

2718029_20201_2_0,gkyo9o4icz,-4.948352144242554,-106.9700042180041,-9.424410510994846

2108305_20201_2_0,gl450p4icz,-1.9855765202495312,-69.56619603795852,-24.560967433786516

2307795_20201_2_0,gl56bn4icz,-2.6114797408353274,-112.16913713432095,-37.01439743622093

2687499_20201_2_0,gl72so4icz,-1.3027622704178217,-71.64457003205061,-32.43511030732758

4383291_20201_2_0,gldoln4icz,-6.3356201484278,-119.11840967717743,-7.7310671401772595

2541859_20201_2_0,gldv3o4icz,-0.9984077002578392,-93.8512971500835,-20.65430397179449

1207037_20201_2_0,glezrn4icz,-2.510862927148397,-81.28812074989852,-35.533208171133225

4806276_20201_2_0,glmsbo4icz,-0.12108555008001395,-79.50176765895378,-39.23316240594012

3994761_20201_2_0,gloiln4icz,2.5023982847403388,-76.05671554422943,-35.78258453601086

3735418_20201_2_0,glqgxo4icz,0.8404085303694865,-63.21146146018012,-53.68778525153874

2888840_20201_2_0,glv39n4icz,-0.6449275540323499,-113.07139731476497,-23.641156689093265

4409834_20201_2_0,glz48n4icz,-0.31143348841845137,-113.443825369764,-11.161346395100196

5495802_20201_2_0,gm26wo4icz,-0.5833649875447088,-106.75897936340351,-18.762472624232146

3217483_20201_2_0,gm62rn4icz,3.0428936381418,-79.21070098416286,-51.7141662094451

4456978_20201_2_0,gm7j3p4icz,0.40901089881888714,-78.19891658962499,-44.5933571651985

4535361_20201_2_0,gmadwo4icz,0.6048512704738279,-91.14327384851183,-34.787817203929876

5972144_20201_2_0,gmd9jn4icz,0.22110544683513353,-63.450364514267505,-41.02189804224267

5647300_20201_2_0,gmhsto4icz,-6.504868857200096,-106.96955848495298,-1.417477443121669

5240672_20201_2_0,gmr0mn4icz,2.1120168922976412,-94.81960570920842,-51.245454887995095

1571722_20201_2_0,y25p7p4icz,1.3326514926718982,-62.33040028230073,-43.59261113312952

4371287_20201_2_0,gmwreo4icz,-3.1205179088275457,-130.6324706151707,-33.34062699321345

1199930_20201_2_0,gmyyjn4icz,-1.5452524299946435,-102.92028380868499,-23.591861953262068

4976775_20201_2_0,gmz13o4icz,-1.663722975424886,-103.43195986772056,-6.703107419299215

5223103_20201_2_0,gn0fun4icz,-0.498723037371349,-103.13115737086196,-33.98291186439086

4391131_20201_2_0,gn0vao4icz,5.124557790035076,-5.847961846591147,-64.02120811203386

4999363_20201_2_0,gn16yo4icz,-0.45475072416942164,-82.6762441437807,-44.54223549059314

5123262_20201_2_0,gn3ebo4icz,1.3999047458046139,-63.166074647041256,-19.87082424721241

2126898_20201_2_0,gn3evn4icz,2.483646676883993,-112.80715860674866,-44.715684891923104

5664848_20201_2_0,gn55fp4icz,-0.3974329590616063,-69.06038873027396,-39.04048853849679

4981218_20201_2_0,gn6qap4icz,-1.7075139212867663,-145.0733321483728,-10.79671385243519

4837056_20201_2_0,gna23o4icz,0.06361242761777498,-62.775325774075384,-40.040631846585214

4268384_20201_2_0,gnazen4icz,-2.1396640166825995,-77.41998347586821,-35.65723651890998

2334572_20201_2_0,gnbtun4icz,2.5665455362711596,-75.80913947351755,-48.6918038968637

1961744_20201_2_0,gnc8on4icz,-1.6396126717893884,-91.90352421391671,-14.931550761423324

4990759_20201_2_0,gndqwn4icz,-2.6651484627274633,-131.9740880449622,-18.91996607152616

4966616_20201_2_0,gnenbo4icz,-1.9893336734040032,-93.94798978265442,-24.23617741879984

4037552_20201_2_0,gngvxo4icz,-2.195358826167636,-89.7699365464224,-13.483128835545912

1734700_20201_2_0,gnn97o4icz,0.18025509798537923,-83.88854408409554,-48.09590069620299

1010009_20201_2_0,gnv2ro4icz,8.086498661285479,-34.67136322825894,-84.12871776692712

4876593_20201_2_0,gnwtfp4icz,-0.007119894800607103,-84.23141128393536,-27.37151697621104

5135465_20201_2_0,gnx9lo4icz,5.81527579083483,-68.7898474969125,-74.06209157182937

4119583_20201_2_0,go0dhp4icz,-3.150730937131397,-109.0494961490557,-23.450778475313513

3019598_20201_2_0,go52so4icz,-4.313245431777631,-141.28598720964968,-8.807991224067024

2373382_20201_2_0,go5nxn4icz,-1.200236699492407,-101.84132163321172,-33.19831465381593

2202244_20201_2_0,go5u3p4icz,-2.5942856536625074,-92.50525084905985,-4.436369443709481

5107551_20201_2_0,goejto4icz,0.16843589834166073,-93.9328863966227,-25.90292050696459

2269670_20201_2_0,gognto4icz,3.146294954912173,-94.21597622990953,-61.34499772816632

5782111_20201_2_0,gol46n4icz,-0.12489533941985068,-111.97045442713738,-31.313911857109588

5461277_20201_2_0,gopwro4icz,2.7156826862135004,-37.6687137547317,-55.554427046259164

2729777_20201_2_0,goq2fn4icz,-1.6851706352386076,-106.71812284240679,-18.181114339767902

2094846_20201_2_0,gor1lo4icz,6.426734652484501,-42.33107401944767,-77.41758180063371

5650086_20201_2_0,got0do4icz,-1.6799792681031827,-88.24377643778803,-33.54096922667287

3112427_20201_2_0,goxnvo4icz,-0.09954130538734382,-93.60733596113096,-33.52821169959701

1213372_20201_2_0,goz42p4icz,0.29152217172091666,-125.4715904372533,-68.6265566055216

4491230_20201_2_0,gozbfn4icz,0.25474519748879376,-120.55056941423683,-25.716689469484606

2208725_20201_2_0,gp1jgp4icz,-0.07448820590501604,-76.3570993122627,-34.93463672789939

2856598_20201_2_0,gp5gfo4icz,-1.6871046711078954,-128.8345722901965,-27.80393680279525

4335649_20201_2_0,gp6l7p4icz,-0.28232128526668104,-92.5791115717773,-35.369279215762035

5955116_20201_2_0,gpgc6n4icz,0.5932699404729146,-93.88171377160376,-27.401961467229796

1566168_20201_2_0,gpj6xn4icz,0.3693700123968029,-104.1826154558419,-48.10807121498374

4213103_20201_2_0,gpoign4icz,-3.438993134131485,-92.89758079415,-17.62461140614346

1872839_20201_2_0,gpq8xo4icz,-3.4938140211873336,-124.89860807100354,-25.511773264198666

4546663_20201_2_0,gprkyn4icz,-0.1591108353056572,-80.06331203435931,-33.815164439351534

4995644_20201_2_0,gpruto4icz,2.208946431864255,-50.449684444166394,-40.36768780013645

1424914_20201_2_0,gptuko4icz,0.44825951018486904,-89.51400656605136,-20.598172019270265

4331826_20201_2_0,gpw3un4icz,2.496676472763819,-110.5861587490711,-43.90646147560142

2065567_20201_2_0,gpxcgn4icz,-4.653458373128822,-125.98314926413323,-9.44742031133373

4361686_20201_2_0,gpxvkn4icz,0.4350364326315085,-81.56119089493535,-27.947387152255573

1682675_20201_2_0,gpxwmo4icz,2.169459379930723,-106.8378683565609,-54.0026160763466

2952480_20201_2_0,gq2dho4icz,-1.348925087423431,-109.18246698440143,-44.12367432069583

1114940_20201_2_0,gq4gho4icz,-0.3235705934243459,-111.04534953032245,-27.548900807681946

3935658_20201_2_0,gqegip4icz,-2.8816202641926285,-125.53900966968115,-4.970074938070383

4606812_20201_2_0,gqewin4icz,1.1212347137361567,-77.24064468153782,-72.59759157852096

3104674_20201_2_0,gqfoyn4icz,-1.382770076871455,-129.31061815772543,-15.249835913292415

5838774_20201_2_0,gqh0gp4icz,1.6089325633710398,-126.14261223007344,-49.080066785040145

2130449_20201_2_0,gqi4fn4icz,0.47719493230221394,-102.47660375498663,-38.8935632910935

2947906_20201_2_0,gqkrao4icz,-1.1233591913604601,-113.15526821445519,-19.506311521601248

3821035_20201_2_0,gql9uo4icz,-3.2968288327612636,-76.91775213012954,-22.72973906663475

1694790_20201_2_0,gqlzhp4icz,1.315427156589915,-111.68926634586754,-63.84801549698739

5434798_20201_2_0,gqofwo4icz,-1.362229415159476,-95.02629265479231,-28.5193005826914

5760040_20201_2_0,gqvbcp4icz,-0.1198740426069743,-124.28155721515049,-50.907056928687695

4712792_20201_2_0,gqwmeo4icz,2.2553463845767205,-97.13073323610331,-26.980061701488324

5701424_20201_2_0,gqyumo4icz,-2.3683145101096708,-129.16335583142293,-16.22052460762106

3540273_20201_2_0,gr7uro4icz,-0.9969913130249253,-62.9186966907169,-39.871393680692165

4213827_20201_2_0,gr8dho4icz,1.2167096101019381,-56.64982979163409,-33.97725344778006

4486321_20201_2_0,gr8j0p4icz,0.23052038829749866,-51.98602541919212,-44.62455798506923

3879225_20201_2_0,gr9kan4icz,-0.21052224903461905,-93.18477802807237,-31.96036656059924

4269079_20201_2_0,gr9lpo4icz,-0.8012948103868645,-66.56881126703618,-29.576931139709984

3908021_20201_2_0,grd4dn4icz,-1.7137175532751543,-108.13444739104389,-31.466664359796212

3584847_20201_2_0,grf8bo4icz,-0.5713223101505897,-124.08143960080506,-22.325398910863356

1514412_20201_2_0,grimcp4icz,-0.36063799882602854,-85.29488280054122,-15.525153450890613

3940943_20201_2_0,grizwn4icz,1.1007672072299073,-110.75072370748313,-40.40199531128496

1368931_20201_2_0,grp5cn4icz,0.6321717411961234,-115.85609034525103,-39.244341287273016

1870904_20201_2_0,grpa6p4icz,1.6292891700210805,-86.95928803250462,-41.79112397629592

1631853_20201_2_0,grqyip4icz,1.8490031814564811,-90.75084097051385,-63.88926484760144

5778124_20201_2_0,grua8p4icz,-0.8173804123628046,-136.93405126174306,-21.984603982009588

3690221_20201_2_0,gs1qho4icz,-0.03703087704098083,-63.00568440483647,-33.69207911982505

3599011_20201_2_0,gs94in4icz,-1.2412359059475029,-88.75180978321137,-38.14042304807853

3588197_20201_2_0,gs9hno4icz,-0.3448288147982292,-68.4398735583944,-36.3897379818346

1319410_20201_2_0,gsa0cp4icz,-1.865737781241262,-136.51172425837137,-17.220324936767582

4196229_20201_2_0,gsck5o4icz,0.45892935858542383,-69.23939825434246,-40.89989391467108

1870370_20201_2_0,gsdbco4icz,3.6157594770511965,-69.3748691475628,-64.52968102373006

2321207_20201_2_0,gsdiso4icz,-18.620518677525368,-173.194668003003,87.47713489830414

2122027_20201_2_0,gse9so4icz,-0.16836358457597633,-116.39156360025211,-38.33017411889601

2119073_20201_2_0,gsi12p4icz,0.3961178300885406,-101.9825459737996,-44.11196037746315

3184812_20201_2_0,gslxwn4icz,1.0702543953609784,-125.02770080922306,-49.54040974342304

3918303_20201_2_0,gsqt7o4icz,0.26136097519482554,-83.62393285697684,-35.836471589215236

5926597_20201_2_0,gsrzuo4icz,1.7693778261071702,-59.53641907747732,-36.965530079826905

5504227_20201_2_0,gsy07p4icz,-0.275078207931801,-76.3118533655927,-47.806940337188635

4590423_20201_2_0,gsz57o4icz,-0.03547422543473251,-95.20910185995103,-38.863640759891766

2729640_20201_2_0,gszpfp4icz,-2.6134814036911793,-121.66980045906485,-5.504391475828228

5988840_20201_2_0,gszrjo4icz,0.2835494009459665,-94.11986392910916,-46.454095317515225

1343668_20201_2_0,gt2t2p4icz,2.722808124758249,-133.65144570179666,-35.728567316057564

5849635_20201_2_0,gt4dln4icz,1.298062627610639,-82.46698580876983,-45.32467680831783

2580304_20201_2_0,gt81mo4icz,-1.2915610247371279,-77.1254686257453,-37.71274363838516

4395191_20201_2_0,gt81xn4icz,1.850774843314405,-108.57177150339709,-51.08991022684775

3296425_20201_2_0,gt951o4icz,-0.627819411727487,-48.95755929477153,-48.6909348925885

4927784_20201_2_0,gt9vxo4icz,1.62957693186942,-62.237046717461965,-45.82661164135649

1213458_20201_2_0,gtmzep4icz,-2.0501829867701757,-89.76981651656814,-38.37606039852166

3615271_20201_2_0,gttumn4icz,2.8096852701543718,-80.19791405216134,-48.83106187303514

5891264_20201_2_0,gtybrn4icz,-2.2201340234783187,-103.8799724674331,-28.200018415274897

2255754_20201_2_0,gtznqn4icz,0.7412098641954229,-78.47384569049188,-45.25691567864972

3962319_20201_2_0,gu70gn4icz,-3.043043235344219,-131.39798544100142,-13.71101104157033

1588094_20201_2_0,gu7vcn4icz,1.0850215882370196,-91.6356150947428,-43.80533441562953

2875262_20201_2_0,gu9avn4icz,-0.4730036991727113,-50.03063830080873,-23.30605149906286

5351072_20201_2_0,guay2p4icz,0.9898388265573473,-77.95224146356927,-33.29901158591041

2732646_20201_2_0,guc2wn4icz,-4.8199215992324556,-86.19061514638247,-15.964653688453737

4047930_20201_2_0,guch5o4icz,-0.9280722655968449,-118.68054579611805,-39.89641012538927

4381758_20201_2_0,gue45p4icz,-3.4733067541533744,-84.1952688555343,-13.486596804054898

5288080_20201_2_0,guggen4icz,1.9284641490115721,-88.13402831383235,-36.557658361487015

2677779_20201_2_0,gugqhp4icz,-0.43649288029513006,-118.62464254467417,-23.430435196456784

4153542_20201_2_0,guktco4icz,4.3142474331906735,-109.57561418234764,-51.37109047559724

3448085_20201_2_0,guoxep4icz,0.9355859683147604,-91.97859925660708,-42.83639702889401

2336847_20201_2_0,guq5ho4icz,3.0979773954764744,-73.43843669013506,-43.96152195304364

3024953_20201_2_0,gusaqo4icz,-2.307209775436214,-153.1442103678703,-14.362799201827215

3367720_20201_2_0,gutnvo4icz,-0.381904633200543,-52.17635470205212,-55.833215580688815

4164957_20201_2_0,guwlfo4icz,0.8346342798213483,-114.27855095084729,-38.63221262288171

3033400_20201_2_0,guz0bo4icz,0.13927389387524164,-104.26670531667355,-18.960186301598384

1754284_20201_2_0,gv08kn4icz,-0.5370288573040025,-65.36127698983333,-34.58380354574196

4319068_20201_2_0,gv5m5o4icz,-1.7016262346030964,-74.92043019283301,-35.20263263025561

4175253_20201_2_0,gv7khp4icz,-0.32179703074749816,-115.61191422427135,-21.494495380304386

1995315_20201_2_0,gv7tmo4icz,-0.7444994110577074,-88.18543997551913,-28.936695132686495

4290763_20201_2_0,gvb3ko4icz,1.1117145104482407,-65.74013719625654,-38.335595190812484

1692118_20201_2_0,gvjdyo4icz,-6.528790289146174,-165.44972728445103,-4.665682591310215

5521355_20201_2_0,gvki8p4icz,3.6656471018356407,-61.64849907115914,-58.061650265992654

2451982_20201_2_0,gvnien4icz,3.9380091302662414,-100.34036923235146,-55.15605099274029

3284695_20201_2_0,gvsv8p4icz,-3.3281100067522664,-141.86581295492525,-35.79379035195457

2545905_20201_2_0,gvu9go4icz,2.781571397815165,-121.96761911364118,-33.277207925118276

2239140_20201_2_0,gvuhko4icz,0.7721661596764656,-126.82180460922672,-36.25069319205325

1337789_20201_2_0,gw0evn4icz,10.7676087001301,-71.8425578316704,-83.03217731002755

4051108_20201_2_0,gwdeip4icz,0.40875775307764545,-88.14306676269806,-35.58367993591159

1753658_20201_2_0,gweutn4icz,1.5465864758391743,-137.57491330549124,-63.21103006598982

5951723_20201_2_0,gwhk1o4icz,-1.059346977846743,-129.57512279308818,-45.70767223336571

2845810_20201_2_0,gwninn4icz,1.651928191957172,-110.645744650068,-52.05933275497334

4486415_20201_2_0,gwqyko4icz,7.0998820817140365,-114.37011966808532,-73.34000125541756

1674056_20201_2_0,gwte8p4icz,0.49983268185597657,-66.92233528256673,-44.3825900338595

5975296_20201_2_0,gwx7pn4icz,1.285138726926821,-87.45874630572118,-45.857678513504354

2441359_20201_2_0,gwxken4icz,-0.21443824989785845,-87.16508432803727,-59.5008612985546

1368299_20201_2_0,gwzipn4icz,3.5137440764021703,-95.50406426030182,-50.165704048916155

2696090_20201_2_0,gx0lrn4icz,-1.1218409197407897,-95.5611881813783,-35.3805507742115

1216408_20201_2_0,gx5xvo4icz,-0.17605396871104276,-91.46215733254698,-23.19710984314932

1723180_20201_2_0,gx9hjp4icz,0.1504425542757109,-106.54255266566335,-60.44241743236543

5788360_20201_2_0,gxehpo4icz,-0.11596142577577484,-76.97338625289018,-37.09616613004236

5200609_20201_2_0,gxgmap4icz,2.031808138175429,-52.29971395352311,-53.57363631612162

3058633_20201_2_0,gxgorn4icz,-0.8512169830696532,-132.919903161838,-47.78948306959113

2930917_20201_2_0,gxizin4icz,-0.018192288223810516,-88.81464787462974,-58.12014325145901

5074174_20201_2_0,gxjtwn4icz,-1.9752769818040747,-99.0823551148807,-29.100367733293936

1506143_20201_2_0,gxq15o4icz,15.101616609244514,4.9857161812614095,-81.6954040566306

4516121_20201_2_0,gxr7eo4icz,10.072344601804051,-60.01321666159296,-65.46857260559685

5034590_20201_2_0,gxwgco4icz,0.013584457979562472,-89.8318174621295,-47.52778973900716

1517602_20201_2_0,gxy6to4icz,-0.8195782854007675,-79.34852810922283,-33.84970781868694

1580121_20201_2_0,gy5mwn4icz,2.8755647566564404,-60.27733068680152,-43.02853396001001

2376187_20201_2_0,gy9ero4icz,-2.308640262049227,-74.48589800075678,-68.05065628423827

3422464_20201_2_0,gybeqn4icz,1.4715712435733102,-78.89412562310537,-46.79311388841293

4460386_20201_2_0,gydtvo4icz,-1.2969378757956638,-100.39670170958391,-45.07365538174574

3495366_20201_2_0,56ffbo4icz,-2.158981797505144,-60.12984737356987,-5.4331473399548

4691288_20201_2_0,gyidbn4icz,3.3551059372165364,-94.42578122988078,-36.77936504218641

2351913_20201_2_0,gyjefp4icz,5.723462638048219,-77.91936417350209,-68.14398223640201

4044895_20201_2_0,gyo1sn4icz,1.0223155931552006,-87.04154484268827,-38.73770984697288

5970787_20201_2_0,gyqrho4icz,0.8696991310405758,-80.25042771020622,-28.91848340183043

5497405_20201_2_0,gysovn4icz,-2.9764651333673386,-85.85703138601318,-25.90733242336843

2695451_20201_2_0,gyv6dp4icz,-1.528091986779363,-106.90838360372422,-25.331818083705457

5172261_20201_2_0,gz039p4icz,0.5757874823687484,-98.3280892898315,-44.329782526889545

2326152_20201_2_0,gz2z3o4icz,-2.1468420481428203,-90.53819699123875,-16.197886769455806

5366167_20201_2_0,gz3vip4icz,2.617855724143743,-115.63547783960587,-46.800798632518166

5839444_20201_2_0,gz4tfo4icz,2.2018375115669326,-82.54887773067699,-48.75143551922265

4477685_20201_2_0,gza7xo4icz,-2.477125107190525,-80.30308451185618,-26.20567122982939

5233935_20201_2_0,gzmj0p4icz,-6.401569422986345,-81.20960127372933,12.322526072017268

1869659_20201_2_0,gzmq3p4icz,3.0076791526950273,-99.48159943709419,-56.24167662173906

2753971_20201_2_0,gzupen4icz,-0.652559574840007,-55.71752108917525,-52.80608758004995

5545840_20201_2_0,h05x8o4icz,-8.47559376207065,-148.85884668685102,-8.318539593415068

5854474_20201_2_0,h06n7p4icz,-1.0391575143216953,-67.87263455528753,-21.9238463244387

1590852_20201_2_0,h08pgp4icz,2.505975466355528,-97.09986976331584,-33.794238631890806

1199293_20201_2_0,h08wpn4icz,0.6111013307376302,-118.18170780451578,-33.42128825312899

2885400_20201_2_0,h0ccxn4icz,-0.4165403024543522,-95.97477576342126,-36.51328517644771

5780017_20201_2_0,h0cquo4icz,-3.50043049006287,-70.18679275470714,-21.518114675750752

5954289_20201_2_0,h0i2eo4icz,-0.48375607954972016,-115.90406081600375,-36.78058977830494

5233708_20201_2_0,h0imyn4icz,1.115994927399698,-99.68772457552768,-60.38920458139624

4161575_20201_2_0,h0n55o4icz,0.9994075348817318,-74.32856821938972,-57.13636116218254

2841784_20201_2_0,h0tn2p4icz,-8.771585158899693,-64.52602478462995,8.85134647003342

3199687_20201_2_0,h0v5no4icz,-0.8843068689557557,-67.34290033559111,-33.06449201320186

1273195_20201_2_0,h0wegn4icz,0.5417512460040317,-113.44995758260691,-29.112623660460144

3770445_20201_2_0,h131oo4icz,-1.3973312914548606,-90.40987136874918,-27.389795732037285

3478875_20201_2_0,h14zhp4icz,0.7751414992100315,-70.29120005791987,-54.62691532268987

1716432_20201_2_0,h19qcp4icz,1.1601492815888084,-98.94809687900639,-53.8550893943992

2362607_20201_2_0,h1cr6o4icz,-0.17559366222564862,-132.99816453887544,-36.43404624262368

4276113_20201_2_0,h1g8bp4icz,1.7226479185369716,-115.58030539661621,-37.83798476258829

1367146_20201_2_0,h1gc8o4icz,0.2805823907313281,-60.336429888691214,-36.72775973373773

4027021_20201_2_0,h1i78p4icz,1.7014143658786547,-133.12775884570925,-44.63438926499205

1078182_20201_2_0,h1kq9p4icz,2.038646956107858,-87.88329133058383,-36.32626364323639

1340896_20201_2_0,h1ozrn4icz,0.07864442338464007,-69.09644897325265,-36.42563995546726

2931400_20201_2_0,h1tk5o4icz,0.392665208579901,-80.55858141893586,-19.638245057829337

1943498_20201_2_0,h1xrao4icz,-1.731372991912684,-127.4375933888276,-18.487657299415062

5640924_20201_2_0,h1zcho4icz,0.4564623952319588,-63.72674772067808,-42.412508435606554

1789273_20201_2_0,h23qzo4icz,11.760221483548616,8.471674578569292,-93.60362164529741

4997730_20201_2_0,h24zfo4icz,-1.3492441162342546,-84.82979592219735,-20.559351448355372

2194944_20201_2_0,h27eip4icz,0.0249993651996539,-93.99781532843059,-30.99878749280478

5068258_20201_2_0,h2arvo4icz,1.0646271780696144,-50.26080368250507,-36.04495639716548

3240853_20201_2_0,h2coun4icz,2.3284603432596285,-71.46555786097278,-46.30006435943898

3525476_20201_2_0,h2d10p4icz,1.840973710575959,-39.9646531530245,-31.808458286785807

3483361_20201_2_0,h2dfkn4icz,-0.8410097451200464,-60.791676792838814,-30.286728133874675

3923972_20201_2_0,h2ebap4icz,0.18667634791668067,-63.92036242428168,-50.22535074934659

2075891_20201_2_0,h2feho4icz,0.42927814511052664,-80.36921918559494,-26.827863093244716

4481191_20201_2_0,h2iwbp4icz,0.18123693226233295,-137.9517302469624,-38.25690153430645

5754738_20201_2_0,h2k91o4icz,-2.291554021764969,-158.15614752137995,-32.77964513425684

1055434_20201_2_0,h2kgwn4icz,-3.6137144625112576,-76.57896244348836,-2.0758817479719767

3536730_20201_2_0,h2kxwn4icz,-1.0793919593213077,-82.29735418970856,-21.128232558831456

1727668_20201_2_0,h2xr5o4icz,-0.23342598791083483,-61.080519971484364,-20.372566851032943

4008720_20201_2_0,h31bwn4icz,0.32153668716238565,-92.46419859496635,-45.755580562956354

2889724_20201_2_0,h3bu5p4icz,2.584149698205753,-109.3836424581942,-41.26858334791905

5030571_20201_2_0,h3cbwo4icz,-0.5435223154194797,-105.84594733547863,-20.820462839775843

5028558_20201_2_0,h3f7xo4icz,-3.317023358576989,-63.262163618156194,-16.2264429694778

5062778_20201_2_0,h3jfyo4icz,3.571079465250157,-95.49989735608969,-49.51868982570008

1188712_20201_2_0,h3p7nn4icz,1.2688502559437944,-85.03075031121136,-51.56899756541101

4116610_20201_2_0,h3r1ln4icz,0.6096727977291589,-130.71854660250426,-49.697785608318526

5637585_20201_2_0,h3tg3p4icz,-2.617035841146607,-89.65928840496653,-2.6479651605488925

1171010_20201_2_0,h3ttzo4icz,-0.44775118591682417,-85.47749996822063,-30.333899662397712

5156277_20201_2_0,h40pmo4icz,0.8471238696292654,-105.63790058736498,-43.716194481990115

4080307_20201_2_0,h447xo4icz,0.2986011529172421,-107.83841861902613,-51.04688424849312

3855699_20201_2_0,h46k4p4icz,-2.6134736552233675,-66.99646699366082,-22.34420325439045

3443366_20201_2_0,h4817p4icz,-0.21579432859073408,-75.8952448008526,-37.09251984477599

5163314_20201_2_0,h48f3o4icz,-1.907906630861842,-93.09027827727144,-20.756283553455603

2962146_20201_2_0,h48zxo4icz,0.5868900115774306,-87.30865277583803,-32.92056968227766

3818091_20201_2_0,h4e5so4icz,1.6476977650020301,-77.6619802314276,-36.28854313100152

3614309_20201_2_0,h4ecbo4icz,0.23945679809834572,-59.58208242126884,-39.36050996747301

3123930_20201_2_0,h4gako4icz,-5.258524948303246,-88.79467990969266,-26.92029924117611

3451450_20201_2_0,h4i23p4icz,1.1435570984158456,-91.62411458757447,-38.80559747314547
 46%|████▌     | 373/811 [19:58<23:19,  3.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 374/811 [20:01<22:23,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 375/811 [20:05<23:30,  3.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▋     | 376/811 [20:07<22:35,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▋     | 377/811 [20:10<22:12,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 378/811 [20:13<21:55,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 379/811 [20:16<21:24,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 380/811 [20:20<23:35,  3.28s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 381/811 [20:28<32:42,  4.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 382/811 [20:31<29:04,  4.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 383/811 [20:35<28:42,  4.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 384/811 [20:37<26:07,  3.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 385/811 [20:41<25:53,  3.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 386/811 [20:44<23:46,  3.36s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 387/811 [20:46<22:21,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 388/811 [20:49<21:13,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 389/811 [20:52<20:40,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 390/811 [20:55<20:21,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 391/811 [20:57<20:07,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 392/811 [21:01<22:25,  3.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 393/811 [21:04<21:15,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▊     | 394/811 [21:07<20:40,  2.97s/it] 49%|████▊     | 395/811 [21:10<19:59,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 396/811 [21:12<19:58,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 397/811 [21:15<19:17,  2.80s/it] 49%|████▉     | 398/811 [21:20<23:06,  3.36s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 399/811 [21:23<21:59,  3.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 400/811 [21:25<20:59,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 401/811 [21:28<20:22,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|████▉     | 402/811 [21:31<19:52,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|████▉     | 403/811 [21:33<19:05,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|████▉     | 404/811 [21:36<18:55,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|████▉     | 405/811 [21:39<19:45,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 406/811 [21:42<19:06,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 407/811 [21:45<18:59,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 408/811 [21:51<25:16,  3.76s/it] 50%|█████     | 409/811 [21:54<23:13,  3.47s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 410/811 [21:56<21:24,  3.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 411/811 [21:59<20:09,  3.02s/it] 51%|█████     | 412/811 [22:01<19:17,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 413/811 [22:04<18:54,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 414/811 [22:07<18:34,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 415/811 [22:11<20:40,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████▏    | 416/811 [22:13<19:56,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████▏    | 417/811 [22:17<20:21,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 418/811 [22:21<22:10,  3.39s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 419/811 [22:24<21:18,  3.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 420/811 [22:26<20:06,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 421/811 [22:29<19:36,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 422/811 [22:32<19:25,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 423/811 [22:35<18:27,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 424/811 [22:37<17:58,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 425/811 [22:40<18:14,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 426/811 [22:43<18:02,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 427/811 [22:45<16:53,  2.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 428/811 [22:48<17:14,  2.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 429/811 [22:51<17:34,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 430/811 [22:54<17:23,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 431/811 [22:57<17:28,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 432/811 [22:59<17:06,  2.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 433/811 [23:04<21:02,  3.34s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▎    | 434/811 [23:07<20:02,  3.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▎    | 435/811 [23:09<19:02,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 436/811 [23:12<18:30,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 437/811 [23:15<18:09,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 438/811 [23:18<17:53,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 439/811 [23:21<17:35,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 440/811 [23:23<17:23,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 441/811 [23:26<17:48,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▍    | 442/811 [23:29<17:19,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▍    | 443/811 [23:32<17:38,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▍    | 444/811 [23:35<17:20,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▍    | 445/811 [23:37<16:29,  2.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▍    | 446/811 [23:40<16:47,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▌    | 447/811 [23:43<17:33,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▌    | 448/811 [23:46<17:07,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▌    | 449/811 [23:49<17:03,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▌    | 450/811 [23:51<16:43,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 451/811 [23:54<16:42,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 452/811 [23:57<16:57,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 453/811 [24:00<16:33,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 454/811 [24:03<16:27,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 455/811 [24:06<16:47,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 456/811 [24:09<17:09,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▋    | 457/811 [24:11<16:47,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▋    | 458/811 [24:14<16:44,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 459/811 [24:17<16:44,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 460/811 [24:20<16:25,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 461/811 [24:22<15:57,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 462/811 [24:25<15:51,  2.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 463/811 [24:28<15:51,  2.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 464/811 [24:31<16:04,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 465/811 [24:34<16:30,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 466/811 [24:37<16:29,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 467/811 [24:40<16:46,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 468/811 [24:43<16:42,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 469/811 [24:45<16:05,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 470/811 [24:48<16:01,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 471/811 [24:51<15:41,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 472/811 [24:53<15:17,  2.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 473/811 [24:56<15:15,  2.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 474/811 [24:59<15:13,  2.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▊    | 475/811 [25:02<15:50,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▊    | 476/811 [25:04<15:19,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 477/811 [25:07<15:14,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 478/811 [25:10<15:39,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 479/811 [25:14<17:55,  3.24s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 480/811 [25:17<17:05,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 481/811 [25:21<18:01,  3.28s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 482/811 [25:24<17:10,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|█████▉    | 483/811 [25:26<16:32,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|█████▉    | 484/811 [25:29<16:04,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|█████▉    | 485/811 [25:32<15:38,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|█████▉    | 486/811 [25:34<14:53,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|██████    | 487/811 [25:37<14:48,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|██████    | 488/811 [25:40<14:41,  2.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|██████    | 489/811 [25:42<14:29,  2.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|██████    | 490/811 [25:50<23:04,  4.31s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 491/811 [25:53<20:40,  3.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 492/811 [25:56<19:18,  3.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 493/811 [25:59<18:05,  3.41s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 494/811 [26:02<17:21,  3.29s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 495/811 [26:05<17:14,  3.27s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 496/811 [26:08<16:26,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████▏   | 497/811 [26:16<24:02,  4.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████▏   | 498/811 [26:19<21:00,  4.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 499/811 [26:22<18:53,  3.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 500/811 [26:24<17:18,  3.34s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 501/811 [26:27<16:12,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 502/811 [26:30<15:32,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 503/811 [26:33<15:47,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 504/811 [26:36<16:04,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 505/811 [26:40<17:20,  3.40s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 506/811 [26:44<17:23,  3.42s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 507/811 [26:47<16:31,  3.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 508/811 [26:49<15:39,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 509/811 [26:53<16:31,  3.28s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 510/811 [26:56<15:37,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 511/811 [26:58<14:52,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 512/811 [27:01<14:18,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 513/811 [27:05<15:11,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 514/811 [27:08<16:14,  3.28s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▎   | 515/811 [27:11<15:21,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▎   | 516/811 [27:14<14:37,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▎   | 517/811 [27:17<15:37,  3.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 518/811 [27:21<16:26,  3.37s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 519/811 [27:24<15:44,  3.24s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 520/811 [27:27<15:22,  3.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 521/811 [27:30<14:37,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 522/811 [27:33<14:30,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 523/811 [27:36<14:10,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▍   | 524/811 [27:38<13:41,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▍   | 525/811 [27:41<13:22,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▍   | 526/811 [27:45<14:53,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▍   | 527/811 [27:51<18:28,  3.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▌   | 528/811 [27:53<16:38,  3.53s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▌   | 529/811 [27:56<15:38,  3.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▌   | 530/811 [27:59<14:41,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▌   | 531/811 [28:01<13:57,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 532/811 [28:04<13:37,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 533/811 [28:07<13:25,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 534/811 [28:10<13:33,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 535/811 [28:14<15:37,  3.40s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 536/811 [28:17<14:48,  3.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 537/811 [28:20<13:52,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▋   | 538/811 [28:23<13:25,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▋   | 539/811 [28:25<13:02,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 540/811 [28:28<12:45,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 541/811 [28:31<12:50,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 542/811 [28:34<12:55,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 543/811 [28:38<14:04,  3.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 544/811 [28:40<13:28,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 545/811 [28:44<13:27,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 546/811 [28:46<12:55,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 547/811 [28:49<12:38,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 548/811 [28:52<12:21,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 549/811 [28:55<12:41,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 550/811 [28:58<12:38,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 551/811 [29:00<12:18,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 552/811 [29:03<12:21,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 553/811 [29:06<12:12,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 554/811 [29:14<18:17,  4.27s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 555/811 [29:16<16:20,  3.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▊   | 556/811 [29:20<15:21,  3.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▊   | 557/811 [29:22<14:15,  3.37s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 558/811 [29:25<13:26,  3.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 559/811 [29:28<12:55,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 560/811 [29:31<12:30,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 561/811 [29:33<12:08,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 562/811 [29:36<11:59,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 563/811 [29:39<11:47,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|██████▉   | 564/811 [29:42<11:23,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|██████▉   | 565/811 [29:44<11:15,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|██████▉   | 566/811 [29:48<11:45,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|██████▉   | 567/811 [29:50<11:45,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|███████   | 568/811 [29:53<11:37,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|███████   | 569/811 [29:56<11:38,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|███████   | 570/811 [29:59<11:22,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|███████   | 571/811 [30:02<11:33,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 572/811 [30:05<11:21,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 573/811 [30:07<11:04,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 574/811 [30:10<11:16,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 575/811 [30:13<11:23,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 576/811 [30:16<11:36,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 577/811 [30:19<11:24,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████▏  | 578/811 [30:22<11:10,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████▏  | 579/811 [30:25<11:14,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 580/811 [30:28<11:07,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 581/811 [30:31<10:51,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 582/811 [30:33<10:34,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 583/811 [30:38<12:31,  3.30s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 584/811 [30:40<11:41,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 585/811 [30:43<11:14,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 586/811 [30:46<10:48,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 587/811 [30:48<10:21,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 588/811 [30:51<10:21,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 589/811 [31:04<21:36,  5.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 590/811 [31:07<18:12,  4.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 591/811 [31:11<16:48,  4.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 592/811 [31:13<14:30,  3.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 593/811 [31:16<12:58,  3.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 594/811 [31:18<11:56,  3.30s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 595/811 [31:21<11:15,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 596/811 [31:35<22:58,  6.41s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▎  | 597/811 [31:38<19:18,  5.41s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▎  | 598/811 [31:41<16:28,  4.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 599/811 [31:44<14:21,  4.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 600/811 [31:47<12:52,  3.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 601/811 [31:50<12:07,  3.46s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 602/811 [31:53<11:36,  3.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 603/811 [31:55<10:55,  3.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 604/811 [31:59<11:31,  3.34s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▍  | 605/811 [32:02<10:50,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▍  | 606/811 [32:05<10:43,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▍  | 607/811 [32:08<10:35,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▍  | 608/811 [32:11<10:09,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▌  | 609/811 [32:14<09:49,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▌  | 610/811 [32:17<10:47,  3.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▌  | 611/811 [32:21<11:26,  3.43s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▌  | 612/811 [32:34<20:44,  6.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 613/811 [32:47<27:01,  8.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 614/811 [32:54<26:00,  7.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 615/811 [32:57<20:57,  6.41s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 616/811 [33:00<17:15,  5.31s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 617/811 [33:02<14:36,  4.52s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 618/811 [33:05<12:45,  3.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▋  | 619/811 [33:18<21:02,  6.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▋  | 620/811 [33:21<17:24,  5.47s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 621/811 [33:24<14:48,  4.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 622/811 [33:27<13:08,  4.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 623/811 [33:29<11:44,  3.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 624/811 [33:32<10:51,  3.49s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 625/811 [33:36<10:49,  3.49s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 626/811 [33:39<10:13,  3.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 627/811 [33:42<09:51,  3.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 628/811 [33:44<09:18,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 629/811 [33:47<08:52,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 630/811 [33:50<08:40,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 631/811 [33:52<08:34,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 632/811 [33:55<08:22,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 633/811 [33:58<08:12,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 634/811 [34:01<08:31,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 635/811 [34:04<08:20,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 636/811 [34:06<08:11,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▊  | 637/811 [34:09<08:05,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▊  | 638/811 [34:12<08:03,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 639/811 [34:17<10:05,  3.52s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 640/811 [34:20<09:17,  3.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 641/811 [34:23<08:47,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 642/811 [34:26<08:37,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 643/811 [34:28<08:16,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 644/811 [34:31<07:54,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|███████▉  | 645/811 [34:34<07:48,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|███████▉  | 646/811 [34:39<09:40,  3.52s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|███████▉  | 647/811 [34:42<09:01,  3.30s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|███████▉  | 648/811 [34:44<08:21,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 649/811 [34:47<08:14,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 650/811 [34:50<08:01,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 651/811 [34:53<07:48,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 652/811 [34:56<07:40,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 653/811 [34:58<07:33,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 654/811 [35:01<07:15,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).

3065098_20201_2_0,h4idwo4icz,-0.5684659965456411,-121.08275631813578,-26.555837361738114

1175410_20201_2_0,h4j3zo4icz,-10.295700686188042,-221.79658289715226,8.584839916874401

1681286_20201_2_0,h4k3jn4icz,3.0078247032775454,-103.38305434019998,-58.067081040993656

2021023_20201_2_0,h4mdyn4icz,-0.15021269086859995,-74.93318204441155,-24.017346665817314

3884174_20201_2_0,h4vann4icz,0.7273776285637289,-72.66486196552529,-42.51951755972617

4110886_20201_2_0,h4zjko4icz,-0.7945934979356438,-131.72188787662583,-27.144451749153518

2418987_20201_2_0,h53ulo4icz,-2.6220411099019563,-79.49429808995271,-26.15564742736116

3203581_20201_2_0,h577sn4icz,-0.36240866276304473,-83.66789569861623,-36.92702675236497

3468990_20201_2_0,h5a6gp4icz,2.3957898562368567,-95.60531516137667,-58.33724452865944

4705317_20201_2_0,h5bugp4icz,1.037165341942271,-103.4907206631157,-38.23176348975318

2733853_20201_2_0,h5d0ln4icz,-5.546857062148103,-140.50187198951738,1.8720654576919458

4325659_20201_2_0,h5d9gn4icz,-0.24540386227078423,-119.34639757455795,-26.057620006705378

3074357_20201_2_0,h5ex1o4icz,0.21857366747466783,-115.0928048855406,-40.933066619957486

4313612_20201_2_0,h5hrxo4icz,0.3420594364475508,-94.8673854257101,-27.235306914311877

2182569_20201_2_0,h5qy8o4icz,-5.171936517210167,-117.25141074951915,-5.5299930640866535

2352959_20201_2_0,h5s1fo4icz,-2.25522025062181,-74.48673206015928,-0.7599536390781338

3132679_20201_2_0,h60mxn4icz,-2.2475263511957375,-107.40220641751097,-21.259306341215122

3384474_20201_2_0,h62ohp4icz,-24.145960227951775,-98.28337956652399,80.65707757890802

4132749_20201_2_0,h6c7en4icz,10.915922490532534,20.615251132756185,-104.55071227814014

1849152_20201_2_0,h6cdln4icz,-0.5672347120970228,-133.57470631753907,-48.33070821098579

2889800_20201_2_0,h6fedp4icz,1.3580892513661615,-119.7341114891949,-51.75810854008462

1519850_20201_2_0,h6ig8n4icz,-6.0782830396707945,-106.77833861132908,-2.596809879248511

1440097_20201_2_0,h6jmwn4icz,0.6433759363046768,-109.90881114791179,-36.83481624482681

1156357_20201_2_0,h6wkin4icz,-1.2980302905616599,-71.17265858130096,-28.816461907268604

2804921_20201_2_0,h6xvwo4icz,0.24270675093891034,-116.98778405642514,-41.257563117680434

1203103_20201_2_0,h6y2io4icz,0.8554336732044533,-70.99821428434404,-49.610868824634

3667423_20201_2_0,h6ze8p4icz,-0.5983180045302443,-111.5875149558751,-55.81725119042092

4773086_20201_2_0,pkoaon4icz,0.3842585124048919,-146.0225217740821,-42.63073924545154

5319512_20201_2_0,h754in4icz,1.1198930924160377,-138.4135122352598,-48.70529453479526

4185117_20201_2_0,h75szo4icz,0.6409609520349764,-76.00511753340183,-59.964166992956336

5267013_20201_2_0,h76ulo4icz,3.311124831048307,-148.49125464041813,-60.110762461048

1234599_20201_2_0,h79e6o4icz,-2.376712878198822,-100.65224180880415,-26.934376244260264

2488365_20201_2_0,h79uyo4icz,-1.0210191639159074,-112.46621730075154,-46.15626294813846

5980099_20201_2_0,h7aimo4icz,2.0325859643130375,-152.7285538746844,-63.89216161593123

4017797_20201_2_0,h7eq5o4icz,-1.920233698172783,-103.20954982959836,-26.203580719702387

3594762_20201_2_0,h7evsn4icz,-0.07286561144183763,-72.52907009052862,-50.1964552336741

3632306_20201_2_0,h7ht2p4icz,1.3643860078196366,-75.77130377277919,-25.97532464912061

1705230_20201_2_0,h7oc4p4icz,3.2059353405107474,-125.45402972405674,-78.73726660419611

4901539_20201_2_0,h7rf5p4icz,0.9251260275816761,-102.67904202166267,-28.060557972562535

5467503_20201_2_0,h7tzjp4icz,0.7075790909603363,-85.91925812044542,-40.87838322847588

4004039_20201_2_0,h7uveo4icz,-0.5638591642825262,-86.8710969844096,-37.33643680254332

5856662_20201_2_0,h7y18p4icz,-0.8149274636461188,-147.38849044720487,-18.666486776275406

5293012_20201_2_0,h851vn4icz,3.79139413533951,-90.85185586989945,-59.592770341456045

1280116_20201_2_0,h8dmwo4icz,3.1934584785063813,-97.91331531314054,-37.07548835856561

2369467_20201_2_0,h8fm5o4icz,1.8018380049153906,-92.65455697340974,-51.903516951626614

5306757_20201_2_0,h8ft4p4icz,-0.9408331737055643,-67.98252505905927,-43.27736275455214

6024513_20201_2_0,h8h98p4icz,0.2961723034107345,-92.33058125960324,-41.30612475027884

3408862_20201_2_0,h8rgao4icz,-0.21339093474616752,-91.6877145955707,-39.67244791654056

2468552_20201_2_0,h8s68o4icz,1.258324049808478,-96.26709554861822,-56.71703674890827

2795408_20201_2_0,h8s9rn4icz,-2.327151013462548,-113.35772768462584,-19.684714048851788

3293431_20201_2_0,h8voyn4icz,0.7305887763864531,-112.26623216340448,-58.83332279764856

2532620_20201_2_0,h8z2io4icz,1.9190536615871416,-117.6181801735807,-49.006301442924325

3718084_20201_2_0,h90ddp4icz,-0.5007300752576939,-131.7179955663571,-43.714917244934185

3318674_20201_2_0,h9795o4icz,2.2583888692109024,-55.509407681031036,-42.387504575642524

1366577_20201_2_0,h9mcdp4icz,-1.1878625990085643,-80.07423816774377,-37.72841835708573

2989729_20201_2_0,h9mzso4icz,-0.8656155873102168,-61.170263800941655,-23.804792410502586

3595109_20201_2_0,h9nyip4icz,-1.814377764892956,-81.33738814761517,-39.745544269587796

1859454_20201_2_0,h9pdko4icz,-0.7257769889429411,-74.01121971353939,-20.60971690051261

4101303_20201_2_0,ha29xn4icz,0.7272814438717856,-74.84117348083132,-37.2711707419835

2142168_20201_2_0,ha4n7p4icz,-0.2757431195951799,-121.14656433697698,-24.068913646551422

1373418_20201_2_0,ha6sin4icz,1.8791891260665152,-108.6328524137856,-54.27135568107387

5028677_20201_2_0,hab0ap4icz,-2.4913170330136603,-98.7998096868842,-27.929103808261473

5165205_20201_2_0,haf5so4icz,3.360241854602641,-93.76250890413539,-57.48046383822641

2506466_20201_2_0,hagono4icz,1.802607260917865,-86.16266352377414,-35.37370639289804

2306353_20201_2_0,hajp6p4icz,-0.43676233680998205,-86.29106155846466,-36.09252049568602

2006233_20201_2_0,hakdap4icz,0.8976043822193175,-60.08577312869633,-39.123797138317684

4025789_20201_2_0,hapblo4icz,0.49471910639516453,-68.6352821757734,-44.47764619180265

3227314_20201_2_0,hay2go4icz,-2.3092237116942935,-126.39673151563778,-22.13979389967166

4555973_20201_2_0,hayiwo4icz,1.2189834273079951,-80.0272146286236,-44.66826389377147

4943471_20201_2_0,hb4ido4icz,0.5718532206807854,-109.16920835590085,-28.967139483094627

2378039_20201_2_0,hb77un4icz,-0.5728660844178796,-67.36521915724265,-24.762687662663495

5650960_20201_2_0,hb7qno4icz,-0.08268504581323025,-96.34262666191609,-33.770837425752944

5991893_20201_2_0,hb7zun4icz,0.228523393464276,-61.849894815342594,-54.082258714852514

4993336_20201_2_0,hbbinn4icz,-1.2020059728498105,-110.82929014982537,-17.22885236053176

2813665_20201_2_0,hbexoo4icz,2.604067885453844,-113.21547279553917,-50.926185516567216

4124334_20201_2_0,hbgfeo4icz,-0.14398732537627443,-103.3453667609862,-29.449289294385608

4610034_20201_2_0,hbijmn4icz,0.3738855892949561,-114.06857262043297,-32.6554181685635

3892401_20201_2_0,hblijn4icz,0.08610724076260765,-132.85359667883804,-43.144715066815536

4021383_20201_2_0,hblwbo4icz,2.222995436987282,-73.74520868241137,-42.29843083532535

3454126_20201_2_0,hbwxep4icz,-1.2726137763445464,-100.55278555593395,-20.85832803322188

2633721_20201_2_0,hc04rn4icz,-1.4853193332187344,-124.60112042259078,-42.60842201983583

1472713_20201_2_0,hc6vso4icz,0.09992816971250656,-127.02916965951519,-34.26342404036211

3487311_20201_2_0,hcbnkn4icz,-2.0195392381834725,-98.76830964462943,-19.7446451869355

1383076_20201_2_0,hccz5n4icz,0.16678518276999232,-88.27789381757322,-47.97150237216164

5498401_20201_2_0,hcemwo4icz,3.069646895485433,-56.87372544143429,-67.13195057066658

3250614_20201_2_0,hcfsep4icz,1.710247908858327,-71.11412133364871,-43.810923931547435

4077296_20201_2_0,hcgjep4icz,-1.8110938982935487,-82.91859971108283,-31.40533023818911

4418741_20201_2_0,hch7ho4icz,-1.2739123026502963,-128.38455875507054,-29.911608931306773

3831365_20201_2_0,hciaqn4icz,0.17059249057638884,-70.74728375029693,-35.1039133282238

5326672_20201_2_0,hcm8ro4icz,1.1255900725298082,-92.80970421036534,-47.45261849057425

2093301_20201_2_0,hcxgap4icz,-0.4716053779275394,-82.50805067253657,-35.708500753337546

2963557_20201_2_0,hcy9wo4icz,1.002243200864118,-81.4435774920735,-35.701361536883496

2453009_20201_2_0,hd4p2p4icz,-0.006271794130345436,-61.17055036308773,-49.07226211335389

2372581_20201_2_0,hd5g2p4icz,1.3264837519360408,-102.5939912602854,-46.023806006457534

3444782_20201_2_0,hd6h3p4icz,-4.220339159160241,-116.9434218627768,-15.854421312496981

4029685_20201_2_0,hd72co4icz,0.41413554569224753,-80.49231561911165,-39.47981314511766

1637766_20201_2_0,hd8i8p4icz,1.226263844307036,-110.18371287999062,-37.098844382510435

4856973_20201_2_0,hd8o5o4icz,0.6226930346392808,-93.1025467518806,-37.73106441995182

5965484_20201_2_0,hd9scp4icz,0.7208930853074129,-88.61373190375144,-78.00707343960073

2805799_20201_2_0,hd9ulo4icz,0.5913203173121621,-48.46169819298706,-43.32337950527497

1264613_20201_2_0,hdaeio4icz,0.47512243448201685,-100.55356739992513,-26.877748029662655

2039391_20201_2_0,03rico4icz,2.8067009319411187,-83.52623654647647,-44.3813617603209

5484208_20201_2_0,hddgto4icz,0.09753085563734215,-107.41188472105452,-19.476545839436895

1997101_20201_2_0,hdesbn4icz,-1.5604716690181797,-146.41569555879568,-33.22940883538621

3019701_20201_2_0,hdjquo4icz,18.967139528558146,30.12779689924986,-150.3192874706046

1173001_20201_2_0,hdkexn4icz,0.28644243921207296,-133.07478060836428,-38.55798638483898

3866603_20201_2_0,hdmpdp4icz,0.1841519061159817,-94.68118315616812,-43.82207897624528

1618892_20201_2_0,hdntoo4icz,-4.472068105169216,-144.42909240247272,1.5091870710674016

1246468_20201_2_0,hdrhpo4icz,4.650853561405841,-47.328202536158386,-53.89269049586352

2180314_20201_2_0,hdtqto4icz,0.6722988618987378,-71.10165956486341,-41.52760193630982

4102799_20201_2_0,he2jpo4icz,0.9438977670470033,-97.29612188524578,-39.76443183245007

3319107_20201_2_0,he6p2o4icz,1.9026980350602278,-102.61805404373519,-29.91526972993657

4807240_20201_2_0,he7yro4icz,-3.520853998581222,-126.09072395697495,-17.97750670367327

2358824_20201_2_0,hebdwn4icz,-1.6939267739539676,-112.92088584033513,-32.21963168625534

2613011_20201_2_0,hecj4o4icz,-3.332638424197903,-115.8094769064707,-32.11702817633788

3155350_20201_2_0,hefj4o4icz,12.386464086113955,-173.68273679651907,166.61476636277368

3172367_20201_2_0,heknbp4icz,-0.13593733918389464,-99.93714906663743,-7.1649130182553336

5692215_20201_2_0,helc8o4icz,0.3066208148468662,-110.78136355619617,-22.494771650401162

5577138_20201_2_0,helmin4icz,-20.468078959052757,-55.48107554600085,325.5809724636074

1396833_20201_2_0,hencqo4icz,-0.9576419471674161,-107.53738502479735,-38.15324561909833

4364550_20201_2_0,hep1ho4icz,1.872516754762792,-92.32742513300309,-49.87479396720269

1372987_20201_2_0,her4ko4icz,33.540677185403716,-13.634346457065703,-199.30005251416702

5461221_20201_2_0,herqcp4icz,1.226167720379301,-108.49513851098499,-30.460364201143136

2069139_20201_2_0,hescap4icz,-3.897151007830525,-94.64213329948305,-26.049474548297752

2564793_20201_2_0,hf4fso4icz,-1.2333370975976181,-69.65695685228917,-29.44459648474279

1865299_20201_2_0,hf9b8p4icz,-0.5287865979320286,-70.52571238136318,-30.346428671315124

5619049_20201_2_0,hfadzo4icz,-10.888533542488961,-118.15697295563712,22.57676111631322

6002742_20201_2_0,hfhiao4icz,-1.4247642552650155,-109.8304028285055,-23.277986373770517

3399984_20201_2_0,hfjjmn4icz,-1.0507712408920147,-123.78304711342747,-26.80978471557532

4360342_20201_2_0,hfjoep4icz,-43.13583108878857,-80.73054315908536,221.43046283328906

5307242_20201_2_0,hfjw2p4icz,2.4850053966916636,-95.5051623145084,-50.95672691355762

1720500_20201_2_0,hg291o4icz,-2.3352347345373032,-100.5360396984772,-21.86901494839273

2323457_20201_2_0,hg321p4icz,-139.3670942660869,422.6030040852439,501.9789327178195

3019314_20201_2_0,hg44lo4icz,-3.5433211745375295,-113.88388690052051,-19.35060235178416

4365931_20201_2_0,hg51ro4icz,-1.89120066534499,-77.52647334752808,-18.649344246259517

4313716_20201_2_0,hg854p4icz,2.1109161379039465,-93.4917322626506,-51.91655879082728

2655077_20201_2_0,hgamxo4icz,-0.5219452427161005,-116.77004064482202,-31.972598758936954

3528383_20201_2_0,hgd31o4icz,1.2461782607096163,-96.40728867169912,-42.93998346478064

4655031_20201_2_0,hgja4p4icz,-1.0427518399552809,-75.94454486928751,-46.32496871020629

3008205_20201_2_0,hgjbwn4icz,3.368393141374913,-60.67347423823651,-72.2464101227097

1198922_20201_2_0,hgjeqn4icz,-0.7001680883022402,-82.57767939433705,-32.451114605296254

2473934_20201_2_0,hgozso4icz,2.735420613829346,-113.97039554952494,-60.19976553195856

4111247_20201_2_0,hgqs9o4icz,0.6582437109017292,-104.91744319091993,-35.20440465403014

2983731_20201_2_0,hgs3ho4icz,-2.7420972364705323,-114.91527375663497,-7.9679279570326

3004517_20201_2_0,hgvj8o4icz,-0.9558657422431138,-54.78491191553698,-31.403820864286857

5677449_20201_2_0,hh34rn4icz,0.6405861068369711,-135.93908983770064,-36.33628921352698

2329382_20201_2_0,hh46po4icz,0.6267115016311254,-78.90229484362843,-46.49540266628685

3971753_20201_2_0,hhgbao4icz,0.8973851271727021,-99.21095621939904,-47.79928705492851

5591358_20201_2_0,hhihip4icz,2.688064637953665,-130.68148687457716,-40.65258865397627

5832038_20201_2_0,hhkjqn4icz,0.4512759472313766,-70.31222906800491,-23.790904804283713

3194815_20201_2_0,hhkkhp4icz,-1.4018683721718097,-84.24675064876058,-32.4660129432948

2887406_20201_2_0,hhm64o4icz,-3.7805232978667678,-88.19200254684296,-13.99615965963838

5003969_20201_2_0,hhr62o4icz,13.602011286780805,-35.72977537979722,-93.62930106798102

3601371_20201_2_0,hhu1gn4icz,-1.8855765716947348,-107.0417614650753,-36.355101048199884

1825426_20201_2_0,hhwtcn4icz,-2.4602344824132247,-119.86591934360092,-23.83373616190235

1659412_20201_2_0,hhx8dp4icz,-2.5177018008337453,-81.34577406193864,-18.114058556360476

4872815_20201_2_0,hi35to4icz,2.8893533008524543,-63.427899630159516,-66.51592629533894

1618354_20201_2_0,hi5wpn4icz,0.04567548205599514,-125.86803061264808,-32.006844459387395

4127603_20201_2_0,hi8f7o4icz,-2.3828746006004033,-101.90200419362813,-31.01870634863252

1621156_20201_2_0,hi8u3p4icz,1.6762870579461766,-86.05925529831364,-27.287123859369572

1274006_20201_2_0,hibwgp4icz,4.003199669617183,-84.00641166818502,-72.04577533300545

2510456_20201_2_0,hierxo4icz,3.41671114618006,-70.67569534066246,-68.0209317790129

3902779_20201_2_0,hiie1o4icz,-1.4884221303022651,-102.24961791543552,-20.4805646809574

2871486_20201_2_0,hilolo4icz,-12.016236890270042,-125.56576495608817,41.462879072590866

5244857_20201_2_0,him7eo4icz,-1.309351685764989,-71.57935638481231,-9.476685020728041

5996837_20201_2_0,himpao4icz,-0.25434869259456894,-112.86295834828476,-27.713517732630308

2373032_20201_2_0,hiuiap4icz,24.968553413481896,-28.492757597072057,-143.32269366509666

3005641_20201_2_0,hiw8to4icz,-3.5963108957309324,-121.1554041433138,-33.382685626298795

1447232_20201_2_0,hj02no4icz,-0.8762452424697491,-76.09350670486438,-36.98323706771046

2225814_20201_2_0,hj2cbo4icz,-0.6334763555373443,-98.70977442098226,-37.1855624015066

4574911_20201_2_0,hj2g6o4icz,1.6477611342825378,-71.2425299595404,-35.51306042561271

1209641_20201_2_0,hj3mqn4icz,66.29859102579545,402.54864817176394,-217.9127219431217

1818106_20201_2_0,hj6mso4icz,-3.4303362827576374,-53.39460506494186,-20.529255407343413

2139076_20201_2_0,hj794p4icz,0.21185579729097156,-100.33156218055126,-46.59329536703389

3635248_20201_2_0,hjampn4icz,2.6377062841276273,-89.36291276358372,-37.47473160865292

1661276_20201_2_0,hjm8ko4icz,-3.026644449582722,-129.92697598128237,-5.592185640422031

3021651_20201_2_0,hjoe4p4icz,2.39581994845828,-114.67135291282796,-63.804451792010894

4678736_20201_2_0,hjoewn4icz,-1.1947604174309612,-92.65738063990449,-13.72349765855975

3078076_20201_2_0,hjoy6o4icz,3.4908344605985033,-100.06292620305607,-37.73324229246418

2498127_20201_2_0,hjqfwo4icz,-6.065945214636266,-87.38485388754714,7.708037685937086

5884799_20201_2_0,hjriwo4icz,1.3125489886184123,-55.84789905538969,-41.759803971170655

1574509_20201_2_0,hjulko4icz,3.222170633189618,-92.1700145692079,-58.729835636874284

4405452_20201_2_0,hjutqo4icz,-2.127967759786795,-97.61214109921181,-38.1969434883529

4682492_20201_2_0,hjuwjn4icz,-2.599477460740606,-97.68424687300686,-15.319728809921074

5541291_20201_2_0,hjxpxo4icz,-1.928553141874174,-76.87655000240505,-27.47842918714433

2671694_20201_2_0,hjyd8n4icz,1.598499658205325,-117.4253525228593,-47.981650779416796

5863565_20201_2_0,hk13xo4icz,0.9252819776378325,-77.24440339784701,-42.78993012327294

5386592_20201_2_0,hk19jo4icz,1.6775654565732778,-58.2981225278393,-41.74191891625301

3344744_20201_2_0,hk51xo4icz,0.6639021707672753,-78.4791483530006,-14.329188750343931

1536446_20201_2_0,hk5ago4icz,1.7692072084491512,-61.353801880829735,-35.338706146368466

3910384_20201_2_0,hk8qso4icz,-0.16399298954712085,-84.21978045345253,-31.882858075914314

5613152_20201_2_0,hka3fo4icz,0.20881311321126417,-115.21932391194085,-23.696115702690093

5698839_20201_2_0,hkb7hp4icz,-3.618061224970252,-88.39057210588092,-34.22043011552802

4472396_20201_2_0,hkbdco4icz,-6.17635299378554,-71.67974659633464,8.467885259223294

2922951_20201_2_0,hkc8bo4icz,1.5273394219514225,-75.28601359250013,-57.942163348693825

2870293_20201_2_0,hkea8o4icz,-0.4991764327127055,-80.95067158047053,-29.535932944952336

5428030_20201_2_0,hki67p4icz,-3.0936701611651443,-118.42097489231674,-42.37361878301539

2011076_20201_2_0,hkuajn4icz,-3.0171788147166305,-125.70449584893717,-46.256818155322605

1668924_20201_2_0,hkuj0p4icz,2.042127051242665,-113.05829339364851,-49.636699758323886

5441653_20201_2_0,hkzx5p4icz,3.8323650164550647,-81.62496058613468,-41.19527253869062

1851202_20201_2_0,hl0rto4icz,-0.7311473961406013,-57.480601184808734,-30.84471629557501

5142221_20201_2_0,hl23io4icz,3.030191319336751,-81.45371335169199,-61.206872816518455

1534808_20201_2_0,hl2hep4icz,3.7636007433540475,-89.89014286066882,-51.18415927469263

2259155_20201_2_0,hl59un4icz,3.6999039921165746,-53.914008558481584,-81.40864051486449

4006643_20201_2_0,hl92go4icz,0.46853209794452055,-132.1006739518636,-44.47896452855292

1221471_20201_2_0,hlc27p4icz,-0.007219538909639302,-102.47790901779635,-36.67183273145527

3574670_20201_2_0,hld4cp4icz,-1.0561107644255157,-132.52775557564155,-39.21824563458853

5937776_20201_2_0,hld69p4icz,-1.2361992929768981,-126.80439463992582,-36.751182717794734

1815872_20201_2_0,hlfnvn4icz,-0.6093258408496921,-75.67780544534966,-15.062679804897414

1056181_20201_2_0,hli31o4icz,-0.7224816875296326,-78.7896764769508,-46.63655676246438

4352333_20201_2_0,hlj6ro4icz,-6.621855078319986,-171.64605264557596,-13.239658048642092

2363326_20201_2_0,hlm8oo4icz,-5.404080522222254,-91.55147538510298,-13.982245598642123

2883430_20201_2_0,hlnkun4icz,2.086928070772631,-96.03499241723654,-45.300099132770896

5450180_20201_2_0,hlsldp4icz,2.014542039492277,-130.2252640912436,-63.37361382498926

1291807_20201_2_0,hlubro4icz,-2.5914951635639003,-108.37663857309502,-22.24296227911522

1398901_20201_2_0,hlv9vn4icz,-0.041306746070110915,-62.99300322511726,-34.314616946467396

1436330_20201_2_0,hlvb6n4icz,-3.6568310511539237,-88.20280733452032,-19.154608039666286

2525952_20201_2_0,hlvt8p4icz,-1.5882865846567613,-75.20737834796245,-29.507204905359174

1654037_20201_2_0,hlw5jp4icz,-2.2465838173804897,-103.64917780702854,-24.24904206682561

3390539_20201_2_0,hlxi5p4icz,-0.5833428380942581,-105.22449029917829,-20.684621724217294

3728306_20201_2_0,hm1ngo4icz,0.4622558110767197,-96.32142266979349,-65.56023432621147

4403244_20201_2_0,hm439p4icz,-1.8033427144132754,-105.68062025045339,-49.87584134643318

5972328_20201_2_0,hm48eo4icz,0.5489412143599751,-83.26553976335231,-35.15260216226713

3516824_20201_2_0,hmbi8o4icz,2.003248649384394,-111.02373923125086,-27.258404460062252

4577120_20201_2_0,xfiflo4icz,0.4047554079076898,-115.77828214064428,-23.698649713544285

5567711_20201_2_0,hmjubo4icz,-4.567338690585385,-91.52409736985871,9.330730584792065

1037705_20201_2_0,hmzwdp4icz,1.2806584177225293,-95.04111159588052,-30.596172978902615

4393143_20201_2_0,hn6fyn4icz,2.660421346772724,-73.91065285866418,-52.55179313222217

3026261_20201_2_0,hn87qo4icz,4.823505458067998,-83.2137699264403,-72.60006151743238

3905174_20201_2_0,hn9s3p4icz,-6.004592673440694,-153.59692846342568,5.797524538396289

3150057_20201_2_0,hnck5n4icz,3.019574389305887,-93.14956787029689,-58.18667738308419

3777334_20201_2_0,hncqwn4icz,0.010539626770705792,-70.12013634238235,-30.516467653903504

3098674_20201_2_0,hndp2p4icz,2.5643033352630717,-12.943127013086041,-58.948987265921176

3485709_20201_2_0,hniqrn4icz,0.0498131557495507,-109.53398516826724,-45.500329537188804

4804891_20201_2_0,hnksko4icz,-0.3447769678500741,-66.5822113295817,-37.44025969914571

4760819_20201_2_0,hnn8bo4icz,2.4364701362638215,-93.48205782604259,-53.45266877848198

3528640_20201_2_0,hnrtjn4icz,-2.965931545132273,-71.89274424223552,-19.36504013358801

5032197_20201_2_0,hns1en4icz,0.5543914318550689,-71.50484030813908,-38.03753438433745

4378273_20201_2_0,hnu44p4icz,-1.1697701991957432,-103.82016836664761,-35.435405473845535

5362095_20201_2_0,hnv36p4icz,2.3123615797174097,-111.16055979687118,-71.21490030499025

5386985_20201_2_0,hnwgcn4icz,-0.6232765195881541,-87.48240241834748,-32.632828230994704

5325797_20201_2_0,hnwtcp4icz,3.0708897652529923,-88.33735284324138,-57.336907193763864

3259967_20201_2_0,hny71p4icz,1.963108351198549,-96.13110539951438,-41.241826995112675

2744002_20201_2_0,ho26io4icz,-0.26007842292792516,-50.97680804233795,-44.49261159525601

1365056_20201_2_0,ho4zzo4icz,1.0855668255172544,-104.30934270628362,-45.400106350270704

4016666_20201_2_0,ho7lfn4icz,1.1641793325235468,-66.8923122844237,-41.46637940060866

3674368_20201_2_0,hobdeo4icz,2.5032985499218476,-63.40403305811785,-38.20137524654098

4818414_20201_2_0,hocato4icz,-3.450937571365211,-154.53145644483712,-17.537903293274965

5110947_20201_2_0,hod5mo4icz,-3.896906317237642,-46.43603088722267,-38.11816607473659

5740837_20201_2_0,hoiavo4icz,0.20923731835294826,-71.7980878683029,-51.182042945389384

4429771_20201_2_0,holo7n4icz,0.33209915073501395,-91.19331010929389,-43.19810054282712

3555394_20201_2_0,honjqn4icz,-0.6556646862298796,-128.2625335687919,-27.52857238466561

3195816_20201_2_0,hoo4gp4icz,1.813402328173242,-101.1659677931394,-37.28623512033572

1560894_20201_2_0,hosthp4icz,-1.0013113400814946,-83.16269903001813,-26.28433905902051

1258341_20201_2_0,hot0mn4icz,0.562718473033263,-84.9004162907697,-45.66846605808938

4080065_20201_2_0,hotftn4icz,-3.5497431397115813,-93.0354759029427,-21.324980884132827

1095280_20201_2_0,hovsfn4icz,0.06205940615381251,-151.62612600622558,-41.950013677088535

2703950_20201_2_0,hp158o4icz,-0.9544809276483549,-100.19401965064245,-34.25039258357697

4082971_20201_2_0,hp3rvn4icz,0.9649114479657833,-64.1274213612322,-42.511649019750394

3201175_20201_2_0,hp6e2o4icz,-1.5610857456553435,-107.58146917919345,-15.417539176270665

4767959_20201_2_0,hpahio4icz,0.6829039127737814,-92.7803968045663,-44.9292260330668

3794822_20201_2_0,hpbojp4icz,0.9204382268276268,-86.61988454594649,-49.590528786005734

4077355_20201_2_0,hpclvo4icz,-0.5593872815998407,-36.46819715245903,-29.871582552745565

4380923_20201_2_0,2kekxo4icz,-4.845909596062054e-05,-85.13529210550152,-52.62134201430811

1894896_20201_2_0,hphmno4icz,-2.0545257026943524,-105.7749872978907,-14.474555651823394

4401028_20201_2_0,hpp2in4icz,-0.17728968379106552,-123.86443909324376,-41.63359406662576

2209324_20201_2_0,hpvgqo4icz,2.2198349948211646,-121.49233328958488,-42.391797205083705

2296704_20201_2_0,hq1yrn4icz,-0.4202680071956154,-95.55047703933317,-31.807167962305172

5093872_20201_2_0,hq3tzn4icz,0.6578308140704965,-104.6529744358414,-31.152871084448037

4772622_20201_2_0,hq6wpn4icz,0.6952316074968091,-71.79617011502674,-44.61747456960153

4868274_20201_2_0,hqbrfp4icz,1.131177050670964,-74.82380349614854,-33.154701690619405

5617830_20201_2_0,hqfq9n4icz,-3.347321237665995,-153.3611458084407,-29.16756912631169

4250300_20201_2_0,hqjfgp4icz,-3.6061496339541406,-112.6219818545151,-39.665054914331876

1336432_20201_2_0,hqk93o4icz,1.1329536696076616,-120.40759094830065,-32.96392186720085

3035756_20201_2_0,hqlcln4icz,-3.8135542238373006,-131.40722812114757,-13.901889449396592

4467104_20201_2_0,hqlq9o4icz,1.567495787499802,-93.1589634389378,-42.59674500224

3439653_20201_2_0,hqm9cp4icz,-1.484313234951415,-104.32286203993169,-42.431502964193626

5024743_20201_2_0,hqnwvn4icz,-1.519777629006782,-127.38467655572265,-34.15624739700014

5420755_20201_2_0,hqyfbp4icz,2.2019742584376036,-76.26783966070019,-48.006120311323286

5281178_20201_2_0,hr02jp4icz,2.349954359866545,-68.15954089944424,-55.263538639098016

2570855_20201_2_0,hr8mjp4icz,1.368742757023029,-98.54671037327512,-39.77431536569772

1714830_20201_2_0,hr8wpo4icz,-3.289310716030573,-99.95325452257245,-4.392610883408878
 81%|████████  | 655/811 [35:04<07:05,  2.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 656/811 [35:06<07:08,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 657/811 [35:09<07:07,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 658/811 [35:12<07:09,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████▏ | 659/811 [35:15<07:00,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████▏ | 660/811 [35:17<06:44,  2.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 661/811 [35:20<06:34,  2.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 662/811 [35:22<06:32,  2.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 663/811 [35:25<06:30,  2.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 664/811 [35:28<06:37,  2.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 665/811 [35:31<06:36,  2.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 666/811 [35:33<06:33,  2.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 667/811 [35:36<06:41,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 668/811 [35:39<06:34,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 669/811 [35:42<06:27,  2.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 670/811 [35:44<06:17,  2.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 671/811 [35:47<06:18,  2.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 672/811 [35:50<06:13,  2.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 673/811 [35:52<06:09,  2.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 674/811 [35:55<06:16,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 675/811 [35:58<06:22,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 676/811 [36:01<06:15,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 677/811 [36:04<06:08,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▎ | 678/811 [36:06<06:00,  2.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▎ | 679/811 [36:09<05:57,  2.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 680/811 [36:12<05:54,  2.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 681/811 [36:14<05:47,  2.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 682/811 [36:17<05:46,  2.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 683/811 [36:20<06:09,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 684/811 [36:23<06:13,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 685/811 [36:26<06:06,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▍ | 686/811 [36:29<06:02,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▍ | 687/811 [36:32<05:56,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▍ | 688/811 [36:34<05:46,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▍ | 689/811 [36:37<05:34,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▌ | 690/811 [36:40<05:35,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▌ | 691/811 [36:43<05:38,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▌ | 692/811 [36:46<05:35,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▌ | 693/811 [36:48<05:25,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 694/811 [36:51<05:19,  2.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 695/811 [36:54<05:19,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 696/811 [36:56<05:13,  2.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 697/811 [37:00<05:56,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 698/811 [37:07<07:59,  4.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 699/811 [37:10<07:06,  3.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▋ | 700/811 [37:13<06:43,  3.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▋ | 701/811 [37:30<13:49,  7.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 702/811 [37:33<11:15,  6.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 703/811 [37:36<09:28,  5.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 704/811 [37:39<08:01,  4.50s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 705/811 [37:42<07:06,  4.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 706/811 [37:45<06:26,  3.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 707/811 [37:47<05:54,  3.40s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 708/811 [37:50<05:37,  3.28s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 709/811 [37:53<05:12,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 710/811 [37:56<04:59,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 711/811 [37:59<04:58,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 712/811 [38:01<04:46,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 713/811 [38:04<04:48,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 714/811 [38:07<04:37,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 715/811 [38:10<04:42,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 716/811 [38:13<04:34,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 717/811 [38:16<04:26,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▊ | 718/811 [38:19<04:24,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▊ | 719/811 [38:21<04:12,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 720/811 [38:24<04:05,  2.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 721/811 [38:26<04:01,  2.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 722/811 [38:29<03:56,  2.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 723/811 [38:32<03:52,  2.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 724/811 [38:34<03:47,  2.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 725/811 [38:37<03:46,  2.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|████████▉ | 726/811 [38:39<03:44,  2.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|████████▉ | 727/811 [38:42<03:46,  2.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|████████▉ | 728/811 [38:45<03:44,  2.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|████████▉ | 729/811 [38:48<03:43,  2.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 730/811 [38:51<03:42,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 731/811 [38:53<03:38,  2.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 732/811 [38:56<03:47,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 733/811 [38:59<03:39,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 734/811 [39:02<03:42,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 735/811 [39:05<03:42,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 736/811 [39:08<03:37,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 737/811 [39:11<03:29,  2.83s/it] 91%|█████████ | 738/811 [39:13<03:23,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 739/811 [39:16<03:24,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 740/811 [39:20<03:30,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████▏| 741/811 [39:22<03:24,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████▏| 742/811 [39:26<03:26,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 743/811 [39:28<03:21,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 744/811 [39:31<03:15,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 745/811 [39:34<03:12,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 746/811 [39:37<03:08,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 747/811 [39:40<03:03,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 748/811 [39:43<02:56,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 749/811 [39:45<02:54,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 750/811 [39:48<02:45,  2.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 751/811 [39:50<02:40,  2.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 752/811 [39:53<02:35,  2.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 753/811 [39:56<02:37,  2.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 754/811 [39:58<02:32,  2.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 755/811 [40:01<02:30,  2.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 756/811 [40:04<02:29,  2.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 757/811 [40:07<02:25,  2.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 758/811 [40:09<02:23,  2.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▎| 759/811 [40:12<02:19,  2.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▎| 760/811 [40:15<02:18,  2.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 761/811 [40:18<02:23,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 762/811 [40:21<02:23,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 763/811 [40:24<02:18,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 764/811 [40:27<02:23,  3.06s/it] 94%|█████████▍| 765/811 [40:30<02:14,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 766/811 [40:32<02:04,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▍| 767/811 [40:36<02:09,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▍| 768/811 [40:39<02:10,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▍| 769/811 [40:42<02:02,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▍| 770/811 [40:44<01:59,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▌| 771/811 [40:47<01:57,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▌| 772/811 [40:50<01:54,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▌| 773/811 [40:53<01:51,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▌| 774/811 [40:56<01:47,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 775/811 [40:59<01:43,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 776/811 [41:02<01:38,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 777/811 [41:04<01:36,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 778/811 [41:08<01:36,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 779/811 [41:10<01:32,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 780/811 [41:13<01:29,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▋| 781/811 [41:16<01:27,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▋| 782/811 [41:24<02:09,  4.48s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 783/811 [41:27<01:51,  3.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 784/811 [41:30<01:36,  3.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 785/811 [41:33<01:26,  3.35s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 786/811 [41:36<01:24,  3.37s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 787/811 [41:39<01:20,  3.34s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 788/811 [41:42<01:12,  3.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 789/811 [41:45<01:06,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 790/811 [41:48<01:02,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 791/811 [41:51<00:58,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 792/811 [41:53<00:55,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 793/811 [41:56<00:52,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 794/811 [41:59<00:48,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 795/811 [42:02<00:44,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 796/811 [42:04<00:41,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 797/811 [42:07<00:38,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 798/811 [42:10<00:35,  2.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▊| 799/811 [42:13<00:32,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▊| 800/811 [42:15<00:30,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 801/811 [42:18<00:28,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 802/811 [42:21<00:25,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 803/811 [42:24<00:22,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 804/811 [42:27<00:19,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 805/811 [42:30<00:16,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 806/811 [42:32<00:14,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|█████████▉| 807/811 [42:37<00:13,  3.47s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|█████████▉| 808/811 [42:40<00:09,  3.24s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|█████████▉| 809/811 [42:43<00:06,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|█████████▉| 810/811 [42:45<00:02,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|██████████| 811/811 [42:49<00:00,  3.06s/it]100%|██████████| 811/811 [42:49<00:00,  3.17s/it]

3866274_20201_2_0,hredin4icz,3.7624650321702426,-64.7881443332706,-58.00910636979221

4378816_20201_2_0,hripho4icz,0.9513637507457696,-86.69356762894131,-36.92481367162274

5914280_20201_2_0,hrj18o4icz,-1.1195676468229177,-107.94260085537584,-41.60179880882784

1127464_20201_2_0,hrjs3p4icz,0.15054077826421622,-78.5976971318477,-49.550731383633945

1020599_20201_2_0,hrkoin4icz,0.3467506365330064,-108.8494857799434,-34.62377129951511

3368968_20201_2_0,hrktao4icz,0.6166996735025306,-87.7037104726424,-47.79047309246374

1966066_20201_2_0,hrnk8p4icz,19.877819756787765,3.3521496921699736,-131.17895820016022

3730938_20201_2_0,hrob7o4icz,-1.0099553599477429,-109.94179882048971,-37.99339505039285

2266774_20201_2_0,hrryln4icz,0.5500586666105517,-81.89029131294959,-40.614478008833146

3563788_20201_2_0,hrwyxo4icz,0.9984518345797557,-106.23758849666521,-22.356826809824383

4757858_20201_2_0,hrxiap4icz,1.0608659024268343,-111.73522584539052,-41.47361595744934

4886277_20201_2_0,hrxysn4icz,-1.0482838916433024,-147.9593470251697,-28.763392740327077

4914556_20201_2_0,hryh0p4icz,-0.11745816397363959,-63.05126528876116,-41.7802485606621

4960742_20201_2_0,hs0xfo4icz,-3.809212741796831,-100.55960092230413,-5.711567309457735

4928933_20201_2_0,hs28jp4icz,0.9258043639569687,-88.33478674067894,-42.4495194742191

5920339_20201_2_0,hs9nip4icz,-11.709418203033122,-161.24175252733727,-10.525698927403539

3354772_20201_2_0,hsaatn4icz,3.245721390353947,-73.03164330068876,-59.969655430519474

4773262_20201_2_0,hse5hp4icz,-0.2675088036413602,-115.42064876547147,-56.87866565623517

1272243_20201_2_0,hsen6o4icz,0.4428253015800726,-58.670107744348485,-35.47375179884129

5901393_20201_2_0,hsmsbn4icz,-1.3780541403530577,-65.84463852135721,-19.197204143646516

1244366_20201_2_0,hsox5p4icz,-0.23774991996552483,-92.63978833501383,-29.768988512252776

3899547_20201_2_0,hspj8o4icz,-1.3128398933477918,-126.12829168362407,-24.336014079972827

5229501_20201_2_0,hsr22o4icz,-1.7562217669702376,-97.60991843868433,-28.84839366392002

4096755_20201_2_0,hss2vo4icz,-0.6614285002206785,-81.45583995696484,-25.663777405464543

5988317_20201_2_0,hss64o4icz,-7.165851038577724,-129.63282561529618,5.405439230165612

3990390_20201_2_0,hsumpn4icz,-2.9433070544307367,-128.29192783225525,-21.18968436388967

2476745_20201_2_0,ht1aro4icz,5.629758736827117,-71.1575728394933,-62.9621025233192

1066128_20201_2_0,ht2wuo4icz,3.900282009530513,-47.45048339405429,-65.85016033877656

1818687_20201_2_0,ht4l9p4icz,-0.7389550738113844,-103.57933845964106,-24.916567322288017

5700082_20201_2_0,ht70un4icz,0.8864025472656961,-89.07359758604105,-39.74524206242364

2668864_20201_2_0,ht9qwn4icz,-1.113522560796944,-118.52099263839199,-26.514497112386124

2645936_20201_2_0,htgqtn4icz,1.842361854149812,-139.645244254836,-40.18272045861204

5020430_20201_2_0,htjf2o4icz,2.1293704871674084,-102.61183427471397,-59.14886732715814

2201612_20201_2_0,htlkjo4icz,0.47533996766516556,-134.99501394535204,-47.62856727699693

5047065_20201_2_0,htnx9n4icz,-0.26968981034522366,-122.32769877999075,-29.957422677080586

2292426_20201_2_0,hton5n4icz,-1.5589189570896738,-130.9998454804798,-46.649072854381686

1268687_20201_2_0,htwpjp4icz,0.042224583935275554,-98.96907992373016,-32.68286522519526

3687641_20201_2_0,htynfp4icz,0.40301481189203864,-110.95885668205199,-19.75248314617889

5411253_20201_2_0,htyo9p4icz,0.5347185432130741,-117.59573833943102,-36.9720105935867

2718070_20201_2_0,hu5pbo4icz,1.8345377547611401,-123.71228790860928,-44.42021237595671

2723597_20201_2_0,hu8aio4icz,-1.652777424462706,-63.16374551423357,-53.09769188987235

4091815_20201_2_0,hu8kdp4icz,2.998804934970608,-105.69584523883361,-49.14720548117282

2694143_20201_2_0,huco9n4icz,-1.5559813533208033,-119.3544354409527,-18.709837168336236

5670752_20201_2_0,hud40p4icz,-0.5084379819273624,-85.08593188427801,-36.93906355697352

4190242_20201_2_0,hue5zo4icz,-1.514155122453577,-67.54543272435083,-24.350866292389526

5211143_20201_2_0,huhaan4icz,1.0434679471541304,-76.94930080238038,-29.274430898854362

1061263_20201_2_0,huiuin4icz,0.5419440283189575,-121.62681427616099,-42.045366569809076

4008326_20201_2_0,huj7uo4icz,1.457707362329575,-100.05089243556992,-57.62866999329019

3659482_20201_2_0,hunrnn4icz,-1.9683738441469627,-95.38300726462177,-28.027633434622587

1838393_20201_2_0,hurfmo4icz,-0.0395868134742195,-76.16513109853796,-33.113040219051925

1973708_20201_2_0,hutk9n4icz,-2.2315836904657225,-128.56597568126853,-23.925947016165566

1442191_20201_2_0,hux5ap4icz,-4.154915034270781,-96.70276516095004,-3.008214073324794

3770249_20201_2_0,huybio4icz,-1.5313179858624204,-107.40178613176892,-29.440275643008988

2388212_20201_2_0,hv02zo4icz,-0.33918174024635617,-67.47564923410403,-40.24236456304129

3714146_20201_2_0,hv1mmo4icz,3.249284805245906,-108.28816880586581,-37.940423579660475

4821106_20201_2_0,hv67xn4icz,0.23291542087118536,-138.0919438351247,-32.31134624767401

1243782_20201_2_0,hv6a2o4icz,-1.3980275582497457,-90.82063105037483,-21.18899305036919

2500214_20201_2_0,hv8ocp4icz,5.821334471812877,-95.6224585077536,-54.37584817616141

5540579_20201_2_0,hvkiso4icz,-1.9205537197052165,-117.64433560384168,-38.67983682302824

3222208_20201_2_0,hvlwkn4icz,0.437585265817325,-135.24705417812896,-36.6191300729901

5386579_20201_2_0,hvrpjo4icz,-1.8570046626479115,-80.6194423789322,-42.31017128612565

2679967_20201_2_0,hvtbdn4icz,-1.6368538542663755,-97.3389182627952,-26.62763918881322

5052195_20201_2_0,hvzvyn4icz,-0.8592292176683494,-97.45439590134387,-39.55952581781452

4825215_20201_2_0,hvzx0o4icz,3.779313040475481,-87.48197888816387,-62.830777266531996

1035114_20201_2_0,hw0tro4icz,1.5930383973308402,-78.20790505595468,-34.87941433337873

4766532_20201_2_0,hw1y7o4icz,-1.630668103016168,-114.522489868653,-23.71096602961316

1494063_20201_2_0,hw2jen4icz,-6.427372105593212,-123.60428432209788,-2.0103531369273924

2620037_20201_2_0,hw9jeo4icz,0.7731575507073006,-119.48182751227029,-48.35154124938127

5323233_20201_2_0,hwcd5o4icz,-1.578169983623991,-109.72823847633848,-28.886642101892107

6017172_20201_2_0,hwiisn4icz,1.5261660825831092,-74.14586357318328,-59.79096495654059

2106878_20201_2_0,hwk1un4icz,-2.40770415685727,-96.50911136570951,7.876492254358823

5984922_20201_2_0,hwkqro4icz,0.4411857065319207,-99.37384651318925,-59.067917236675264

2932835_20201_2_0,hwnn6o4icz,-0.209601970292131,-100.31330840318196,-26.622366494143677

5973828_20201_2_0,hwp71p4icz,-1.2733529069137697,-114.12807499526107,-16.311831894545676

3015771_20201_2_0,hwsmgp4icz,-1.7909485673462242,-48.95044287231519,-23.251639641118686

2920535_20201_2_0,hx5jeo4icz,-5.965124574851344,-143.60768717792425,13.488948214460805

2621925_20201_2_0,hx9xzo4icz,-0.09055350835012067,-94.0531868633816,-32.11595919134932

5917142_20201_2_0,hxdnfo4icz,0.6355259439290759,-89.65510443878608,-32.62877972992736

4953026_20201_2_0,hxexso4icz,1.3577463686939053,-123.78994058112644,-51.7996621341547

1180700_20201_2_0,hxseln4icz,-2.2506558318568,-133.27582658908088,-23.46214457419333

5617132_20201_2_0,hxtono4icz,-0.16516115997265787,-91.38543244409254,-34.96092002754402

3437850_20201_2_0,hxv42o4icz,-0.13171680846154774,-82.02259898700532,-36.005939149632354

4422139_20201_2_0,hxwmep4icz,0.4331997931667674,-78.09181702770749,-34.58987172395646

2334152_20201_2_0,hy2yyo4icz,0.9351344703104203,-86.16549628873659,-46.15142413978998

5758017_20201_2_0,hyd5ln4icz,-1.7818185211665842,-77.34357789616882,-18.40316410210626

5139958_20201_2_0,hyhqno4icz,-1.5671570920909217,-99.86868669168959,-18.071818992216933

5895998_20201_2_0,hykr6p4icz,0.10803626875931009,-108.66414254191508,-68.09816237613128

1884788_20201_2_0,hykvzo4icz,-0.13759458953170858,-96.54846938377722,-37.81411265640976

1266959_20201_2_0,hylxun4icz,2.43554238664797,-67.94003706300984,-52.55797563931044

1671311_20201_2_0,hymd5p4icz,1.659031395457109,-47.41882589270929,-61.2145494957698

1744041_20201_2_0,hyt6sn4icz,0.5266439557013751,-85.86950957140235,-38.38644390280574

3180087_20201_2_0,hz07kp4icz,2.9280897680739133,-96.80197808438612,-53.884508440148466

4163990_20201_2_0,hz0osn4icz,-0.6634335162571501,-118.11022661368486,-37.91719539345462

1240376_20201_2_0,hz5gip4icz,-2.6135349838629374,-115.57330457042431,-9.066205804625056

1316423_20201_2_0,hz674p4icz,-0.5984815387987499,-83.0587113979513,-31.417450968525117

1775473_20201_2_0,hzjh0o4icz,-5.276151917612174,-152.4647734687624,-5.191964459137296

3805451_20201_2_0,hzk73o4icz,-2.9928473786132503,-116.93674550683198,-10.13533628726401

1838233_20201_2_0,hzlnqn4icz,-0.9846826891839832,-112.6021708449255,-12.870851197682455

2004070_20201_2_0,hzo3uo4icz,0.403175714927712,-102.70896648041452,-26.876385156553226

1104451_20201_2_0,hzofon4icz,0.02996776557392871,-93.76283032827405,-32.38938649124016

4018012_20201_2_0,hzqu7p4icz,-0.006813990075181504,-92.5172764788654,-35.77713105437648

4368370_20201_2_0,hzumin4icz,0.0508620107438116,-95.17734025830447,-37.14327385204288

3895086_20201_2_0,hzx0bn4icz,2.500569607209705,-85.09134604746089,-65.47051323973625

4083389_20201_2_0,hzx3cp4icz,-15.760237887725955,-89.75975652408931,57.48635943790204

1228792_20201_2_0,hzzpzo4icz,1.069379835957221,-112.59572597767482,-28.536457135259738

2406911_20201_2_0,i020hp4icz,0.8917705306379196,-96.34341872633016,-52.08316459650641

2270748_20201_2_0,i02zun4icz,3.299151579530247,-86.15503390031583,-54.91808562882244

4804453_20201_2_0,i03hen4icz,0.5785431523853055,-84.89827352946347,-29.119803849831342

3654705_20201_2_0,i08ydo4icz,-1.447719422778744,-133.65343530299842,-40.40060305387074

2503243_20201_2_0,i0cjgp4icz,0.4631771665465515,-67.60940202794933,-40.04391511701249

5215286_20201_2_0,i0fs9p4icz,1.3930197326515485,-93.18040836610194,-45.439193097933654

2742369_20201_2_0,i0m5gn4icz,-1.917751024337732,-119.50193099271394,-43.95977365088011

2828191_20201_2_0,i0n3un4icz,1.2082806062736495,-133.0789042962623,-43.8307231345259

5953446_20201_2_0,i0q8ip4icz,-1.3055969489515626,-120.26399470467817,-18.91885124028076

4399449_20201_2_0,i0sfip4icz,-2.147258840594461,-78.18540268843088,-19.447319534118634

3362717_20201_2_0,i0stlo4icz,2.5750489220565234,-79.22830308187412,-53.717127031226866

1809569_20201_2_0,i0t62p4icz,-2.865781216686951,-88.19596691765739,-20.88338235788416

3694571_20201_2_0,i0w1en4icz,1.6290935707143248,-96.33134709537705,-32.021601770378844

2369830_20201_2_0,i0yu2p4icz,2.182872064344647,-111.24829433721101,-61.95477679108524

4573822_20201_2_0,i0z0ro4icz,-1.58232816279899,-72.85906651671218,-24.718426178930457

2720361_20201_2_0,i1356p4icz,-3.5342366344659997,-97.82214720658288,-5.961440807671721

1877219_20201_2_0,i1448p4icz,2.2627597171835485,-80.92752714469896,-59.66638330269065

3228206_20201_2_0,i19g2p4icz,0.1510588719846752,-75.37797605903194,-49.21936975387949

3384969_20201_2_0,i19qbn4icz,-1.8453248311604422,-127.3428440774156,-25.145294830052308

4184317_20201_2_0,i1bnxn4icz,-2.7586302310905566,-92.14736557609734,-18.929160427286817

2221645_20201_2_0,i1e4jp4icz,-0.8778895117212853,-53.717983285126934,-23.884150678978116

4333646_20201_2_0,i1gjvn4icz,2.0828002436520787,-127.04768794582904,-52.66952324968645

3956759_20201_2_0,i1jpip4icz,-2.344526442003188,-148.86419568827745,-26.859492672541307

5790822_20201_2_0,i1onqn4icz,-1.7201420830796368,-77.96588260499686,-19.813546593841536

1448768_20201_2_0,i1s6dp4icz,-1.4025661383536672,-138.0920317408374,-39.98707391033882

1972009_20201_2_0,i1vgno4icz,4.7443929452959495,-109.16662628845836,-52.39634900479575

4340030_20201_2_0,i1w59n4icz,1.02673957645422,-128.0691841323621,-41.376752315726065

1248656_20201_2_0,i1zpcp4icz,-0.40829106150607025,-60.418853264865675,-32.32961025158194

5452676_20201_2_0,i20cro4icz,-1.1802923292619685,-123.12742181882652,-37.71939225525084

5295188_20201_2_0,i23l2o4icz,2.2340546327227035,-115.49628519912133,-46.02036005123891

4652773_20201_2_0,i27xqn4icz,2.790463147951373,-85.08540753078535,-41.906408626648954

5405613_20201_2_0,i2c4jp4icz,0.3661941038671724,-107.1127322615267,-36.294576570823764

3271323_20201_2_0,i2eijo4icz,-0.21732402168022993,-83.99737653127582,-29.582084029082637

2964782_20201_2_0,i2i2cp4icz,-2.353225788904434,-96.53471796247368,-30.76282754161305

5895488_20201_2_0,i2l0ro4icz,3.531767242610788,-102.19699612589122,-38.59076275317345

1180941_20201_2_0,i2mnon4icz,-2.2330111283513316,-108.80466479156749,-29.99919943150313

2392975_20201_2_0,i2rzco4icz,-4.1388183114948465,-69.05324053055901,-17.221152429174083

1233281_20201_2_0,i2u0vn4icz,-0.6710593268838192,-88.30951307300191,-37.51507992730255

2936613_20201_2_0,i30jjo4icz,3.1260449509573993,-100.73795978213735,-60.48835628603166

5913679_20201_2_0,i3aklo4icz,0.24584990206847437,-87.60179951972378,-26.560661892340434

5748421_20201_2_0,i3apmn4icz,-1.6117827742085484,-97.36182815314831,-31.88097445034603

2154272_20201_2_0,i3b32p4icz,-0.500689296193063,-45.88138801346582,-26.6096440976018

4483976_20201_2_0,i3gwpo4icz,3.30067328787165,-69.88024208326598,-48.2188124274068

3755206_20201_2_0,i3l78p4icz,-1.235251931165954,-90.62389054492971,-29.659102284134477

3400842_20201_2_0,i3m67p4icz,-4.609889049567763,-111.68383457847528,-22.17657751304651

4885831_20201_2_0,i3t60p4icz,-1.576773434346798,-109.99054694785119,-18.699378736285837

2211062_20201_2_0,i3ty6o4icz,-0.22541932809332393,-95.86580844648535,-40.036942611613625

1256440_20201_2_0,i3w11p4icz,-2.0474975191413307,-104.7254727099384,-15.810738035742233

2935992_20201_2_0,i4089n4icz,-3.900661533938217,-107.52046788654252,-10.366092364009603

1251630_20201_2_0,i40p0o4icz,-0.9887648445014493,-46.55659293705264,-26.96110035645549

2382747_20201_2_0,i42tvn4icz,1.482546083150443,-82.01714557704622,-42.36715987955722

4528814_20201_2_0,i445ip4icz,-1.0221380105343003,-70.74593463816677,-37.54566214363314

3059622_20201_2_0,i449zo4icz,-2.7963733859734705,-95.40178482176526,-19.886597507927064

2896983_20201_2_0,i4aygo4icz,-0.4615405823333655,-111.06284792246589,-18.6625049340267

4994388_20201_2_0,i4dzln4icz,0.2864749088414988,-108.51850745775741,-44.85113907979661

2585978_20201_2_0,i4ih7p4icz,0.4492377534163362,-110.65263022955855,-35.426867452307036

2873518_20201_2_0,i4qino4icz,-1.2922629950155609,-97.39230286118664,-17.757229497745044

4607515_20201_2_0,i4xm7o4icz,-1.0706312291452664,-100.71268877607142,-28.981028448949075

1899579_20201_2_0,i4zl6p4icz,-0.17922147703845498,-106.94713592536118,-33.86255641693786

1630615_20201_2_0,i4zuko4icz,-1.828134628320358,-69.29197155988663,-18.483120610003184

1968047_20201_2_0,i4zvro4icz,1.7037910843244362,-106.10925466852493,-34.849905791017534

4234125_20201_2_0,i57a4o4icz,0.001351065586141446,-120.11251042683477,-42.81474467001679

3048229_20201_2_0,i58msn4icz,-2.4698541760484805,-134.29569935966146,-26.18334669032808

1792883_20201_2_0,i597jo4icz,0.86933934731857,-79.54900222872172,-30.01492529355656

3941933_20201_2_0,i5gron4icz,1.6615120417315068,-76.34524097413362,-51.39997239375536

2619939_20201_2_0,i5ilto4icz,-1.225298384435333,-84.83674304708342,-65.79482118789846

5499312_20201_2_0,i5pesn4icz,2.643885767695609,-65.4252122333728,-46.98527590879044

3260526_20201_2_0,i5uqtn4icz,2.0601489308677965,-82.44317017370821,-44.95778317837823

4162327_20201_2_0,i5w5lo4icz,-0.7856596927980393,-132.03467094750457,-22.481655016833827

2752694_20201_2_0,i5ybyo4icz,-0.3236131531625541,-51.4292428464484,-35.25257742713541

4126399_20201_2_0,i613xn4icz,3.6092316402056186,-133.95599867859355,-58.898713676821075

5813022_20201_2_0,i6167o4icz,133.64347441793322,228.8275434199868,-155.8799387152989

2959127_20201_2_0,i61dao4icz,-5.509626653642126,-133.63752616267575,-17.007511981059196

1373920_20201_2_0,gakxnn4icz,3.208552366749385,-77.68304326501104,-53.45141311920055

3094283_20201_2_0,i6647p4icz,0.026115840218580422,-51.840699378954696,-51.99796751229296

6017989_20201_2_0,i675kp4icz,0.4228634026673915,-44.204126257939095,-47.18407835239968

5882486_20201_2_0,i6aeko4icz,1.4554426724927787,-107.73762150307641,-40.83812834185241

2472880_20201_2_0,i6ar4p4icz,2.9831067248971017,-70.61541694085344,-33.85951993467245

3357670_20201_2_0,i6c5ao4icz,0.5440521126661484,-116.22235298696054,-28.143836022708484

6019589_20201_2_0,i6d7eo4icz,0.875820444147576,-58.021827293746355,-36.4779106627749

3971006_20201_2_0,i6daqn4icz,0.8064222950125973,-58.42532565921752,-36.67874448918414

2102453_20201_2_0,i6kzwo4icz,-0.3603455746845671,-61.96754928984751,-29.06258123007254

5107530_20201_2_0,i6o2rn4icz,0.3759279615331482,-105.00451293897044,-27.582269653353137

2951184_20201_2_0,i6qnxo4icz,0.8617158574646723,-41.11613580121045,-28.18982861673632

1421023_20201_2_0,i6srhp4icz,2.061877146974829,-67.99012126328418,-41.33616076404377

1265195_20201_2_0,i6wgjp4icz,-1.7950883337958987,-102.28249539805665,-15.70231023635344

5568882_20201_2_0,i6woep4icz,-1.1732960962169992,-111.50669141328137,-26.600896033747745

2744522_20201_2_0,i6wsbo4icz,-7.288180195668522,-105.29107810800951,2.429961853505077

5013510_20201_2_0,i6x4io4icz,1.8082513128534068,-70.74613087056375,-34.81115583419951

5156563_20201_2_0,i6z3zo4icz,0.5596395751133504,-127.54682697329804,-46.329969125474776

1338587_20201_2_0,i6zggo4icz,-0.44334561196493827,-86.28137363921243,-30.49603197253903

2564013_20201_2_0,i73s3o4icz,2.318315215288629,-119.10661950192042,-57.113909394133856

3952419_20201_2_0,i752wn4icz,1.0259291047424919,-88.47011796968431,-38.81073802281601

3303567_20201_2_0,i76b3o4icz,3.13369165037381,-72.50686119913837,-65.69044618360567

2148302_20201_2_0,i770eo4icz,-0.7874410063404611,-121.76149972616366,-42.017572465267705

2248013_20201_2_0,i7bksn4icz,1.476955222687142,-102.75121962347049,-38.35888698085307

2048630_20201_2_0,i7d2rn4icz,-1.4257150856639484,-77.81566160718006,-18.87980367734528

2701318_20201_2_0,bdx5no4icz - Copy,-0.4683013791840224,-92.44343756557325,-31.545162209205515

4735308_20201_2_0,i7gx7o4icz,5.568728541406334,5.451245655257708,184.28012994740067

5231317_20201_2_0,i7if9o4icz,-2.9715811252154505,-94.29822306976058,-11.479751384461451

5355796_20201_2_0,i7ixun4icz,-0.2371504210021544,-98.16662528240855,-38.571309360332094

3983374_20201_2_0,i7qnfn4icz,2.171523452494254,-50.10031927007796,-43.77863052311187

4505087_20201_2_0,i7tcqn4icz,0.5124353570930867,-84.3107179981003,-27.932798415679613

1982323_20201_2_0,i7xbkn4icz,0.6727579629430864,-141.95018490446844,-39.27536306447162

4035508_20201_2_0,i7xitn4icz,1.4829118435971518,-120.75986816680177,-34.04601998533812

2888145_20201_2_0,i7yafp4icz,-9.134585813879113,-100.09337013385777,14.440962066809078

2867987_20201_2_0,i82iqn4icz,1.0912063345546503,-153.06618812487625,-41.99219978495738

4394896_20201_2_0,i85t4p4icz,0.6395691822712449,-58.77828839973296,-38.46494727883227

4396018_20201_2_0,i89z9n4icz,2.4793018967817484,-66.77248613224472,-51.58430720538328

5502348_20201_2_0,i8aamo4icz,0.697396752141356,-46.24532867261354,-38.29321255185339

1446273_20201_2_0,i8fean4icz,3.831114120471219,-152.66192969807872,-48.971629712601725

3480729_20201_2_0,n72gfo4icz,-0.44319353875433054,-108.09610433674447,-18.553495313931222

5047946_20201_2_0,i8mcxn4icz,2.6209567972202583,-95.37422962541126,-61.37870802096245

2804133_20201_2_0,i8ne4p4icz,1.3663915049046276,-114.11301636732915,-44.09123192121177

1351715_20201_2_0,i8sm9n4icz,-0.7819698796015638,-164.32627525554844,-29.467878128387667

3123333_20201_2_0,yrv75o4icz,-3.6173159462627806,-137.7852727636939,-14.672138510671715

3134608_20201_2_0,i945oo4icz,-0.012727853395531914,-139.50302205600292,-31.996075451488565

3879281_20201_2_0,i95z8p4icz,-1.0511264413068218,-103.71141532943406,-17.60561345783644

4506902_20201_2_0,i977ln4icz,1.8493022754417234,-87.7951654957821,-53.095697828963864

2527767_20201_2_0,i993mo4icz,3.7256994051905523,-96.023902946097,-54.431121382275364

5916848_20201_2_0,i9fpqn4icz,-1.8893063330644995,-112.37876629439612,-24.008867196366268

3642591_20201_2_0,i9gdwn4icz,-0.3931515528627598,-79.1090795055045,-33.23114745783546

4975734_20201_2_0,i9lmco4icz,0.8493079945043499,-128.91512052820434,-26.735382211044282

5713489_20201_2_0,i9pf0p4icz,0.17065349550088077,-89.46271957416113,-30.740068975137135

2935875_20201_2_0,i9r62p4icz,-1.113245351712678,-77.9389874721291,-26.448250328187186

2203975_20201_2_0,i9ta4p4icz,0.11047300405666313,-64.15166669363285,-32.60160025150998

3029633_20201_2_0,i9uepn4icz,-2.6194503344094464,-126.23829390992802,-6.812241169673825

2786994_20201_2_0,i9vgco4icz,0.19283001983018574,-110.07583384442856,-31.669841983036534

4379930_20201_2_0,i9wmwo4icz,-1.2419880405114088,-99.07580734191296,-38.463215249318324

2514118_20201_2_0,i9x11o4icz,1.122432478702626,-88.63493706427889,-37.68944704612082

4295727_20201_2_0,ia34yo4icz,0.8300650617996779,-72.437078945508,-56.86574158440233

3936663_20201_2_0,ia3lpn4icz,-0.018292138151158797,-103.17513556121185,-31.70707640054306

2177617_20201_2_0,arvzgo4icz,-0.5366419924731703,-52.98204972183376,-41.97043766920689

1799202_20201_2_0,ia8tip4icz,-10.388113081357895,-125.67624450982598,33.12419663913218

2538004_20201_2_0,ian6oo4icz - Copy,1.1577734004311762,-87.52203687954204,-41.44318571145392

2538004_20201_2_0,ian6oo4icz,1.1577734004311762,-87.52203687954204,-41.44318571145392

2965094_20201_2_0,iapj4p4icz,-2.7377601118081456,-79.21073568505352,-16.10395990650494

2743248_20201_2_0,iaqg8p4icz,-0.6220560709432604,-113.03536260498288,-24.628164773389926

4168182_20201_2_0,iaqxco4icz,3.1088891768363878,-113.5859057490564,-36.14197113562827

2507666_20201_2_0,ias86o4icz,-1.6996168492139299,-105.48163374483076,-33.103119838687874

3059276_20201_2_0,ias9lo4icz,-0.15922282670332122,-119.68499562562582,-41.733446100786864

2719127_20201_2_0,iaucnn4icz,3.4487064355331136,-81.51540930557948,-62.3865638623251

3001767_20201_2_0,iax1jp4icz,2.2253188707976146,-100.6654212993179,-38.39697512560586

5861408_20201_2_0,iaye5o4icz,-1.0521057863701753,-100.753558877649,-40.050229857487764

4731027_20201_2_0,p4nz5o4icz,1.1981660956616313,-96.85730945490042,-38.086240822317066

/users/rhydian/anaconda3/envs/torch_env/lib/python3.7/site-packages/torch/cuda/__init__.py:52: UserWarning: CUDA initialization: Found no NVIDIA driver on your system. Please check that you have an NVIDIA GPU and installed a driver from http://www.nvidia.com/Download/index.aspx (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729006826/work/c10/cuda/CUDAFunctions.cpp:100.)
  return torch._C._cuda_getDeviceCount() > 0
  0%|          | 0/102 [00:00<?, ?it/s]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 1/102 [00:03<05:33,  3.30s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 2/102 [00:06<05:25,  3.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 3/102 [00:09<05:19,  3.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/102 [00:12<05:06,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▍         | 5/102 [00:15<04:56,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 6/102 [00:18<04:50,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 7/102 [00:20<04:35,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 8/102 [00:23<04:27,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 9/102 [00:26<04:23,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|▉         | 10/102 [00:29<04:20,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 11/102 [00:32<04:17,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 12/102 [00:36<05:00,  3.34s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 13/102 [00:40<05:23,  3.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▎        | 14/102 [00:43<04:59,  3.41s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▍        | 15/102 [00:46<04:36,  3.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 16/102 [00:49<04:22,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 17/102 [00:52<04:16,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 18/102 [00:56<04:34,  3.27s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▊        | 19/102 [00:59<04:27,  3.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|█▉        | 20/102 [01:02<04:18,  3.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 21/102 [01:05<04:09,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 22/102 [01:08<04:03,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 23/102 [01:10<03:48,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▎       | 24/102 [01:13<03:45,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▍       | 25/102 [01:16<03:38,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▌       | 26/102 [01:18<03:32,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▋       | 27/102 [01:21<03:27,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 28/102 [01:24<03:28,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 29/102 [01:27<03:24,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 30/102 [01:30<03:26,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|███       | 31/102 [01:33<03:26,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███▏      | 32/102 [01:36<03:21,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 33/102 [01:38<03:15,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 34/102 [01:44<04:00,  3.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 35/102 [01:46<03:40,  3.30s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▌      | 36/102 [01:49<03:30,  3.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▋      | 37/102 [01:52<03:17,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 38/102 [01:55<03:12,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 39/102 [01:58<03:13,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 40/102 [02:01<03:04,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|████      | 41/102 [02:04<03:04,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 42/102 [02:07<02:58,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 43/102 [02:10<02:58,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 44/102 [02:13<02:52,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 45/102 [02:17<03:05,  3.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▌     | 46/102 [02:20<02:59,  3.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 47/102 [02:23<02:54,  3.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 48/102 [02:25<02:40,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 49/102 [02:28<02:34,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 50/102 [02:31<02:31,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 51/102 [02:34<02:33,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 52/102 [02:39<02:49,  3.40s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 53/102 [02:41<02:34,  3.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 54/102 [02:44<02:25,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 55/102 [02:47<02:22,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▍    | 56/102 [02:50<02:19,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 57/102 [02:53<02:14,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 58/102 [02:56<02:08,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 59/102 [02:59<02:06,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 60/102 [03:01<01:59,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|█████▉    | 61/102 [03:05<02:01,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 62/102 [03:07<01:55,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 63/102 [03:10<01:49,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 64/102 [03:13<01:46,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▎   | 65/102 [03:16<01:44,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▍   | 66/102 [03:18<01:40,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 67/102 [03:21<01:38,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 68/102 [03:24<01:35,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 69/102 [03:27<01:33,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▊   | 70/102 [03:29<01:28,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|██████▉   | 71/102 [03:32<01:23,  2.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 72/102 [03:35<01:21,  2.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 73/102 [03:37<01:17,  2.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 74/102 [03:41<01:20,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▎  | 75/102 [03:43<01:17,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▍  | 76/102 [03:47<01:16,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▌  | 77/102 [03:50<01:13,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▋  | 78/102 [03:52<01:09,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 79/102 [03:55<01:06,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 80/102 [03:59<01:07,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 81/102 [04:02<01:04,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 82/102 [04:05<00:59,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████▏ | 83/102 [04:07<00:55,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 84/102 [04:10<00:51,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 85/102 [04:14<00:52,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 86/102 [04:16<00:47,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▌ | 87/102 [04:22<00:57,  3.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▋ | 88/102 [04:25<00:48,  3.48s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 89/102 [04:28<00:42,  3.29s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 90/102 [04:30<00:37,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 91/102 [04:33<00:33,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 92/102 [04:36<00:29,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 93/102 [04:39<00:25,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 94/102 [04:42<00:23,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 95/102 [04:44<00:20,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 96/102 [04:47<00:17,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▌| 97/102 [04:50<00:14,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 98/102 [04:53<00:11,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 99/102 [04:55<00:08,  2.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 100/102 [04:58<00:05,  2.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 101/102 [05:05<00:03,  3.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|██████████| 102/102 [05:29<00:00,  9.90s/it]100%|██████████| 102/102 [05:29<00:00,  3.23s/it]
Trying to load from /users/rhydian/self-supervised-project/model_weights/SSECEncodersBothBoth
==> Resuming model trained for 106 epochs...
Trying to load from ../model_weights/angle_regressor4
==> Resuming model trained for 7 epochs...
4267039_20201_2_0,gaq5jp4icz,1.0227299941180537,-108.93048561413809,-54.259135787162904

5065964_20201_2_0,gasf9p4icz,1.3242439609140542,-109.96616689113355,-33.7893850437699

3965241_20201_2_0,gbh9cp4icz,-5.052329857402964,-89.61314606748374,-9.256588161552088

4662101_20201_2_0,gc125o4icz,1.5937793214666538,-52.236103945868365,-20.84653773217954

2979704_20201_2_0,gc8ken4icz,0.004850724839273565,-122.08596216430837,-32.62414475708164

4243111_20201_2_0,gceg6o4icz,0.4389942084922333,-99.66011788396071,-30.05186256672883

5928282_20201_2_0,gcvvrn4icz,-1.2220841483648177,-117.66525804699083,-30.57665511779807

2881571_20201_2_0,gd40ho4icz,-1.444914117412605,-110.51374068587785,-21.7172866216423

2696258_20201_2_0,gdacoo4icz,2.7191523855865607,-92.07233708621246,-40.34215738777071

1068882_20201_2_0,gdg8dn4icz,0.9021607452337581,-152.86791530795458,-41.93883180127878

3933997_20201_2_0,gdiwip4icz,0.4105457674788433,-137.58951219538037,-32.68987837854617

1553218_20201_2_0,ged8ko4icz,-0.9722060357230823,-75.39459974416397,-38.43040406344028

5960292_20201_2_0,gedyep4icz,-1.6467084131603429,-84.66364610877963,-23.01591532947819

1528770_20201_2_0,geolho4icz,-1.0644909562147304,-90.12777486337114,-35.20493373452622

5566840_20201_2_0,geuyjn4icz,-0.27124341428408977,-95.60230661281975,-20.952491349528657

1673581_20201_2_0,gev29p4icz,0.13296463090542093,-104.19679819088645,-43.250658277730565

2565267_20201_2_0,gfltlo4icz,2.812029199102881,-70.7659808651328,-46.78712559010441

4727266_20201_2_0,ghl6go4icz,1.2050324689838683,-90.16291455752514,-38.936774407050535

1421092_20201_2_0,ghrcan4icz,-1.7923818114541694,-97.01909301341621,-20.79533318721161

4481593_20201_2_0,giurjn4icz,-1.5731916888556527,-106.09383936958261,-36.818344532615384

4501837_20201_2_0,gjdp4p4icz,-0.360436672966334,-53.77171904013758,-37.72344726440039

4846669_20201_2_0,gjnsin4icz,-0.24618721550641248,-72.82174936544573,-41.398629974880464

5559937_20201_2_0,gjulan4icz,-0.9537062214989581,-131.97049644669949,-33.008089976572194

5393338_20201_2_0,gkz2kp4icz,3.0949313391868305,-44.62999128279088,-60.77973759794607

2733731_20201_2_0,gl4d1o4icz,2.4700662465073946,-99.15604724175012,-46.986141879063

1441209_20201_2_0,glmvao4icz,-1.3807221844019322,-100.17791021532469,-19.08297812606746

4837551_20201_2_0,glsx5p4icz,-2.6610975261833936,-129.30035946184984,-13.675589516768525

1684198_20201_2_0,gmp62p4icz,0.10003701381700418,-59.93193462091608,-32.17816732593832

4816891_20201_2_0,gncdpn4icz,-1.4870330533957428,-138.84169147022837,-32.998377879295035

1446092_20201_2_0,gnt3eo4icz,4.853523792867513,-88.52828604523324,-76.78982549606191

3006154_20201_2_0,gnuren4icz,-1.2183062593189413,-116.71804897373912,-28.752003565503202

4489363_20201_2_0,godnip4icz,0.525078748718134,-112.29955037571253,-44.7037817216203

4755448_20201_2_0,gomlmo4icz,-3.0117836240863216,-106.34605608201227,-25.09968427928169

2429952_20201_2_0,gpwkpo4icz,1.079343143911917,-61.28588171317952,-40.76636643088544

3798293_20201_2_0,gqgvlo4icz,-2.6102183532465233,-91.16774169824373,-15.531466474184441

4308553_20201_2_0,grb9wn4icz,0.15266458610724515,-134.7844007481842,-48.12028945535175

3065706_20201_2_0,grfvzo4icz,-1.475586212245894,-144.98467147934934,-25.0736305255424

3308168_20201_2_0,grjn9p4icz,-4.644806607047368,-102.07469234772685,-9.765340228167787

2447689_20201_2_0,grno9o4icz,-1.1870647391147722,-68.35619428051183,-34.22150795484366

5147890_20201_2_0,gshpbp4icz,0.5138299542868489,-140.73714473222572,-40.19095147646115

1694635_20201_2_0,gsmicn4icz,0.3267348269063817,-102.655545038355,-36.95744012181237

1299013_20201_2_0,gssq7p4icz,2.3619939031169794,-64.82762453395873,-64.03363032840859

1312166_20201_2_0,gu6y4o4icz,-0.20971413615757328,-92.75054695850827,-36.56853613685571

4948901_20201_2_0,gvauyo4icz,1.2267774445242288,-81.12352234514569,-40.12821751361439

4767129_20201_2_0,gxf8po4icz,1.174743916730851,-52.58119837214508,-53.57877065530437

1558570_20201_2_0,gzi5ao4icz,4.870130063534838,-119.60058799576927,-76.04319366517939

3441690_20201_2_0,h1f7ho4icz,1.3700206672862074,-112.7656881184657,-42.10886898289391

1875786_20201_2_0,h1t5en4icz,-3.628501821160668,-170.2945238229095,-17.73518989653317

3418432_20201_2_0,h2280p4icz,-1.6278014225929216,-66.73556677045565,-35.8142745023206

2282919_20201_2_0,h277ho4icz,0.27857701132032603,-70.66029837911856,-35.9481146765613

4306931_20201_2_0,h2k86o4icz,0.81371986325454,-59.771167178662665,-38.57485453448054

4198705_20201_2_0,h2ts9p4icz,2.0846497616784516,-97.12774424123381,-55.542972335481466

2087172_20201_2_0,h3mx5o4icz,-1.2385638555552323,-89.39658612951317,-29.913110032879416

1254746_20201_2_0,h436en4icz,0.7711127112565804,-59.896929832798264,-53.08150543536763

3011201_20201_2_0,h4jkqo4icz,1.037965757918874,-61.586636682709695,-42.74700110709324

5787427_20201_2_0,h58s7o4icz,-3.8143627928732764,-137.36711287392873,-18.477471848184294

2442271_20201_2_0,h68zoo4icz,-6.1622645002469225,-64.30752897662862,-26.670958400465224

5286090_20201_2_0,h6ijkn4icz,-2.800000948191235,-114.41889846172026,-28.90509902918781

3682228_20201_2_0,ha5tko4icz,-2.118046940303253,-123.00634998871442,-42.673639730874584

3483555_20201_2_0,hbbw9o4icz,1.5733538106189413,-117.21891336413978,-34.183496608439924

5436558_20201_2_0,hbc3vo4icz,2.102217255543621,-31.449452754029096,-57.582496949470524

3728878_20201_2_0,hcpyko4icz,-3.0676158564332394,-127.85150932658993,-24.157648180052064

3860919_20201_2_0,hcs2ip4icz,-0.15637044639908831,-69.29612357854018,-27.789031256199053

1523299_20201_2_0,hctezo4icz,1.9901360471174838,-36.95185443135338,-41.43430461882872

1663468_20201_2_0,hd76wo4icz,1.5452729372909157,-67.98609427466181,-23.216083006334074

3860215_20201_2_0,hdg1ln4icz,-0.5805022779417182,-96.79194783885015,-33.01260715540771

1447512_20201_2_0,heedso4icz,1.6383174505771518,-80.99757235930386,-30.099066633167737

2555496_20201_2_0,hefk4p4icz,-1.5013432642130038,-115.55502050123908,-33.87968527371913

1318427_20201_2_0,hefwyo4icz,-2.0109435644330276,-79.0808279079929,-22.038645292192854

4726235_20201_2_0,hfhwko4icz,0.45973100763564734,-99.12199517213458,-46.60255438584633

3536216_20201_2_0,hfpruo4icz,-1.4038185240285146,-77.59695046193318,-14.208430158701816

3052917_20201_2_0,hfq3un4icz,1.2339532532293087,-82.0712581519901,-42.33107602535978

2274784_20201_2_0,hfrwmn4icz,-2.7856832891890178,-68.93536314864937,-17.877287889513653

3423976_20201_2_0,hh9ifp4icz,-6.475058452457972,-117.5499703719797,-7.3701980632651924

1311627_20201_2_0,hhcnvn4icz,5.334544108943061,-133.40028978596123,-50.66311171693408

3081460_20201_2_0,hhk5un4icz,0.705205412937633,-89.3531308111281,-33.377584308089624

3258826_20201_2_0,hhs3cp4icz,4.9403280974405845,-124.2640170582523,-66.6794807835321

6015427_20201_2_0,hhzjzo4icz,12.694112494211852,-60.99400509998608,-121.99652581992717

4159460_20201_2_0,hjaxun4icz,0.9577700629917246,-102.99326054429685,-46.04066190093553

2925331_20201_2_0,d1rqon4icz,1.4701554498551548,-58.961110455140584,-35.621785690154624

1919245_20201_2_0,hjh9hp4icz,8.17640016309559,-85.51314165082994,-99.5895482666984

1061811_20201_2_0,hm2wrn4icz,2.1600016751521487,-95.78228173846281,-51.11734037080916

4853608_20201_2_0,hmc75o4icz,1.1953785268775592,-75.73581562124858,-51.9191752336267

2662361_20201_2_0,hnctbp4icz,-3.3018563197790494,-105.3783948017645,-14.171595607625278

5151203_20201_2_0,hnicbp4icz,-0.06448577614355108,-108.34633036029126,-34.65545985824643

5737246_20201_2_0,hnzino4icz,-5.143454441921737,-91.28632463765288,-16.215941271591888

3132593_20201_2_0,ho98bo4icz,0.3229855188093567,-119.78668177384085,-6.917698683564339

2554473_20201_2_0,hpnvpn4icz,-0.4053254923126173,-120.75395101620327,-23.96642129468748

5062373_20201_2_0,hq1jpn4icz,-0.8412534811272441,-105.97929328903703,-35.517779563285444

2321603_20201_2_0,hqk6vo4icz,-2.1003732199150953,-75.1210242129628,-32.54800385120781

6012760_20201_2_0,hqp1fo4icz,0.42142294505060207,-106.26129342414703,-37.48619556779258

2607450_20201_2_0,hs594p4icz,1.0196191821631009,-61.15359423794871,-49.43741737647406

2938678_20201_2_0,hted5o4icz,1.881188133447538,-87.20221628074515,-51.35983862744882

3907060_20201_2_0,htk1so4icz,0.12673915068878935,-96.92092643276305,-46.72997778679546

2487913_20201_2_0,hud7qo4icz,-1.582666453898292,-66.89413794448515,-34.49382607215513

1768346_20201_2_0,hvp8vn4icz,3.590070400310393,-136.5467750079011,-67.61291085538882

1966583_20201_2_0,hw34ep4icz,1.211937173467835,-50.70003161149714,-60.57149610591597

4215289_20201_2_0,hxfmap4icz,-0.07974801429209391,-68.1584857821735,-35.24221437126147

3338864_20201_2_0,i0newn4icz,0.6360068500223917,-109.64613964319636,-13.852778059026022

5920571_20201_2_0,i0ws6n4icz,-0.8835001468818697,-112.22423084256818,-42.29543545890152

4437688_20201_2_0,i1jfeo4icz,-4.00434483481443,-116.17845739658765,-17.02042877331752

3028514_20201_2_0,xhsy8o4icz,0.06240198835132491,-94.67824117010275,-33.99489733156361

/users/rhydian/anaconda3/envs/torch_env/lib/python3.7/site-packages/torch/cuda/__init__.py:52: UserWarning: CUDA initialization: Found no NVIDIA driver on your system. Please check that you have an NVIDIA GPU and installed a driver from http://www.nvidia.com/Download/index.aspx (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729006826/work/c10/cuda/CUDAFunctions.cpp:100.)
  return torch._C._cuda_getDeviceCount() > 0
  0%|          | 0/101 [00:00<?, ?it/s]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 1/101 [00:03<05:14,  3.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 2/101 [00:06<05:13,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 3/101 [00:09<04:55,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/101 [00:11<04:47,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▍         | 5/101 [00:14<04:34,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 6/101 [00:17<04:40,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 7/101 [00:20<04:31,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 8/101 [00:23<04:22,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 9/101 [00:26<04:44,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|▉         | 10/101 [00:29<04:34,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 11/101 [00:32<04:20,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 12/101 [00:34<04:08,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 13/101 [00:37<04:06,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 14/101 [00:40<03:59,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▍        | 15/101 [00:42<03:52,  2.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 16/101 [00:45<03:49,  2.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 17/101 [00:48<03:42,  2.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 18/101 [00:51<03:48,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 19/101 [00:54<03:51,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|█▉        | 20/101 [00:56<03:46,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 21/101 [00:59<03:39,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 22/101 [01:02<03:41,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 23/101 [01:05<03:50,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 24/101 [01:08<03:56,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▍       | 25/101 [01:11<03:47,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 26/101 [01:14<03:38,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 27/101 [01:17<03:29,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 28/101 [01:20<03:30,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▊       | 29/101 [01:22<03:25,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|██▉       | 30/101 [01:25<03:22,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 31/101 [01:28<03:22,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 32/101 [01:41<06:50,  5.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 33/101 [01:45<05:50,  5.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▎      | 34/101 [01:47<04:56,  4.42s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▍      | 35/101 [01:50<04:16,  3.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 36/101 [01:52<03:44,  3.45s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 37/101 [01:55<03:30,  3.30s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 38/101 [01:58<03:24,  3.24s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▊      | 39/101 [02:01<03:08,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|███▉      | 40/101 [02:04<02:59,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 41/101 [02:07<03:00,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 42/101 [02:10<02:59,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 43/101 [02:13<02:50,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▎     | 44/101 [02:15<02:42,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▍     | 45/101 [02:18<02:39,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 46/101 [02:22<02:55,  3.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 47/101 [02:25<02:47,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 48/101 [02:32<03:41,  4.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▊     | 49/101 [02:35<03:27,  3.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|████▉     | 50/101 [02:38<03:06,  3.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 51/101 [02:42<03:01,  3.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████▏    | 52/101 [02:45<02:45,  3.38s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 53/101 [02:47<02:33,  3.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 54/101 [02:50<02:21,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 55/101 [02:53<02:18,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▌    | 56/101 [02:56<02:13,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▋    | 57/101 [02:59<02:10,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 58/101 [03:01<02:03,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 59/101 [03:05<02:06,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 60/101 [03:07<01:58,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|██████    | 61/101 [03:12<02:17,  3.44s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████▏   | 62/101 [03:15<02:06,  3.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 63/101 [03:18<01:56,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 64/101 [03:20<01:49,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 65/101 [03:25<02:08,  3.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▌   | 66/101 [03:28<02:00,  3.43s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▋   | 67/101 [03:31<01:50,  3.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 68/101 [03:34<01:42,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 69/101 [03:37<01:34,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 70/101 [03:39<01:27,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|███████   | 71/101 [03:42<01:22,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████▏  | 72/101 [03:44<01:20,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 73/101 [03:47<01:16,  2.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 74/101 [03:50<01:17,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 75/101 [03:53<01:14,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▌  | 76/101 [03:55<01:06,  2.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 77/101 [03:58<01:03,  2.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 78/101 [04:00<00:59,  2.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 79/101 [04:03<00:58,  2.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 80/101 [04:06<00:55,  2.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 81/101 [04:08<00:53,  2.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 82/101 [04:11<00:50,  2.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 83/101 [04:14<00:47,  2.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 84/101 [04:16<00:45,  2.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 85/101 [04:19<00:43,  2.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▌ | 86/101 [04:22<00:40,  2.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 87/101 [04:25<00:38,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 88/101 [04:28<00:36,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 89/101 [04:30<00:33,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 90/101 [04:33<00:30,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 91/101 [04:36<00:28,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 92/101 [04:39<00:24,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 93/101 [04:41<00:22,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 94/101 [04:44<00:19,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 95/101 [04:47<00:16,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▌| 96/101 [04:50<00:13,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 97/101 [04:53<00:11,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 98/101 [04:55<00:08,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 99/101 [04:58<00:05,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 100/101 [05:01<00:02,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|██████████| 101/101 [05:04<00:00,  2.98s/it]100%|██████████| 101/101 [05:04<00:00,  3.02s/it]
Trying to load from /users/rhydian/self-supervised-project/model_weights/SSECEncodersBothBoth
==> Resuming model trained for 106 epochs...
Trying to load from ../model_weights/angle_regressor4
==> Resuming model trained for 7 epochs...
3185271_20201_2_0,g9f4ko4icz,-1.3741964832163671,-108.83948499788568,-15.68868518233279

1369422_20201_2_0,g9meqn4icz,2.7949139981581337,-51.57794857506457,-70.7950457686593

5015512_20201_2_0,g9sedp4icz,2.575332892432359,-124.17379834473482,-59.28096989214194

5894745_20201_2_0,ga0rtn4icz,-1.8041637591261936,-94.94697602355353,-36.21696604242527

4333813_20201_2_0,gb1j9o4icz,1.0129249756409404,-86.99485369471253,-21.076386059549748

1907090_20201_2_0,gb70pn4icz,0.5089690058422387,-69.91269715331927,-35.67618801758559

5923772_20201_2_0,ge4wro4icz,-0.008585536025583804,-56.171840790286865,-33.559997370315614

6008787_20201_2_0,getcco4icz,0.2466040921630629,-92.10492908618221,-26.71317912370661

2956729_20201_2_0,6dadco4icz,1.4468835691708846,-60.59373057547484,-39.401246056283824

5988903_20201_2_0,gg86no4icz,2.2039898873031234,-99.78495683069804,-55.47977863959993

5153429_20201_2_0,ghi38p4icz,1.5369791782865099,-91.5349295428976,-46.031963801125684

4713848_20201_2_0,gik9jo4icz,1.918220140459876,-112.04340429560696,-53.03601490944317

1333343_20201_2_0,gjn2bn4icz,-1.0981699583351787,-100.32210337637375,-36.05972361953728

1028055_20201_2_0,gkmamo4icz,-1.2720190697013094,-54.47959288680957,-28.552300972397433

4059261_20201_2_0,glgkfp4icz,3.718515937861133,-79.7737364464501,-65.29639427925994

3011728_20201_2_0,glj07o4icz,-2.1306838473809724,-97.75177017191336,-19.795071857236465

6022020_20201_2_0,gncwwo4icz,0.3166068737476323,-92.9166295151669,-41.11501680484915

2047063_20201_2_0,go6lyo4icz,-1.3909296948626444,-61.810719745311644,-23.998325794847204

4929456_20201_2_0,gpglbp4icz,0.828649759437263,-48.060305617190295,-47.75106234120585

2687126_20201_2_0,gpqf0o4icz,-0.23406417749863426,-122.94533989562487,-48.448018715827956

5069335_20201_2_0,gqvjvn4icz,2.5129186302778552,-83.15501097969133,-56.32761650268502

4772341_20201_2_0,grqk5o4icz,-2.430675811007463,-57.45096098861097,-19.09865613478256

3046489_20201_2_0,djj0po4icz,0.4812661117859399,-46.876668366961155,-37.02485019095185

2313243_20201_2_0,gsy1no4icz,0.07113565813239886,-89.0830522777282,-31.853794181876253

4117841_20201_2_0,gu4gsn4icz,0.03983098496665387,-109.11391583877742,-36.87520759018791

3084046_20201_2_0,gubfgo4icz,0.7936237035988027,-87.16630658259618,-34.599077689039376

2491932_20201_2_0,guw3ao4icz,-0.8860514286581275,-87.6285389898361,-36.69874716464825

2774931_20201_2_0,gv97nn4icz,-4.478708972187646,-95.93119515835502,-16.872404616275787

4689839_20201_2_0,gviv3o4icz,0.3968408038609594,-84.86331114818677,-28.504331499160244

1667736_20201_2_0,gvoz3p4icz,0.14058579111836575,-101.40627199579717,-33.88170974961227

5205047_20201_2_0,gwfwbo4icz,0.7604519756318306,-80.10851203316065,-31.755800299313577

3110862_20201_2_0,gwwjan4icz,-0.09991119520980704,-110.9560909014113,-45.39431891458703

4180825_20201_2_0,gz82nn4icz,-2.187118242205884,-103.92699090412157,-30.340561231339294

2247014_20201_2_0,gyc6io4icz,-3.8463832676419205,-112.31956568635712,-25.227117289790954

5026313_20201_2_0,gz7ulo4icz,-7.653394488625918,-161.5407105972872,20.653520816989612

4180825_20201_2_0,gz82nn4icz,-2.187118242205884,-103.92699090412157,-30.340561231339294

2538694_20201_2_0,h08ibp4icz,1.3618218607100332,-108.2614732556168,-51.28089583719883

4149309_20201_2_0,h2t4oo4icz,0.5541520681570078,-117.66565936709907,-39.30223961051735

3750219_20201_2_0,h306jp4icz,2.030215137012275,-72.51500838692834,-55.85459925165337

4317532_20201_2_0,h3xggn4icz,-0.8216786553353095,-73.0901774784084,-30.929410513930108

2754380_20201_2_0,h4os9p4icz,3.344242498988587,-84.55987638063732,-64.1490883273237

4320045_20201_2_0,h4owfn4icz,0.11275531027839283,-126.98003370567272,-46.85937459596566

2885029_20201_2_0,h5ugap4icz,1.5097621299711534,-94.73558200551807,-28.034948959906927

5658331_20201_2_0,h75a0p4icz,0.9685548620318117,-66.66378069491654,-42.88019246329823

3103665_20201_2_0,h76hwo4icz,1.4534521684139818,-77.29813023661421,-51.17842142260933

2347581_20201_2_0,h78jno4icz,-2.8865290862675472,-95.94055347223184,-25.264051509738835

1985105_20201_2_0,h7gvcn4icz,0.23216783124621918,-102.46392902217238,-50.994833841765626

5264640_20201_2_0,mt9xao4icz,8.752342034347242,-102.16962963937823,-83.78341596577465

4523918_20201_2_0,h9epxo4icz,-1.888824285239075,-98.19645833881572,-23.170274291877888

2488081_20201_2_0,hbg8do4icz,-1.1422683930414212,-129.39595061792403,-10.126667001297562

3653603_20201_2_0,hc1shp4icz,-1.8669550686605838,-116.85645226148773,-11.795064032111767

1506912_20201_2_0,hc4cip4icz,-5.881085098120994,-85.57642293459088,13.158775813421826

2511100_20201_2_0,hc5urn4icz,1.6596663826802944,-28.509974321273347,-65.01545107817283

1087239_20201_2_0,hck2bn4icz,-4.068883212185681,-156.91913271042642,-12.404171877870255

1281056_20201_2_0,hdsrsn4icz,-21.048485434185693,-155.26377035301095,58.05653648948507

2580267_20201_2_0,9ny4xn4icz,0.30204613923912677,-103.74260505939677,-34.63760748446529

6024641_20201_2_0,hf0kbp4icz,5.923921613460293,-74.69412139409394,-59.434216554545955

3188205_20201_2_0,hhqb1p4icz,-0.5278774179821067,-112.91198662433249,-30.26867262131796

5962184_20201_2_0,hi6urn4icz,-0.18857854438828067,-115.30282226197798,-54.64993354593642

4474744_20201_2_0,hip3hp4icz,-0.32064629781471404,-102.87788241167166,-35.15403244187948

3813694_20201_2_0,ttwfko4icz,1.98338532954594,-102.62132382108106,-39.502333135904195

2576122_20201_2_0,hkrybp4icz,-1.1477170223869617,-149.78422021301952,-22.84413679792158

4389700_20201_2_0,hkzvuo4icz,-5.5390483176581515,-100.0253983782251,-1.9535671925511906

1926089_20201_2_0,hneuyo4icz,-2.3781296233882334,-106.64552042389573,-38.15396915828441

5973793_20201_2_0,hnlpln4icz,-0.8923156657232167,-130.11962735050824,-45.548647084092536

4094097_20201_2_0,hntuxo4icz,-2.6123549036260867,-99.13052594165546,-18.05834339791315

4450775_20201_2_0,ho5olo4icz,2.7792895775825395,-83.14228429588718,-52.76316273958672

5407560_20201_2_0,hod9un4icz,0.06068456497950937,-119.20598726650942,-40.71052475945609

1127026_20201_2_0,hogeon4icz,-3.9676466953092677,-64.43570566864622,-21.3973058018381

5082472_20201_2_0,hohbco4icz,30.706556894187784,-10.285219359325936,-160.0297024502101

1788680_20201_2_0,hpdi6o4icz,-2.533910511582884,-136.59686986981748,-22.36149019902018

3316610_20201_2_0,hqgnxo4icz,2.1693872308685545,-97.25685443097228,-45.6468926976505

4919603_20201_2_0,hqu2qn4icz,-1.2516928510098517,-97.6979749970867,-9.81395996604489

2857476_20201_2_0,hthpon4icz,0.7075404229289775,-91.57830656769974,-38.349916347363006

1562471_20201_2_0,hry8ip4icz,2.9609004046872927,-117.66022333349673,-49.23788822783092

4080978_20201_2_0,hsagjn4icz,2.1166091362663124,-108.82338877375699,-42.09739741470639

1199769_20201_2_0,hsxkeo4icz,0.9560181799800538,-136.80779770141177,-39.13631666253008

2857476_20201_2_0,hthpon4icz,0.7075404229289775,-91.57830656769974,-38.349916347363006

2814198_20201_2_0,htjf0o4icz,-2.736726748796543,-65.45863168120553,-16.670345706120486

3218351_20201_2_0,hu6w9n4icz,0.8695862696633393,-116.31572090272402,-39.02820754169747

1547113_20201_2_0,hvp4ep4icz,0.5618968331943395,-37.42901368910452,-36.49052978903518

2409825_20201_2_0,hvt1jn4icz,-8.858926285131394,-144.10242389764682,27.550302855605807

1757115_20201_2_0,hw4zun4icz,-1.015424624954063,-97.51467341676545,-31.121789989087148

4369837_20201_2_0,hwaowo4icz,2.2047899365111854,-76.58977034114702,-49.16131062267554

4824214_20201_2_0,hxg36o4icz,3.078064755690086,-83.19692599867832,-52.829226502193364

4255116_20201_2_0,hykl8o4icz,-0.008885188501401976,-64.85424864065024,-31.84264553130592

4630747_20201_2_0,hyy6sn4icz,-0.06573151201510077,-95.05939182436472,-35.90001254360118

2610660_20201_2_0,hz06lo4icz,0.2586175201092815,-75.12624305443822,-44.14111165477625

1021779_20201_2_0,hz7oho4icz,1.391851355986944,-74.88391152825406,-32.86847363335568

4496120_20201_2_0,hzagfo4icz,-2.2490034879126175,-91.52982200966596,-19.276226939771874

3268579_20201_2_0,hzj7so4icz,-0.9479860195270252,-93.9359778374895,-32.45320146425712

1224733_20201_2_0,i1s20p4icz,1.1318746472637462,-122.4491784047164,-59.72617055743329

5211162_20201_2_0,i1tyao4icz,-3.7733784768891416,-115.81559213958346,-14.180170755810906

5273751_20201_2_0,i2ct4p4icz,-0.9228337421602186,-82.3744224341863,-29.691332712964126

3045569_20201_2_0,i2hwvn4icz,1.583017274073329,-109.53797390758973,-37.888921528210915

5099971_20201_2_0,i2ix9n4icz,2.7564399057493594,-80.39812324539392,-58.21221438591974

4216588_20201_2_0,i2lnip4icz,0.5867326945542017,-92.6344755276719,-36.48491601059584

1630018_20201_2_0,i2unln4icz,0.34511524158089235,-85.26652820804873,-34.92454515154708

3833711_20201_2_0,i6q9yo4icz,-0.42314481418828787,-67.07678129768595,-46.308154830608146

1111023_20201_2_0,i7gscp4icz,2.1502979544712644,-112.27987293617869,-67.37545311628975

4382682_20201_2_0,f0nbcp4icz,-1.1483357776480558,-126.3790342815031,-39.76247759274776

