16 th decile
.80
.85
/users/rhydian/anaconda3/envs/torch_env/lib/python3.7/site-packages/torch/cuda/__init__.py:52: UserWarning: CUDA initialization: Found no NVIDIA driver on your system. Please check that you have an NVIDIA GPU and installed a driver from http://www.nvidia.com/Download/index.aspx (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729006826/work/c10/cuda/CUDAFunctions.cpp:100.)
  return torch._C._cuda_getDeviceCount() > 0
  0%|          | 0/811 [00:00<?, ?it/s]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  0%|          | 1/811 [00:02<31:10,  2.31s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  0%|          | 2/811 [00:04<28:43,  2.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  0%|          | 3/811 [00:05<26:43,  1.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  0%|          | 4/811 [00:07<24:09,  1.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 5/811 [00:08<22:43,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 6/811 [00:09<22:00,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 7/811 [00:11<20:38,  1.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 8/811 [00:12<20:31,  1.53s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 9/811 [00:14<19:37,  1.47s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 10/811 [00:15<19:38,  1.47s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|▏         | 11/811 [00:16<18:59,  1.42s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|▏         | 12/811 [00:20<29:31,  2.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 13/811 [00:22<27:21,  2.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 14/811 [00:24<24:49,  1.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 15/811 [00:25<22:30,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 16/811 [00:26<21:22,  1.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 17/811 [00:28<20:43,  1.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 18/811 [00:29<20:13,  1.53s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 19/811 [00:32<23:51,  1.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 20/811 [00:33<21:33,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 21/811 [00:34<20:11,  1.53s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 22/811 [00:36<19:14,  1.46s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 23/811 [00:37<19:11,  1.46s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 24/811 [00:39<20:32,  1.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 25/811 [00:40<19:20,  1.48s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 26/811 [00:42<19:23,  1.48s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 27/811 [00:43<20:59,  1.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 28/811 [00:45<19:31,  1.50s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▎         | 29/811 [00:46<18:28,  1.42s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▎         | 30/811 [00:49<23:12,  1.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 31/811 [00:50<21:46,  1.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 32/811 [00:51<20:07,  1.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 33/811 [00:53<19:12,  1.48s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 34/811 [00:54<20:07,  1.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 35/811 [00:56<20:56,  1.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 36/811 [01:01<34:15,  2.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▍         | 37/811 [01:04<33:17,  2.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▍         | 38/811 [01:05<29:54,  2.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▍         | 39/811 [01:07<26:10,  2.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▍         | 40/811 [01:08<25:18,  1.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▌         | 41/811 [01:10<22:55,  1.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▌         | 42/811 [01:11<21:25,  1.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▌         | 43/811 [01:12<19:22,  1.51s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▌         | 44/811 [01:14<19:01,  1.49s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 45/811 [01:15<18:18,  1.43s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 46/811 [01:18<25:23,  1.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 47/811 [01:20<22:58,  1.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 48/811 [01:21<21:56,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 49/811 [01:23<20:09,  1.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 50/811 [01:24<19:15,  1.52s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▋         | 51/811 [01:27<26:16,  2.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▋         | 52/811 [01:29<24:00,  1.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 53/811 [01:30<21:46,  1.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 54/811 [01:32<21:12,  1.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 55/811 [01:33<20:27,  1.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 56/811 [01:35<19:28,  1.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 57/811 [01:36<18:38,  1.48s/it]  7%|▋         | 58/811 [01:38<20:02,  1.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 59/811 [01:39<19:44,  1.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 60/811 [01:41<21:25,  1.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 61/811 [01:43<21:43,  1.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 62/811 [01:45<22:59,  1.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 63/811 [01:48<25:43,  2.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 64/811 [01:49<22:50,  1.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 65/811 [01:50<21:26,  1.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 66/811 [01:52<19:35,  1.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 67/811 [01:54<20:33,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 68/811 [01:55<21:00,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▊         | 69/811 [01:57<19:20,  1.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▊         | 70/811 [01:58<20:30,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 71/811 [02:00<19:02,  1.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 72/811 [02:02<20:35,  1.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 73/811 [02:04<21:12,  1.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 74/811 [02:05<21:23,  1.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 75/811 [02:07<20:22,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 76/811 [02:08<19:09,  1.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 77/811 [02:10<18:36,  1.52s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|▉         | 78/811 [02:11<17:32,  1.44s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|▉         | 79/811 [02:12<17:22,  1.42s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|▉         | 80/811 [02:14<17:10,  1.41s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|▉         | 81/811 [02:15<16:46,  1.38s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|█         | 82/811 [02:16<16:35,  1.37s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|█         | 83/811 [02:18<16:35,  1.37s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|█         | 84/811 [02:19<16:51,  1.39s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|█         | 85/811 [02:21<19:01,  1.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 86/811 [02:23<21:05,  1.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 87/811 [02:25<19:40,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 88/811 [02:27<21:07,  1.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 89/811 [02:28<21:00,  1.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 90/811 [02:30<20:33,  1.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 91/811 [02:31<19:38,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█▏        | 92/811 [02:33<18:43,  1.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█▏        | 93/811 [02:34<17:57,  1.50s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 94/811 [02:36<17:39,  1.48s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 95/811 [02:38<20:11,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 96/811 [02:40<20:39,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 97/811 [02:41<19:57,  1.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 98/811 [02:43<19:24,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 99/811 [02:44<18:35,  1.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 100/811 [02:46<18:18,  1.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 101/811 [02:47<17:47,  1.50s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 102/811 [02:49<18:25,  1.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 103/811 [02:50<18:00,  1.53s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 104/811 [02:52<17:35,  1.49s/it] 13%|█▎        | 105/811 [02:53<17:05,  1.45s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 106/811 [02:55<17:48,  1.52s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 107/811 [02:56<17:27,  1.49s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 108/811 [02:58<18:07,  1.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 109/811 [02:59<18:01,  1.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▎        | 110/811 [03:00<16:50,  1.44s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▎        | 111/811 [03:02<16:18,  1.40s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 112/811 [03:03<16:33,  1.42s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 113/811 [03:04<15:53,  1.37s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 114/811 [03:06<15:37,  1.35s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 115/811 [03:07<16:14,  1.40s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 116/811 [03:09<16:58,  1.47s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 117/811 [03:10<17:19,  1.50s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▍        | 118/811 [03:12<17:16,  1.50s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▍        | 119/811 [03:14<17:58,  1.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▍        | 120/811 [03:15<17:28,  1.52s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▍        | 121/811 [03:16<16:33,  1.44s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▌        | 122/811 [03:19<20:31,  1.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▌        | 123/811 [03:20<19:07,  1.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▌        | 124/811 [03:22<18:43,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▌        | 125/811 [03:24<19:41,  1.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 126/811 [03:26<19:38,  1.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 127/811 [03:27<19:00,  1.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 128/811 [03:28<17:32,  1.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 129/811 [03:30<17:05,  1.50s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 130/811 [03:32<20:23,  1.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 131/811 [03:34<20:15,  1.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▋        | 132/811 [03:35<18:54,  1.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▋        | 133/811 [03:37<18:09,  1.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 134/811 [03:39<20:03,  1.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 135/811 [03:41<20:41,  1.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 136/811 [03:43<21:45,  1.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 137/811 [03:45<21:11,  1.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 138/811 [03:47<20:09,  1.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 139/811 [03:48<20:27,  1.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 140/811 [03:50<19:06,  1.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 141/811 [03:51<18:33,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 142/811 [03:53<18:25,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 143/811 [03:54<17:06,  1.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 144/811 [03:56<17:32,  1.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 145/811 [03:58<20:07,  1.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 146/811 [04:00<18:33,  1.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 147/811 [04:01<17:08,  1.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 148/811 [04:02<16:41,  1.51s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 149/811 [04:04<16:14,  1.47s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 150/811 [04:05<15:58,  1.45s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▊        | 151/811 [04:07<15:48,  1.44s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▊        | 152/811 [04:08<15:26,  1.41s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 153/811 [04:09<15:56,  1.45s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 154/811 [04:11<17:00,  1.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 155/811 [04:13<17:13,  1.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 156/811 [04:14<17:02,  1.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 157/811 [04:16<16:34,  1.52s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 158/811 [04:17<17:03,  1.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|█▉        | 159/811 [04:19<17:11,  1.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|█▉        | 160/811 [04:21<18:21,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|█▉        | 161/811 [04:23<17:46,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|█▉        | 162/811 [04:24<17:26,  1.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|██        | 163/811 [04:26<17:41,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|██        | 164/811 [04:27<17:06,  1.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|██        | 165/811 [04:29<17:20,  1.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|██        | 166/811 [04:31<17:37,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 167/811 [04:32<17:18,  1.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 168/811 [04:34<16:58,  1.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 169/811 [04:35<17:22,  1.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 170/811 [04:37<17:13,  1.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 171/811 [04:39<17:25,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 172/811 [04:40<17:25,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██▏       | 173/811 [04:43<19:29,  1.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██▏       | 174/811 [04:44<18:36,  1.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 175/811 [04:46<18:27,  1.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 176/811 [04:48<18:21,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 177/811 [04:50<19:45,  1.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 178/811 [04:51<18:21,  1.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 179/811 [04:53<17:33,  1.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 180/811 [04:55<19:44,  1.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 181/811 [04:57<18:11,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 182/811 [04:58<17:59,  1.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 183/811 [05:00<19:00,  1.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 184/811 [05:03<21:55,  2.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 185/811 [05:05<20:56,  2.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 186/811 [05:07<21:12,  2.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 187/811 [05:08<19:28,  1.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 188/811 [05:10<18:32,  1.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 189/811 [05:12<19:02,  1.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 190/811 [05:14<18:11,  1.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▎       | 191/811 [05:15<17:15,  1.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▎       | 192/811 [05:17<17:01,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 193/811 [05:18<16:34,  1.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 194/811 [05:20<16:56,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 195/811 [05:22<17:47,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 196/811 [05:24<17:55,  1.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 197/811 [05:27<22:07,  2.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 198/811 [05:28<20:44,  2.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▍       | 199/811 [05:30<19:36,  1.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▍       | 200/811 [05:32<19:08,  1.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▍       | 201/811 [05:34<19:32,  1.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▍       | 202/811 [05:36<18:50,  1.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▌       | 203/811 [05:38<19:59,  1.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▌       | 204/811 [05:40<20:33,  2.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▌       | 205/811 [05:42<20:05,  1.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▌       | 206/811 [05:44<19:30,  1.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 207/811 [05:45<18:33,  1.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 208/811 [05:47<17:51,  1.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 209/811 [05:50<20:47,  2.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 210/811 [05:51<18:56,  1.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 211/811 [05:53<19:07,  1.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 212/811 [05:55<18:08,  1.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▋       | 213/811 [05:56<17:17,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▋       | 214/811 [05:59<18:58,  1.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 215/811 [06:01<20:01,  2.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 216/811 [06:03<19:48,  2.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 217/811 [06:04<18:22,  1.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 218/811 [06:06<18:02,  1.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 219/811 [06:08<18:07,  1.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 220/811 [06:10<17:21,  1.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 221/811 [06:11<16:37,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 222/811 [06:13<16:13,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 223/811 [06:14<15:57,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 224/811 [06:16<16:04,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 225/811 [06:17<15:29,  1.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 226/811 [06:19<16:04,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 227/811 [06:21<16:08,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 228/811 [06:23<16:40,  1.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 229/811 [06:24<16:07,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 230/811 [06:26<15:36,  1.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 231/811 [06:28<16:31,  1.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▊       | 232/811 [06:29<16:15,  1.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▊       | 233/811 [06:31<16:05,  1.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 234/811 [06:32<14:28,  1.50s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 235/811 [06:33<13:56,  1.45s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 236/811 [06:35<13:35,  1.42s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 237/811 [06:36<13:51,  1.45s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 238/811 [06:38<16:11,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 239/811 [06:41<17:26,  1.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|██▉       | 240/811 [06:43<17:47,  1.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|██▉       | 241/811 [06:44<17:41,  1.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|██▉       | 242/811 [06:46<18:16,  1.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|██▉       | 243/811 [06:48<17:49,  1.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|███       | 244/811 [06:50<18:43,  1.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|███       | 245/811 [06:53<19:05,  2.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|███       | 246/811 [06:54<17:59,  1.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|███       | 247/811 [06:56<17:06,  1.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 248/811 [06:57<16:22,  1.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 249/811 [06:59<16:30,  1.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 250/811 [07:04<26:13,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 251/811 [07:09<31:00,  3.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 252/811 [07:11<26:47,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 253/811 [07:14<27:17,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███▏      | 254/811 [07:16<23:55,  2.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███▏      | 255/811 [07:17<21:23,  2.31s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 256/811 [07:19<19:27,  2.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 257/811 [07:20<17:31,  1.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 258/811 [07:22<16:03,  1.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 259/811 [07:23<15:26,  1.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 260/811 [07:25<15:59,  1.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 261/811 [07:27<17:00,  1.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 262/811 [07:29<16:20,  1.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 263/811 [07:30<15:28,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 264/811 [07:32<15:51,  1.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 265/811 [07:34<15:57,  1.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 266/811 [07:35<15:03,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 267/811 [07:38<16:54,  1.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 268/811 [07:39<15:51,  1.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 269/811 [07:41<15:57,  1.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 270/811 [07:43<15:56,  1.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 271/811 [07:44<15:29,  1.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▎      | 272/811 [07:46<15:08,  1.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▎      | 273/811 [07:48<15:02,  1.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 274/811 [07:50<16:31,  1.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 275/811 [07:52<16:15,  1.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 276/811 [07:54<17:17,  1.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 277/811 [07:56<18:01,  2.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 278/811 [07:58<17:10,  1.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 279/811 [08:00<16:30,  1.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▍      | 280/811 [08:01<15:32,  1.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▍      | 281/811 [08:03<14:40,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▍      | 282/811 [08:04<14:30,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▍      | 283/811 [08:06<14:18,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▌      | 284/811 [08:07<14:13,  1.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▌      | 285/811 [08:09<14:01,  1.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▌      | 286/811 [08:11<14:10,  1.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▌      | 287/811 [08:13<17:27,  2.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 288/811 [08:15<16:52,  1.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 289/811 [08:17<15:50,  1.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 290/811 [08:18<15:13,  1.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 291/811 [08:20<14:54,  1.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 292/811 [08:22<16:15,  1.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 293/811 [08:24<15:09,  1.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▋      | 294/811 [08:25<14:54,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▋      | 295/811 [08:27<14:24,  1.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▋      | 296/811 [08:30<17:12,  2.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 297/811 [08:31<16:11,  1.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 298/811 [08:33<15:35,  1.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 299/811 [08:34<14:34,  1.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 300/811 [08:36<13:40,  1.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 301/811 [08:38<14:37,  1.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 302/811 [08:39<13:55,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 303/811 [08:41<13:52,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 304/811 [08:43<16:01,  1.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 305/811 [08:47<20:39,  2.45s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 306/811 [08:49<18:25,  2.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 307/811 [08:50<16:36,  1.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 308/811 [08:52<15:46,  1.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 309/811 [08:53<14:58,  1.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 310/811 [08:55<15:00,  1.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 311/811 [08:57<14:16,  1.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 312/811 [08:58<13:32,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▊      | 313/811 [09:00<13:13,  1.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▊      | 314/811 [09:02<14:01,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 315/811 [09:03<13:53,  1.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 316/811 [09:05<15:04,  1.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 317/811 [09:07<14:01,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 318/811 [09:08<13:44,  1.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 319/811 [09:10<13:15,  1.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 320/811 [09:12<13:15,  1.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|███▉      | 321/811 [09:14<16:04,  1.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|███▉      | 322/811 [09:16<15:18,  1.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|███▉      | 323/811 [09:18<14:31,  1.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|███▉      | 324/811 [09:25<28:32,  3.52s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|████      | 325/811 [09:27<24:21,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|████      | 326/811 [09:29<21:01,  2.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|████      | 327/811 [09:30<18:10,  2.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|████      | 328/811 [09:33<18:55,  2.35s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 329/811 [09:35<19:09,  2.38s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 330/811 [09:37<17:44,  2.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 331/811 [09:39<16:10,  2.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 332/811 [09:40<15:35,  1.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 333/811 [09:42<14:57,  1.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 334/811 [09:44<14:09,  1.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████▏     | 335/811 [09:46<15:19,  1.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████▏     | 336/811 [09:47<14:37,  1.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 337/811 [09:49<14:24,  1.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 338/811 [09:51<13:47,  1.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 339/811 [09:53<14:44,  1.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 340/811 [09:55<14:18,  1.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 341/811 [09:56<13:44,  1.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 342/811 [09:58<13:34,  1.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 343/811 [10:00<13:09,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 344/811 [10:02<15:14,  1.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 345/811 [10:07<22:15,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 346/811 [10:09<20:23,  2.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 347/811 [10:11<18:08,  2.35s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 348/811 [10:13<16:45,  2.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 349/811 [10:15<17:51,  2.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 350/811 [10:17<16:18,  2.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 351/811 [10:19<16:59,  2.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 352/811 [10:21<15:29,  2.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▎     | 353/811 [10:23<14:28,  1.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▎     | 354/811 [10:24<13:34,  1.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 355/811 [10:26<13:39,  1.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 356/811 [10:28<14:19,  1.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 357/811 [10:30<13:26,  1.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 358/811 [10:31<13:42,  1.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 359/811 [10:34<14:30,  1.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 360/811 [10:36<16:06,  2.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▍     | 361/811 [10:38<14:44,  1.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▍     | 362/811 [10:40<14:11,  1.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▍     | 363/811 [10:41<13:20,  1.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▍     | 364/811 [10:44<14:49,  1.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▌     | 365/811 [10:45<14:00,  1.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▌     | 366/811 [10:48<15:06,  2.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▌     | 367/811 [10:49<14:36,  1.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▌     | 368/811 [10:51<13:43,  1.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▌     | 369/811 [10:53<12:54,  1.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 370/811 [10:54<12:33,  1.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 371/811 [10:56<13:06,  1.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 372/811 [10:58<12:56,  1.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Trying to load from /users/rhydian/self-supervised-project/model_weights/SSECEncodersBothBoth
==> Resuming model trained for 106 epochs...
Trying to load from ../model_weights/angle_regressor4
==> Resuming model trained for 7 epochs...
1494153_20201_2_0,syscvo4icz,-0.25658527611574194,-111.46291986670323,-41.20630121865304

3003022_20201_2_0,sywhbo4icz,3.2728681253874794,-97.9192638607596,-55.16923356523333

1866541_20201_2_0,syzenn4icz,-2.6581345027679215,-134.9033930901662,-26.724985101157273

1246099_20201_2_0,sz0jcp4icz,0.15990211313185745,-100.59516982186744,-16.78351084748911

1762475_20201_2_0,sz1egp4icz,0.3564080916942786,-52.46907853386327,-56.729268391919675

1011678_20201_2_0,szcmno4icz,2.023423102616456,-72.62027263907405,-39.71236085215132

5762861_20201_2_0,szgfpo4icz,-1.6297621562753533,-118.3511221053763,-27.122862954351476

3051416_20201_2_0,szlien4icz,1.1088148646792644,-124.90878872792749,-64.01549456290405

3296438_20201_2_0,szorjo4icz,0.46440133072491757,-107.07720671050956,-28.959408005552064

1210901_20201_2_0,szou2p4icz,0.6366408733083857,-85.31304236753846,-43.85218054476455

1102384_20201_2_0,szpqgo4icz,1.8197995854672993,-83.72677778300243,-32.6259474534275

5083550_20201_2_0,szt4qn4icz,-1.1465468949247268,-95.97541142693507,-38.44768036515778

1187060_20201_2_0,szutwo4icz,-0.34001998082409096,-63.464581322095114,-21.951090511793296

1634293_20201_2_0,szuy2p4icz,1.7123239039346903,-122.18690118894426,-50.13074892100518

3498929_20201_2_0,szx77o4icz,-1.4617083270228837,-120.33920211788134,-12.296106586549186

5924367_20201_2_0,szyk5o4icz,-1.1747388455224201,-92.61013826924778,-27.80419738129993

3924320_20201_2_0,t009oo4icz,0.5209510915059629,-82.3892051051383,-45.293955911131974

3892270_20201_2_0,t08jlo4icz,0.8377860738061167,-93.81687687150162,-18.17991543682102

2837213_20201_2_0,t0bjpo4icz,-0.4022949931324325,-78.03169109292693,-37.723377282053875

3439572_20201_2_0,t0dy5p4icz,-1.7214984235493247,-97.04696433648203,-24.18133976967789

2971633_20201_2_0,t0gfio4icz,1.7938687822363173,-62.602661775303744,-31.485153898627374

5640768_20201_2_0,t0j3ao4icz,-1.5327858201344229,-80.5412036745198,-25.664173661313143

4185952_20201_2_0,t0kpon4icz,-1.2011028744944694,-104.65383488788743,-12.501032125376085

1991671_20201_2_0,t0oygp4icz,-1.2869838409911272,-114.83196014624026,-51.51932677008746

4919447_20201_2_0,t0undp4icz,0.5603642209082809,-134.91410126075456,-65.36066799069793

5308092_20201_2_0,t0ydko4icz,-0.4585149491352319,-131.12801945358882,-33.736638687369776

3826623_20201_2_0,t0ysxo4icz,-2.383754815584704,-71.1122710389509,-7.068820962838629

4071419_20201_2_0,t11tbp4icz,-0.61766558558925,-106.64254759403846,-40.18997260709561

5109656_20201_2_0,t13yvn4icz,-0.5669438663574285,-97.58075631394348,-41.842868905900175

3405475_20201_2_0,t149dp4icz,-3.2243819215497465,-64.28145135342189,0.2969864674416698

1208736_20201_2_0,t15hjp4icz,-1.5458737139123866,-132.56089629014843,-56.014738847543384

3813682_20201_2_0,t198fn4icz,4.526176701194161,-115.43941140311276,-45.566999973386004

1584840_20201_2_0,t1cltn4icz,-0.47977414771400106,-93.44755064633446,-31.694881752854712

3553310_20201_2_0,t1hjio4icz,-2.9120746095912646,-104.72440478415118,-11.42109598744834

1112852_20201_2_0,t1memo4icz,1.1820894404411004,-88.5266035291022,-34.02822833609743

2191245_20201_2_0,t1qrap4icz,-0.6289931641357493,-70.64882646164546,-32.96867618281783

5729470_20201_2_0,t1sloo4icz,-1.9971986632459575,-115.20151548663978,-6.859848349008146

3640902_20201_2_0,t1tu9p4icz,0.9532237900485142,-62.870519740454995,-54.23142634378448

4929111_20201_2_0,t1xqfn4icz,3.3990469494161477,-61.63725014204999,-59.177167698224196

1628069_20201_2_0,t2108p4icz,0.923652383278892,-95.9738060950271,-27.705887097918108

4040970_20201_2_0,t21pgo4icz,-2.2087480154995074,-77.04964593637146,-18.72831289814917

4690428_20201_2_0,t223fn4icz,-17.494709307607096,-146.24513163586377,42.671063711510826

5625231_20201_2_0,t2452p4icz,1.2182223983852887,-107.57434313467186,-40.92468197692453

3307718_20201_2_0,t28amo4icz,0.1813208355191918,-81.72371640588821,-28.82436819657542

1693148_20201_2_0,t29swn4icz,-3.1267712460062604,-89.47633851995408,-5.302381283946261

3110391_20201_2_0,t2fown4icz,0.3621884565921448,-105.04421990089935,-35.11878881335262

4792423_20201_2_0,t2gkco4icz,0.30013789795503637,-94.80857109047699,-28.947581875192682

3270855_20201_2_0,t2gy5p4icz,-0.7343512674683981,-107.68602978798754,-18.98645136405466

5855262_20201_2_0,t2hxao4icz,1.0176059500200605,-92.11400101490281,-62.34364545504805

1032579_20201_2_0,t2r2ep4icz,1.4992892459584313,-95.09803074663074,-57.99967421803751

4760347_20201_2_0,t2s4fn4icz,-2.5070132617237784,-100.36115300161345,-19.183896675545242

5441958_20201_2_0,t2vpuo4icz,2.6414297382897414,-80.82920648656679,-56.113087150972575

5900237_20201_2_0,t32jep4icz,-1.9026316507521766,-94.27640948350071,-47.66079800551728

2802508_20201_2_0,t38r9p4icz,-0.0388188372881397,-89.89039281042574,-35.59317365058244

4247739_20201_2_0,t3994p4icz,-0.33093787491877197,-117.78529373090382,-22.98887761074181

1851865_20201_2_0,t39mco4icz,0.38303569193425385,-123.39375373008215,-29.173953209424184

5431209_20201_2_0,t3cfuo4icz,1.2966380507934023,-111.50682888487705,-43.81604893216732

5874150_20201_2_0,t3of7o4icz,-35.7321447081993,-23.443587604610798,377.11899318519534

2066616_20201_2_0,t3oiso4icz,-0.2968635199235004,-118.9773976039329,-52.30336747334118

4299222_20201_2_0,t3smlo4icz,-0.5072526510451612,-75.9462759080451,-36.96670126048586

1137690_20201_2_0,t3udpo4icz,2.240869780269069,-135.51617463090798,-40.170317428650364

1245634_20201_2_0,t3w68o4icz,-0.3132221132119351,-119.56692496763603,-26.973922399801395

4525279_20201_2_0,t3yydp4icz,1.3830460127471713,-127.64299708479055,-57.487721182773754

1539953_20201_2_0,t43u7o4icz,0.22408157741066187,-94.10862199849859,-46.96137573975773

2376578_20201_2_0,t441mn4icz,-1.07133938274324,-97.12875921091742,-38.96835379089285

4988471_20201_2_0,t46v8n4icz,-3.447443546051955,-111.12294249091096,-35.26402917041548

5514730_20201_2_0,t4bm3p4icz,-1.5691765320279776,-61.970290125227564,-21.57684998225548

5138512_20201_2_0,t4dklo4icz,0.5469242255147153,-53.27987075707955,-29.923200047107628

5901682_20201_2_0,t4eg2p4icz,1.1449593591741998,-103.46026596982313,-30.314788123997886

5627672_20201_2_0,t4vftn4icz,-2.2904484791123734,-113.17334990962226,-28.372512490668925

5940264_20201_2_0,t4xyho4icz,-3.2619282475318365,-94.58470080630917,1.842885397282103

2193364_20201_2_0,9c16bn4icz,0.8762005422790498,-134.02205222752818,-16.67627263111669

4226821_20201_2_0,t50i9p4icz,4.351311960407635,-61.22493900270874,-72.55921110557055

4709986_20201_2_0,t511mn4icz,5.517845949416356,-103.06760878794475,-87.87193812642492

3075722_20201_2_0,t552cp4icz,-11.569220223059194,-123.30445176977753,25.444613095484456

3452400_20201_2_0,t57kap4icz,5.145160747950552,-66.82050234883653,-54.794940922196886

2578935_20201_2_0,t58gvo4icz,-0.968114629138361,-46.85239262513329,-27.84052628247916

2082965_20201_2_0,t5avhp4icz,0.1561613495113717,-98.55439382238711,-14.638612312739014

3788072_20201_2_0,t5fjdn4icz,0.2961938626078792,-114.49248010356465,-19.567227262761975

1159974_20201_2_0,t5ieho4icz,4.522512210528815,-93.74491922940783,-49.18539558794254

3702227_20201_2_0,t5l38p4icz,-0.26994536631020655,-141.9545263728665,-32.049693527974455

4348388_20201_2_0,t5ldkn4icz,0.17456872589182407,-80.38514607686645,-48.11486395941486

3707299_20201_2_0,t5m0jp4icz,-1.5372549729288822,-106.54101398819824,-7.467497304221482

4529920_20201_2_0,t5nhvo4icz,-1.972108350844349,-89.70824544242501,-30.535984801282055

2461032_20201_2_0,t5nmwo4icz,1.400951974279334,-77.03178705669501,-47.0420992285741

5462151_20201_2_0,t5nxlo4icz,-3.2178207118433004,-66.63041057608709,-3.9779417759937843

3999542_20201_2_0,t5q1zo4icz,-0.7617998966684336,-113.01690020626398,-29.750226372200842

3377321_20201_2_0,t5r6qn4icz,-3.165978984693659,-56.10176544202426,-7.365403245063618

5162764_20201_2_0,t5t3wn4icz,1.7730263770273278,-102.95081941797667,-50.89854567277723

5573554_20201_2_0,t5tq5p4icz,-0.550336410903477,-77.86527679476751,-52.20684979402398

3794340_20201_2_0,t5utln4icz,-1.7021037912454922,-123.59341345485512,-21.544251403733597

4246881_20201_2_0,t5va4p4icz,5.980089398035336,-97.47582252601376,-88.8494480795791

1197238_20201_2_0,t60ywo4icz,0.557160415040889,-82.54422046658533,-48.917074505047296

2955983_20201_2_0,t637so4icz,3.448203630721643,-82.79854944652567,-56.355143001555774

4599304_20201_2_0,t63a2o4icz,-1.324488556942246,-87.86821159057527,-6.039432261736238

2952095_20201_2_0,t68cxn4icz,0.5559783187492697,-102.9229269177761,-51.636721238460765

2000388_20201_2_0,t68f3p4icz,-0.34725217712694056,-59.06535630462224,-41.784278765204036

5683825_20201_2_0,t69bao4icz,-3.203577600212801,-95.14897495595096,-42.83775684828129

4950256_20201_2_0,t6btjn4icz,-3.4897862362246483,-52.68937709295881,6.464470581750319

5921655_20201_2_0,t6ei8o4icz,-0.7763999116720505,-77.54127753258518,-56.231993474090714

4754326_20201_2_0,t6gcqo4icz,0.9031528512509913,-89.80701987079885,-44.46421746981946

1571915_20201_2_0,t6gzjp4icz,-0.32097703093707786,-111.66524583234335,-42.60513863040299

3096312_20201_2_0,t6nc6o4icz,-3.236999033654164,-77.33229072887383,-14.426321667730434

1169065_20201_2_0,t6vkhp4icz,-30.635691333078633,-202.05401799520521,170.6648815599658

2375733_20201_2_0,t7132o4icz,-111.98565366437559,612.3085119287896,303.76780780162534

5428952_20201_2_0,t72qeo4icz,0.7849188179858301,-104.61067181401194,-28.903256771381166

5466404_20201_2_0,t79e2p4icz,-1.8807262048823474,-95.53745264349368,-44.84637609873786

4588161_20201_2_0,t7a1qn4icz,-1.089282658530903,-96.24717627603894,-28.163839722567673

4954604_20201_2_0,t7bhmn4icz,-0.6750262000321722,-96.8599158142583,-33.57757205495646

5782823_20201_2_0,t7f2ep4icz,-0.24137456984135566,-43.59229532699351,-36.22115755289326

2385629_20201_2_0,t7gl9p4icz,-21.304602160317454,-46.706839415325135,71.0338108313605

1957828_20201_2_0,t7mxhp4icz,-0.3856528300375671,-92.47014168623605,-49.803199976587024

5824091_20201_2_0,t7olip4icz,0.438174546153605,-125.54892924480754,-33.474693311302886

4855674_20201_2_0,t7on2p4icz,1.0590942967577681,-83.86583237196407,-28.12950606014202

1986890_20201_2_0,t7umlo4icz,1.4643395794932126,-67.7205646199215,-24.391822353141947

1228723_20201_2_0,t7vlvo4icz,0.37495673066144586,-21.022726188948695,-41.53271569075727

1927077_20201_2_0,t7zxuo4icz,1.6824880779003726,-102.56063972774811,-43.33471679272647

1683640_20201_2_0,t87tfo4icz,0.7263322618337053,-101.10297163528645,-27.03340628698882

3504707_20201_2_0,t8fw9p4icz,1.863640124726038,-48.2896817120463,-61.33236410874868

4215246_20201_2_0,t8g58o4icz,-1.1733545199854374,-94.04298008538672,-34.77876793245733

4656664_20201_2_0,t8hsbo4icz,1.5101966938136693,-93.77705778136897,-55.68864985923145

3120817_20201_2_0,t8nogn4icz,0.09021644440523516,-74.77935006738207,-65.62987359293156

1071476_20201_2_0,t8nt8o4icz,0.49455965897598886,-95.95369147941372,-39.13314815969119

3583872_20201_2_0,t8z44o4icz,0.6660758906735331,-74.31466630199131,-32.35368454821294

4999040_20201_2_0,t8z9rn4icz,-3.146789777557348,-164.33428981949257,-34.950531486081886

2934669_20201_2_0,t92ibp4icz,1.1218879831672235,-107.5410177377534,-49.08447459703292

4281979_20201_2_0,t93p5p4icz,1.4734486983692567,-137.17359115801275,-53.98940851854617

1764833_20201_2_0,t93zfp4icz,-4.5308403969229545,-130.7282236553937,2.807257261359595

5759358_20201_2_0,t9456o4icz,-2.942642845016036,-91.9102707547564,-35.97512205517171

2405555_20201_2_0,t952gn4icz,0.9828967177527383,-105.83946036090893,-46.87071962818368

3118177_20201_2_0,t972zo4icz,1.7468743267913378,-104.93114266551308,-53.21349036449412

2582197_20201_2_0,t97qbn4icz,-2.7363346076418025,-135.32591190863218,-4.224231705980017

2855855_20201_2_0,t98t2p4icz,-0.35051728037159974,-91.92390505323021,-23.215530283067665

4476645_20201_2_0,t9hhin4icz,-8.16802450357411,-96.35587690821785,3.6015509730362965

4612614_20201_2_0,t9impo4icz,-0.9169793943163879,-124.92605254917754,-17.700251293907016

3815339_20201_2_0,t9kpbp4icz,-3.3229811423302036,-108.70817504668736,-24.34803544701323

5204597_20201_2_0,t9npjo4icz,-2.7766101597714394,-65.2088039793573,-20.201292086033177

4874544_20201_2_0,t9nyqo4icz,1.7166456071249103,-89.71852062485499,-40.08143238288129

4363865_20201_2_0,t9o2no4icz,1.32242403473673,-68.04557068737125,-37.58967216573514

2062369_20201_2_0,ta9nio4icz,-0.6419909483716102,-71.676761600802,-29.898880237856588

2208763_20201_2_0,taiwgp4icz,2.9077845330657683,-104.68328493447274,-68.95543158100688

1163581_20201_2_0,tak5dp4icz,-1.1016293851696561,-67.71621347310409,-44.752318185347434

5287650_20201_2_0,tamdin4icz,2.077409474896787,-116.33323066660444,-39.25068885780536

5015081_20201_2_0,tan1nn4icz,1.6897582284255248,-71.75118585123354,-57.25539773258184

2335064_20201_2_0,tapkjo4icz,0.6004796859912243,-56.91165013326116,-26.19809565008596

5533458_20201_2_0,tas6ro4icz,0.502507104828221,-100.61237279952599,-38.26005853780933

4926661_20201_2_0,tavsvo4icz,-0.8597867888159906,-77.34570009485708,-33.10526409101507

1012282_20201_2_0,tawajo4icz,0.9379000830683748,-98.32672209218623,-36.357644056277906

4447663_20201_2_0,tb18gn4icz,-0.7105158942812063,-114.36732912546645,-36.968038342205034

4085017_20201_2_0,tb6feo4icz,-0.4925629488485114,-70.69968713119562,-32.52762775557075

5397960_20201_2_0,tb7abp4icz,9.09844609051782,-74.52283867059646,-72.55131467770181

2088219_20201_2_0,tbdz6p4icz,1.1414798641928063,-103.2347655865411,-46.19079820307894

4193985_20201_2_0,tbg8vo4icz,1.2408614322336717,-105.37195173871095,-43.569275951613605

1539386_20201_2_0,tbgpsn4icz,-1.587849103229418,-64.15359248837959,-19.565905000814737

4759195_20201_2_0,tbm27o4icz,-2.867974702950685,-118.126416712708,-22.935186434063382

3281515_20201_2_0,tboabo4icz,0.6516928478252619,-105.81665179272346,-44.73755090014879

5231730_20201_2_0,tboc6o4icz,1.795931192779171,-68.75804137748611,-43.51934434968193

4976905_20201_2_0,tbqmtn4icz,0.6264325953463284,-94.81445171777301,-48.614626940608446

3320557_20201_2_0,tbtcwn4icz,0.5119773920825611,-87.78861109707955,-36.45777790369654

3947596_20201_2_0,tbwoip4icz,-3.426252114905784,-108.80077276050707,-27.506767803502

1326401_20201_2_0,tbzihp4icz,-1.361917385406431,-81.536121062327,-49.16570504435697

1291515_20201_2_0,tbzz5p4icz,-0.653499824833007,-96.74938786929908,-40.41948043142902

4559823_20201_2_0,tc0d1o4icz,-1.8645495713819513,-126.81294097820765,-34.91959530029689

3368379_20201_2_0,tc29ao4icz,4.026834421831967,-97.96379317805926,-37.58097223551036

4150070_20201_2_0,tc5fcp4icz,0.37218102823667387,-106.96195236981961,-37.65365244808149

3041529_20201_2_0,tc8oao4icz,0.7726196962640864,-95.48271055579556,-51.88826656242401

3933542_20201_2_0,tcbu9n4icz,-0.3795771401818346,-74.05062309291603,-27.46943850128511

3522096_20201_2_0,tcfdgn4icz,1.0347078316404847,-97.71102653093718,-52.42003101433406

3363266_20201_2_0,tckq6n4icz,-1.061793664038755,-90.12805830129972,-45.79315987347191

5331788_20201_2_0,tcn5lo4icz,0.2979266264696318,-127.4251990883734,-29.624584367164317

5842006_20201_2_0,tcp2no4icz,3.205854750197007,-71.81007398959147,-45.794721173717534

4119029_20201_2_0,tcpo9n4icz,-2.74531940174291,-153.43799084326852,-11.957867292008004

2719957_20201_2_0,tcrmro4icz,0.8910116303613685,-67.37071197183661,-31.773477147147176

4843092_20201_2_0,tcuj2p4icz,-1.1447629172713665,-96.27922300716443,-19.7522759538369

4063042_20201_2_0,tcy60p4icz,-1.1297497051547458,-96.5727307468234,-42.41261084444105

4836510_20201_2_0,td1ngp4icz,3.8635953986457805,-83.53671260209259,-47.70346884475978

5359087_20201_2_0,td8tdp4icz,0.7943042541795402,-54.77873829012864,-34.81116694523486

1699082_20201_2_0,tdazqo4icz,2.6860492346594587,-95.27101339022195,-45.988113795664376

5978454_20201_2_0,tdgk8p4icz,0.5088299549470616,-115.04628593667815,-35.09801511455578

3805451_20201_2_0,hzk73o4icz,-2.9928473786132495,-116.93674550683198,-10.13533628726401

1884997_20201_2_0,tdkzno4icz,-0.7237617325559387,-71.22370147617903,-39.384892243288874

4195924_20201_2_0,tdnnfn4icz,-1.4082491768345458,-66.29899262253434,-34.9162101287923

1789900_20201_2_0,tdt6mo4icz,2.9037725733363344,-76.3383547190036,-40.90037646993643

2847110_20201_2_0,tdvnoo4icz,-1.832950330159974,-75.50032376642963,-23.603099912316935

3600595_20201_2_0,te1i8o4icz,1.2558591547016384,-108.29540575029668,-44.32962058606846

3719596_20201_2_0,te68ro4icz,4.284436801905161,-115.78570846012093,-51.32664159537977

5061884_20201_2_0,te907n4icz,0.8072651802496826,-97.62738207438727,-45.981050078544826

5527650_20201_2_0,tec71p4icz,-1.9686370407953082,-95.77874429209675,-35.179238826167634

2582062_20201_2_0,teck8o4icz,0.5682964171673024,-83.83586415484453,-44.09225018804352

5931722_20201_2_0,telkco4icz,1.4330923057880356,-99.88768578393936,-35.334465838410466

4260552_20201_2_0,tethko4icz,0.3785914214476664,-116.82670005425979,-20.47126011153587

1464033_20201_2_0,tf9b5o4icz,0.7381834699938012,-69.60434116281587,-43.55283491491937

2634130_20201_2_0,tfaqcp4icz,-1.1331329286184029,-102.61782528693499,-33.4424926724311

3411626_20201_2_0,tfd36p4icz,-0.5423293412671835,-116.21802011117728,-39.963285096851465

2901440_20201_2_0,tfegfp4icz,0.6927320360776068,-101.14274811384021,-38.87535250057098

5413372_20201_2_0,tfh1do4icz,4.519795310691204,-78.31603718424662,-45.49736931679148

4547039_20201_2_0,tfj33o4icz,-2.0227020689604904,-101.66195164390632,-32.76116619855799

1384999_20201_2_0,tfj9no4icz,23.96395817160021,27.00549313289963,-146.15364883496756

1856908_20201_2_0,tflgjo4icz,-15.059718194239,-80.41221702227438,55.923041427166055

1750930_20201_2_0,tfo09p4icz,-0.22598089457057854,-94.34747222305305,-39.0798231013988

4088943_20201_2_0,tfqpun4icz,1.0060454854783871,-91.18757288931053,-38.89043644257363

1208889_20201_2_0,tfy51p4icz,-1.6223484071579015,-89.8767687746215,-54.26360327683395

3553142_20201_2_0,tfz1hp4icz,-3.850200578024054,-75.42459554271045,-37.241441078446414

5844948_20201_2_0,tfzujn4icz,2.735018013810501,-101.12702748565201,-59.93234335269203

5977800_20201_2_0,tg1gdp4icz,-0.8386953394033834,-124.78930698639829,-35.59561854637373

5232807_20201_2_0,tg3vun4icz,-0.4337544558044963,-60.275849230216124,-7.1014330300826884

5661857_20201_2_0,tg4fao4icz,1.510510033122891,-96.55194534169169,-42.95477244309234

1800066_20201_2_0,tg6ugp4icz,3.533800262742445,-89.50452466175574,-43.438711078869716

3475025_20201_2_0,tg6yvn4icz,3.326736247725924,-84.57131712372217,-34.93182486415577

1664271_20201_2_0,tg7rro4icz,1.077198522728151,-100.62074559858712,-30.398545334737605

4585886_20201_2_0,tg9ako4icz,0.9348500466789441,-119.04713227679036,-54.21010472486279

2989621_20201_2_0,tg9npo4icz,-3.283130737024705,-79.39801061056181,-9.857076801652227

4235849_20201_2_0,tgcjtn4icz,-11.269657097973901,-202.85484397860105,39.59353545309649

4570035_20201_2_0,tgfy4o4icz,-1.7849136829037615,-73.42291766736082,-21.587383325042197

5817471_20201_2_0,tgmuko4icz,0.556192825566171,-87.18920696408094,-44.403696068388044

4532400_20201_2_0,tgmxco4icz,-1.046763523663092,-79.51522698619047,-31.989770737416507

5320621_20201_2_0,tgsouo4icz,-0.3050826973292661,-57.09490313392578,-41.34326612666092

1929820_20201_2_0,tgtwfn4icz,-0.8078403252250812,-105.50338866425042,-36.92048698003195

2358412_20201_2_0,tgv4xo4icz,-15.828389314600662,-104.98534300301623,89.66655440516243

5001029_20201_2_0,tgvcsn4icz,2.7656380480734226,-72.06505108880563,-46.73231517288022

2569616_20201_2_0,thim9n4icz,0.2598395943538138,-113.27781268529705,-36.697064319592855

3378204_20201_2_0,thj38p4icz,0.9930982788423578,-53.249018276020564,-55.238686496753004

3283291_20201_2_0,thj8bo4icz,-0.2656804592801374,-81.07567318430515,-32.15712118847469

1639942_20201_2_0,thlrmo4icz,0.5832843196805994,-73.50642638913607,-52.804617509020375

3681990_20201_2_0,thuzkn4icz,-2.793896382278723,-101.92634583811221,-5.849451341500526

4898500_20201_2_0,thvpxo4icz,2.9931527139554763,-82.07254318717904,-70.73647309152068

4799759_20201_2_0,thxkwo4icz,1.034555615294729,-99.0458939141331,-46.36711196316472

4785347_20201_2_0,thy1so4icz,0.12375781783034696,-113.61721995600104,-26.192085591536298

5895874_20201_2_0,thzqmo4icz,6.155924998801741,-79.91692662743984,-82.1463571137888

1165852_20201_2_0,ti0pfn4icz,2.3479655071730163,-110.700852066593,-43.959704049366735

4821225_20201_2_0,7ht49p4icz,-0.6406776689740707,-92.46978786132254,-36.319737237045246

3652229_20201_2_0,tigqgp4icz,-0.20720729615542044,-96.06759081906316,-31.84688205218987

3117004_20201_2_0,tihi3o4icz,-0.2010122999244708,-94.04840349440846,-33.6865402483171

4715391_20201_2_0,tii40p4icz,-2.325872978181507,-55.85528547204436,-30.27692874646864

1805433_20201_2_0,ro97en4icz,-0.9528924864371012,-119.26902362983074,-36.63706553531512

5237983_20201_2_0,tip0cp4icz,-1.517946616828203,-123.66929882373262,-18.330504659150478

2505937_20201_2_0,tit4gp4icz,-4.399099453828188,-80.1316411375195,-0.21819174979364675

4328332_20201_2_0,tivl4p4icz,-4.071379452572433,-103.32204435397654,1.005710445253854

2685017_20201_2_0,tiw4to4icz,-1.5158385421787044,-57.44164324326687,-28.643176558995407

5857947_20201_2_0,tixipn4icz,0.9024120229981908,-107.44558037275937,-60.177621139516475

4100411_20201_2_0,tixy5n4icz,-2.7218656060023023,-144.09406837133457,-36.354674761117565

1075347_20201_2_0,tj1spn4icz,-0.9368766678859559,-120.00887639244067,-28.73636421559425

2349716_20201_2_0,tj354p4icz,-2.4170890692623406,-73.42202738758667,-14.507215969643909

1007807_20201_2_0,tj6nbp4icz,3.1764953687384914,-78.6980517281446,-49.5950418417917

5579389_20201_2_0,tjbndp4icz,7.446576845544987,-48.175543025356404,-72.08279092619972

3081167_20201_2_0,tjh7xo4icz,0.9888780574201291,-47.42482053074275,-42.29888524410654

4350785_20201_2_0,tjit8p4icz,0.477759199670393,-93.32052095537242,-49.955013265917856

3077666_20201_2_0,tjj78p4icz,0.5393101164445213,-103.68511532037058,-45.391071793875966

3043291_20201_2_0,tjn6kp4icz,3.2586064101863053,-77.55236706445237,-49.4779822099666

2864713_20201_2_0,tjrqtn4icz,-1.247740842088822,-150.27547943069618,-24.558656848147052

2783338_20201_2_0,tjyqep4icz,0.15358592544175648,-75.570225190586,-42.04857712864184

1060947_20201_2_0,tjyz7p4icz,3.1472601847953694,-72.06490543079414,-65.67269963004259

3013473_20201_2_0,tk2hco4icz,0.42675540255472816,-134.30035121849517,-59.389238671516495

4916125_20201_2_0,tk71do4icz,-0.4680593429822225,-87.10719785470809,-48.599503759573096

1973978_20201_2_0,tk84io4icz,-3.2105614473672968,-63.61696149658985,-21.636430645136258

4158488_20201_2_0,tkeqco4icz,-6.2762053511419875,-110.26912406262468,10.9852375370984

3459515_20201_2_0,tkleco4icz,0.3042401574788554,-93.25418733489948,-29.83257604770695

1652871_20201_2_0,tkneqn4icz,1.0489943210176702,-127.31468293012716,-24.091100559305772

2920554_20201_2_0,tkr77o4icz,1.4859659170876607,-97.28181510903886,-54.79055576575742

5544679_20201_2_0,tkre4p4icz,-2.144950279691743,-79.09267980140916,-12.40149893988874

2198627_20201_2_0,tkugzo4icz,-0.7390425795045118,-153.90867269534465,-19.93951845864848

1077839_20201_2_0,tkvrso4icz,-0.6466676020216261,-96.2241466644769,-25.285809649258724

5772862_20201_2_0,tkw9ep4icz,-1.175500832621842,-112.04226982729355,-19.071877564106885

5670858_20201_2_0,tky8to4icz,-0.11190053060834186,-112.9672015619791,-35.9713878209504

3161098_20201_2_0,tkyh8n4icz,0.5850457541517807,-94.85052667361765,-34.1350918635177

3488904_20201_2_0,tkz93p4icz,0.8212191718315189,-63.93100890725728,-45.780243302985994

3978598_20201_2_0,tkzbep4icz,-1.2262644721512033,-45.848919164851736,0.9770038749359884

2120416_20201_2_0,tl00jp4icz,-3.590004635435082,-107.29207475968917,-25.942899819989947

4381139_20201_2_0,tl03dp4icz,0.7827882310555079,-106.87663430857657,-44.63041074202475

1714517_20201_2_0,tl21do4icz,-8.530177851240806,-99.64691679786847,8.374802199831706

3208465_20201_2_0,tl239p4icz,-0.3532052260776987,-119.4607060759451,-37.03209427793877

4044544_20201_2_0,tl5d1o4icz,-0.5575531577079933,-131.42549590958103,-38.063253867019824

4942919_20201_2_0,tl8p7p4icz,-0.620984495490548,-95.74764941243183,-56.87592894356695

2212395_20201_2_0,tlg0uo4icz,-4.650949721725661,-105.52227680349583,10.370416490511104

3916319_20201_2_0,tlhe8n4icz,-6.609981369171251,-156.5791332346611,11.789018408574421

4842582_20201_2_0,tlhhgo4icz,-2.851344554333611,-116.73584270651682,-10.375018670051816

2150064_20201_2_0,tlhtsn4icz,0.16151272981813017,-97.69186758929757,-31.215400288919028

3604098_20201_2_0,tlim8p4icz,-0.1756144232416729,-84.73766210935813,-32.244014945816105

2052723_20201_2_0,tlle3o4icz,-1.3677950623710613,-93.07501876714056,-31.146545105549137
 46%|████▌     | 373/811 [11:00<13:43,  1.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 374/811 [11:02<13:46,  1.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 375/811 [11:03<12:55,  1.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▋     | 376/811 [11:05<12:18,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▋     | 377/811 [11:07<12:11,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 378/811 [11:08<11:27,  1.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 379/811 [11:09<11:15,  1.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 380/811 [11:11<11:02,  1.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 381/811 [11:12<10:44,  1.50s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 382/811 [11:14<10:49,  1.51s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 383/811 [11:16<11:17,  1.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 384/811 [11:17<11:00,  1.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 385/811 [11:19<11:18,  1.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 386/811 [11:21<11:46,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 387/811 [11:22<11:50,  1.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 388/811 [11:24<11:07,  1.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 389/811 [11:25<11:32,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 390/811 [11:27<11:55,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 391/811 [11:29<11:43,  1.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 392/811 [11:31<12:04,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 393/811 [11:33<12:20,  1.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▊     | 394/811 [11:34<12:02,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▊     | 395/811 [11:36<11:44,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 396/811 [11:38<13:12,  1.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 397/811 [11:40<13:33,  1.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 398/811 [11:42<13:48,  2.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 399/811 [11:45<13:51,  2.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 400/811 [11:46<13:07,  1.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 401/811 [11:48<13:07,  1.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|████▉     | 402/811 [11:50<12:26,  1.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|████▉     | 403/811 [11:51<11:32,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|████▉     | 404/811 [11:54<12:58,  1.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|████▉     | 405/811 [11:55<12:53,  1.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 406/811 [12:00<19:03,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 407/811 [12:02<17:19,  2.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 408/811 [12:04<15:20,  2.28s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 409/811 [12:07<15:57,  2.38s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 410/811 [12:09<16:20,  2.45s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 411/811 [12:11<14:42,  2.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 412/811 [12:13<14:11,  2.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 413/811 [12:14<13:13,  1.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 414/811 [12:16<12:37,  1.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 415/811 [12:18<12:08,  1.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████▏    | 416/811 [12:20<11:52,  1.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████▏    | 417/811 [12:21<11:57,  1.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 418/811 [12:23<11:34,  1.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 419/811 [12:25<11:29,  1.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 420/811 [12:26<11:00,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 421/811 [12:28<11:39,  1.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 422/811 [12:31<12:18,  1.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 423/811 [12:32<11:42,  1.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 424/811 [12:34<11:44,  1.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 425/811 [12:36<12:23,  1.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 426/811 [12:38<11:55,  1.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 427/811 [12:40<11:39,  1.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 428/811 [12:41<11:17,  1.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 429/811 [12:43<10:59,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 430/811 [12:45<10:50,  1.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 431/811 [12:46<10:45,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 432/811 [12:48<10:54,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 433/811 [12:50<10:40,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▎    | 434/811 [12:51<10:35,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▎    | 435/811 [12:53<10:49,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 436/811 [12:55<10:58,  1.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 437/811 [12:57<11:18,  1.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 438/811 [12:59<11:24,  1.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 439/811 [13:00<10:43,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 440/811 [13:03<12:17,  1.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 441/811 [13:05<11:52,  1.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▍    | 442/811 [13:06<11:24,  1.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▍    | 443/811 [13:09<12:24,  2.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▍    | 444/811 [13:11<11:56,  1.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▍    | 445/811 [13:12<11:05,  1.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▍    | 446/811 [13:14<10:32,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▌    | 447/811 [13:16<11:24,  1.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▌    | 448/811 [13:18<11:07,  1.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▌    | 449/811 [13:19<10:36,  1.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▌    | 450/811 [13:21<10:32,  1.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 451/811 [13:22<10:17,  1.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 452/811 [13:24<09:45,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 453/811 [13:26<09:47,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 454/811 [13:27<10:14,  1.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 455/811 [13:29<10:08,  1.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 456/811 [13:32<12:39,  2.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▋    | 457/811 [13:34<12:14,  2.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▋    | 458/811 [13:36<11:16,  1.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 459/811 [13:37<10:44,  1.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 460/811 [13:39<10:37,  1.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 461/811 [13:41<10:25,  1.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 462/811 [13:42<09:58,  1.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 463/811 [13:47<15:31,  2.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 464/811 [13:49<14:05,  2.44s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 465/811 [13:51<12:47,  2.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 466/811 [13:53<12:08,  2.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 467/811 [13:54<11:10,  1.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 468/811 [13:56<10:29,  1.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 469/811 [13:57<09:44,  1.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 470/811 [13:59<09:45,  1.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 471/811 [14:01<09:37,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 472/811 [14:02<09:29,  1.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 473/811 [14:04<09:00,  1.60s/it] 58%|█████▊    | 474/811 [14:06<09:08,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▊    | 475/811 [14:07<08:41,  1.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▊    | 476/811 [14:09<09:07,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 477/811 [14:11<09:26,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 478/811 [14:12<09:40,  1.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 479/811 [14:14<09:24,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 480/811 [14:17<10:45,  1.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 481/811 [14:18<10:11,  1.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 482/811 [14:20<09:28,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|█████▉    | 483/811 [14:21<09:25,  1.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|█████▉    | 484/811 [14:23<08:54,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|█████▉    | 485/811 [14:24<08:54,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|█████▉    | 486/811 [14:26<08:38,  1.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|██████    | 487/811 [14:28<10:14,  1.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|██████    | 488/811 [14:30<10:11,  1.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|██████    | 489/811 [14:32<09:29,  1.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|██████    | 490/811 [14:34<10:36,  1.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 491/811 [14:37<11:37,  2.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 492/811 [14:39<10:48,  2.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 493/811 [14:42<12:23,  2.34s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 494/811 [14:44<11:46,  2.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 495/811 [14:46<11:26,  2.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 496/811 [14:48<11:04,  2.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████▏   | 497/811 [14:50<11:50,  2.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████▏   | 498/811 [14:52<11:29,  2.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 499/811 [14:54<11:01,  2.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 500/811 [14:56<10:34,  2.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 501/811 [14:59<11:35,  2.24s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 502/811 [15:01<10:41,  2.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 503/811 [15:02<10:19,  2.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 504/811 [15:04<09:51,  1.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 505/811 [15:06<09:51,  1.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 506/811 [15:09<10:31,  2.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 507/811 [15:10<10:20,  2.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 508/811 [15:12<09:35,  1.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 509/811 [15:14<09:00,  1.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 510/811 [15:16<09:26,  1.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 511/811 [15:20<13:16,  2.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 512/811 [15:22<12:12,  2.45s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 513/811 [15:25<12:12,  2.46s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 514/811 [15:27<12:33,  2.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▎   | 515/811 [15:29<11:00,  2.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▎   | 516/811 [15:32<11:43,  2.38s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▎   | 517/811 [15:33<10:28,  2.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 518/811 [15:35<09:39,  1.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 519/811 [15:36<09:11,  1.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 520/811 [15:38<08:50,  1.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 521/811 [15:40<08:37,  1.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 522/811 [15:41<08:30,  1.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 523/811 [15:43<08:12,  1.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▍   | 524/811 [15:45<07:55,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▍   | 525/811 [15:46<07:42,  1.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▍   | 526/811 [15:49<09:20,  1.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▍   | 527/811 [15:51<08:51,  1.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▌   | 528/811 [15:58<16:18,  3.46s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▌   | 529/811 [15:59<13:39,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▌   | 530/811 [16:02<12:53,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▌   | 531/811 [16:03<10:55,  2.34s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 532/811 [16:05<09:51,  2.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 533/811 [16:07<09:33,  2.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 534/811 [16:08<09:04,  1.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 535/811 [16:09<07:49,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 536/811 [16:11<07:47,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 537/811 [16:13<07:49,  1.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▋   | 538/811 [16:14<07:29,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▋   | 539/811 [16:16<08:00,  1.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 540/811 [16:18<07:52,  1.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 541/811 [16:20<07:53,  1.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 542/811 [16:22<08:56,  1.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 543/811 [16:24<08:24,  1.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 544/811 [16:27<09:09,  2.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 545/811 [16:30<10:19,  2.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 546/811 [16:31<09:08,  2.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 547/811 [16:33<08:30,  1.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 548/811 [16:35<09:42,  2.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 549/811 [16:38<09:44,  2.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 550/811 [16:40<09:52,  2.27s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 551/811 [16:42<09:49,  2.27s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 552/811 [16:45<09:42,  2.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 553/811 [16:47<10:01,  2.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 554/811 [16:49<09:49,  2.29s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 555/811 [16:52<09:46,  2.29s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▊   | 556/811 [16:53<08:48,  2.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▊   | 557/811 [16:55<08:06,  1.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 558/811 [16:57<08:23,  1.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 559/811 [17:00<09:13,  2.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 560/811 [17:01<08:45,  2.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 561/811 [17:03<08:29,  2.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 562/811 [17:05<08:19,  2.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 563/811 [17:07<08:35,  2.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|██████▉   | 564/811 [17:09<08:02,  1.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|██████▉   | 565/811 [17:11<07:42,  1.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|██████▉   | 566/811 [17:13<07:29,  1.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|██████▉   | 567/811 [17:14<07:04,  1.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|███████   | 568/811 [17:16<07:12,  1.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|███████   | 569/811 [17:20<09:40,  2.40s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|███████   | 570/811 [17:21<08:37,  2.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|███████   | 571/811 [17:23<08:04,  2.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 572/811 [17:25<07:25,  1.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 573/811 [17:28<09:25,  2.37s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 574/811 [17:31<09:30,  2.41s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 575/811 [17:33<09:23,  2.39s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 576/811 [17:35<09:18,  2.38s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 577/811 [17:37<08:58,  2.30s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████▏  | 578/811 [17:40<09:05,  2.34s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████▏  | 579/811 [17:42<08:44,  2.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 580/811 [17:45<09:02,  2.35s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 581/811 [17:47<08:42,  2.27s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 582/811 [17:48<07:42,  2.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 583/811 [17:50<07:32,  1.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 584/811 [17:52<07:14,  1.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 585/811 [17:53<06:52,  1.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 586/811 [17:56<07:56,  2.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 587/811 [18:02<12:24,  3.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 588/811 [18:04<10:30,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 589/811 [18:05<08:45,  2.37s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 590/811 [18:07<08:07,  2.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 591/811 [18:09<07:42,  2.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 592/811 [18:11<07:11,  1.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 593/811 [18:12<06:56,  1.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 594/811 [18:14<07:10,  1.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 595/811 [18:16<06:37,  1.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 596/811 [18:18<06:58,  1.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▎  | 597/811 [18:20<06:27,  1.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▎  | 598/811 [18:21<06:09,  1.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 599/811 [18:23<05:49,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 600/811 [18:25<06:49,  1.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 601/811 [18:27<06:36,  1.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 602/811 [18:29<06:40,  1.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 603/811 [18:32<07:17,  2.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 604/811 [18:34<07:37,  2.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▍  | 605/811 [18:38<09:23,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▍  | 606/811 [18:40<08:26,  2.47s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▍  | 607/811 [18:41<07:26,  2.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▍  | 608/811 [18:43<07:09,  2.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▌  | 609/811 [18:46<07:28,  2.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▌  | 610/811 [18:48<07:24,  2.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▌  | 611/811 [18:50<07:02,  2.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▌  | 612/811 [18:52<06:31,  1.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 613/811 [18:53<05:57,  1.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 614/811 [18:54<05:37,  1.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 615/811 [18:56<05:24,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 616/811 [18:58<05:15,  1.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 617/811 [18:59<05:12,  1.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 618/811 [19:01<05:14,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▋  | 619/811 [19:04<06:18,  1.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▋  | 620/811 [19:05<06:11,  1.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 621/811 [19:07<05:50,  1.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 622/811 [19:09<05:58,  1.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 623/811 [19:11<05:51,  1.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 624/811 [19:13<05:49,  1.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 625/811 [19:14<05:35,  1.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 626/811 [19:16<05:30,  1.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 627/811 [19:18<05:21,  1.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 628/811 [19:20<05:31,  1.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 629/811 [19:22<05:47,  1.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 630/811 [19:23<05:26,  1.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 631/811 [19:25<05:22,  1.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 632/811 [19:28<05:52,  1.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 633/811 [19:30<05:56,  2.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 634/811 [19:31<05:35,  1.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 635/811 [19:35<06:53,  2.35s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 636/811 [19:39<08:50,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▊  | 637/811 [19:41<07:46,  2.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▊  | 638/811 [19:43<06:40,  2.31s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 639/811 [19:44<06:03,  2.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 640/811 [19:46<05:29,  1.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 641/811 [19:47<05:08,  1.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 642/811 [19:53<08:39,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 643/811 [19:55<07:29,  2.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 644/811 [19:57<06:46,  2.43s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|███████▉  | 645/811 [19:59<06:01,  2.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|███████▉  | 646/811 [20:00<05:38,  2.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|███████▉  | 647/811 [20:02<05:26,  1.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|███████▉  | 648/811 [20:05<05:52,  2.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 649/811 [20:06<05:21,  1.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 650/811 [20:08<05:14,  1.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 651/811 [20:10<04:54,  1.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 652/811 [20:12<04:58,  1.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 653/811 [20:13<04:50,  1.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).

1408100_20201_2_0,tlmpfp4icz,1.6018441819627192,-108.40452914619411,-48.776997804880594

3269073_20201_2_0,tloyon4icz,-1.4444322663652271,-101.56644978445473,-29.24536731088996

1018008_20201_2_0,tlp9so4icz,1.8558861871846946,-94.54334964966199,-48.11229066966291

4119053_20201_2_0,tlueuo4icz,-0.5327244243206869,-61.76380784290342,-32.72162995324216

5419286_20201_2_0,tlzb2p4icz,-1.834889934054898,-101.35768875701308,-5.475550637710555

3235015_20201_2_0,tlziap4icz,0.027135604676613943,-123.27207236753475,-15.878808102052943

1333112_20201_2_0,tm38no4icz,2.773202987816518,-104.3715168855108,-33.38915559290572

3308801_20201_2_0,tm3kjn4icz,-1.7588813965041645,-82.85597446707652,-30.750175241132823

1122730_20201_2_0,tmdqpo4icz,1.073420397336932,-91.44728666672958,-46.320085981648006

2401090_20201_2_0,tmomkn4icz,-1.2403672408229844,-121.78198872182216,-14.62931018149743

4466328_20201_2_0,tmpmio4icz,65.24454450813157,-65.13399153220865,-102.90457135342892

3910278_20201_2_0,tmqlko4icz,0.24955751344882146,-91.99653875246224,-31.214092083377665

1913333_20201_2_0,tmqowo4icz,3.3084878432082045,-39.409109674271065,-51.264578879572284

1524084_20201_2_0,tmseun4icz,-0.2092788831643245,-118.43334108451717,-18.07091316185759

4164709_20201_2_0,tmuchp4icz,-1.6966296828996905,-129.04928124166688,-39.048743910311885

4408266_20201_2_0,tmwmin4icz,3.680268788473734,-89.63856137224258,-86.47818997926238

2832212_20201_2_0,ax3b5o4icz,2.332566575999334,-73.54622092480432,-45.02712824763542

4349670_20201_2_0,tmymgo4icz,0.04732804267612359,-92.83024535971305,-50.82379890487708

4967915_20201_2_0,tn10cn4icz,-1.365522206378919,-105.50018113548407,-34.827605937116104

4287359_20201_2_0,tn127n4icz,0.9313497262628316,-74.38136739507297,-44.18156684986715

4188125_20201_2_0,tn3wwo4icz,-1.6319300768289295,-85.76547887481902,-19.622069568414233

3982636_20201_2_0,tn4rxo4icz,0.6800802840732946,-110.24332589840236,-33.283960741692354

3084891_20201_2_0,tn7hdn4icz,23.417464643413865,-46.98332858893039,-164.85502191396733

3833844_20201_2_0,tn847o4icz,-2.150151721728894,-97.1536166764281,-0.3844696281959017

5807308_20201_2_0,tncblo4icz,1.4713436036140954,-76.9387119879807,-52.1296769459869

1908310_20201_2_0,tncyfn4icz,0.45022871163454,-115.24401766790479,-35.21743348561645

5049187_20201_2_0,tnd9jo4icz,-3.8098965969015475,-133.71780876908787,-21.859532522350094

2452374_20201_2_0,tnk2cp4icz,-2.123976560850855,-134.1140918009104,-22.546132665232307

2174296_20201_2_0,tnoswo4icz,0.7606988276569937,-75.17375675631283,-46.346476939691

2348304_20201_2_0,tnrnqn4icz,0.6389381999665524,-80.122475803513,-44.076291369586414

3565860_20201_2_0,tnsc8p4icz,0.606415250366403,-110.95262136357644,-52.46981641211882

4453966_20201_2_0,tntiyn4icz,-0.6839576348475566,-118.51053988541048,-31.807415565307167

5706093_20201_2_0,tnu5pn4icz,0.24949851264159534,-177.0079088088023,-20.588217549197054

5028802_20201_2_0,tnu86p4icz,-1.6221144808168835,-138.08686256336338,-17.71652984178509

3293973_20201_2_0,rfou6n4icz,0.3084398350180316,-67.35610166669429,-51.76773058151716

5842662_20201_2_0,tnzpgn4icz,-3.0773634937132814,-149.05592286319276,-37.50429955663526

1348726_20201_2_0,to43mn4icz,1.473339915590638,-52.456778737732805,-48.43532858078068

5131532_20201_2_0,to44yo4icz,1.2310511350909512,-108.0801752596241,-41.16539920238675

4617611_20201_2_0,to5zjo4icz,1.7404271049616127,-107.72842162013438,-21.30053068422764

5276289_20201_2_0,to62uo4icz,-0.9181657134289775,-105.32536893762139,-38.66996674779254

3691621_20201_2_0,to85fp4icz,2.6958968778973356,-97.99411814132844,-65.86273629987406

4607060_20201_2_0,to9dnn4icz,-2.774260107843973,-104.89514327924738,-1.9691619226140205

3522641_20201_2_0,togn7p4icz,-1.7244961021464453,-84.63410336296198,-31.770794568518937

1188389_20201_2_0,toh6mn4icz,0.13643780030792008,-100.16664608378028,-27.597557658301795

1373108_20201_2_0,tojpfo4icz,2.6678136592920305,-49.32367900982018,-57.961980974379586

1778722_20201_2_0,tontuo4icz,1.3381168151747285,-59.91526944472599,-54.38286078761682

3995797_20201_2_0,toqcvo4icz,2.2928543817272877,-83.064023578894,-41.63618052477112

5135320_20201_2_0,tor88o4icz,-0.6225528078445056,-106.30632924804448,-52.90465681187057

5763438_20201_2_0,tosejo4icz,-4.333160694295515,-91.27251008451901,-16.111830092003686

5304132_20201_2_0,tou4vo4icz,-0.9042867945123404,-78.2370228766136,-24.18339011774529

2103913_20201_2_0,toyecn4icz,-0.15580475595593554,-96.9309486853316,-30.397736209699033

5192776_20201_2_0,tp4idp4icz,-1.6916726495901464,-77.45700943430344,-11.605694893827547

4969863_20201_2_0,tp79ao4icz,-2.3045743597713804,-91.28316373284378,-10.902343284895707

5545176_20201_2_0,tprklo4icz,-1.9913952873934608,-61.028657305078355,-49.215082212924386

4324932_20201_2_0,tpuo5p4icz,-0.46619597449470107,-131.9045376196331,-34.58261076072631

3402554_20201_2_0,tpyfkn4icz,1.1550490461731613,-89.08705017963086,-32.60085110711944

1121414_20201_2_0,tpzppn4icz,-2.020496681771352,-94.23904070575196,-46.026954043622126

2834583_20201_2_0,tq1rhn4icz,-5.839955852873565,-104.94829469459344,-13.6072692232744

3491542_20201_2_0,tq27kp4icz,-2.20477166085584,-99.35482030463186,-34.22035060125103

5717737_20201_2_0,tq512p4icz,3.061632571622333,-89.65450116166897,-45.640355231647234

3244198_20201_2_0,tq7hno4icz,2.0418292172178933,-127.31594136501317,-42.295838282769836

5043375_20201_2_0,tq7m5o4icz,-0.2070167587178167,-96.40531423896456,-34.0626525380364

1129024_20201_2_0,tqisep4icz,0.40085896933695797,-84.56527097062789,-42.54468511315174

3294478_20201_2_0,tqogqo4icz,-0.36698796101162706,-104.36128642026654,-27.076746341101426

3412476_20201_2_0,tqt8vo4icz,-0.5716333082419309,-87.38494518490174,-32.29599233543095

4506392_20201_2_0,tqujon4icz,3.7523178789124634,-120.26188969759181,-36.875781228446854

5825404_20201_2_0,tqvmkn4icz,-0.5487207868179028,-134.48991807967235,-33.46136197113675

4452455_20201_2_0,tqw44p4icz,0.308506932065988,-95.71274578562938,-49.69293712013712

1690241_20201_2_0,tr0eio4icz,4.551447627543218,-43.04231146007885,-68.06458411028228

1211546_20201_2_0,tr243o4icz,2.0124070570994985,-106.45248876705821,-40.55201869667374

4032468_20201_2_0,tr54nn4icz,0.9385022013643529,-121.61726048532785,-44.7217254116038

4413343_20201_2_0,tr7pko4icz,-1.0666177735364075,-78.46321690265648,-29.472693322282737

4022473_20201_2_0,trcnmn4icz,2.4712402793824415,-81.23633787606508,-31.770176483032685

6023908_20201_2_0,trcy8n4icz,-0.47084215288423714,-98.78409051469083,-39.71252492020727

4635305_20201_2_0,trgkxo4icz,-0.4732965357336665,-62.84798902870568,-53.250052500514656

3549117_20201_2_0,trh9rn4icz,-1.515853587221465,-59.70106188468327,-24.769774873728295

2585101_20201_2_0,trhjbo4icz,-1.5364825591480262,-120.91324283465451,-14.33097555670912

4433317_20201_2_0,trikjp4icz,-0.060543052534334015,-77.188460888826,-21.68502574516296

3719157_20201_2_0,trlc1o4icz,-1.1922579537367946,-75.7802312144955,-35.04777070374605

3772485_20201_2_0,tro49o4icz,-2.331408660246361,-100.0948837299081,-9.287677867872645

2595480_20201_2_0,trt89p4icz,0.2508821945242538,-123.37982239088913,-43.416578923915296

5575302_20201_2_0,trv5cp4icz,-2.558823798705982,-67.41809800497225,-36.451992335880746

3523748_20201_2_0,ts1zho4icz,-2.4580267383999512,-100.62116284242322,-15.543734456327698

1999016_20201_2_0,ts716n4icz,1.378406327423065,-103.85817997951054,-54.853892874238625

5426548_20201_2_0,krsoro4icz,4.0088960227971375,-62.97858886292113,-52.85161152795027

1427733_20201_2_0,tsfeon4icz,0.40584979620057704,-97.03819830090933,-21.820840655791187

2193876_20201_2_0,tsfqkn4icz,-3.157192201265014,-97.54861002645185,-15.472910300854053

2834673_20201_2_0,tsgnvo4icz,0.28412065215598964,-98.80837550374733,-38.28766404396025

2786114_20201_2_0,tskukn4icz,-2.273997989771979,-120.01218538665955,-17.50689472908944

5748038_20201_2_0,tsppan4icz,-2.174052082163696,-132.83440797854124,-23.791751198448637

1783740_20201_2_0,tsu7in4icz,0.34237815966026325,-88.94733256745775,-35.768457058695375

2377121_20201_2_0,tt1r4p4icz,-3.055572172221198,-117.83618811750597,-19.282597600630737

2128798_20201_2_0,tt53vn4icz,-2.95604564983821,-114.16858029722195,-8.365751264577924

1306496_20201_2_0,tt5wpo4icz,4.88438912146514,-78.91381130482037,-67.45017760618026

1638386_20201_2_0,tt756o4icz,-4.815621463577275,-108.6451067764109,-11.211488790690566

1708215_20201_2_0,ttaozo4icz,-0.31799091461227796,-70.92302682169682,-43.37795933039719

1468023_20201_2_0,ttchuo4icz,-0.7068419271969865,-99.07289942772559,-27.81849056208779

3272576_20201_2_0,ttjq5p4icz,-15.260519108291756,-115.413027257436,41.71291333397035

3807452_20201_2_0,tto0ro4icz,1.1221837159640036,-81.46768239059531,-42.92475964629203

5636005_20201_2_0,ttomap4icz,-2.1133703571972635,-105.04485514406915,-28.782286613822308

1782523_20201_2_0,ttviyn4icz,0.1407191008223683,-100.83603477974992,-18.775419845002716

4663927_20201_2_0,ttx6to4icz,0.24839273310291599,-93.74516029457115,-43.91027042989151

4056853_20201_2_0,tu2fwo4icz,0.47277917118748175,-50.780435461572154,-41.88772078678477

2739065_20201_2_0,tu6ksn4icz,1.117276351268885,-110.59110371083455,-47.641602471389206

5252444_20201_2_0,tu9msn4icz,-2.5701511541354987,-101.57482361029179,-20.929880059604898

2729175_20201_2_0,tuehpn4icz,-3.220893042581678,-105.65379679484363,-17.339393433407892

3298960_20201_2_0,tuhy6n4icz,-3.2876501468139616,-120.14015194394403,-31.367393063222067

4087424_20201_2_0,tum7jp4icz,-2.60585368993641,-93.81266587888058,-24.362717252820545

2917114_20201_2_0,tv01qn4icz,-0.946309609049895,-79.79623956711603,-28.356362761777774

1987499_20201_2_0,tv1wmn4icz,0.014681771766478646,-77.8597624492671,-36.739079543078105

2613359_20201_2_0,tv4cfo4icz,-0.6091855607928149,-52.90113516074581,-19.60314926475216

5216664_20201_2_0,tv66bo4icz,-7.323734434744189,-120.21854940300071,18.968828710150788

2137809_20201_2_0,tv72wo4icz,-0.1951205597456681,-112.60091219850554,-23.324803139033833

3409832_20201_2_0,tv7n0o4icz,3.233880704569283,-89.45385792924426,-65.14089236999254

3870213_20201_2_0,tv8gbp4icz,-1.2950189485661228,-74.52556061955491,-39.33136471178045

4241391_20201_2_0,tvcq8p4icz,0.49487900416972375,-109.58436673468282,-41.30867313106543

5092934_20201_2_0,tvg8ro4icz,0.0013344315151594072,-126.25581739932463,-44.97004315085135

2265515_20201_2_0,tvhjdn4icz,2.4166829596107036,-83.14125057777693,-67.81160776405252

2691909_20201_2_0,tvhu7p4icz,-1.2085101346390577,-53.83580080524217,-51.362376134380824

1504883_20201_2_0,tvj87p4icz,0.9975559954292129,-71.32095555725562,-34.047760426068734

1144256_20201_2_0,tvngun4icz,-1.1607158605171661,-94.61467988484705,-13.726449513466136

2079250_20201_2_0,tvpamo4icz,2.469188150818525,-68.94860106402072,-45.16784759441174

1576727_20201_2_0,tvszrn4icz,1.389304374154106,-88.32447374809877,-51.82960069318963

1184227_20201_2_0,tvtzrn4icz,-7.329870451735061,-71.33665061101115,-25.513873577058888

3866543_20201_2_0,tvwfdn4icz,-0.715985379523754,-103.242380584556,-59.704685269138395

5892754_20201_2_0,tvxc8o4icz,3.303576276017902,-75.65848391908827,-64.82506942865757

1128785_20201_2_0,tvxfvo4icz,-1.7118207733162216,-92.79529190248235,-22.008715310166338

3521150_20201_2_0,tvxwko4icz,1.5540294492591893,-74.50954781907262,-47.26151977577908

5323456_20201_2_0,tw2cfn4icz,-2.8010281484362025,-130.6267904520719,-37.5902704828533

1917533_20201_2_0,tw3hrn4icz,-1.677558571186144,-103.87597685450763,-32.38392320114208

2725540_20201_2_0,6wtjko4icz,2.7122910703098624,-76.55343387775451,-64.07056339357997

2143049_20201_2_0,tw8vhp4icz,-0.6519430525931742,-60.78711252590699,-25.582424690177845

3432953_20201_2_0,tw9sso4icz,-2.090776682649633,-63.53305299984078,-17.485645015581696

1404094_20201_2_0,tweoin4icz,0.994902954641215,-135.076517230784,-51.04653708212197

5123538_20201_2_0,twfgan4icz,-0.05740911621277912,-89.19540460980505,-51.48594778351284

5885327_20201_2_0,twgo3o4icz,0.6146371842065832,-54.64222310749119,-20.19290114370834

1604328_20201_2_0,twhqlo4icz,0.4656059482122012,-82.73827699553743,-44.29098811953658

5304942_20201_2_0,twjc9p4icz,0.7220454337997142,-135.9748625687144,-28.357651266299627

1590834_20201_2_0,twma6p4icz,-0.49579936833007326,-52.87865285122146,-32.03550694285825

3812505_20201_2_0,twn6to4icz,2.2358371832993638,-52.336084292701116,-53.370121387290354

4971552_20201_2_0,twpbcp4icz,-0.9975337810000151,-103.30434940012523,-27.905831997815127

2543614_20201_2_0,twqhxn4icz,-0.6607428339560849,-81.42564631797518,-29.44052296723521

1323579_20201_2_0,tx2jbo4icz,-0.8378119510285144,-55.41174795227758,-23.52874967662528

2035984_20201_2_0,txeknn4icz,-0.18833475445602849,-127.04032274362018,-41.730157828051915

5214030_20201_2_0,txhkco4icz,2.194191280365576,-94.62649082563058,-37.349971649564594

4434543_20201_2_0,txlomn4icz,-1.528024763544298,-93.45395086247362,-18.23800710356231

2062686_20201_2_0,txm05p4icz,-1.6880559212657542,-107.85254268375203,-25.446922885355264

3614376_20201_2_0,txmoen4icz,-2.89673382883495,-133.4984106396781,-26.540210735079455

5332339_20201_2_0,txu3ln4icz,2.72877208488977,-64.16079545235175,-43.82066023042981

2866559_20201_2_0,txx1gn4icz,4.381296491006647,-65.67515802446184,-48.44855942494138

2751930_20201_2_0,ty0ano4icz,0.2391288888901311,-120.17218020591727,-18.261115409919228

5468013_20201_2_0,ty3pvo4icz,-1.7385320373067394,-78.10367671677528,-22.70531818732455

2453254_20201_2_0,ty8xxo4icz,-0.4358792411307419,-52.62446314285404,-30.52838897687647

2588785_20201_2_0,ty8zjo4icz,-3.196698238203143,-103.41108601455795,-20.342102431466415

2711646_20201_2_0,tyagun4icz,1.4188587182757129,-99.36213529004979,-34.55716782049058

2065407_20201_2_0,tybi8p4icz,1.0407257501567324,-129.66200781790712,-39.54089408246796

5855976_20201_2_0,tyc4lo4icz,-0.6112385087945419,-96.79612468633968,-33.33950839807473

1414882_20201_2_0,tyfa8o4icz,3.1241907943194867,-47.335576288352314,-38.64701135327593

4812087_20201_2_0,tyjc2p4icz,2.534676105531243,-77.16808049344581,-43.33728741531648

1088318_20201_2_0,tylokn4icz,-0.18645228993531482,-105.24362555276139,-21.571469147383823

1258116_20201_2_0,9362zo4icz,-3.8337085132243094,-98.59966688467182,-12.331175838319112

1037975_20201_2_0,typsmn4icz,5.18441720089964,-146.77452736435484,-79.68032329146521

5618075_20201_2_0,tz1cgp4icz,2.374844584924759,-71.17308136592885,-37.35236221233059

4432959_20201_2_0,tzhezo4icz,-1.5936179023969579,-63.78097724845492,-24.24329096952758

3252570_20201_2_0,tziiap4icz,0.35557800487886654,-68.34883936124555,-52.69492953549377

2065751_20201_2_0,tzoopo4icz,1.9702104639508122,-84.34967718422368,-49.70631297547246

4352601_20201_2_0,tzprjo4icz,2.2919195283237395,-65.44892183103579,-63.325925244740105

4697383_20201_2_0,0k7r8o4icz,-0.059334008020821255,-125.08687635134001,-30.30676442765396

4037326_20201_2_0,tzuoip4icz,0.7450855112926883,-99.98847259665789,-33.044183025045214

5542967_20201_2_0,tzveun4icz,-0.7101057276114277,-87.3878402425243,-51.5782667390602

3919127_20201_2_0,tzw0no4icz,-4.582951428918007,-100.0255300859724,-14.545473141158837

3977747_20201_2_0,tzwkwn4icz,0.6515139026350333,-59.060616922620966,-41.057402808351526

1337809_20201_2_0,tzz09o4icz,-0.4397433443012009,-125.30743760934533,-23.48608438762085

5987162_20201_2_0,u00duo4icz,0.10351743116646617,-89.4976948257056,-29.123362561960974

1039989_20201_2_0,u00sho4icz,2.6374523297502472,-109.21260737716628,-52.64165541526465

3536572_20201_2_0,u02hcp4icz,1.6580449051804624,-82.43422473199323,-47.808868671499795

1469636_20201_2_0,u0a4no4icz,4.816553868547953,-100.15683454120574,-64.61982973853124

3300591_20201_2_0,u0finn4icz,4.802260875266761,-138.02369373408564,-51.453810365491876

2540221_20201_2_0,u0h5so4icz,3.652736391687196,-95.45229311009743,-43.247268901835824

5633318_20201_2_0,u0ij9p4icz,2.2068552610201335,-92.98189060560759,-39.59582164723082

2477322_20201_2_0,u0v42o4icz,-0.5139611648894248,-89.91830706070968,-41.676754086605555

1714467_20201_2_0,u0wfdn4icz,-1.6140761673722297,-120.87348383198585,-17.320958304201653

5685169_20201_2_0,u0yf4p4icz,-4.903195805499671,-124.47910552174062,-14.804073389744318

3816515_20201_2_0,u0yten4icz,-1.481869583306434,-115.93706045064238,-14.520591004469424

3404892_20201_2_0,u104ao4icz,3.867624922081936,-79.25898799013788,-47.66362653192198

5295290_20201_2_0,u11r9o4icz,2.1937648015844537,-69.4999623189486,-36.24261490013117

1780999_20201_2_0,u1kuyo4icz,-1.954213045406362,-110.21457168031688,-32.200342298126486

1351794_20201_2_0,u1nhko4icz,0.3358480378705758,-64.63773112356213,-38.10333795659119

4251410_20201_2_0,u1ocho4icz,-0.6322364776664667,-83.87427776460524,-41.683636261005475

1706716_20201_2_0,u1p7jp4icz,0.7900261272017025,-110.7678042230126,-24.37016740925837

3054265_20201_2_0,u1wkpn4icz,-0.9278666287809888,-84.19374091236028,-40.04515355635834

3790375_20201_2_0,u29akn4icz,-0.813208744305739,-128.64702930187912,-29.47468105535826

2872084_20201_2_0,u2cjkn4icz,1.2754210223067857,-94.62257360627845,-39.50854269345233

1753459_20201_2_0,u2drhn4icz,-2.0799233240974924,-84.41728971460478,-33.23014632393897

1752500_20201_2_0,u2ehgo4icz,8.894071441742609,-99.50182058117318,269.27352018875746

4718039_20201_2_0,u2gmpn4icz,0.36154803705295013,-86.97793587075955,-23.070824568284735

2639903_20201_2_0,u2j3qn4icz,1.2407476020922736,-159.53934602441,-59.44242990393542

1653582_20201_2_0,u2jojo4icz,-0.331012291764859,-88.15364726417687,-32.14388410063141

2626607_20201_2_0,u2jsto4icz,-2.3105821416818086,-35.49868535573981,-45.86615694540916

5676843_20201_2_0,u2oadp4icz,-1.6033066625605081,-106.35690153704809,-33.180585500539706

5198459_20201_2_0,u2popn4icz,2.1642996795652953,-86.13354382925439,-47.36704034164251

1036377_20201_2_0,u2rfmn4icz,0.5855128511653214,-100.83221873009435,-32.116066450232765

2984258_20201_2_0,u2s9en4icz,2.6323142110864857,-90.38883183378616,-54.20680474156674

4623107_20201_2_0,u2vqvn4icz,3.1022002431254574,-84.28339167896183,-44.3239038203196

5402281_20201_2_0,u33a9p4icz,1.8255452541025716,-65.16752692053635,-32.634721103742464

1687877_20201_2_0,u33qwo4icz,4.005607543402954,-46.434412666110234,-45.141216615721135

3345430_20201_2_0,u35ato4icz,-4.856904333680753,-97.36299745737128,-7.615544263440285

1708631_20201_2_0,u37zqo4icz,-12.476026617252776,-76.72998860102678,27.70346785365939

1820083_20201_2_0,u3f8gp4icz,-2.5499257263922552,-79.28875248806133,-30.680086674013936

6015276_20201_2_0,u3nqwo4icz,5.071773158156888,-93.98257282372532,-58.93802805944537

3231571_20201_2_0,u3nt3o4icz,3.505101221934784,-98.8690625706856,-66.50328876621708

4228692_20201_2_0,u3q1so4icz,3.6905987952204797,-124.22001025159014,-63.707818693354014

5090596_20201_2_0,u3r8xn4icz,-0.817929254786389,-121.92873407090559,-37.86810589614211

5630774_20201_2_0,u3ukin4icz,1.0311985294370762,-110.09953450692137,-41.41697615513394

3594546_20201_2_0,u3vnbp4icz,1.615865178804835,-56.35809513826359,-46.63974489429239

3673913_20201_2_0,u3yo5p4icz,0.4488965051741833,-130.33136830872573,-40.02508865219225

2636514_20201_2_0,u404ln4icz,-1.3253945810732897,-124.21442731554973,-31.05492799962829

2030864_20201_2_0,u446bo4icz,-2.6254091891745532,-143.8454709094866,-8.47080928695516

2182006_20201_2_0,u44pxn4icz,-2.8993431355392305,-104.16872402017447,-28.19121578333602

5403472_20201_2_0,u460gn4icz,1.6057409480358125,-131.2840581291307,-48.43134172971298

3206213_20201_2_0,u46vdp4icz,-0.6854685968139338,-122.6530213857877,-39.91023174751331

4417915_20201_2_0,u46zpn4icz,2.354146063235761,-110.42486124640004,-41.362422323549765

5679207_20201_2_0,u4hb3o4icz,-2.5531398408013692,-148.92026969102687,-27.165377638976025

4194319_20201_2_0,u4htjo4icz,-0.13580831557421946,-126.81433703837436,-30.693065783808777

2215258_20201_2_0,u4iwpo4icz,-1.0709099763155294,-108.6787239622036,-11.30849171150767

3378426_20201_2_0,u4ja8o4icz,3.4171500462458266,-113.85103440898271,-50.85548571285871

5549289_20201_2_0,u4kxrn4icz,-3.2335016366825275,-77.13535385284055,-33.80689589245003

2918782_20201_2_0,u4l3dp4icz,0.23485837692855915,-77.25556927980438,-28.939933648629733

5894663_20201_2_0,u4n7so4icz,2.1627383652769474,-78.14911836000584,-65.44125464993199

4162876_20201_2_0,u4nz0o4icz,1.5824960185941461,-107.38192644963323,-29.391376684420905

3591527_20201_2_0,u6nnfo4icz,-1.0555386683917893,-114.30946976666101,-16.69189240954995

2094019_20201_2_0,u4oglo4icz,1.5246612617056048,-87.53388359157816,-50.49376580244436

2761658_20201_2_0,u4qdio4icz,3.644599515041106,-43.4322160955854,-48.376257512910996

2406161_20201_2_0,u4qsip4icz,-4.956731269648232,-92.17773643705166,-8.938997179503986

4567367_20201_2_0,u4tcfo4icz,-1.0054753517758954,-96.8249727832357,-25.179987047260624

2606319_20201_2_0,u4wtbn4icz,2.284535101503832,-85.2171042782877,-44.851652394274836

1628412_20201_2_0,u53vln4icz,-4.481500736858434,-110.10082037630349,-20.07393668183795

1094809_20201_2_0,u572ln4icz,-1.64236932466538,-61.889519235237145,-24.7780148003132

3263501_20201_2_0,u5cxun4icz,-1.6200795512509172,-100.10980833342686,-33.19223526490339

4349183_20201_2_0,u5cyyo4icz,11.404276388921383,-63.827672459295655,-63.783913782139706

3508832_20201_2_0,u5hefp4icz,2.339926998033384,-106.70566507464332,-56.20358419934095

1251174_20201_2_0,u5hgdp4icz,5.443239299415539,-78.66634589051475,-80.33009730293682

1615125_20201_2_0,u5l9pn4icz,0.842069258322316,-68.83917947203193,-35.730494290894555

3181586_20201_2_0,u5meln4icz,-0.5431536027114419,-94.1927951271663,-30.688640487803042

2345244_20201_2_0,u5oljn4icz,6.260598442123611,-94.5491312141431,-65.55575467574401

3065399_20201_2_0,u5rxgo4icz,-2.7852508462817336,-91.58447138037897,-5.188206032179721

3710681_20201_2_0,u5sskn4icz,0.30234709898770107,-81.70683123598394,-27.916274073684406

2329211_20201_2_0,u5yjfn4icz,0.7077536414425629,-81.51089010490892,-44.31141718557606

1543627_20201_2_0,u608yo4icz,4.986081458213424,-51.86173940731092,-26.423165120089806

4048892_20201_2_0,u60slo4icz,0.09456527618718814,-111.28046637031323,-57.436927097448404

2895567_20201_2_0,u60zfo4icz,-0.2619064942111161,-102.56606738169464,-32.94950818085019

2256568_20201_2_0,u69qrn4icz,1.3211269015681326,-97.8254700954812,-45.824771671237045

5650154_20201_2_0,u6ch2o4icz,-0.2020095838217577,-79.34703402278285,-34.10812929531636

1841868_20201_2_0,u6cvun4icz,2.3691995676904694,-67.47834935270498,-43.690090757133405

4092035_20201_2_0,u6kj8n4icz,-4.648454594832178,-123.42766808670271,-12.584022864385204

3591527_20201_2_0,u6nnfo4icz,-1.0555386683917893,-114.30946976666101,-16.69189240954995

5407576_20201_2_0,u6q0wo4icz,-0.22669002805960134,-96.1001641440387,-28.309831654044046

4174999_20201_2_0,u6tsko4icz,2.9519245401147467,-91.00998128859072,-48.28033745265303

3702298_20201_2_0,u6wdep4icz,1.5082321689097282,-75.1596414260359,-46.626136323481745

3632995_20201_2_0,u6ypcn4icz,0.7822797263158724,-130.68678257814275,-42.12038750837668

3359859_20201_2_0,u7250p4icz,0.4232984777662928,-74.04420457592346,-51.54274117118173

5889978_20201_2_0,u7296p4icz,-3.3534742554630745,-53.23951494649293,-18.43977752841603

1522980_20201_2_0,u72rro4icz,1.4414431480207737,-94.36670528897454,-43.24470625343855

5899050_20201_2_0,u746lo4icz,3.143520803752985,-53.8062835865087,-82.00115766656371

4061492_20201_2_0,u74pgp4icz,0.5602110007433154,-74.85395306363313,-51.783037363759234

1972011_20201_2_0,u75p9o4icz,-2.4190123944639663,-86.7189881795735,-21.901052309385435

5878845_20201_2_0,u76ken4icz,5.595658632010592,-105.70858949682449,-64.04193752308339

1503944_20201_2_0,u77jjp4icz,-0.08116438963291814,-114.21497570015921,-48.814104974391796

2923363_20201_2_0,u77kzn4icz,-0.6467334475558132,-95.49208360964155,-43.018289250535176

5614238_20201_2_0,u78n5p4icz,0.5152102871227805,-93.14297705088302,-29.345311097043165

2383248_20201_2_0,u790un4icz,-3.450703723371804,-86.99404630586528,-20.275744146887163

4710402_20201_2_0,u7dedo4icz,-0.4775308099531148,-73.14858735460186,-47.143098069455846

3430027_20201_2_0,u7i6bn4icz,-1.8187834078244605,-67.63502453808627,-35.19553901814922

1413701_20201_2_0,u7ih0p4icz,3.6466464870792943,-74.56807593766135,-58.04593502889722

3907395_20201_2_0,u7j1jn4icz,-2.1880010327948236,-106.679507312537,-21.038351115460827

4426072_20201_2_0,u7l6yo4icz,-1.75701998618039,-98.405718993482,-15.61833864791943

5525276_20201_2_0,u7nh2p4icz,-3.040689935842668,-76.7826457748115,-21.01502445156956

2281382_20201_2_0,u7p7cp4icz,0.6846050104001867,-82.1024679373067,-29.901251045146523

3222864_20201_2_0,u7sc1p4icz,-0.04375093290894206,-99.79327690179889,-33.255670616707675

3296823_20201_2_0,u7zmeo4icz,5.428578152764479,-52.11518111072047,-48.65231882166496

4868809_20201_2_0,u82bap4icz,3.016034514064431,-54.304639623403375,-43.73004460753124

4459105_20201_2_0,u83tko4icz,2.581853598773077,-106.20568018178872,-44.27410185598549
 81%|████████  | 654/811 [20:15<04:42,  1.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 655/811 [20:18<05:12,  2.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 656/811 [20:21<05:50,  2.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 657/811 [20:22<05:29,  2.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 658/811 [20:28<08:19,  3.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████▏ | 659/811 [20:30<07:14,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████▏ | 660/811 [20:32<06:11,  2.46s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 661/811 [20:35<06:29,  2.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 662/811 [20:36<05:36,  2.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 663/811 [20:38<05:00,  2.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 664/811 [20:40<04:56,  2.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 665/811 [20:41<04:38,  1.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 666/811 [20:43<04:15,  1.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 667/811 [20:44<04:11,  1.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 668/811 [20:46<04:18,  1.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 669/811 [20:49<04:38,  1.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 670/811 [20:51<04:53,  2.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 671/811 [20:53<04:58,  2.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 672/811 [20:55<04:38,  2.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 673/811 [20:57<04:30,  1.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 674/811 [20:59<04:47,  2.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 675/811 [21:02<04:58,  2.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 676/811 [21:04<04:54,  2.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 677/811 [21:05<04:22,  1.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▎ | 678/811 [21:07<04:00,  1.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▎ | 679/811 [21:08<03:55,  1.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 680/811 [21:10<04:02,  1.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 681/811 [21:13<04:18,  1.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 682/811 [21:14<04:02,  1.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 683/811 [21:16<04:00,  1.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 684/811 [21:20<04:59,  2.36s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 685/811 [21:22<05:08,  2.45s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▍ | 686/811 [21:24<04:43,  2.27s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▍ | 687/811 [21:26<04:39,  2.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▍ | 688/811 [21:28<04:13,  2.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▍ | 689/811 [21:30<03:53,  1.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▌ | 690/811 [21:31<03:33,  1.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▌ | 691/811 [21:32<03:17,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▌ | 692/811 [21:34<03:11,  1.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▌ | 693/811 [21:35<03:05,  1.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 694/811 [21:37<03:04,  1.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 695/811 [21:39<03:23,  1.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 696/811 [21:41<03:20,  1.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 697/811 [21:42<03:08,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 698/811 [21:44<03:06,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 699/811 [21:46<03:02,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▋ | 700/811 [21:51<05:02,  2.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▋ | 701/811 [21:53<04:36,  2.51s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 702/811 [21:54<04:02,  2.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 703/811 [21:56<03:33,  1.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 704/811 [21:57<03:17,  1.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 705/811 [21:59<02:59,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 706/811 [22:00<02:54,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 707/811 [22:02<02:53,  1.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 708/811 [22:04<02:51,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 709/811 [22:05<02:45,  1.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 710/811 [22:07<02:44,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 711/811 [22:09<02:47,  1.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 712/811 [22:11<03:04,  1.86s/it] 88%|████████▊ | 713/811 [22:13<03:00,  1.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 714/811 [22:15<03:17,  2.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 715/811 [22:17<03:13,  2.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 716/811 [22:21<04:01,  2.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 717/811 [22:23<03:39,  2.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▊ | 718/811 [22:25<03:31,  2.28s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▊ | 719/811 [22:27<03:30,  2.29s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 720/811 [22:29<03:25,  2.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 721/811 [22:31<03:03,  2.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 722/811 [22:33<03:00,  2.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 723/811 [22:35<03:04,  2.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 724/811 [22:37<03:01,  2.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 725/811 [22:40<03:28,  2.43s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|████████▉ | 726/811 [22:42<03:03,  2.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|████████▉ | 727/811 [22:44<02:49,  2.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|████████▉ | 728/811 [22:46<02:51,  2.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|████████▉ | 729/811 [22:48<02:48,  2.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 730/811 [22:50<02:41,  1.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 731/811 [22:51<02:32,  1.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 732/811 [22:53<02:28,  1.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 733/811 [22:56<02:38,  2.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 734/811 [22:58<02:46,  2.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 735/811 [23:00<02:42,  2.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 736/811 [23:04<03:18,  2.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 737/811 [23:06<02:57,  2.40s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 738/811 [23:07<02:30,  2.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 739/811 [23:09<02:17,  1.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 740/811 [23:10<02:07,  1.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████▏| 741/811 [23:12<02:10,  1.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████▏| 742/811 [23:14<02:04,  1.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 743/811 [23:15<01:55,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 744/811 [23:17<01:50,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 745/811 [23:19<01:53,  1.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 746/811 [23:21<01:58,  1.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 747/811 [23:23<01:58,  1.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 748/811 [23:24<01:51,  1.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 749/811 [23:26<01:54,  1.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 750/811 [23:29<02:05,  2.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 751/811 [23:31<01:59,  1.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 752/811 [23:32<01:51,  1.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 753/811 [23:34<01:49,  1.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 754/811 [23:37<02:05,  2.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 755/811 [23:39<01:55,  2.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 756/811 [23:41<01:48,  1.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 757/811 [23:43<01:47,  2.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 758/811 [23:45<01:45,  2.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▎| 759/811 [23:46<01:38,  1.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▎| 760/811 [23:49<01:51,  2.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 761/811 [23:52<01:52,  2.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 762/811 [23:54<01:46,  2.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 763/811 [23:56<01:39,  2.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 764/811 [23:58<01:40,  2.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 765/811 [24:00<01:32,  2.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 766/811 [24:01<01:25,  1.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▍| 767/811 [24:03<01:20,  1.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▍| 768/811 [24:05<01:16,  1.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▍| 769/811 [24:06<01:11,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▍| 770/811 [24:08<01:07,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▌| 771/811 [24:09<01:04,  1.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▌| 772/811 [24:11<01:04,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▌| 773/811 [24:13<01:06,  1.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▌| 774/811 [24:15<01:07,  1.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 775/811 [24:16<01:01,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 776/811 [24:18<01:01,  1.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 777/811 [24:20<01:01,  1.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 778/811 [24:22<00:57,  1.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 779/811 [24:24<00:57,  1.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 780/811 [24:26<01:01,  1.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▋| 781/811 [24:28<00:57,  1.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▋| 782/811 [24:30<00:55,  1.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 783/811 [24:31<00:51,  1.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 784/811 [24:33<00:48,  1.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 785/811 [24:35<00:47,  1.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 786/811 [24:37<00:49,  1.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 787/811 [24:40<00:51,  2.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 788/811 [24:42<00:49,  2.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 789/811 [24:44<00:44,  2.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 790/811 [24:46<00:41,  1.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 791/811 [24:47<00:36,  1.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 792/811 [24:49<00:32,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 793/811 [24:50<00:30,  1.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 794/811 [24:52<00:28,  1.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 795/811 [24:53<00:25,  1.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 796/811 [24:56<00:28,  1.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 797/811 [24:57<00:25,  1.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 798/811 [24:59<00:22,  1.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▊| 799/811 [25:01<00:20,  1.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▊| 800/811 [25:02<00:18,  1.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 801/811 [25:04<00:16,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 802/811 [25:05<00:14,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 803/811 [25:07<00:13,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 804/811 [25:09<00:12,  1.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 805/811 [25:11<00:10,  1.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 806/811 [25:14<00:10,  2.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|█████████▉| 807/811 [25:16<00:08,  2.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|█████████▉| 808/811 [25:17<00:05,  1.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|█████████▉| 809/811 [25:19<00:03,  1.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|█████████▉| 810/811 [25:21<00:01,  1.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|██████████| 811/811 [25:23<00:00,  1.96s/it]100%|██████████| 811/811 [25:23<00:00,  1.88s/it]

3567233_20201_2_0,u86l7o4icz,2.413238995865798,-76.87841168006273,-39.086482198566046

3326829_20201_2_0,u87vbp4icz,-0.8955368717748299,-78.54273511008873,-47.65469804695715

4238135_20201_2_0,u8c8gp4icz,0.0936441448294774,-95.92753293397146,-41.38226874286252

5851848_20201_2_0,u8dgdo4icz,-0.7773692353139893,-93.73477211889636,-30.842015747121877

3627934_20201_2_0,u8dx3o4icz,-2.290571604052209,-98.13993783701304,-33.43122255832564

3382270_20201_2_0,u8fqrn4icz,-2.0388384515281515,-102.98088499196899,-37.8211632921077

1971271_20201_2_0,u8k0pn4icz,-0.8633994690255945,-122.96090766279409,-29.462514323668984

2505811_20201_2_0,u8mm5o4icz,0.8676129901407187,-101.14170035745303,-53.59389279279179

5455415_20201_2_0,u8msvn4icz,-0.4509853958572811,-80.90576468943337,-24.818230886196034

4803679_20201_2_0,u8ol6p4icz,0.8404402569556879,-66.49642838986978,-40.32604193814345

4975520_20201_2_0,u8sbro4icz,3.4922922339515208,-87.27543794962972,-55.58389662155341

5985664_20201_2_0,mq2gip4icz,-5.1771687128275925,-154.00701028297854,-30.267235858907796

3065792_20201_2_0,u97arn4icz,15.719582160333742,-43.6271948030236,-122.74373014096881

5686629_20201_2_0,u97ymn4icz,4.612308277730589,-112.55921809012321,-46.04658700186812

1978078_20201_2_0,u9b8ep4icz,-2.303763266296477,-107.30391033959552,-24.699481885810172

2375332_20201_2_0,u9ckqo4icz,-0.7762075902155037,-106.15674390817574,-22.167543866656928

3036038_20201_2_0,u9hv3o4icz,0.4986981369176051,-103.66532417196072,-22.570245030959697

3618092_20201_2_0,u9kfmn4icz,1.2654851682159955,-93.7021384197023,-26.939483990888874

4866129_20201_2_0,u9qgao4icz,-1.1726011879594007,-96.73738879947089,-20.830107814107677

1367695_20201_2_0,u9r6xn4icz,-0.1483616466854743,-117.45671811072657,-45.52657709728362

1439509_20201_2_0,u9yqgp4icz,0.31056527278496143,-159.26671664982177,-29.97128828712016

5401802_20201_2_0,u9zvtn4icz,8.25118861421835,-45.75672279017206,-78.51091907903225

1016618_20201_2_0,ua3akn4icz,-0.26357126739717973,-101.56049443929857,-35.17703424286492

5232384_20201_2_0,uaayko4icz,-1.0501088035479405,-133.078294985996,-30.30154270944685

1552592_20201_2_0,25m1qn4icz,0.6445436139993935,-72.72974010539158,-32.273916764140026

3399772_20201_2_0,uae93p4icz,-1.644578852330493,-132.67921403636188,-26.449749271328344

3016266_20201_2_0,uafnbp4icz,-0.25136145939712395,-135.5483441036396,-17.78205890146947

3557319_20201_2_0,uaj95o4icz,-0.18846540822578609,-126.83058503948527,-39.557147099692855

3175400_20201_2_0,uasfvo4icz,1.4469126744166076,-54.52977210575679,-50.69258704936777

3638996_20201_2_0,uautgn4icz,1.6282946575919521,-71.37823861662562,-45.254992765163266

5243327_20201_2_0,uayd6n4icz,1.7883732039386164,-82.9449680587989,-38.259535737316014

2176029_20201_2_0,uayxno4icz,0.2938527315153702,-109.58798177817658,-44.510519786618204

3517877_20201_2_0,ub0q7n4icz,-0.09576439967993897,-99.60022976015449,-37.37454347666642

1252527_20201_2_0,ub3gvn4icz,-2.7374135246014895,-114.85270766721527,-25.540018935385405

4871299_20201_2_0,ub6pxn4icz,0.320053189502729,-70.73737843534494,-42.38551446524393

5774593_20201_2_0,ub6yip4icz,-1.128281757819929,-128.53376807056586,-34.629827291271084

4821610_20201_2_0,ubbcbo4icz,2.126639259041246,-115.20690726051032,-25.33401767135277

4030426_20201_2_0,ubck4p4icz,0.5641549151592875,-125.67768051811777,-26.764735361495426

1042369_20201_2_0,ubd34p4icz,-1.1914382854048722,-83.54943275004581,-40.773620815395084

1789409_20201_2_0,ubfefo4icz,-2.289158093934647,-96.2652240487252,-25.9406196557771

5444635_20201_2_0,ubg2jp4icz,1.422566602234272,-106.01313128264553,-30.70767740832501

4935074_20201_2_0,ubidro4icz,2.808974166929711,-67.2685680176682,-34.03700626890816

3428406_20201_2_0,ubkhmn4icz,-4.4588524387315145,-112.13765043930485,-16.182158604261232

1218009_20201_2_0,ublign4icz,-1.2163584428388992,-108.33634342140414,-40.300802848522125

2185938_20201_2_0,ubqcan4icz,-0.04131182501292111,-84.38637600917588,-30.36196835413631

1300637_20201_2_0,ubrruo4icz,-0.46355495602109903,-77.00453871199764,-21.129155458203087

3094195_20201_2_0,ubrukn4icz,-1.3349120707368378,-117.4212403143502,-30.262225106650533

5350477_20201_2_0,ubtvpn4icz,1.0216372556480116,-114.12942688581549,-38.98890024934363

2765942_20201_2_0,uc054o4icz,-0.656514567277744,-79.37485588016827,-27.35309497191193

5147529_20201_2_0,uc287o4icz,-0.46386310636542083,-61.35240785271333,-29.57611386527074

2045695_20201_2_0,uc2ojp4icz,-0.7380647804944676,-77.43494669071666,-38.850945168336125

3933475_20201_2_0,uc4ueo4icz,-0.9658664298479618,-101.14750875109377,-30.215432770256143

4073575_20201_2_0,uc5tmo4icz,-1.5865587277128976,-74.39519178988081,-30.498872747736357

3717514_20201_2_0,ucaijo4icz,4.349864188825691,-83.33953088387301,-53.33468394897149

5730114_20201_2_0,ucbqgn4icz,0.6341010903167249,-119.636967914758,-44.98781916854199

4858315_20201_2_0,ucc1kp4icz,-1.2892341761971726,-120.39621013867338,-34.08497434841321

2027560_20201_2_0,uceqin4icz,0.2705774673700741,-112.10466642382539,-40.25610261973864

1582864_20201_2_0,7uad3p4icz,-13.965727444135174,-154.82481540959765,42.07748119724762

2455665_20201_2_0,ucf9un4icz,-1.4513550188910747,-126.30403888087406,-14.652749282236783

5275797_20201_2_0,ucj31p4icz,-1.7063052351285966,-75.42692421142218,-3.034305297979415

4026607_20201_2_0,ucmufn4icz,2.8991568227658866,-67.08467400361607,-42.67915431466737

4373869_20201_2_0,ucq4kp4icz,-13.830971196958329,-94.13910889717496,35.456227736200006

2094421_20201_2_0,uctudo4icz,-0.47429093190618876,-105.70823051240424,-32.04688514070905

1932941_20201_2_0,ucue8o4icz,-2.6275869647439984,-96.62886540991099,-31.09603452085915

5792922_20201_2_0,ucvo0p4icz,1.8078681522344235,-48.85082169416586,-43.388780165719666

5647474_20201_2_0,uczkno4icz,0.12409262087152187,-54.22572829214991,-27.479318025589123

1676595_20201_2_0,udaf7o4icz,0.4676373725090569,-110.07986673497712,-29.638450837252407

3366689_20201_2_0,udcp4p4icz,-1.8312460599945581,-109.74166514028087,-14.973499232320961

1276942_20201_2_0,udkrfp4icz,2.6169710185919697,-127.13342833357007,-55.65284015285553

2155515_20201_2_0,udojmn4icz,-1.5499007213860523,-108.24843704689408,-40.762496799206744

3999788_20201_2_0,udp3ho4icz,-2.673031692085886,-75.92287621143902,-17.649100495673025

4540240_20201_2_0,udshyo4icz,-0.7373449813211713,-97.60705473733853,-30.305415467893326

4546709_20201_2_0,udvdkn4icz,1.5197013130626447,-84.50647370312333,-71.73454990012326

3638661_20201_2_0,udvnnn4icz,-2.4657334556818404,-113.66394923112875,-28.82622362391413

3089346_20201_2_0,ue0tko4icz,1.268790563271198,-97.4833350887711,-49.030925547447495

2996867_20201_2_0,ue4wgo4icz,-0.6843136155512237,-92.6289255557655,-21.44667231841636

3040441_20201_2_0,ue5eip4icz,-0.49600087896861483,-132.18348087531672,-26.80744466984669

4509500_20201_2_0,ue8i2p4icz,-0.1580269980752517,-76.31861318333102,-55.930132111198844

1990419_20201_2_0,ue923p4icz,6.397621352228552,-52.83142633005559,-64.65549459065062

3547750_20201_2_0,ueaa6n4icz,-2.2169598056593025,-134.31557740516953,-21.129985971778808

1469964_20201_2_0,uechio4icz,-1.4715712537861951,-85.52401938974779,-37.6021590232173

2730821_20201_2_0,ued0zo4icz,1.1641486022300032,-95.11279480027991,-52.1887730648219

4131699_20201_2_0,uedy4o4icz,2.967126292146477,-69.90269361187606,-43.64448775894732

3566280_20201_2_0,ueeoun4icz,3.484122473852284,-80.3766700610168,-56.33638255439345

3520642_20201_2_0,uegs9p4icz,2.004595606089142,-124.06856732282586,-45.271399027448496

2767957_20201_2_0,ueh38o4icz,-0.5478685492064448,-104.26491009168726,-25.148892732437062

5113246_20201_2_0,uehoep4icz,0.2834180571888439,-106.01623801607681,-43.449329841961784

3762107_20201_2_0,uei2po4icz,-1.4403709957857813,-29.229639777670513,-25.02707415325966

2973206_20201_2_0,ueiyfn4icz,-1.508447872603157,-71.09694620881464,-28.253377674237214

4292231_20201_2_0,uencmo4icz,-0.7104663258095826,-88.07320775704798,-35.13246707309156

2348875_20201_2_0,uendwo4icz,-0.9276079223076269,-104.61543065346862,-35.14314341147984

2798366_20201_2_0,uenesn4icz,-1.904857920491687,-60.940732327671356,-39.641106115079225

4039608_20201_2_0,ueosip4icz,-1.5920648505643114,-103.87402458857082,-33.620658872049475

4194014_20201_2_0,ueqhep4icz,-26.001274671274214,-99.92335863284814,121.6470170913856

4814323_20201_2_0,uera6p4icz,1.027453792817264,-73.22618532328863,-55.51086238124675

5209540_20201_2_0,uergln4icz,1.2591158488994825,-96.83140440461605,-39.483892445114236

1160509_20201_2_0,uert3o4icz,5.453340303044981,-79.86067043022771,-49.75240160116739

2923342_20201_2_0,ues6dn4icz,-2.8743031360377453,-117.35382499547615,-26.81570766319318

4612095_20201_2_0,ueto9o4icz,3.8234564897583416,-111.06196506183437,-61.580652603205806

2120036_20201_2_0,uew97p4icz,-1.411259890488737,-103.59596814966679,-37.59739163487595

3368549_20201_2_0,uf1xln4icz,0.665098782216981,-85.77769611009211,-47.47253853400207

1493757_20201_2_0,ufek8p4icz,-4.947142353700767,-84.03555212008101,1.6243873451447257

5065703_20201_2_0,ufhinn4icz,-0.20910273195510062,-125.26875411566249,-29.220636963142894

5864618_20201_2_0,ufhjvo4icz,2.759565025358976,-62.00648659227727,-50.985154592713585

4182084_20201_2_0,uflxyn4icz,1.222680902185491,-85.42526697580595,-44.59409049448408

3698496_20201_2_0,ufmtho4icz,2.2272907840389284,-102.95230181676888,-35.18204810501808

1786797_20201_2_0,ufn27p4icz,0.759309265271964,-94.30580293496294,-46.008827401914274

1465322_20201_2_0,ufnxwo4icz,-1.712858012416009,-129.549139090936,-50.27219632891226

5580522_20201_2_0,ufq8ko4icz,1.6975005020762706,-80.77276293188035,-58.49060312029093

5342555_20201_2_0,ufsgqo4icz,0.2864407158389168,-101.98948375538686,-38.73324788649883

1060549_20201_2_0,ufswqo4icz,-1.5923093372311719,-92.59837301253401,-30.839981997636713

2324686_20201_2_0,ufxdyo4icz,1.13933521626368,-97.96801351183751,-34.682055319616495

5151421_20201_2_0,ufz3lo4icz,-1.0491481279278017,-86.10017186200832,-54.59855205224159

3562836_20201_2_0,ufzqqn4icz,2.125671514339929,-118.6067327396334,-46.28216771603779

4458119_20201_2_0,ug4g9p4icz,-0.3628042145134411,-103.53818430558525,-38.402670498827604

5687832_20201_2_0,ug5lgp4icz,0.730732624016877,-104.55592685807406,-42.120758027902795

4501367_20201_2_0,ug6y9n4icz,-1.2598579054190417,-94.64333412684329,-25.910036833186624

4712668_20201_2_0,ugbdpn4icz,2.1725373827188377,-132.31845179187488,-57.57933957033812

3283652_20201_2_0,ugc97o4icz,-2.1758749394869814,-80.35980678213963,-22.256443527607757

1262213_20201_2_0,uge8vo4icz,-2.8756001001257396,-89.83233304349852,-26.12140107893177

5588681_20201_2_0,ugeltn4icz,6.641519138011537,-100.40528874889347,-69.68041908241125

1176363_20201_2_0,ugkqlo4icz,0.9137261939188475,-122.92530613193682,-38.938881112008644

1189007_20201_2_0,ugkzep4icz,-0.9564360428929896,-96.5744856364604,-30.863106429377453

3000353_20201_2_0,qbegqn4icz,-0.008647011642325737,-119.32401302208785,-54.15720347006757

2750396_20201_2_0,ugpd0p4icz,-0.839551594008133,-91.44112499058264,-28.570381217062092

2048142_20201_2_0,ugt4vo4icz,0.9349630954144572,-69.25462231542264,-29.010871503548216

2344058_20201_2_0,ugu8do4icz,1.4515834481961645,-88.6271303542988,-35.41690534127565

4535346_20201_2_0,ugxnjn4icz,-0.7137874465085692,-133.52190109540447,-46.113146013809924

2949133_20201_2_0,ugxt8p4icz,1.6872864895521766,-99.57576569238503,-59.113714162397386

1098228_20201_2_0,ugy53o4icz,1.2894556399810846,-115.50196167832758,-29.88242120210606

3763151_20201_2_0,uh3oun4icz,3.3910584282194645,-79.54185159625499,-33.57712381699764

1038034_20201_2_0,uh60nn4icz,4.673987090553676,-115.05284078370212,-46.23066806743756

5421504_20201_2_0,uhbl9o4icz,3.115389056556008,-71.09376912037445,-62.22124396377622

3035276_20201_2_0,uhbvhn4icz,1.3963714588134466,-117.03052928542405,-53.158366148952624

1792644_20201_2_0,uhc5en4icz,-0.21819880412468165,-150.41266446204114,-48.0093081845973

3206992_20201_2_0,uhheao4icz,-0.6424493187204721,-77.28819325111635,-22.696586770517186

4692365_20201_2_0,uhj7ln4icz,-3.944864331494317,-75.23102302785205,-13.718829711437394

4895729_20201_2_0,uhkt8o4icz,-1.1388739851550234,-74.24630820764477,-40.02803204401762

2477271_20201_2_0,ui0cdo4icz,-0.21910671575253088,-58.890727388507685,-55.14056193235467

1913246_20201_2_0,ui1j7p4icz,1.4488085304531133,-69.40396058647204,-58.630093641718844

1305234_20201_2_0,ui2zqo4icz,3.653748626023108,-96.66868392184563,-61.984177995919

2737653_20201_2_0,ui8kzo4icz,2.325786280978365,-57.36705076970384,-39.070865434182494

3436341_20201_2_0,uia1xn4icz,1.9351368004305018,-115.71690823358159,-42.28172028063142

4159298_20201_2_0,uij1to4icz,8.396478364192152,-69.48800264209856,-70.73983673640556

5529851_20201_2_0,uimv7o4icz,6.495555748357547,-70.97884860644632,-63.53984167680055

1535954_20201_2_0,uinz1p4icz,0.7982378848763847,-122.28241192241555,-49.569517369096474

2676099_20201_2_0,uiswdo4icz,-2.843667240698059,-105.05880108051849,-35.97756034379165

3009570_20201_2_0,uit5un4icz,-0.42760041666211956,-114.82962719448153,-53.10650382693541

4073884_20201_2_0,uiwxwn4icz,-5.248729638369017,-91.39166362766088,-8.770872221501165

2388782_20201_2_0,uj07ip4icz,0.9206437076713812,-65.21626533699217,-64.26762060886853

3462903_20201_2_0,uj121o4icz,1.5852142701021552,-88.24698751857423,-42.75477046263936

5699318_20201_2_0,uj4oen4icz,-19.043488404441412,-101.16979131235304,324.81846058575695

3657916_20201_2_0,uj6xdp4icz,0.32547200392515385,-72.26279135097343,-33.59278525052453

5205830_20201_2_0,uj9iln4icz,0.8470750880123259,-120.73741587272355,-27.810529267893784

3209273_20201_2_0,ujc3zo4icz,3.4004370930197423,-64.94009516298925,-59.80349394823804

5174171_20201_2_0,ujcxuo4icz,5.014530294910703,-81.68303876889206,-85.11555887275682

4161741_20201_2_0,ujdqjp4icz,0.5604277753971679,-85.47367192071101,-45.67075265530988

4052015_20201_2_0,ujq6xo4icz,-1.5451876670796059,-105.98902427306948,-17.113792307294133

4905805_20201_2_0,ujztpo4icz,0.8353414298036118,-81.68889834780487,-35.28985970662748

2611658_20201_2_0,uk2rip4icz,-1.4516144697026607,-120.42731842590129,-16.3618847705074

2540671_20201_2_0,uk7egp4icz,0.2318543490114366,-77.82664358129821,-35.52420697151969

6012255_20201_2_0,uk91ip4icz,-0.4564703083056562,-102.37977230457528,-36.70728211243903

4562949_20201_2_0,ukc98p4icz,0.9940833344260365,-137.06742819668276,-39.86967506214046

3736188_20201_2_0,ukd2bn4icz,0.32823666903484416,-117.47676363320738,-39.51985408487468

5898551_20201_2_0,ukft8p4icz,0.9445715480052198,-116.19903568420654,-31.42615895347913

4066119_20201_2_0,ukgzno4icz,8.275466160808453,-51.993521931784954,-83.97664799370504

1386378_20201_2_0,uki03p4icz,2.7976635158282033,-146.40723885748747,-68.71855741379912

5698181_20201_2_0,uki4rn4icz,2.4825752150124027,-112.10416489179036,-45.958504294864454

3056197_20201_2_0,ukitfp4icz,-0.09902184063231019,-84.92995400890618,-41.86459308503284

2269134_20201_2_0,ukl5fp4icz,-2.18383656448285,-82.97037151438877,-21.519744082989533

1203578_20201_2_0,uknfrn4icz,1.7452909017471667,-72.29543951581857,-41.147570945294945

1227164_20201_2_0,ukoy8n4icz,-3.4919090346486645,-121.6882920647275,-23.74800629926648

4635067_20201_2_0,ukpnjn4icz,-0.24679494510760258,-94.29958930744519,-40.64754805386313

1484139_20201_2_0,ukv3eo4icz,-2.5947234497383374,-72.93286758540515,-21.09743936183031

5790306_20201_2_0,ukyusn4icz,-0.643244686610273,-62.49089766728156,-27.591037945269335

1476791_20201_2_0,ul1ksn4icz,-0.6451663288658654,-93.75650813808588,-45.70375726148741

2266211_20201_2_0,ul1xoo4icz,3.0464122380970173,-57.243296305313976,-47.38367479326479

4488973_20201_2_0,ul3nbp4icz,-2.7479721426118333,-142.32918398100173,-10.767510625075857

5509314_20201_2_0,ul57so4icz,0.4846980617386015,-79.29779913664365,-44.681181890680165

3926323_20201_2_0,ul6gdp4icz,4.413245762945128,-82.44367593205686,-69.56564713086561

3093381_20201_2_0,ulbnoo4icz,-1.0994251607620737,-104.2192778317825,-50.25354528405988

1489750_20201_2_0,ulcz1p4icz,2.2260322793448886,-45.045925226071034,-60.06897746488744

4292664_20201_2_0,uldymn4icz,-3.551434018254054,-45.87367522838201,-30.62524534578985

5792483_20201_2_0,ulg27p4icz,1.6227058430478527,-86.92900999568437,-34.46808764634696

4343309_20201_2_0,ulhwkn4icz,3.5875963390829555,-59.35159181530341,-48.92118031606424

5831446_20201_2_0,ulj6to4icz,0.9946054918691312,-108.39323844664818,-32.25541619426906

1255992_20201_2_0,ull1mo4icz,-0.12170112038267764,-121.43571725101287,-33.60235229825874

5826330_20201_2_0,ulo49p4icz,1.8504107877015576,-83.13673360849009,-48.79333499782696

1356588_20201_2_0,bz1yjp4icz,44.7313539264821,95.7898587874764,-236.3580870742718

5862792_20201_2_0,ulppcn4icz,-0.6791297256574914,-78.45595448905999,-34.88659945516942

1935594_20201_2_0,uls8ao4icz,-0.36427938923248143,-60.243609684600926,-40.06774970769064

4688112_20201_2_0,ulw4fo4icz,-1.218049401662838,-67.46654240072223,-19.197244954916428

5923573_20201_2_0,ulxyen4icz,1.29326657916262,-101.73570290327243,-43.94349114324437

3908474_20201_2_0,ulz26o4icz,-1.7634557501861625,-75.22292422975664,-16.680325529226664

2864697_20201_2_0,ulz8jn4icz,1.2488826607196604,-99.36256370635905,-41.68955385811512

5870524_20201_2_0,um0d8o4icz,-1.074283415835652,-110.33547823562893,-16.163096325978614

4000744_20201_2_0,um5c4o4icz,0.9695825795490451,-112.41846417050519,-42.21952276909205

3668096_20201_2_0,umebeo4icz,-4.86556255259515,-116.14769125077356,-24.214419189863804

5539148_20201_2_0,umez1p4icz,-2.4646496724991613,-125.70097364739189,-33.6572094743763

1429910_20201_2_0,umfhyo4icz,-0.3774661003595835,-66.06308115842717,-38.64947021832394

2289385_20201_2_0,umhqin4icz,0.2530303555450079,-104.96412346521115,-29.9440155895458

5700190_20201_2_0,umiy9p4icz,-0.048615145987269084,-98.1457327048332,-55.689809810485556

1773862_20201_2_0,umjgzn4icz,0.3605865799198102,-84.89333710545458,-44.09799011373134

2934504_20201_2_0,umknon4icz,-3.1535121746769863,-78.02151051867611,-10.073835456649675

1944650_20201_2_0,umljep4icz,-0.9447518701545911,-96.62746372155743,-38.80717487305412

5134164_20201_2_0,ums3ao4icz,4.536013872957387,-59.193555393997144,-47.41639877865834

3173087_20201_2_0,umsk9n4icz,-3.421273295206621,-96.82401273763588,-20.675460575940974

5213889_20201_2_0,umvbro4icz,1.3849579238052405,-80.82759850973889,-33.362202218326914

2990367_20201_2_0,umvkwn4icz,-4.606547743825072,-131.45294044356706,3.552121766645797

4020041_20201_2_0,umvmyn4icz,-0.16119353990793645,-75.9906077609161,-30.416022051806564

5805618_20201_2_0,un2a9n4icz,0.2274989943168662,-75.97951209658456,-27.532725214156528

1729784_20201_2_0,un4emo4icz,0.9418678318094438,-73.18168937456767,-35.572004085754074

4578110_20201_2_0,un5kln4icz,1.5256176511303328,-59.3143840561921,-40.56454432879991

1041634_20201_2_0,un6pon4icz,1.0213334281360256,-81.84729920971336,-48.50347673395922

3080491_20201_2_0,un6zco4icz,0.3568758335781596,-73.33658463398183,-13.812600614414023

4301047_20201_2_0,un76ep4icz,-1.3080321201164107,-110.94825999914286,-25.015741449127546

4442729_20201_2_0,un8dbn4icz,-2.761189852256146,-99.10595910773566,-16.032585494716074

1275612_20201_2_0,unc7ln4icz,-1.876364585162361,-129.1490804799424,-22.01676717468733

4698855_20201_2_0,uni6wo4icz,-4.412671470063761,-130.85748192771808,1.3994026136730184

2266600_20201_2_0,unjtcn4icz,-0.254299944952448,-100.6981705877005,-37.123845036059976

1982275_20201_2_0,unpi7o4icz,-15.343183568840878,-87.74621921032002,46.730874754815744

4523211_20201_2_0,uo0zhp4icz,-0.4555076329042816,-75.3812279745095,-50.984823239341324

3150363_20201_2_0,uo4iln4icz,-0.842818950121567,-94.96349377114458,-23.081839965497466

5508268_20201_2_0,uoafyo4icz,0.1101751812047093,-113.25343142325602,-39.67914134437075

1565465_20201_2_0,uobfjp4icz,3.0457600015909154,-74.2542575497209,-40.90121268145195

3587655_20201_2_0,uoi1bp4icz,2.4103938988054683,-91.97753771461535,-60.20282355761775

4251525_20201_2_0,uoiw0p4icz,0.5689485176074752,-86.8737812935054,-40.84452181636982

4765647_20201_2_0,uolupo4icz,-0.09023208992323606,-84.15318859927359,-22.764957358092516

3018888_20201_2_0,uolymn4icz,-3.213951685122171,-120.84997686523195,12.453328501030981

4691174_20201_2_0,uommln4icz,-0.22519321789328145,-137.01760482372202,-45.567391158422936

2195934_20201_2_0,uon8qn4icz,-2.034105335488761,-113.62064276609726,-24.014918778639952

2588132_20201_2_0,uoojgp4icz,-1.3386949222940812,-111.04895843910788,-16.49731289276839

2729743_20201_2_0,uopphp4icz,-1.5761785392678507,-93.62377922545718,-33.88651552603922

5548993_20201_2_0,uor3wn4icz,-0.7601389882474859,-70.46354424770536,-25.809712437413978

2881151_20201_2_0,234sln4icz,-0.1937134930554276,-91.00951380205134,-44.132478529743

4248473_20201_2_0,up4hyo4icz,-1.944284707480113,-76.66923583620655,-22.071225932139583

5316981_20201_2_0,upaxhp4icz,-0.989992034439535,-96.97467901258506,-35.94224929159151

2466460_20201_2_0,upk8dp4icz,17.34122895712596,5.272121254329534,-121.88305327183554

4181635_20201_2_0,upmcbp4icz,0.06871291259508433,-146.4575001121939,-36.190749291050736

3319369_20201_2_0,upnrfp4icz,2.062427600029157,-112.03828621125243,-23.317120936679373

3201229_20201_2_0,upqr4p4icz,-0.5579193923817645,-112.42958083505047,-25.154353237575492

5755902_20201_2_0,upqvpn4icz,1.3554367985948963,-94.59833098060193,-39.8129917919604

5105882_20201_2_0,upskyo4icz,1.4452091536583815,-69.65449552181047,-34.429395873247785

5118403_20201_2_0,upsl9p4icz,-0.9807529611145792,-90.65354399615865,-22.553223722732596

2252102_20201_2_0,upwfmo4icz,1.6677202613993676,-91.5814764433128,-38.05903993365821

4162626_20201_2_0,upy75o4icz,-0.20890013021989437,-125.27689781021809,-32.13127078677792

1211132_20201_2_0,upzusn4icz,-6.311740289239447,-150.16379274647736,-3.60301731846306

5973761_20201_2_0,uq70ln4icz,0.3136026274808444,-98.83473132800782,-44.069514464636114

5592551_20201_2_0,uqa5co4icz,-1.5843613421654488,-99.99292644318669,-18.150413462603225

3978129_20201_2_0,exi2vn4icz,-0.48697937325066365,-78.95455780689292,-20.93964147827441

/users/rhydian/anaconda3/envs/torch_env/lib/python3.7/site-packages/torch/cuda/__init__.py:52: UserWarning: CUDA initialization: Found no NVIDIA driver on your system. Please check that you have an NVIDIA GPU and installed a driver from http://www.nvidia.com/Download/index.aspx (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729006826/work/c10/cuda/CUDAFunctions.cpp:100.)
  return torch._C._cuda_getDeviceCount() > 0
  0%|          | 0/102 [00:00<?, ?it/s]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 1/102 [00:02<03:37,  2.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 2/102 [00:03<03:16,  1.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 3/102 [00:05<03:08,  1.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/102 [00:07<02:58,  1.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▍         | 5/102 [00:08<02:55,  1.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 6/102 [00:10<02:48,  1.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 7/102 [00:12<02:43,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 8/102 [00:18<05:00,  3.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 9/102 [00:20<04:11,  2.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|▉         | 10/102 [00:22<03:41,  2.41s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 11/102 [00:23<03:23,  2.24s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 12/102 [00:25<03:08,  2.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 13/102 [00:27<02:55,  1.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▎        | 14/102 [00:29<02:49,  1.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▍        | 15/102 [00:30<02:40,  1.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 16/102 [00:32<02:41,  1.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 17/102 [00:35<02:58,  2.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 18/102 [00:37<02:49,  2.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▊        | 19/102 [00:38<02:38,  1.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|█▉        | 20/102 [00:40<02:23,  1.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 21/102 [00:41<02:17,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 22/102 [00:43<02:16,  1.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 23/102 [00:46<02:39,  2.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▎       | 24/102 [00:48<02:33,  1.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▍       | 25/102 [00:50<02:30,  1.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▌       | 26/102 [00:51<02:25,  1.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▋       | 27/102 [00:53<02:17,  1.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 28/102 [00:55<02:16,  1.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 29/102 [00:58<02:37,  2.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 30/102 [01:00<02:28,  2.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|███       | 31/102 [01:02<02:32,  2.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███▏      | 32/102 [01:04<02:17,  1.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 33/102 [01:05<02:13,  1.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 34/102 [01:09<02:38,  2.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 35/102 [01:10<02:23,  2.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▌      | 36/102 [01:12<02:16,  2.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▋      | 37/102 [01:14<02:05,  1.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 38/102 [01:15<01:54,  1.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 39/102 [01:17<01:52,  1.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 40/102 [01:19<01:51,  1.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|████      | 41/102 [01:22<02:05,  2.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 42/102 [01:23<01:59,  1.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 43/102 [01:25<01:58,  2.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 44/102 [01:27<01:48,  1.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 45/102 [01:28<01:34,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▌     | 46/102 [01:30<01:30,  1.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 47/102 [01:33<01:56,  2.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 48/102 [01:35<01:54,  2.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 49/102 [01:37<01:50,  2.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 50/102 [01:41<02:10,  2.51s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 51/102 [01:46<02:44,  3.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 52/102 [01:47<02:13,  2.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 53/102 [01:50<02:13,  2.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 54/102 [01:52<02:03,  2.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 55/102 [01:54<01:48,  2.30s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▍    | 56/102 [01:55<01:38,  2.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 57/102 [01:57<01:34,  2.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 58/102 [01:59<01:25,  1.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 59/102 [02:01<01:19,  1.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 60/102 [02:02<01:14,  1.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|█████▉    | 61/102 [02:04<01:17,  1.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 62/102 [02:06<01:13,  1.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 63/102 [02:08<01:09,  1.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 64/102 [02:09<01:05,  1.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▎   | 65/102 [02:11<01:01,  1.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▍   | 66/102 [02:14<01:11,  1.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 67/102 [02:19<01:45,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 68/102 [02:21<01:27,  2.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 69/102 [02:23<01:19,  2.40s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▊   | 70/102 [02:25<01:12,  2.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|██████▉   | 71/102 [02:26<01:06,  2.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 72/102 [02:28<00:59,  1.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 73/102 [02:30<00:54,  1.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 74/102 [02:31<00:52,  1.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▎  | 75/102 [02:33<00:48,  1.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▍  | 76/102 [02:35<00:45,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▌  | 77/102 [02:36<00:44,  1.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▋  | 78/102 [02:38<00:41,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 79/102 [02:40<00:38,  1.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 80/102 [02:43<00:47,  2.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 81/102 [02:45<00:42,  2.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 82/102 [02:47<00:39,  1.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████▏ | 83/102 [02:48<00:34,  1.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 84/102 [02:49<00:30,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 85/102 [02:51<00:29,  1.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 86/102 [02:53<00:26,  1.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▌ | 87/102 [02:55<00:26,  1.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▋ | 88/102 [02:56<00:23,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 89/102 [02:58<00:21,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 90/102 [02:59<00:19,  1.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 91/102 [03:01<00:18,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 92/102 [03:02<00:15,  1.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 93/102 [03:04<00:14,  1.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 94/102 [03:06<00:12,  1.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 95/102 [03:07<00:10,  1.53s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 96/102 [03:08<00:09,  1.53s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▌| 97/102 [03:10<00:07,  1.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 98/102 [03:12<00:06,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 99/102 [03:14<00:05,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 100/102 [03:15<00:03,  1.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 101/102 [03:17<00:01,  1.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|██████████| 102/102 [03:19<00:00,  1.70s/it]100%|██████████| 102/102 [03:19<00:00,  1.95s/it]
Trying to load from /users/rhydian/self-supervised-project/model_weights/SSECEncodersBothBoth
==> Resuming model trained for 106 epochs...
Trying to load from ../model_weights/angle_regressor4
==> Resuming model trained for 7 epochs...
1072603_20201_2_0,skaf5o4icz,0.1719273532974772,-100.27163751784383,-25.988432365388775

1806728_20201_2_0,sl6afn4icz,-4.6637840456507105,-103.20286607136146,-16.380293804707705

1758843_20201_2_0,smescp4icz,0.9636319518697058,-102.59641385298673,-64.07313332171458

3829331_20201_2_0,smv8qn4icz,0.7675935382918043,-119.919576517888,-27.138253034415058

5110074_20201_2_0,sn6osn4icz,-1.728904672931842,-110.56116398979313,-14.841309555874417

5492043_20201_2_0,snru6n4icz,2.174716462144711,-93.13675294044745,-44.43688708188952

4924482_20201_2_0,sov6ho4icz,3.2687342925900906,-68.5074494759175,-62.49955786703225

4004694_20201_2_0,sqowro4icz,-1.33081083202166,-79.71669053703363,-42.75247553819639

5844511_20201_2_0,ssa4dn4icz,-0.5580232280985769,-90.43270089503724,-43.01860573876344

3664409_20201_2_0,st4slo4icz,0.13227284392976463,-98.69504043290686,-24.256353593748372

3055383_20201_2_0,stc1mn4icz,-0.02481904904347474,-107.42626076955366,-19.31661028778086

4865366_20201_2_0,sththp4icz,-1.18837549730175,-98.83641691142509,-36.26230115607538

2447824_20201_2_0,stq6dn4icz,3.26206616428909,-110.69445606308875,-53.75673154036225

4538273_20201_2_0,stqfrn4icz,1.6926180772727142,-108.29320764312513,-40.16949566285288

3832534_20201_2_0,sukwro4icz,-4.553626405569868,-71.30663101259293,-4.180470423418896

2739900_20201_2_0,svziyo4icz,-0.9778856215724364,-91.23729344477118,-37.54179576714972

4610302_20201_2_0,sw6jgp4icz,-0.4193440409891126,-126.81063992925255,-33.74964621161388

2917876_20201_2_0,sx2tbp4icz,0.3520665028891338,-91.05910428029134,-32.744323926524615

6006923_20201_2_0,sx3hwn4icz,-1.9644026396302545,-89.04142449489473,-14.488881944922625

4018049_20201_2_0,sze0po4icz,-2.08632562336818,-112.28184338329487,-12.30576270049977

5082002_20201_2_0,t0ft6o4icz,-2.657630622960935,-111.48823771642475,7.217453836335679

4220516_20201_2_0,t1mfrn4icz,0.3106141138841579,-74.14559763526509,-35.00914994718612

3459384_20201_2_0,e474hp4icz,1.528174991927084,-90.50005114718371,-34.73424508901432

1755841_20201_2_0,t4a5ho4icz,0.8224576170284813,-120.52513080760676,-35.95262249670523

5089584_20201_2_0,t4kf5p4icz,-2.7950461262563433,-85.01118119236855,-16.809292031418963

2648419_20201_2_0,t4wgeo4icz,2.5434080491950843,-82.2801370297557,-59.31862830945947

4025550_20201_2_0,t5o45p4icz,-1.9610868128703112,-98.01111873316603,-12.435071168966772

3299329_20201_2_0,t5q8fn4icz,-0.1588112524848312,-126.55671920233931,-35.089131295022895

2616641_20201_2_0,t5rcln4icz,1.869571226210932,-74.68128560707078,-61.50954376696464

5668482_20201_2_0,t5srjn4icz,-2.4490848029471084,-75.73041812478516,-10.798687182210415

4929857_20201_2_0,t6e96p4icz,0.5678187104990519,-107.46530021195252,-46.82176933259288

5272485_20201_2_0,t6fzno4icz,-2.268554668759561,-80.48693215178878,-26.831567407548746

1206661_20201_2_0,t6tu6o4icz,-5.618213426558631,-100.24035768947923,-5.821250684057631

5305152_20201_2_0,t6wvuo4icz,4.779384950765915,-29.959182884400718,-70.02288939271824

2783729_20201_2_0,t7o6do4icz,0.3930415795716341,-77.92823721990905,-33.51858901265588

2334197_20201_2_0,t7redp4icz,-14.522350654157501,-122.02800553711381,49.7015247495591

3256897_20201_2_0,t88s0o4icz,-0.21524337247750916,-131.80644608482692,-25.03339691466458

3855856_20201_2_0,t8d82o4icz,0.6519775322528834,-99.38489620883192,-58.84246663272924

1647540_20201_2_0,t8svnn4icz,-1.242145119213005,-122.30691820442178,-43.355734034829354

1506479_20201_2_0,t8t2kn4icz,0.9873035109816237,-77.27425966721864,-51.28082011509572

1209284_20201_2_0,t9rgno4icz,-3.0638189618352625,-106.86736871807318,-25.03438874318597

2557866_20201_2_0,ta9rqo4icz,-0.8187140585309672,-84.96304816267386,-15.598732832521733

4142035_20201_2_0,taahgo4icz,-1.8386881448311279,-62.192763534673645,-23.380056910707708

1019858_20201_2_0,tazl8o4icz,-0.3073799003591866,-95.36336615001073,-25.78498341166565

1029535_20201_2_0,tcalko4icz,1.5674458645608378,-49.35179384846242,-44.47127503185699

2608119_20201_2_0,tcf5ho4icz,2.6329640610399183,-209.29531724294134,-48.33251864549594

4192355_20201_2_0,td26gn4icz,1.959388353831102,-124.87672172084106,-57.363747348507545

5682113_20201_2_0,tddl7p4icz,0.29083907310221624,-69.21525278613626,-28.620840916228588

3378684_20201_2_0,tdhpjn4icz,-5.559020224324027,-65.62159820113715,-12.176142136422584

3749711_20201_2_0,temkwo4icz,-4.647771256587478,-105.54433193647071,-12.993875002432688

3422635_20201_2_0,tidiqn4icz,0.46466380851047956,-76.61463764957821,-34.08762390511362

2902463_20201_2_0,tir2yo4icz,0.013176854990334295,-111.55507894839135,-39.536827480061476

2886851_20201_2_0,tirizo4icz,-0.2795255977814149,-95.26593249787226,-38.90997216597795

4283592_20201_2_0,tkpbpo4icz,-0.3333511289694837,-99.51680193459055,-62.314211920914204

3999945_20201_2_0,tkrnqo4icz,-1.866284127291241,-80.32524593916341,-22.076154603995235

1602344_20201_2_0,tl401o4icz,-1.152907882350603,-118.16537792868706,-15.240759029236827

3564450_20201_2_0,tm1cvn4icz,0.3279286185375195,-89.27073023371725,-60.41098460175937

3593408_20201_2_0,tmea2o4icz,0.18520079063369121,-110.66073629878983,-24.358284680491025

2897290_20201_2_0,tnjk5o4icz,-14.562778532819944,-117.67301599904746,27.065422362025956

3625947_20201_2_0,to5mjn4icz,1.5583270870482446,-95.16269497070701,-37.55815579525189

1521129_20201_2_0,to9vmo4icz,2.0983788140667,-75.44745870710892,-45.62238393981475

4630999_20201_2_0,toxbcp4icz,0.18751876044078536,-109.50122108893189,-38.797703139769865

4822737_20201_2_0,tqxlbp4icz,-16.61984969759049,-170.1491487874109,13.525380626453767

4829370_20201_2_0,tr654p4icz,1.3624414085801908,-87.84392463894511,-54.70806390094829

3895928_20201_2_0,trixco4icz,5.358910480544058,-26.712245969625542,-73.77517773452391

1500409_20201_2_0,ts24zo4icz,2.8104833459953085,-80.8042826720548,-52.17801398679458

1010440_20201_2_0,tu3k1o4icz,-1.822666483198609,-100.60426849261265,-25.206264723585605

3593408_20201_2_0,tmea2o4icz,0.18520079063369121,-110.66073629878983,-24.358284680491025

1153759_20201_2_0,tudaip4icz,1.8937382827719313,-84.82348190773268,-44.096879754230116

3457364_20201_2_0,tv7e2p4icz,-0.04210267762480192,-101.7573319314863,-33.312798320639246

3672858_20201_2_0,tvj6mn4icz,-3.7136164435496943,-75.41081575713483,-15.590389369191428

3993295_20201_2_0,tw7a6o4icz,-2.1829699563748832,-81.63552715943814,-29.23684765987143

5939540_20201_2_0,twfsjp4icz,0.23065005636392563,-84.74651656006495,-40.97706268347315

3909861_20201_2_0,tx7nto4icz,2.3281611682341383,-81.82730923592527,-56.95508298570414

2408989_20201_2_0,txedkn4icz,-0.3155539120233679,-77.68446338434177,-41.665392540476745

5951616_20201_2_0,ty1g2p4icz,1.0220109707828362,-80.20394485643331,-30.30049064254051

4633012_20201_2_0,tyvyfn4icz,-1.5340205998413021,-114.89537491360448,-36.33381320039629

3242596_20201_2_0,u1iw8n4icz,1.2190669507954277,-116.19090495782561,-53.251750470330975

5587976_20201_2_0,u26cvo4icz,2.765552343701898,-103.6361082174511,-39.95274717691974

3697435_20201_2_0,u26v6o4icz,-0.10078661884549334,-85.53077957896616,-16.88427986081851

2029555_20201_2_0,u2xtlo4icz,-1.2822369295755163,-89.16632506972823,-19.64884108602601

1143322_20201_2_0,u3x8ko4icz,-0.8897778483568809,-63.60387945705082,-33.800530398472134

1313393_20201_2_0,u4274p4icz,1.039878036110346,-77.48677769856084,-46.14372110370046

5938647_20201_2_0,u47g9p4icz,-0.9979536093625453,-116.67310048391093,-22.016700662715692

1510907_20201_2_0,u4m0gn4icz,-0.5953807789935119,-87.2839399574228,-45.855396402536115

1039591_20201_2_0,u5c4tn4icz,3.227179890815458,-86.96775132517234,-56.910702582907746

4734566_20201_2_0,u5hizo4icz,-0.5416682205311485,-61.83632527434449,-25.968242470848423

2639271_20201_2_0,u6f82o4icz,-1.774548949570275,-79.33740505158846,-30.985701979893904

1675908_20201_2_0,u6jsbn4icz,-3.8273323028507114,-118.0189379329222,-16.64167137761146

6003909_20201_2_0,u6t9pn4icz,-31.076481348955934,-38.89478145038055,94.68996110420632

2633467_20201_2_0,u7adun4icz,3.245078179640357,-49.83541936921489,-60.648199289894194

1761236_20201_2_0,u7b4wn4icz,1.502808817398694,-83.66630194782257,-40.55725949736106

1987266_20201_2_0,u7tb9p4icz,0.09893104614862404,-92.73640366285835,-27.118291995494303

5524083_20201_2_0,u82ebp4icz,1.2297058502264915,-98.0703796682468,-45.71975001641367

2447308_20201_2_0,u9z5zo4icz,-8.143952608347957,-105.04050461815757,9.797155364085839

5771645_20201_2_0,ua5c6n4icz,0.9018381997577137,-117.54048272426911,-44.250153147469575

3037381_20201_2_0,ub2abn4icz,2.851220706842341,-93.67647563702374,-40.899907299841516

1413194_20201_2_0,udc1to4icz,0.805403669686742,-105.82458806549633,-44.38364340668838

3863445_20201_2_0,udd5xn4icz,-1.6341057230894858,-136.42517930201254,-17.772296916259066

5865326_20201_2_0,udew9o4icz,1.1432829679179528,-117.36340348629452,-24.79992415252856

1463709_20201_2_0,uef2tn4icz,-0.4831136102933939,-103.72617983514169,-32.792139777295205

4779643_20201_2_0,zg1sjp4icz,-0.17247544550679725,-150.9056041236484,-46.24005695293603

/users/rhydian/anaconda3/envs/torch_env/lib/python3.7/site-packages/torch/cuda/__init__.py:52: UserWarning: CUDA initialization: Found no NVIDIA driver on your system. Please check that you have an NVIDIA GPU and installed a driver from http://www.nvidia.com/Download/index.aspx (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729006826/work/c10/cuda/CUDAFunctions.cpp:100.)
  return torch._C._cuda_getDeviceCount() > 0
  0%|          | 0/101 [00:00<?, ?it/s]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 1/101 [00:02<03:38,  2.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 2/101 [00:03<03:15,  1.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 3/101 [00:05<03:00,  1.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/101 [00:06<02:49,  1.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▍         | 5/101 [00:08<02:43,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 6/101 [00:09<02:40,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 7/101 [00:11<02:33,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 8/101 [00:13<02:31,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 9/101 [00:14<02:28,  1.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|▉         | 10/101 [00:16<02:31,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 11/101 [00:18<02:44,  1.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 12/101 [00:20<02:53,  1.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 13/101 [00:22<02:45,  1.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 14/101 [00:24<02:31,  1.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▍        | 15/101 [00:25<02:22,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 16/101 [00:27<02:19,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 17/101 [00:28<02:20,  1.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 18/101 [00:30<02:19,  1.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 19/101 [00:32<02:16,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|█▉        | 20/101 [00:33<02:10,  1.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 21/101 [00:37<03:00,  2.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 22/101 [00:38<02:41,  2.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 23/101 [00:40<02:29,  1.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 24/101 [00:42<02:19,  1.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▍       | 25/101 [00:43<02:17,  1.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 26/101 [00:45<02:14,  1.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 27/101 [00:47<02:06,  1.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 28/101 [00:48<02:05,  1.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▊       | 29/101 [00:50<02:07,  1.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|██▉       | 30/101 [00:52<01:58,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 31/101 [00:54<02:01,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 32/101 [00:55<01:56,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 33/101 [00:57<01:48,  1.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▎      | 34/101 [00:58<01:50,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▍      | 35/101 [01:00<01:57,  1.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 36/101 [01:02<01:53,  1.75s/it] 37%|███▋      | 37/101 [01:04<01:54,  1.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 38/101 [01:06<01:51,  1.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▊      | 39/101 [01:07<01:46,  1.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|███▉      | 40/101 [01:10<01:56,  1.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 41/101 [01:13<02:11,  2.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 42/101 [01:15<02:05,  2.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 43/101 [01:16<01:55,  1.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▎     | 44/101 [01:19<02:02,  2.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▍     | 45/101 [01:21<01:54,  2.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 46/101 [01:22<01:35,  1.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 47/101 [01:23<01:33,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 48/101 [01:25<01:36,  1.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▊     | 49/101 [01:27<01:30,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|████▉     | 50/101 [01:28<01:24,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 51/101 [01:30<01:23,  1.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████▏    | 52/101 [01:32<01:21,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 53/101 [01:33<01:21,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 54/101 [01:35<01:18,  1.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 55/101 [01:39<01:42,  2.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▌    | 56/101 [01:40<01:31,  2.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▋    | 57/101 [01:42<01:21,  1.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 58/101 [01:43<01:16,  1.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 59/101 [01:45<01:10,  1.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 60/101 [01:46<01:04,  1.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|██████    | 61/101 [01:47<01:00,  1.52s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████▏   | 62/101 [01:49<00:58,  1.49s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 63/101 [01:50<00:56,  1.49s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 64/101 [01:52<00:55,  1.49s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 65/101 [01:53<00:53,  1.48s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▌   | 66/101 [01:55<00:51,  1.48s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▋   | 67/101 [01:56<00:51,  1.52s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 68/101 [01:58<00:51,  1.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 69/101 [02:00<00:51,  1.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 70/101 [02:02<00:59,  1.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|███████   | 71/101 [02:05<01:06,  2.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████▏  | 72/101 [02:07<01:01,  2.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 73/101 [02:09<00:57,  2.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 74/101 [02:10<00:50,  1.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 75/101 [02:12<00:47,  1.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▌  | 76/101 [02:14<00:46,  1.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 77/101 [02:16<00:41,  1.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 78/101 [02:17<00:39,  1.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 79/101 [02:19<00:38,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 80/101 [02:21<00:36,  1.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 81/101 [02:22<00:33,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 82/101 [02:26<00:43,  2.31s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 83/101 [02:28<00:37,  2.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 84/101 [02:31<00:44,  2.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 85/101 [02:33<00:37,  2.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▌ | 86/101 [02:35<00:30,  2.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 87/101 [02:36<00:26,  1.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 88/101 [02:37<00:22,  1.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 89/101 [02:39<00:20,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 90/101 [02:41<00:18,  1.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 91/101 [02:42<00:16,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 92/101 [02:44<00:15,  1.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 93/101 [02:46<00:14,  1.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 94/101 [02:48<00:12,  1.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 95/101 [02:50<00:10,  1.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▌| 96/101 [02:51<00:08,  1.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 97/101 [02:53<00:06,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 98/101 [02:55<00:05,  1.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 99/101 [02:56<00:03,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 100/101 [03:00<00:02,  2.28s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|██████████| 101/101 [03:02<00:00,  2.31s/it]100%|██████████| 101/101 [03:02<00:00,  1.81s/it]
Trying to load from /users/rhydian/self-supervised-project/model_weights/SSECEncodersBothBoth
==> Resuming model trained for 106 epochs...
Trying to load from ../model_weights/angle_regressor4
==> Resuming model trained for 7 epochs...
1632054_20201_2_0,s8hj2o4icz,0.41322803124429874,-91.50703395484123,-56.38918608955292

1885859_20201_2_0,s8wf2o4icz,-1.0809327884046491,-105.05068858225752,-10.074390540480351

1721077_20201_2_0,s9kbno4icz,-0.6586131028735267,-105.20377495421738,-21.91923466446559

4221699_20201_2_0,s9pnho4icz,2.520886091990989,-76.85038593804049,-35.014953902702246

1756390_20201_2_0,saa2yo4icz,-0.39475348939040955,-50.86137384418146,-31.360252714104632

5421072_20201_2_0,sadvfp4icz,-1.13447132335489,-124.48302226282183,-48.771354485936584

2926351_20201_2_0,salxzo4icz,-0.7123754385011718,-94.55057204282429,-24.21628642999032

1439534_20201_2_0,saobbn4icz,3.859432045137316,-95.1373687591383,-53.33511324548219

4429190_20201_2_0,sb35jn4icz,-0.5551723267777923,-122.16854702783223,-84.80574323417636

2410717_20201_2_0,sb50ho4icz,-0.9039861107602484,-62.98019549152943,-38.23332380033921

1284718_20201_2_0,mih5oo4icz,-2.8916204749065795,-78.47009711380596,-7.900799360751208

2694034_20201_2_0,sci60p4icz,4.794316221035731,-68.9824626726558,-55.77337022736977

4377876_20201_2_0,sdvu2p4icz,-1.7892553595894733,-101.37246813022014,-19.349932478950834

3938703_20201_2_0,sf62ao4icz,-0.5383056411261549,-108.51341500668826,-54.994296637295704

5549667_20201_2_0,sfia9p4icz,-1.1725576626776606,-100.17108469843063,-31.622454233022353

2662456_20201_2_0,sfo2vn4icz,-0.817684930103698,-106.59464659112078,-29.875833327988303

4845995_20201_2_0,sfrdvn4icz,-0.5796941601990923,-75.19114279230774,-32.76675001191282

4435656_20201_2_0,sftf0p4icz,-5.480700263063784,-121.94076651394474,-18.994339727787207

5326293_20201_2_0,sg3ifp4icz,-1.6496876743245916,-93.66326427845138,-35.69970284669884

1500148_20201_2_0,sgls7p4icz,-0.8826171606925118,-125.87467141426265,-24.80118707342922

3392491_20201_2_0,sivlan4icz,0.5625638903283758,-126.22373907226381,-61.255443463808035

5148295_20201_2_0,sj66yo4icz,2.2894490606642193,-105.48979396044916,-61.17458263624975

2598193_20201_2_0,sjk38o4icz,2.1846705351790963,-74.70781159303337,-56.21127374877078

5782322_20201_2_0,sjle2p4icz,1.4807307493865525,-87.0938881974968,-39.88190685112117

4004062_20201_2_0,sjmolo4icz,-1.578741116551345,-110.93081820632602,-12.48114703517058

1986011_20201_2_0,sjuhmn4icz,-0.5512707641924679,-119.84214828442549,-28.540723742444328

2128705_20201_2_0,sk3aon4icz,0.6665608066719938,-86.71550788368614,-33.24653682798656

1989372_20201_2_0,ska6no4icz,0.17350588222893548,-96.8013903989181,-27.76440880964411

4215769_20201_2_0,skbsro4icz,0.3596474640510555,-96.60641675353057,-33.03077895662578

4534126_20201_2_0,skr3pn4icz,-0.026276002572685277,-131.99158490262437,-25.439327531955485

3447293_20201_2_0,sl4zfp4icz,-4.0649125001054465,-91.46458217287955,-7.938367700611707

1586868_20201_2_0,slmvhp4icz,0.13424527442892606,-74.41980680243489,-44.012288615844824

4516838_20201_2_0,snr05p4icz,-0.005636340652351057,-111.79558796086224,-27.922886190714166

5382349_20201_2_0,snsvln4icz,-1.0408381962021453,-78.06318976694541,-23.100705284060624

1341750_20201_2_0,so95qo4icz,-0.30849498960189425,-101.53071791132271,-28.009285822228932

4404100_20201_2_0,somjmn4icz,2.1086114889261705,-95.88708988348753,-52.63011257565543

5801414_20201_2_0,soxe7o4icz,48.8968170026296,-170.10062871170197,75.32960074836667

5032764_20201_2_0,spspzn4icz,-0.15477904522437502,-72.46310826575188,-29.891529361161545

2727205_20201_2_0,srq4bo4icz,-0.9656494641229302,-84.57430752699938,-36.304820235161486

4194833_20201_2_0,srvahp4icz,-3.0372383610030798,-88.28878962584884,-21.29929805662337

3754483_20201_2_0,st8zen4icz,-2.9346679421059507,-110.07102963488359,-21.50234588405671

5617886_20201_2_0,ss1jkn4icz,-2.1329361770740127,-70.99520662161024,-36.51338925766507

1381364_20201_2_0,ss9upn4icz,0.2907288065434025,-80.89063304386585,-37.40441387258515

1181318_20201_2_0,ssf9en4icz,-0.008158418862057402,-107.13835307851366,-34.442566892091705

3348828_20201_2_0,st4aio4icz,5.4919425919684635,-88.72647681755998,-58.79209497621753

3754483_20201_2_0,st8zen4icz,-2.9346679421059507,-110.07102963488359,-21.50234588405671

3372249_20201_2_0,svcifo4icz,-4.010433776013786,-69.55934485461052,-1.0995291750694207

4360510_20201_2_0,svtkwn4icz,-1.5947322781580127,-86.83746759297824,-29.72952258440162

4907201_20201_2_0,sweixo4icz,-0.23401190852192416,-95.2897978642338,-43.62597229799077

5075718_20201_2_0,sxclon4icz,-3.3329894844545347,-124.61699041479082,-22.244825077867915

5802268_20201_2_0,sybatn4icz,2.3948368429854643,-61.47160141586542,-53.79684666173392

2921653_20201_2_0,sz09hp4icz,8.865498994085554,-108.27986846775545,-89.00110284234933

2716961_20201_2_0,sz0pto4icz,-1.2977224034842458,-93.01279214890272,-28.40000800259648

4159569_20201_2_0,szl7wn4icz,0.4381949995855796,-144.39485048795433,-30.56050224256785

2794327_20201_2_0,szsoto4icz,1.7583070680643318,-109.71156188095873,-50.00265927528285

3427216_20201_2_0,t0ix3o4icz,-2.7213670627394624,-63.29103641967268,-35.23464963292875

4321622_20201_2_0,t2d62o4icz,0.816624947943389,-93.76488947961369,-42.44208658148159

3152258_20201_2_0,t36z6p4icz,0.061944088694848715,-110.38277795667378,-27.270209117752884

5229666_20201_2_0,t68gqn4icz,-9.03827339300416,-164.2088987377163,12.86414986352014

5036070_20201_2_0,t6fv6p4icz,0.5166568071016409,-44.48470900635954,-39.196517923125

1127790_20201_2_0,ta7lpo4icz,1.1753163794956027,-99.6897683901027,-27.643613262270506

2372005_20201_2_0,tacdpo4icz,-0.27237230720395134,-131.0819939209741,-35.46152570536964

1375993_20201_2_0,tavj4o4icz,-3.3525194897709496,-114.487314937333,-22.89806726122829

4951318_20201_2_0,tb3eto4icz,-0.5134901918062647,-90.49872076817039,-37.6578797759977

4319126_20201_2_0,tbb2lo4icz,-1.8047314787490742,-47.80651510880335,-35.98587585117289

4194428_20201_2_0,tbtm5o4icz,-0.3119110972891478,-88.91319567838471,-27.679421736891953

2524840_20201_2_0,tdoc6p4icz,-1.762104337190026,-135.63012536917577,-56.051745170674636

1996443_20201_2_0,tfkyfo4icz,0.23134784966122546,-89.0118311485771,-36.261233662969516

4569784_20201_2_0,tglh6o4icz,-0.42483948905169266,-83.59352483608825,-42.198036415304955

2313243_20201_2_0,gsy1no4icz,0.07113565813239965,-89.0830522777282,-31.853794181876268

4484799_20201_2_0,thm4no4icz,-2.417619087602715,-85.57761336997649,-14.13417609583685

4233479_20201_2_0,ti6umn4icz,4.202829813351386,-89.41826957110203,-64.31720137672247

3541771_20201_2_0,tiu4ko4icz,2.976541696374275,-163.31939158203647,-56.310719424200784

2805916_20201_2_0,tlhfvn4icz,3.0244868409846393,-80.07411301684652,-43.61424125419403

4836031_20201_2_0,tmfhgo4icz,2.4123850059594045,-83.93457184087214,-40.31489927246538

1347580_20201_2_0,tmm0bo4icz,0.939278554044258,-87.79145725765335,-37.35158326472548

5502909_20201_2_0,tmxd6o4icz,-0.17513752380058986,-96.42916772301339,-41.75931678808186

1070671_20201_2_0,tnh5uo4icz,3.8098705412866214,-72.09364359252226,-37.10204593827723

3875558_20201_2_0,torbin4icz,1.088199872689097,-73.05678699500956,-57.77068942513152

5544535_20201_2_0,tphcjn4icz,-0.5361642644470442,-78.10972674623261,-38.38929752649936

1517178_20201_2_0,tporwn4icz,-2.2815811796312504,-101.28209470246551,-4.853335475964911

3655218_20201_2_0,tptjqo4icz,-2.4511838404739823,-69.91274284540793,-13.9954235770374

3682579_20201_2_0,tpulln4icz,2.2214855138484717,-84.89704986019746,-38.16239701823912

3110070_20201_2_0,tpxmto4icz,-2.5501426478054405,-94.07291710927805,-18.65685218401255

1910203_20201_2_0,tq90bn4icz,0.9342156483268371,-114.77277043294515,-30.067517726802222

5415305_20201_2_0,tr4wtn4icz,2.3036778013985892,-74.54182634675709,-33.64235247086572

1481243_20201_2_0,trp4ip4icz,0.10113707312252179,-68.6069611638315,-41.20910964109477

1135517_20201_2_0,tryqfo4icz,1.2925326989173975,-44.64174147631718,-53.69073185328284

3012146_20201_2_0,tstr4p4icz,0.017685275103943018,-100.15620593368064,-40.258949840039804

3566734_20201_2_0,ttgklo4icz,-1.657527109525432,-84.57202796517342,-18.510327291165396

1654651_20201_2_0,tthupo4icz,0.8797009604137228,-67.88939850188629,-39.49888110532601

3813694_20201_2_0,ttwfko4icz,1.9833853295459432,-102.62132382108106,-39.50233313590422

3010834_20201_2_0,tu1hso4icz,-0.3524120300742738,-67.41986503823745,-32.952772002998714

4326884_20201_2_0,tv6jrn4icz,7.773579479949259,-73.25534336705519,-75.42732933438086

1539274_20201_2_0,tvdvqn4icz,-0.6349559621924322,-96.18005187436668,-36.616073122717324

5788071_20201_2_0,twx47p4icz,-1.1401065565845099,-85.61898965979299,-26.631817360393995

3650672_20201_2_0,txu42p4icz,0.55205275967301,-105.63569280545124,-32.482538456733394

2577915_20201_2_0,txxfto4icz,-0.8738414872669257,-114.8187952360804,-31.593208637185285

2590485_20201_2_0,tyanmn4icz,9.873555985265499,-50.17647591357951,-106.5861277894997

5191740_20201_2_0,9wq13o4icz,4.45457400871795,-75.15109778050498,-50.496407653645875

4782845_20201_2_0,k6a0jp4icz,0.18272610773001138,-129.82563263158346,-33.848300533998696

