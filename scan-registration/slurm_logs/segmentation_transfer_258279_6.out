6 th decile
.30
.35
/users/rhydian/anaconda3/envs/torch_env/lib/python3.7/site-packages/torch/cuda/__init__.py:52: UserWarning: CUDA initialization: Found no NVIDIA driver on your system. Please check that you have an NVIDIA GPU and installed a driver from http://www.nvidia.com/Download/index.aspx (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729006826/work/c10/cuda/CUDAFunctions.cpp:100.)
  return torch._C._cuda_getDeviceCount() > 0
  0%|          | 0/811 [00:00<?, ?it/s]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  0%|          | 1/811 [00:03<52:27,  3.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  0%|          | 2/811 [00:06<47:49,  3.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  0%|          | 3/811 [00:09<44:14,  3.28s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  0%|          | 4/811 [00:12<42:04,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 5/811 [00:14<41:09,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 6/811 [00:29<1:25:39,  6.38s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 7/811 [00:31<1:10:47,  5.28s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 8/811 [00:34<1:00:26,  4.52s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 9/811 [00:37<53:10,  3.98s/it]  Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 10/811 [00:39<47:48,  3.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|▏         | 11/811 [00:53<1:26:39,  6.50s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|▏         | 12/811 [00:56<1:11:58,  5.40s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 13/811 [01:00<1:09:40,  5.24s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 14/811 [01:03<1:00:33,  4.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 15/811 [01:06<53:30,  4.03s/it]  Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 16/811 [01:09<47:36,  3.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 17/811 [01:12<44:37,  3.37s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 18/811 [01:14<42:22,  3.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 19/811 [01:18<42:00,  3.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 20/811 [01:20<39:47,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 21/811 [01:23<38:35,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 22/811 [01:27<41:20,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 23/811 [01:30<40:46,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 24/811 [01:32<39:05,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 25/811 [01:35<37:58,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 26/811 [01:38<36:56,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 27/811 [01:40<36:42,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 28/811 [01:43<36:36,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▎         | 29/811 [01:46<36:46,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▎         | 30/811 [01:49<37:09,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 31/811 [01:52<36:33,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 32/811 [01:55<39:40,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 33/811 [01:58<38:41,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 34/811 [02:01<37:53,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 35/811 [02:04<37:02,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 36/811 [02:06<36:45,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▍         | 37/811 [02:09<36:45,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▍         | 38/811 [02:13<37:53,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▍         | 39/811 [02:15<37:33,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▍         | 40/811 [02:18<37:16,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▌         | 41/811 [02:21<36:33,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▌         | 42/811 [02:24<35:44,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▌         | 43/811 [02:27<39:27,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▌         | 44/811 [02:30<38:10,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 45/811 [02:33<37:31,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 46/811 [02:36<36:57,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 47/811 [02:38<36:02,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 48/811 [02:41<35:38,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 49/811 [02:44<35:05,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 50/811 [02:47<35:51,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▋         | 51/811 [02:49<34:53,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▋         | 52/811 [02:52<34:47,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 53/811 [02:55<35:44,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 54/811 [02:58<35:30,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 55/811 [03:01<34:53,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 56/811 [03:03<34:22,  2.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 57/811 [03:06<34:05,  2.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 58/811 [03:09<34:54,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 59/811 [03:13<38:38,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 60/811 [03:15<37:22,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 61/811 [03:18<37:06,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 62/811 [03:21<37:07,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 63/811 [03:24<35:54,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 64/811 [03:27<36:31,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 65/811 [03:30<36:27,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 66/811 [03:33<36:21,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 67/811 [03:36<36:07,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 68/811 [03:39<35:33,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▊         | 69/811 [03:41<35:15,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▊         | 70/811 [03:44<34:39,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 71/811 [03:47<35:56,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 72/811 [03:50<37:00,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 73/811 [03:53<36:27,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 74/811 [03:56<37:03,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 75/811 [03:59<36:13,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 76/811 [04:02<36:31,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 77/811 [04:05<36:02,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|▉         | 78/811 [04:08<36:13,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|▉         | 79/811 [04:11<35:49,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|▉         | 80/811 [04:14<35:40,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|▉         | 81/811 [04:17<36:02,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|█         | 82/811 [04:20<37:08,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|█         | 83/811 [04:23<37:13,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|█         | 84/811 [04:26<36:29,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|█         | 85/811 [04:29<36:17,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 86/811 [04:32<35:34,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 87/811 [04:35<35:49,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 88/811 [04:38<36:22,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 89/811 [04:41<35:55,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 90/811 [04:44<35:18,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 91/811 [04:47<36:12,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█▏        | 92/811 [04:50<36:12,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█▏        | 93/811 [04:53<37:08,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 94/811 [04:57<36:55,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 95/811 [05:00<36:34,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 96/811 [05:02<35:47,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 97/811 [05:05<35:25,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 98/811 [05:08<35:01,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 99/811 [05:11<35:08,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 100/811 [05:14<34:43,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 101/811 [05:17<34:52,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 102/811 [05:20<34:07,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 103/811 [05:23<33:44,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 104/811 [05:26<37:23,  3.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 105/811 [05:30<39:18,  3.34s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 106/811 [05:34<40:25,  3.44s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 107/811 [05:37<39:04,  3.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 108/811 [05:40<37:34,  3.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 109/811 [05:43<37:15,  3.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▎        | 110/811 [05:46<36:13,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▎        | 111/811 [05:49<36:52,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 112/811 [05:52<36:34,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 113/811 [05:55<36:26,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 114/811 [05:58<35:48,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 115/811 [06:01<35:25,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 116/811 [06:04<34:26,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 117/811 [06:18<1:12:58,  6.31s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▍        | 118/811 [06:21<1:01:08,  5.29s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▍        | 119/811 [06:24<53:40,  4.65s/it]  Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▍        | 120/811 [06:27<47:26,  4.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▍        | 121/811 [06:30<42:38,  3.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▌        | 122/811 [06:33<39:23,  3.43s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▌        | 123/811 [06:36<37:13,  3.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▌        | 124/811 [06:39<36:53,  3.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▌        | 125/811 [06:42<36:19,  3.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 126/811 [06:45<35:46,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 127/811 [06:48<34:48,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 128/811 [06:51<35:35,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 129/811 [06:54<35:19,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 130/811 [06:57<34:37,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 131/811 [07:01<38:36,  3.41s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▋        | 132/811 [07:07<47:22,  4.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▋        | 133/811 [07:10<42:42,  3.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 134/811 [07:13<41:15,  3.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 135/811 [07:16<38:43,  3.44s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 136/811 [07:20<39:07,  3.48s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 137/811 [07:23<37:11,  3.31s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 138/811 [07:26<36:02,  3.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 139/811 [07:29<34:35,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 140/811 [07:32<34:55,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 141/811 [07:35<34:05,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 142/811 [07:38<34:33,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 143/811 [07:41<34:31,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 144/811 [07:44<33:36,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 145/811 [07:47<33:44,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 146/811 [07:50<33:38,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 147/811 [07:53<34:19,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 148/811 [07:56<33:52,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 149/811 [07:59<33:32,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 150/811 [08:02<32:51,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▊        | 151/811 [08:05<32:27,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▊        | 152/811 [08:08<32:23,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 153/811 [08:11<31:56,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 154/811 [08:14<32:06,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 155/811 [08:17<34:56,  3.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 156/811 [08:21<34:30,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 157/811 [08:23<33:27,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 158/811 [08:27<34:08,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|█▉        | 159/811 [08:30<33:11,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|█▉        | 160/811 [08:32<32:48,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|█▉        | 161/811 [08:35<31:50,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|█▉        | 162/811 [08:38<31:49,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|██        | 163/811 [08:41<31:36,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|██        | 164/811 [08:44<31:37,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|██        | 165/811 [08:47<31:02,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|██        | 166/811 [08:50<30:33,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 167/811 [08:53<31:32,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 168/811 [08:56<31:18,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 169/811 [08:59<31:59,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 170/811 [09:02<31:44,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 171/811 [09:05<31:36,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 172/811 [09:08<31:23,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██▏       | 173/811 [09:10<31:26,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██▏       | 174/811 [09:14<32:38,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 175/811 [09:17<32:23,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 176/811 [09:25<47:57,  4.53s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 177/811 [09:28<42:55,  4.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 178/811 [09:31<39:54,  3.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 179/811 [09:34<37:20,  3.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 180/811 [09:37<35:36,  3.39s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 181/811 [09:40<33:55,  3.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 182/811 [09:43<32:39,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 183/811 [09:46<33:52,  3.24s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 184/811 [09:49<32:57,  3.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 185/811 [09:52<31:37,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 186/811 [09:55<31:35,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 187/811 [09:58<31:19,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 188/811 [10:01<31:12,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 189/811 [10:11<54:24,  5.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 190/811 [10:14<46:37,  4.50s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▎       | 191/811 [10:17<42:23,  4.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▎       | 192/811 [10:20<39:05,  3.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 193/811 [10:23<35:53,  3.49s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 194/811 [10:26<34:29,  3.35s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 195/811 [10:29<33:20,  3.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 196/811 [10:32<32:07,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 197/811 [10:35<32:24,  3.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 198/811 [10:38<31:19,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▍       | 199/811 [10:41<30:37,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▍       | 200/811 [10:44<30:38,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▍       | 201/811 [10:47<30:27,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▍       | 202/811 [10:50<30:07,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▌       | 203/811 [10:53<29:38,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▌       | 204/811 [10:56<29:43,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▌       | 205/811 [10:59<29:47,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▌       | 206/811 [11:01<28:51,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 207/811 [11:04<28:42,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 208/811 [11:08<31:20,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 209/811 [11:11<31:07,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 210/811 [11:14<30:42,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 211/811 [11:17<30:37,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 212/811 [11:20<30:15,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▋       | 213/811 [11:23<31:15,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▋       | 214/811 [11:26<31:03,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 215/811 [11:29<29:55,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 216/811 [11:32<30:08,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 217/811 [11:36<31:27,  3.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 218/811 [11:39<32:05,  3.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 219/811 [11:42<30:27,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 220/811 [11:45<31:22,  3.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 221/811 [11:48<31:10,  3.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 222/811 [11:52<31:04,  3.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 223/811 [11:55<31:01,  3.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 224/811 [12:10<1:05:52,  6.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 225/811 [12:13<54:51,  5.62s/it]  Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 226/811 [12:16<47:10,  4.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 227/811 [12:19<40:50,  4.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 228/811 [12:21<36:38,  3.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 229/811 [12:24<33:57,  3.50s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 230/811 [12:27<33:02,  3.41s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 231/811 [12:30<31:35,  3.27s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▊       | 232/811 [12:33<30:44,  3.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▊       | 233/811 [12:36<30:01,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 234/811 [12:39<30:19,  3.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 235/811 [12:43<30:05,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 236/811 [12:45<29:07,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 237/811 [12:48<29:13,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 238/811 [12:51<28:34,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 239/811 [12:54<28:11,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|██▉       | 240/811 [12:57<28:32,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|██▉       | 241/811 [13:01<30:35,  3.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|██▉       | 242/811 [13:04<29:37,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|██▉       | 243/811 [13:08<31:01,  3.28s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|███       | 244/811 [13:11<30:13,  3.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|███       | 245/811 [13:14<29:23,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|███       | 246/811 [13:16<28:36,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|███       | 247/811 [13:19<28:26,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 248/811 [13:22<28:33,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 249/811 [13:26<29:40,  3.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 250/811 [13:29<29:16,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 251/811 [13:33<30:49,  3.30s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 252/811 [13:36<29:57,  3.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 253/811 [13:39<29:10,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███▏      | 254/811 [13:42<28:43,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███▏      | 255/811 [13:47<35:23,  3.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 256/811 [13:50<33:04,  3.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 257/811 [13:53<30:38,  3.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 258/811 [13:56<30:41,  3.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 259/811 [13:59<29:45,  3.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 260/811 [14:02<29:07,  3.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 261/811 [14:05<28:56,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 262/811 [14:08<27:48,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 263/811 [14:11<27:23,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 264/811 [14:14<27:35,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 265/811 [14:17<27:32,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 266/811 [14:21<28:22,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 267/811 [14:24<28:09,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 268/811 [14:28<31:26,  3.47s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 269/811 [14:31<30:47,  3.41s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 270/811 [14:34<29:36,  3.28s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 271/811 [14:37<29:32,  3.28s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▎      | 272/811 [14:42<33:22,  3.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▎      | 273/811 [14:45<31:16,  3.49s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 274/811 [14:48<29:41,  3.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 275/811 [14:51<29:15,  3.28s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 276/811 [14:54<27:57,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 277/811 [14:58<31:15,  3.51s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 278/811 [15:01<29:32,  3.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 279/811 [15:04<28:53,  3.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▍      | 280/811 [15:19<59:05,  6.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▍      | 281/811 [15:34<1:20:21,  9.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▍      | 282/811 [15:37<1:04:04,  7.27s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▍      | 283/811 [15:40<52:55,  6.01s/it]  Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▌      | 284/811 [15:43<45:28,  5.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▌      | 285/811 [15:46<39:33,  4.51s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▌      | 286/811 [15:49<35:10,  4.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▌      | 287/811 [15:58<47:04,  5.39s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 288/811 [16:01<43:01,  4.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 289/811 [16:05<38:45,  4.46s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 290/811 [16:18<1:01:14,  7.05s/it] 36%|███▌      | 291/811 [16:22<52:43,  6.08s/it]  Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 292/811 [16:25<44:39,  5.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 293/811 [16:29<42:30,  4.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▋      | 294/811 [16:32<37:45,  4.38s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▋      | 295/811 [16:36<35:42,  4.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▋      | 296/811 [16:39<33:28,  3.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 297/811 [16:42<31:14,  3.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 298/811 [16:45<29:52,  3.49s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 299/811 [16:49<30:21,  3.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 300/811 [16:52<28:33,  3.35s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 301/811 [16:55<28:46,  3.38s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 302/811 [16:59<29:13,  3.44s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 303/811 [17:02<28:12,  3.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 304/811 [17:06<29:47,  3.53s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 305/811 [17:09<28:15,  3.35s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 306/811 [17:12<27:40,  3.29s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 307/811 [17:15<27:42,  3.30s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 308/811 [17:19<29:09,  3.48s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 309/811 [17:22<27:53,  3.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 310/811 [17:26<28:47,  3.45s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 311/811 [17:29<27:16,  3.27s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 312/811 [17:32<26:15,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▊      | 313/811 [17:35<25:38,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▊      | 314/811 [17:38<24:59,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 315/811 [17:41<26:36,  3.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 316/811 [17:44<25:57,  3.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 317/811 [17:47<24:58,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 318/811 [17:50<24:38,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 319/811 [17:53<25:15,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 320/811 [17:56<24:54,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|███▉      | 321/811 [18:02<30:46,  3.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|███▉      | 322/811 [18:04<28:32,  3.50s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|███▉      | 323/811 [18:08<27:35,  3.39s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|███▉      | 324/811 [18:10<26:15,  3.24s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|████      | 325/811 [18:14<25:53,  3.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|████      | 326/811 [18:16<24:46,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|████      | 327/811 [18:19<24:37,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|████      | 328/811 [18:23<27:13,  3.38s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 329/811 [18:27<26:25,  3.29s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 330/811 [18:30<26:35,  3.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 331/811 [18:33<25:53,  3.24s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 332/811 [18:38<29:16,  3.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 333/811 [18:41<27:18,  3.43s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 334/811 [18:44<26:22,  3.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████▏     | 335/811 [18:47<25:58,  3.28s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████▏     | 336/811 [18:50<25:16,  3.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 337/811 [18:53<24:52,  3.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 338/811 [18:56<24:58,  3.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 339/811 [18:59<24:13,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 340/811 [19:02<25:04,  3.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 341/811 [19:05<24:44,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 342/811 [19:08<24:21,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 343/811 [19:11<23:52,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 344/811 [19:14<23:41,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 345/811 [19:17<23:18,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 346/811 [19:20<22:58,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 347/811 [19:23<22:51,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 348/811 [19:26<22:38,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 349/811 [19:29<22:47,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 350/811 [19:34<27:33,  3.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 351/811 [19:39<29:43,  3.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 352/811 [19:42<28:07,  3.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▎     | 353/811 [19:45<26:09,  3.43s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▎     | 354/811 [19:48<24:49,  3.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 355/811 [19:52<27:21,  3.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 356/811 [19:55<25:40,  3.39s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 357/811 [19:58<24:46,  3.27s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 358/811 [20:01<24:06,  3.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 359/811 [20:04<24:05,  3.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 360/811 [20:07<23:18,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▍     | 361/811 [20:10<23:21,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▍     | 362/811 [20:13<22:50,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▍     | 363/811 [20:16<22:21,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▍     | 364/811 [20:20<24:01,  3.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▌     | 365/811 [20:27<32:41,  4.40s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▌     | 366/811 [20:30<29:08,  3.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▌     | 367/811 [20:34<30:15,  4.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▌     | 368/811 [20:37<27:30,  3.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▌     | 369/811 [20:40<27:07,  3.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 370/811 [20:43<25:09,  3.42s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 371/811 [20:46<24:31,  3.35s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 372/811 [20:49<23:21,  3.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Trying to load from /users/rhydian/self-supervised-project/model_weights/SSECEncodersBothBoth
==> Resuming model trained for 106 epochs...
Trying to load from ../model_weights/angle_regressor4
==> Resuming model trained for 7 epochs...
1818106_20201_2_0,hj6mso4icz,-3.4303362827576374,-53.39460506494186,-20.529255407343413

2627216_20201_2_0,axkumn4icz,-2.580318305694118,-95.82799716229866,-9.66227552275484

1923135_20201_2_0,axlx5p4icz,-2.015877125126781,-123.60649898728721,-16.028003380555987

1051235_20201_2_0,axoien4icz,-2.934620850418002,-121.43186511017225,-27.286559855909715

3105316_20201_2_0,axpjko4icz,3.434209827121634,-104.33490902875022,-62.816058327215

2125784_20201_2_0,axuiyn4icz,-1.821883666931998,-108.2823519212667,-20.268066317994936

4430476_20201_2_0,axwugp4icz,0.79972845027974,-110.58820393314488,-55.20869008126988

3413488_20201_2_0,ay0dho4icz,-4.9966505298699015,-89.54551516703495,-13.37579565269857

3899494_20201_2_0,ay1s3o4icz,-1.0808647335908594,-111.72218939421387,-17.73781940051235

4780671_20201_2_0,ay4nwo4icz,0.5410415755429452,-76.66019551461025,-37.180626145796666

4665830_20201_2_0,ay5iln4icz,0.42921662259864124,-133.6752453215956,-33.687276208182595

5632850_20201_2_0,ayd3on4icz,2.213447679366688,-100.51612968600952,-56.191715013135536

5079763_20201_2_0,ayflon4icz,-0.9518875070075812,-98.94773743786004,-41.28951469790404

3572328_20201_2_0,ayh99n4icz,-1.9242797861123615,-91.85459899522846,-20.239241713868196

3277691_20201_2_0,ayp80p4icz,-2.883989333999906,-130.25319943312013,-25.540769160585228

3662792_20201_2_0,ayy86p4icz,0.42376039275786576,-95.7265644803779,-42.64951429012588

3900484_20201_2_0,ayz3ep4icz,1.0281558676105316,-70.4876969494006,-46.19888559137016

4403861_20201_2_0,aza21p4icz,-2.4574270011950077,-94.82943601600587,-22.274129940541926

1621181_20201_2_0,azenio4icz,-1.415577732034552,-102.98028799925655,-18.089839564757327

4261849_20201_2_0,azi5wn4icz,3.912659656776077,-72.28941065760651,-65.6571325523859

1142129_20201_2_0,azn5xo4icz,-1.7726851534935855,-135.02009336014714,-36.6007365906452

3204404_20201_2_0,azndio4icz,-0.3580285059044645,-54.43534058728511,-27.705492002063764

5145552_20201_2_0,azyuxo4icz,0.6648114146625861,-87.22292433856217,-30.673756016643637

3487522_20201_2_0,b0265p4icz,-1.3412795280353154,-78.18622547564595,-43.16533646903312

5574595_20201_2_0,b060wo4icz,-1.2381599468243867,-96.2825031734175,-33.31666492192409

3521951_20201_2_0,b08jrn4icz,1.1335053421386698,-86.66361905781795,-44.647097826417834

1153066_20201_2_0,b0cdyn4icz,1.6151186505707837,-127.04702839416751,-43.133155373713265

3042975_20201_2_0,b0i2pn4icz,-3.2338671192642536,-81.1824210281182,-21.53649875751809

2643867_20201_2_0,b0jh9p4icz,-4.05043865288689,-107.68784946700868,-16.33266840234863

5588151_20201_2_0,b0mzkn4icz,1.407050970751951,-74.41886811482081,-51.27871289196793

5907012_20201_2_0,b0o5ap4icz,1.7868318332889412,-88.33118888183,-54.50477444831098

3794916_20201_2_0,nhl6ro4icz,-1.4127579696964576,-110.52658928640344,-33.62621107838788

1919430_20201_2_0,b0t7ep4icz,3.407880180971517,-78.76558275471666,-65.35969355589076

2528509_20201_2_0,b0yjvo4icz,0.7050866376480541,-136.16235707784932,-47.55325950065985

3161491_20201_2_0,b0zd2p4icz,-1.4851005855791413,-103.26611607870484,-30.458328318957967

4828659_20201_2_0,b0zvpn4icz,-3.985228161790145,-131.30433972977352,-10.535336343233325

1927456_20201_2_0,b1426p4icz,0.28677218518325853,-123.27001978469244,-36.10461577465958

5687783_20201_2_0,b14u9o4icz,-0.22719185797238178,-61.99173872293744,-39.29296953485634

2990336_20201_2_0,b15nio4icz,-1.5083824319859458,-85.60935367457131,-19.421813918213246

3352904_20201_2_0,b15qwn4icz,1.1700769270029014,-108.25864979289176,-56.40808943025813

2182014_20201_2_0,b1ihtn4icz,3.2985073840725767,-134.12369999055514,-41.55202100709063

1767034_20201_2_0,b1licn4icz,-1.4854679915692997,-121.47347190721274,-24.757652065060597

3462910_20201_2_0,b1n0pn4icz,0.24341495603802318,-97.56090387679416,-43.30919869589761

4662802_20201_2_0,b1ngso4icz,1.3713172403934373,-79.0595397965775,-59.332157622076195

2161050_20201_2_0,b1r2go4icz,2.205883154106943,-98.59063171282273,-59.864786392103525

5920255_20201_2_0,b1xpho4icz,-0.6400770221368439,-121.80785850499075,-31.91681021225122

4397198_20201_2_0,b21ego4icz,-1.0597895888487399,-56.62911504029523,-39.6127168906834

4216449_20201_2_0,b233on4icz,-0.1765464688004554,-105.05989455877153,-40.61052319717528

5120454_20201_2_0,b24rmn4icz,-0.7616447774655206,-109.5488862776694,-33.83884015264363

3477243_20201_2_0,b281fn4icz,-2.011520522199997,-138.99614576836802,-20.36035938107149

3787065_20201_2_0,b2awgo4icz,0.849757298276315,-96.97343843782747,-33.282586895383275

2706546_20201_2_0,b2dmeo4icz,35.34831367282567,139.3360721790736,-119.54531706599275

3318105_20201_2_0,b2gr2p4icz,-2.2470379703868826,-92.60056466279457,-31.62858187518019

5528722_20201_2_0,b2hixo4icz,0.23299882223932375,-63.88675579126797,-39.857055674788924

2198612_20201_2_0,b2hlro4icz,0.8803691745130088,-137.16850625805432,-29.74073740479166

5651264_20201_2_0,b2j1cn4icz,0.3223333453104006,-105.53536355519898,-21.015410239335893

2563354_20201_2_0,b2m1oo4icz,0.0860220479144667,-70.4788924821062,-35.263398012915474

3935596_20201_2_0,b2ovln4icz,-3.067354480619061,-101.4663943783689,-10.312560767729082

2426235_20201_2_0,b2tk5p4icz,2.124413087627513,-78.97062415340889,-50.68512477092142

3969506_20201_2_0,b2w4on4icz,0.09831181367763552,-94.51504953438578,-20.42563425549156

5282776_20201_2_0,b2y0po4icz,-0.29803037736088467,-112.12322128468486,-16.798598266319885

5027067_20201_2_0,b31zfp4icz,-1.5491632034821192,-80.58258502959177,-36.73848818534913

3547436_20201_2_0,b32hnn4icz,1.5355627752576406,-69.99354823970131,-36.62025511846328

3616983_20201_2_0,b33o8p4icz,4.542538242155524,-96.8327586982605,-68.03368070961739

5739889_20201_2_0,b37dap4icz,0.9370031980927629,-93.014075571024,-54.64870870292903

4528926_20201_2_0,b39xlo4icz,0.26936477540476267,-92.06506675649683,-39.30170177456611

3998276_20201_2_0,b3bocp4icz,-1.2711723434326112,-65.0572388765984,-23.388698276796546

1077422_20201_2_0,b3r6fn4icz,-1.2810846035199033,-101.33691979972176,-28.031365406998916

4805104_20201_2_0,b3xftn4icz,-1.4566344367628952,-125.7830621208816,-27.324890032875686

6019175_20201_2_0,b42tto4icz,-4.754681831616498,-70.19801297281907,-23.70513101150651

1182779_20201_2_0,b45d3o4icz,6.00015343409551,-36.76450863915102,-57.05930658343932

1048088_20201_2_0,b4978p4icz,1.0791601511071127,-77.02158330691645,-32.641032063107616

2187046_20201_2_0,b4a5fp4icz,-1.886970141846261,-92.20065805046164,-35.44487096497804

3095038_20201_2_0,b4djkn4icz,-1.992880303527427,-107.22741543649923,-14.653385423065558

5020635_20201_2_0,b4ghcp4icz,0.38781489528469004,-110.76357041660461,-44.0918755978562

4652865_20201_2_0,b4mmwn4icz,-0.7036018948864939,-142.15163134680847,-26.151819709649146

5461841_20201_2_0,b4qc6p4icz,1.0180573443539733,-82.36446095831164,-32.13358518724428

2731561_20201_2_0,b4qkso4icz,-2.0463432684047813,-124.86548687515281,-1.1626072198775148

4199258_20201_2_0,b4u27p4icz,3.5091427267906425,-67.60421466172565,-48.330462252988724

1606853_20201_2_0,b4z9eo4icz,-3.704408060027375,-89.1967846637462,-23.80042606961787

3096349_20201_2_0,b53cgo4icz,-2.3871563132627407,-103.34627137751289,-13.284247876027848

3214807_20201_2_0,b54tjn4icz,-1.4737046810201155,-117.20113254133767,-38.431399555729

4999737_20201_2_0,b57n5p4icz,-1.6428584100666919,-109.26847905374015,-27.559168892830613

4976406_20201_2_0,b5cxeo4icz,5.0645420055856585,-55.12403082646509,-58.33591157426822

1230986_20201_2_0,b5ei5n4icz,-0.15426674368717683,-126.97158203023957,-31.592716656351755

3588857_20201_2_0,b5fqwo4icz,-0.5922006908099926,-74.00644248005324,-39.93944245832638

2399735_20201_2_0,b5g99n4icz,0.18717400663268602,-95.44392035751099,-34.446893704796466

3145878_20201_2_0,b5o1bp4icz,2.0969086357600495,-48.55645652655352,-48.76641875409513

1482437_20201_2_0,b5pvzo4icz,0.0006206592912341546,-64.92669544618948,-21.75316928393093

4079163_20201_2_0,b5qh5p4icz,2.383691678890183,-131.1993660969062,-60.004069860440325

5397098_20201_2_0,b5sd5p4icz,-0.012171351130617604,-84.9658773581858,-34.19594276866769

5988183_20201_2_0,b5xpen4icz,-0.995694507209344,-60.92681986907559,-42.61567671302862

3075036_20201_2_0,b5xtpo4icz,-2.4914785039815186,-94.974225417739,-29.624341646140067

3247119_20201_2_0,b5y2mn4icz,-1.0871777959753346,-121.96730194306761,-28.530259357489527

5426958_20201_2_0,b5y5jp4icz,-3.331407220532645,-88.86736642018863,-14.929324578597999

2794330_20201_2_0,b60a7p4icz,-0.1582271768861764,-139.9161639335975,-27.08306862670773

4341503_20201_2_0,b60etn4icz,-1.0337652585937036,-79.09241681714064,-36.14866481841817

2841223_20201_2_0,b60y7o4icz,1.837607403043649,-121.40899659454016,-64.37732475899722

2157597_20201_2_0,b644co4icz,1.9141726476573904,-97.19681202214622,-47.20752163202992

2484940_20201_2_0,b65a2o4icz,2.909679738713697,-38.61811770814552,-49.285245866252495

3219253_20201_2_0,b661io4icz,0.029896173332485485,-76.14775950280378,-30.66584393727075

2172892_20201_2_0,b667ao4icz,3.8751055370716663,-125.94664095155497,-43.101318994553765

1724209_20201_2_0,b66v8o4icz,1.2585692406220257,-101.76324374517571,-48.26451842173148

4422998_20201_2_0,p0mrqo4icz,1.7142419729992282,-114.88796707578106,-25.00228626394832

3728861_20201_2_0,50sogo4icz,-1.54103418819893,-64.93939376842701,-33.11068005310875

5328781_20201_2_0,vjqdin4icz,1.1996831182476175,-76.75115580203149,-59.96545449085659

4235266_20201_2_0,b6ne8o4icz,3.104344038427057,-57.43029585495282,-57.94756604662072

1412857_20201_2_0,b6p1en4icz,1.3952131484280987,-119.93362833919522,-51.48520656205696

3880724_20201_2_0,b6ucqo4icz,1.7015156105412819,-53.954712340656556,-41.6807648072223

4935933_20201_2_0,b6wazn4icz,-1.0799428397973365,-97.93256916256215,-20.380457319526286

4041797_20201_2_0,b6xjmo4icz,-0.20136530681236245,-93.94623017961726,-39.9476298837435

5364653_20201_2_0,b724ao4icz,-1.2482653953907834,-73.35396094163673,-23.158387426903545

5108545_20201_2_0,b72fao4icz,1.9198564091665535,-74.35497850605208,-33.54963780448733

2413661_20201_2_0,b7554p4icz,-1.5197712372503416,-60.645701049301124,-27.34029089136655

1978130_20201_2_0,b76khp4icz,2.500905507818815,-93.66875442696184,-36.12886410289977

3880421_20201_2_0,b77zdp4icz,-5.8797120568717745,-124.77507911189196,-14.70448107626288

4177533_20201_2_0,b7bown4icz,0.30897392884168173,-140.75757685729226,-44.63949857249705

5938740_20201_2_0,b7he2p4icz,0.3970466872334559,-103.51886742270239,-41.101218752523764

2491442_20201_2_0,b7jcsn4icz,-0.26980692736990647,-138.9899003691233,-29.0947638486262

5988077_20201_2_0,b7lldo4icz,-3.5704745692258295,-99.05591542182947,-1.3594172287431263

5163357_20201_2_0,b7ofto4icz,-1.47966876730005,-91.34234994371076,-42.739569618829606

2923040_20201_2_0,b7p8fo4icz,6.61849383839568,-64.67946979809628,-53.26330871778282

3236898_20201_2_0,b7ulmo4icz,2.330593486544165,-117.81643048678026,-36.727262999359596

6018691_20201_2_0,b7xfqn4icz,0.06269172788221873,-88.63227659518535,-32.10905514465128

3225882_20201_2_0,b7xtrn4icz,-1.439775828253417,-67.92209598765066,-33.93061626076053

3057453_20201_2_0,b7yxrn4icz,-4.451206486788976,-104.29233616115957,-9.91130783084003

1111180_20201_2_0,b847so4icz,0.7182695868358181,-114.87748431848996,-43.47735270869096

1272556_20201_2_0,b855to4icz,-2.831086892870243,-47.37773310695928,-16.307527668175595

3757011_20201_2_0,b88idp4icz,0.1312164315664303,-119.32048164474546,-27.85489386894136

4580598_20201_2_0,b88s5o4icz,1.128673829433605,-90.8861444671713,-48.30284768252352

2490981_20201_2_0,b8996p4icz,0.17021285737300768,-100.01419275694485,-42.88445960891005

1721786_20201_2_0,b8acro4icz,0.7459287008060065,-88.21719636042585,-27.623687958415246

4595945_20201_2_0,b8afgo4icz,-0.7662789544995615,-115.2504711643711,-31.29211082774792

1326657_20201_2_0,b8bfyn4icz,0.5570339867235098,-70.09049359294323,-21.820591857581462

5268639_20201_2_0,b8bpon4icz,-3.2124453275410745,-145.72158495973835,-18.38149498388131

5443677_20201_2_0,b8bv8o4icz,2.476477876153189,-46.04213968699739,-65.67105384987495

3305186_20201_2_0,b8i6vn4icz,-4.736336158806844,-110.55033933402456,4.006974154299783

4263525_20201_2_0,b8jxin4icz,-3.7138406647330817,-114.09430103343038,-18.89149971200652

3053636_20201_2_0,b8m2jp4icz,-3.033208474389268,-90.98090325132662,-39.60033280105354

1709953_20201_2_0,b8n6on4icz,1.069897161077681,-87.55818395727445,-45.211198710688834

2726485_20201_2_0,b8qnho4icz,-1.8338274837666122,-100.7915559854402,-33.571446812603554

3803702_20201_2_0,b8sd7p4icz,2.9221803300174325,-71.34108225517227,-54.397765912479585

1676752_20201_2_0,b8t0bo4icz,-0.5508291225759931,-137.95908378509057,-43.72096743990991

5305134_20201_2_0,b8uiep4icz,-1.7625737923289881,-55.002425062540794,-15.2380767658112

4591738_20201_2_0,b8wovn4icz,0.04010869960198618,-98.63980980601718,-28.516130354719564

5769458_20201_2_0,b8zydo4icz,-0.5283158654336494,-88.93326374866115,-53.77177017279939

4193412_20201_2_0,b92quo4icz,1.245094020134954,-79.99366608012764,-39.13028609674339

2206732_20201_2_0,b96x8p4icz,0.3671448484855311,-68.56003335218375,-51.54362079143969

4552256_20201_2_0,b99fcp4icz,2.2331278125770395,-112.6629146114179,-33.286224772485625

2640687_20201_2_0,b9cf7o4icz,-6.220401999384064,-123.13196518082964,-0.3234892238457121

1520985_20201_2_0,b9dkdp4icz,1.1134588609357183,-89.1941645548755,-39.67287181501676

2819749_20201_2_0,b9ho3p4icz,3.8605014740152943,-95.61834669559914,-65.15996600920845

2266329_20201_2_0,b9hohp4icz,2.150628280214429,-82.0137349986762,-34.44286883944821

3277970_20201_2_0,b9j9so4icz,-0.562081878395709,-58.45821013205688,-13.689582354062637

4303243_20201_2_0,b9m2yo4icz,-0.9887920894531733,-25.484217240997452,-18.232005747198315

4886519_20201_2_0,b9m69p4icz,3.263954298083066,-90.940760476837,-64.13816814262854

3364339_20201_2_0,b9po5o4icz,-0.6987302739375926,-89.77577662497274,-36.90114041046357

2946490_20201_2_0,b9uowo4icz,8.237810608120983,-24.4147057633688,-110.88839982511048

3967516_20201_2_0,b9wwjn4icz,1.9052633908865746,-117.96845102653086,-53.56794919238418

4170141_20201_2_0,b9xpan4icz,-3.3817707025781796,-180.96595407426005,-18.307418594302106

4026965_20201_2_0,ba1ywo4icz,1.5303932848708062,-88.75723229344388,-43.04465099192706

5149968_20201_2_0,ba26so4icz,-2.1122530708929217,-59.41712099339989,-25.2607446202381

1224358_20201_2_0,ba2b8p4icz,0.5228366713683529,-118.58169985530694,-42.33034645926375

1175616_20201_2_0,ba37bp4icz,-0.854440943725121,-92.17254708758281,-36.328210440169286

1688291_20201_2_0,bad9uo4icz,-0.5098003820577885,-116.96472317037723,-38.12722062797587

3139429_20201_2_0,badjep4icz,0.7828030957503137,-62.198031327178796,-29.926975491277574

1273707_20201_2_0,bae88n4icz,-8.030911271117363,-100.36060230320629,18.43415181706213

5144092_20201_2_0,bakwtn4icz,1.26091276108469,-91.26791850393536,-36.55255087251315

2393527_20201_2_0,bar7rn4icz,-0.8356921519913556,-102.64017989174795,-8.716849668378927

5286861_20201_2_0,barb0p4icz,1.7408368516521864,-39.26925702281483,-36.58951007898149

1383905_20201_2_0,baufbp4icz,-2.155725978210645,-91.59364312596625,-40.640815858754706

3036634_20201_2_0,bawu6o4icz,-2.2623798773788293,-98.45070127724341,-7.470722813836872

1319556_20201_2_0,bb4hap4icz,-1.7645213589150168,-103.81935480512274,-25.889530310600932

3353380_20201_2_0,bb6qao4icz,0.5058935376918167,-106.95028511763823,-28.033362961439366

1921578_20201_2_0,bb8hyn4icz,0.30225013945604273,-54.421591737527166,-40.35207817689033

5472117_20201_2_0,bb93ip4icz,-1.7432291980590402,-99.16717927326715,-34.11567470979186

3516506_20201_2_0,bbcy4o4icz,0.8733538327668273,-93.14710267542495,-36.95415018227287

3309659_20201_2_0,bbhcsn4icz,-1.2578118886022178,-95.88264611254405,-28.696291886932798

3036817_20201_2_0,bbicmo4icz,1.2703785728250907,-41.11987105854746,-27.27961847841675

2866248_20201_2_0,bbnx7o4icz,0.484741949545042,-91.7610752024818,-48.042999859695186

5085189_20201_2_0,bbo09o4icz,1.600828999820076,-116.79703909206796,-24.65887131987978

4206828_20201_2_0,bbrenn4icz,0.19193965210533873,-78.77397125987883,-41.14584515323243

3960549_20201_2_0,bbsudp4icz,1.8215797941849374,-74.22046412678833,-66.79869391935844

5985454_20201_2_0,bbt5wo4icz,-2.003410085436417,-83.55515812335784,-27.7802323626493

3575837_20201_2_0,bbwkkn4icz,0.026889268820007802,-120.92850900182759,-27.152413905123538

5996684_20201_2_0,bc0dcp4icz,1.4088900303664247,-61.69610980902462,-59.69206972196608

1853065_20201_2_0,bc24pn4icz,0.7829657051885366,-106.77069496046622,-34.11080310257634

1419852_20201_2_0,bc4jtn4icz,1.0276400147457134,-78.14301870780554,-25.610814079025985

3164457_20201_2_0,bc6cfo4icz,1.5382038281101469,-89.7863694447559,-48.25970105472672

4334298_20201_2_0,bc8cio4icz,0.3597637689155144,-99.15427488234093,-41.15533253403264

2520648_20201_2_0,bcar9p4icz,0.3037627865087765,-127.99532110138654,-31.21844772045536

2014432_20201_2_0,bcddpo4icz,-2.5188150739681148,-109.54605784133028,-15.036293589842813

3198103_20201_2_0,bcu3cp4icz,-2.1161459935584617,-94.45020913182708,-26.8049951435855

3611512_20201_2_0,bcupfo4icz,-1.5186233965744775,-114.9849447881746,-31.077090940961924

3559830_20201_2_0,bcyu6o4icz,-1.7411874790460602,-126.8585236225909,-20.63182404662963

3544290_20201_2_0,bd28ep4icz,0.8658294046031341,-49.28085384949273,-48.29069402419444

1218261_20201_2_0,bd5h5o4icz,-0.053755733195358306,-151.33677560632165,-48.68416630921793

2288747_20201_2_0,bd7rfn4icz,1.6444611425182194,-92.06944618023587,-36.767014876065616

3946491_20201_2_0,bdankn4icz,-5.237106302747956,-93.34834362666442,-4.648996100808091

5438686_20201_2_0,bdklvn4icz,2.4717201017691295,-69.41734275062595,-61.38246504971504

4130595_20201_2_0,bdmkyn4icz,2.4359934848416187,-113.31187011052148,-42.77509596304088

5934552_20201_2_0,bdnzco4icz,-2.5801002386399796,-87.29903399905646,-1.2702914877357045

3046560_20201_2_0,bdrkjp4icz,0.6220914269520381,-75.5739612357188,-28.691394162534635

2143542_20201_2_0,bdwo0p4icz,0.8724919089853892,-113.39278974826539,-38.212667518439616

2701318_20201_2_0,bdx5no4icz - Copy,-0.4683013791840224,-92.44343756557325,-31.545162209205515

2701318_20201_2_0,bdx5no4icz,-0.4683013791840224,-92.44343756557325,-31.545162209205515

2353220_20201_2_0,bdyihp4icz,-0.92234587738388,-125.67291178708905,-43.69578678995184

4811500_20201_2_0,bdzzvn4icz,2.382440384519201,-83.53506778550519,-38.205504099019606

5498812_20201_2_0,be2b8o4icz,-3.621682206781473,-93.23468256340814,-28.191857413318004

2861311_20201_2_0,beeaqn4icz,-0.9385882128662487,-104.95273811620584,-35.083252138099766

4793569_20201_2_0,begaon4icz,1.0820568907051222,-127.78373908185426,-42.45888685293062

5848581_20201_2_0,begseo4icz,2.4355260165627124,-116.23177496821995,-50.43810515277964

6005263_20201_2_0,poqehp4icz,-0.5879840796900807,-88.3446954506017,-36.0795675862546

1573139_20201_2_0,beobrn4icz,1.0258983971959648,-75.97106149064439,-36.5368830289499

2621864_20201_2_0,beq5uo4icz,0.294646273792902,-135.08067228239992,-38.643568119832196

5951945_20201_2_0,bf54uo4icz,-3.8704357310037913,-130.36128688731375,-10.683774030829056

2318601_20201_2_0,bf5ogn4icz,-1.0104611335224452,-94.2672261786011,-31.53353233030917

1818468_20201_2_0,bf8o3p4icz,-1.5190033720995957,-84.68250387372231,-33.502151951789

1366596_20201_2_0,bf9y6o4icz,0.3672436390473882,-86.09631064436235,-43.98085518927576

4033071_20201_2_0,bfa69o4icz,2.422789623433157,-92.91293447549242,-43.34310805930704

1469529_20201_2_0,bfelpo4icz,0.8716795438011451,-61.11621843620105,-53.8214103994312

3377533_20201_2_0,bfhlip4icz,-1.10368605378562,-104.33418121553768,-35.47774243958496

3900687_20201_2_0,bfi2go4icz,-0.7599325351459247,-106.80541641587138,-43.886421042012486

1270188_20201_2_0,bfrvhp4icz,-0.09199751479285034,-101.97303248010635,-39.07436985965845

1170431_20201_2_0,bfuf5p4icz,2.0510704026636684,-79.1052797088457,-53.66762084710656

1351696_20201_2_0,bfuijo4icz,1.7544621071729096,-89.65185200480943,-47.078813621162396

4347387_20201_2_0,bg22un4icz,1.1189609630239825,-112.08020024130872,-52.75661674929765

4000680_20201_2_0,bgb2so4icz,12.323116256370911,-31.52729456524571,-99.54020907251143

3336733_20201_2_0,bgfhbo4icz,-1.5901799548716733,-98.75801229647413,-11.36501772570864

5627009_20201_2_0,bgg3ln4icz,2.5633850523003514,-77.19826654328847,-53.855959533775206

3021511_20201_2_0,bgj7gn4icz,-1.5205685433751757,-70.30484326879986,-33.72318426653264

3759258_20201_2_0,bgkedo4icz,-5.663866694904644,-112.69268027037126,6.432594323963741

1523236_20201_2_0,bgl4mn4icz,0.47013781517258085,-122.44406156808441,-50.21834962489473

5307518_20201_2_0,bgmgfp4icz,1.9971948776551625,-135.92610268344896,-60.21241646661676

2401314_20201_2_0,bgs4do4icz,-0.49297587552904976,-90.30336914238904,-27.787576170733416

5921508_20201_2_0,bgtrfp4icz,4.773252325534635,-75.41146441376867,-59.912114826272784

2560167_20201_2_0,bgycuo4icz,5.015657772612342,-48.75013716553758,-40.51867159386414

3575788_20201_2_0,bh0b1o4icz,16.294517002179465,-43.7229609629934,-104.73386486604957

1655208_20201_2_0,bh34hp4icz,0.5527163293417644,-96.06903354574172,-60.35253794942285

4319110_20201_2_0,bh36rn4icz,1.7727852371130353,-123.90010067107366,-55.129960287981575

5618592_20201_2_0,bhbnro4icz,-0.8532633032459848,-133.7431919439757,-20.287786350856734

2800175_20201_2_0,bhcfyo4icz,-0.6795077319547783,-87.5431186288966,-22.18777090084089

2947568_20201_2_0,bhflbo4icz,-1.9442031910558144,-97.80600692126049,-25.71298941592775

3428927_20201_2_0,bhg36p4icz,1.560904058212952,-95.78577221673308,-53.48117878119392

3410920_20201_2_0,bhgpbp4icz,0.758584817389775,-134.07965493692646,-44.64342720074332

2748895_20201_2_0,bhtm0o4icz,-2.323317019880299,-89.79171055194305,-22.409597486149394

3287133_20201_2_0,bi1jnn4icz,-0.19095189544268296,-87.91924731341513,-38.05388966467807

3534627_20201_2_0,bi2nrn4icz,-2.9787213717356025,-87.57562760356419,-20.023126189446373

1271127_20201_2_0,bi4hyn4icz,21.95737911551339,-82.93256518866573,-196.51060304034266

2677525_20201_2_0,imf9uo4icz,-2.8123794556112274,-85.97533104524743,-12.309998740622916

3255063_20201_2_0,4p6lon4icz,1.3375814434370183,-78.15347778013026,-31.750058170577077

5698545_20201_2_0,bi86lo4icz,-1.4720404630803632,-45.010666203269295,-40.06985268634425

5645099_20201_2_0,bia1vo4icz,0.2916995281747626,-131.48440213931985,-35.6286502357778

1954499_20201_2_0,bibv8n4icz,0.5576428250590896,-100.539144610927,-38.73247041872905

4154007_20201_2_0,biczso4icz,-0.5083014163371244,-42.772818104979336,-81.98835397541876

4998930_20201_2_0,bihskn4icz,-0.5089958066636925,-124.3393467158798,-17.02045655628247

3368450_20201_2_0,bikpsn4icz,-0.04491922637981674,-115.93189836895871,-26.228942524634135

3197087_20201_2_0,biqdko4icz,-0.5508495810191771,-90.16012996263362,-33.040038693361936

5752045_20201_2_0,bisfio4icz,-0.30861161504270535,-125.75800567009148,-37.89250152746102

4787821_20201_2_0,bisqbp4icz,1.2231376876687476,-61.4115305594606,-44.15788306905267

4422406_20201_2_0,biucqn4icz,-0.6970577896388057,-67.90034040581938,-52.11852189543981

3775385_20201_2_0,biy8oo4icz,1.454030947929098,-99.7391836754716,-25.755562853662838

2323217_20201_2_0,bj11ko4icz,-1.9639580118285291,-43.23248972003287,-31.12715751072193

2727871_20201_2_0,bj3bzn4icz,-6.525131980098334,-103.94766285025639,11.952315137243545

2550925_20201_2_0,bj79uo4icz,10.889612385259904,-14.864515693463517,-91.86960614450891

2388356_20201_2_0,bj82pn4icz,-0.4047944748829875,-109.57293337479365,-34.26905785482357

3003663_20201_2_0,bj9ngo4icz,-1.7353274769315143,-98.28721219854614,-40.54912861727911

3176535_20201_2_0,bjdgao4icz,-0.012858338465591297,-69.56246987465855,-52.99602950288923

5122565_20201_2_0,bjearo4icz,2.8922536315502527,-57.326115924573884,-46.44575357712186

3632772_20201_2_0,bjquqn4icz,0.26887139304818997,-113.23266321825079,-36.350356271509966

5013816_20201_2_0,bjtiun4icz,1.4410198931445346,-80.80760193377657,-65.86485740013883

2658460_20201_2_0,5ddvun4icz,-1.323170213560498,-100.06480989916324,-39.455818951394775

2581414_20201_2_0,bjvh8o4icz,0.47679402988721337,-133.9093135920266,-31.402242462425534

4135618_20201_2_0,bk03io4icz,-1.5622368706238678,-91.56983898696589,-12.515750907191588

5355215_20201_2_0,bk94pn4icz,1.1526166888503588,-89.19470096301805,-29.648497337450095

3952751_20201_2_0,bkbgqn4icz,-1.486616094459778,-120.13227184949034,-20.078375425394995

2136410_20201_2_0,bkcoap4icz,4.126867899035049,-60.03070994775453,-48.01276260406118

5592683_20201_2_0,bkec8o4icz,1.418325871007902,-98.5786910978207,-32.439802863779704

1311511_20201_2_0,bkg9zo4icz,9.906028134643526,-46.02680322443629,-105.10714495090049
 46%|████▌     | 373/811 [20:52<22:45,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 374/811 [20:55<22:03,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 375/811 [20:58<22:39,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▋     | 376/811 [21:01<22:14,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▋     | 377/811 [21:04<22:06,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 378/811 [21:08<24:11,  3.35s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 379/811 [21:12<23:33,  3.27s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 380/811 [21:14<22:29,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 381/811 [21:19<25:56,  3.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 382/811 [21:22<24:01,  3.36s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 383/811 [21:25<22:49,  3.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 384/811 [21:38<44:09,  6.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 385/811 [21:41<37:55,  5.34s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 386/811 [21:44<33:18,  4.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 387/811 [21:50<34:45,  4.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 388/811 [21:53<30:29,  4.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 389/811 [21:56<27:50,  3.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 390/811 [21:59<26:10,  3.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 391/811 [22:02<25:07,  3.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 392/811 [22:06<24:12,  3.47s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 393/811 [22:10<25:32,  3.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▊     | 394/811 [22:12<23:45,  3.42s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▊     | 395/811 [22:16<22:53,  3.30s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 396/811 [22:20<25:45,  3.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 397/811 [22:23<24:26,  3.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 398/811 [22:26<23:09,  3.36s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 399/811 [22:29<22:19,  3.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 400/811 [22:32<21:17,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 401/811 [22:35<20:59,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|████▉     | 402/811 [22:40<24:03,  3.53s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|████▉     | 403/811 [22:43<22:51,  3.36s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|████▉     | 404/811 [22:46<22:26,  3.31s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|████▉     | 405/811 [22:49<21:24,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 406/811 [22:52<21:01,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 407/811 [22:55<20:37,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 408/811 [22:58<20:44,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 409/811 [23:04<26:42,  3.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 410/811 [23:07<24:53,  3.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 411/811 [23:10<24:34,  3.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 412/811 [23:14<24:24,  3.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 413/811 [23:27<42:51,  6.46s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 414/811 [23:30<35:43,  5.40s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 415/811 [23:33<31:32,  4.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████▏    | 416/811 [23:37<29:38,  4.50s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████▏    | 417/811 [23:40<26:48,  4.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 418/811 [23:44<25:02,  3.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 419/811 [23:46<23:15,  3.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 420/811 [23:49<21:43,  3.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 421/811 [23:52<20:48,  3.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 422/811 [23:55<20:12,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 423/811 [23:58<19:37,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 424/811 [24:01<19:25,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 425/811 [24:04<18:56,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 426/811 [24:06<18:34,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 427/811 [24:09<18:39,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 428/811 [24:12<18:50,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 429/811 [24:15<18:48,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 430/811 [24:19<19:06,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 431/811 [24:21<18:48,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 432/811 [24:25<19:09,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 433/811 [24:28<18:58,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▎    | 434/811 [24:31<19:10,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▎    | 435/811 [24:34<19:22,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 436/811 [24:36<18:07,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 437/811 [24:40<19:55,  3.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 438/811 [24:43<19:07,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 439/811 [24:46<18:58,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 440/811 [24:49<19:01,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 441/811 [24:52<18:51,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▍    | 442/811 [24:55<18:32,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▍    | 443/811 [24:58<18:34,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▍    | 444/811 [25:01<18:49,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▍    | 445/811 [25:04<18:13,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▍    | 446/811 [25:08<19:36,  3.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▌    | 447/811 [25:16<29:04,  4.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▌    | 448/811 [25:19<25:34,  4.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▌    | 449/811 [25:23<23:46,  3.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▌    | 450/811 [25:26<22:04,  3.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 451/811 [25:28<20:27,  3.41s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 452/811 [25:31<19:33,  3.27s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 453/811 [25:34<19:00,  3.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 454/811 [25:37<18:08,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 455/811 [25:40<18:11,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 456/811 [25:43<17:43,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▋    | 457/811 [25:50<24:17,  4.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▋    | 458/811 [25:53<21:59,  3.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 459/811 [25:56<21:16,  3.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 460/811 [25:59<20:29,  3.50s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 461/811 [26:03<21:05,  3.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 462/811 [26:06<19:54,  3.42s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 463/811 [26:09<19:16,  3.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 464/811 [26:12<18:25,  3.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 465/811 [26:15<18:06,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 466/811 [26:18<17:23,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 467/811 [26:21<16:58,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 468/811 [26:24<16:54,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 469/811 [26:26<16:42,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 470/811 [26:29<16:42,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 471/811 [26:33<17:50,  3.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 472/811 [26:36<17:34,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 473/811 [26:40<19:08,  3.40s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 474/811 [26:43<18:37,  3.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▊    | 475/811 [26:47<18:41,  3.34s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▊    | 476/811 [26:49<17:44,  3.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 477/811 [26:53<18:33,  3.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 478/811 [26:56<17:41,  3.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 479/811 [26:59<17:11,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 480/811 [27:03<19:18,  3.50s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 481/811 [27:06<18:29,  3.36s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 482/811 [27:10<18:46,  3.42s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|█████▉    | 483/811 [27:13<18:08,  3.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|█████▉    | 484/811 [27:17<19:30,  3.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|█████▉    | 485/811 [27:21<20:03,  3.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|█████▉    | 486/811 [27:24<19:26,  3.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|██████    | 487/811 [27:28<19:53,  3.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|██████    | 488/811 [27:32<19:16,  3.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|██████    | 489/811 [27:35<18:04,  3.37s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|██████    | 490/811 [27:38<17:38,  3.30s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 491/811 [27:40<16:44,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 492/811 [27:44<17:28,  3.29s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 493/811 [27:50<21:25,  4.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 494/811 [27:53<19:57,  3.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 495/811 [27:56<18:42,  3.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 496/811 [27:59<17:49,  3.39s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████▏   | 497/811 [28:03<18:04,  3.46s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████▏   | 498/811 [28:06<17:21,  3.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 499/811 [28:09<16:30,  3.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 500/811 [28:14<19:47,  3.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 501/811 [28:17<18:42,  3.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 502/811 [28:20<17:46,  3.45s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 503/811 [28:23<16:54,  3.29s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 504/811 [28:26<16:31,  3.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 505/811 [28:29<16:22,  3.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 506/811 [28:32<15:57,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 507/811 [28:35<15:38,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 508/811 [28:38<15:39,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 509/811 [28:41<15:27,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 510/811 [28:45<15:36,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 511/811 [28:47<15:11,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 512/811 [28:50<15:08,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 513/811 [28:54<15:15,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 514/811 [28:56<14:45,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▎   | 515/811 [28:59<14:37,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▎   | 516/811 [29:02<14:48,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▎   | 517/811 [29:05<14:44,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 518/811 [29:08<14:36,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 519/811 [29:11<14:25,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 520/811 [29:14<14:15,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 521/811 [29:19<16:45,  3.47s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 522/811 [29:22<15:59,  3.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 523/811 [29:25<15:17,  3.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▍   | 524/811 [29:28<15:01,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▍   | 525/811 [29:31<14:32,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▍   | 526/811 [29:36<17:33,  3.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▍   | 527/811 [29:39<16:48,  3.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▌   | 528/811 [29:42<15:51,  3.36s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▌   | 529/811 [29:45<14:54,  3.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▌   | 530/811 [29:48<14:26,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▌   | 531/811 [29:51<14:20,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 532/811 [29:54<14:09,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 533/811 [29:56<13:48,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 534/811 [29:59<13:34,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 535/811 [30:02<13:32,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 536/811 [30:05<13:45,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 537/811 [30:08<13:33,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▋   | 538/811 [30:11<13:22,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▋   | 539/811 [30:14<13:27,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 540/811 [30:17<13:33,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 541/811 [30:20<13:36,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 542/811 [30:24<14:24,  3.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 543/811 [30:27<14:40,  3.29s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 544/811 [30:30<14:22,  3.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 545/811 [30:33<14:00,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 546/811 [30:37<14:51,  3.37s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 547/811 [30:40<14:16,  3.24s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 548/811 [30:43<13:35,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 549/811 [30:46<13:10,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 550/811 [30:49<13:07,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 551/811 [30:52<12:39,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 552/811 [30:55<12:47,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 553/811 [30:58<12:47,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 554/811 [31:01<13:22,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 555/811 [31:04<12:59,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▊   | 556/811 [31:07<13:28,  3.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▊   | 557/811 [31:10<13:13,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 558/811 [31:14<13:08,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 559/811 [31:17<12:56,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 560/811 [31:20<12:48,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 561/811 [31:34<27:31,  6.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 562/811 [31:37<22:51,  5.51s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 563/811 [31:40<19:34,  4.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|██████▉   | 564/811 [31:43<17:17,  4.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|██████▉   | 565/811 [31:46<15:38,  3.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|██████▉   | 566/811 [31:49<14:56,  3.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|██████▉   | 567/811 [31:52<14:04,  3.46s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|███████   | 568/811 [31:56<13:37,  3.36s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|███████   | 569/811 [31:59<13:14,  3.28s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|███████   | 570/811 [32:02<12:48,  3.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|███████   | 571/811 [32:04<12:13,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 572/811 [32:18<24:17,  6.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 573/811 [32:21<20:42,  5.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 574/811 [32:24<17:55,  4.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 575/811 [32:33<23:32,  5.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 576/811 [32:36<19:55,  5.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 577/811 [32:41<19:23,  4.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████▏  | 578/811 [32:43<16:38,  4.29s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████▏  | 579/811 [32:46<14:46,  3.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 580/811 [32:53<17:49,  4.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 581/811 [32:56<16:11,  4.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 582/811 [33:00<15:51,  4.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 583/811 [33:03<14:24,  3.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 584/811 [33:06<13:20,  3.53s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 585/811 [33:09<12:48,  3.40s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 586/811 [33:12<12:11,  3.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 587/811 [33:15<12:07,  3.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 588/811 [33:18<11:55,  3.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 589/811 [33:21<11:44,  3.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 590/811 [33:24<11:16,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 591/811 [33:27<11:04,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 592/811 [33:30<11:01,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 593/811 [33:35<12:40,  3.49s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 594/811 [33:38<12:15,  3.39s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 595/811 [33:41<12:25,  3.45s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 596/811 [33:44<11:48,  3.30s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▎  | 597/811 [33:47<11:27,  3.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▎  | 598/811 [33:50<11:11,  3.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 599/811 [33:53<11:04,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 600/811 [33:57<11:32,  3.28s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 601/811 [34:00<11:30,  3.29s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 602/811 [34:03<11:11,  3.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 603/811 [34:06<10:49,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 604/811 [34:09<10:47,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▍  | 605/811 [34:12<10:29,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▍  | 606/811 [34:18<12:38,  3.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▍  | 607/811 [34:20<11:47,  3.47s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▍  | 608/811 [34:24<11:17,  3.34s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▌  | 609/811 [34:27<10:53,  3.24s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▌  | 610/811 [34:29<10:35,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▌  | 611/811 [34:33<10:43,  3.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▌  | 612/811 [34:38<13:01,  3.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 613/811 [34:41<11:50,  3.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 614/811 [34:44<11:13,  3.42s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 615/811 [34:47<10:32,  3.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 616/811 [34:50<10:16,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 617/811 [34:53<10:06,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 618/811 [34:56<10:01,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▋  | 619/811 [34:59<09:42,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▋  | 620/811 [35:02<09:43,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 621/811 [35:05<09:33,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 622/811 [35:08<09:21,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 623/811 [35:11<09:11,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 624/811 [35:14<09:10,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 625/811 [35:17<09:02,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 626/811 [35:20<09:03,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 627/811 [35:23<09:06,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 628/811 [35:26<09:33,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 629/811 [35:29<09:24,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 630/811 [35:32<09:07,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 631/811 [35:35<09:07,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 632/811 [35:38<08:48,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 633/811 [35:41<08:44,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 634/811 [35:44<08:48,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 635/811 [35:47<09:00,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 636/811 [35:50<08:38,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▊  | 637/811 [35:53<08:35,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▊  | 638/811 [35:56<08:24,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 639/811 [35:59<08:22,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 640/811 [36:02<08:29,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 641/811 [36:05<08:23,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 642/811 [36:08<08:34,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 643/811 [36:11<08:23,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 644/811 [36:14<08:13,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|███████▉  | 645/811 [36:16<08:09,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|███████▉  | 646/811 [36:19<08:01,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|███████▉  | 647/811 [36:22<08:03,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|███████▉  | 648/811 [36:25<07:59,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 649/811 [36:28<08:06,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 650/811 [36:31<08:02,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 651/811 [36:35<08:04,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 652/811 [36:37<07:54,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 653/811 [36:41<08:05,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).

5016691_20201_2_0,bkoa4o4icz,0.10814435931255804,-105.57149937773235,-43.475246989998936

4870828_20201_2_0,bkys7p4icz,-4.269439703467278,-88.35792738678168,-1.8556219035718868

1423721_20201_2_0,bkzcln4icz,-0.30109163503432795,-78.20187134433775,-40.10355149352563

1730411_20201_2_0,bl9fhp4icz,0.24870844628839137,-96.70756834070147,-32.115665885798194

5730001_20201_2_0,blerln4icz,0.8444011185928132,-68.48125429827184,-31.482926704537448

1300335_20201_2_0,blm1co4icz,2.1834231200938117,-86.0427725277959,-75.85056169509957

2936758_20201_2_0,blm9hp4icz,-0.009323009358868813,-104.14419926438111,-22.74925076521116

3822380_20201_2_0,blp13o4icz,-3.3034856478425985,-64.6418055658994,-10.094455906195066

1297756_20201_2_0,blqkao4icz,0.01755693482846321,-117.7904964385128,-26.725272128087965

3220316_20201_2_0,blymio4icz,-0.6418436566485699,-74.05860678085867,-37.840045467971606

1132428_20201_2_0,bm2dao4icz,8.53479426884284,-76.68845339636798,-79.07879185974247

3272924_20201_2_0,bm2xho4icz,33.39955382931906,20.90309463018727,-186.24977822897424

2591897_20201_2_0,bm32en4icz,-2.5072678561640345,-100.44293767845832,-22.094633139623042

3525342_20201_2_0,bmexqo4icz,0.28018645325991093,-119.75025701128345,-37.10059115550912

4936852_20201_2_0,bmg9ap4icz,1.3447399534078597,-110.88637350213367,-28.618167136705438

2089413_20201_2_0,bmk73p4icz,-3.253033197337224,-71.92966654201308,-33.3243270329757

5353011_20201_2_0,bmnedp4icz,1.230401948783416,-97.84556238840071,-49.28761808941228

1189090_20201_2_0,bmpu0o4icz,4.990018154320836,-87.12209692302693,-76.40165999596209

1378665_20201_2_0,bmswvn4icz,-5.131076575797278,-124.56212963629906,-10.592253666300508

1227625_20201_2_0,bmy46o4icz,-0.8463483025139845,-106.09935386694113,-28.769446489493887

5438720_20201_2_0,bn2lto4icz,-0.47869009236339377,-105.0107843368296,-49.290511361825054

4086726_20201_2_0,bn54hp4icz,-2.929235897673154,-117.58934473001565,-25.031061539292708

4909337_20201_2_0,bn54lo4icz,-3.3734707602762217,-130.25410087315066,-40.06170095170799

5251728_20201_2_0,bn7l7o4icz,-0.8628754158706791,-94.82682253845567,-36.86385087716805

2778137_20201_2_0,bn7qjo4icz,-0.021057010893624054,-69.00390198420055,-40.93060719634882

5354702_20201_2_0,bndjbp4icz,0.05806190480957395,-94.22923304572151,-36.931744198129024

3142769_20201_2_0,bneq9n4icz,0.1274728354318573,-154.9813822280931,-46.222679327412436

3450308_20201_2_0,bng80p4icz,2.889704204487302,-107.00552402283512,-60.421745944997625

4923898_20201_2_0,bnnpzn4icz,0.006151632496612856,-68.22946374101821,-31.51691450656213

1389565_20201_2_0,bno71p4icz,-0.040711096512549574,-101.40360604572493,-28.346981677926294

4581994_20201_2_0,bnqc2p4icz,4.69522457959074,-82.18730252064216,-70.32097958065222

3404641_20201_2_0,bny7gn4icz,1.225097418313345,-121.56991573199244,-42.0863789717463

3903297_20201_2_0,bnzeln4icz,-0.7257804257166963,-112.81632665402108,-25.771194829049918

1018231_20201_2_0,bnzrqo4icz,-0.6205983513028972,-134.59389906796085,-21.913281357642006

2055784_20201_2_0,bo3lgp4icz,-0.8177727051904949,-108.2483311508079,-30.204954776204204

4777865_20201_2_0,bo5utn4icz,0.8154558280801347,-104.76858691483358,-32.33171079863175

3067573_20201_2_0,bo7kqn4icz,2.4414437089110974,-122.28609769836262,-35.51246001231925

3811422_20201_2_0,boggfp4icz,1.1554413447365652,-132.2429886369953,-68.15668965283773

5113541_20201_2_0,bogrfo4icz,0.8124681951551521,-114.14671223200025,-43.505416130423555

3237235_20201_2_0,boh1ko4icz,4.991553407829072,-56.08617658078876,-67.47334988241462

3866349_20201_2_0,boli7n4icz,2.344197361305723,-109.55056897941793,-49.55185312338715

5285370_20201_2_0,bon1zo4icz,0.1864480309432967,-98.83924393536796,-28.1123727938255

2815217_20201_2_0,boqy8n4icz,-3.8169602521898764,-184.61418741556744,1.886126020409563

4840640_20201_2_0,bott3o4icz,1.3652633043966382,-84.9813588830915,-54.46515394577324

4311049_20201_2_0,boxx7o4icz,-1.485029066729174,-118.08600646543977,-34.85338339793907

1109292_20201_2_0,boz4on4icz,-0.461736260670751,-118.9968154705669,-22.383691433035935

1596704_20201_2_0,bozi7p4icz,-2.0304778643445567,-134.27616781665756,-9.087688964377463

4777857_20201_2_0,bp20lo4icz,-5.5703663928566955,-108.10886179147653,-5.553576055550465

3530947_20201_2_0,bp80en4icz,-0.6367695378341877,-94.7063007032574,-33.057390374175014

1523797_20201_2_0,bparon4icz,1.108679854820153,-97.3075282231631,-41.546640612474505

3774459_20201_2_0,bpavzo4icz,3.369537252746463,-104.77978964750807,-55.06391227043966

4257696_20201_2_0,bpfgbp4icz,-1.472442468152746,-82.33176556741626,-24.62014392894669

1279902_20201_2_0,bpflfn4icz,1.0501239143192398,-115.89840910501545,-61.33654848547461

1125409_20201_2_0,bpgzpn4icz,-1.6032367826230738,-157.25169246277068,-40.97372849994724

3352087_20201_2_0,bpivuo4icz,-1.0163109208957573,-65.06161474205359,-25.96379543542166

2598098_20201_2_0,bpmebp4icz,-15.24811935730701,-226.3223676318446,59.45656303951904

2514177_20201_2_0,bpobhp4icz,0.9409802876767784,-121.4918991869844,-37.34945528161094

5593128_20201_2_0,bpumno4icz,0.9462970931347364,-83.52696025850153,-42.90931711230641

3996769_20201_2_0,bpuqvo4icz,0.02678866698396659,-37.80475473968269,-24.719816191917758

2675701_20201_2_0,bpxrso4icz,-4.312503714318069,-90.68135810894114,-21.122292308633178

1616033_20201_2_0,bq2w7p4icz,-10.528484020634744,-147.72787442282336,10.67276699531503

5453062_20201_2_0,bq3k8o4icz,-2.614861375338851,-88.19202917203822,-22.335714608813447

5326052_20201_2_0,bq49sn4icz,-1.9987210279492265,-118.70407871375045,-32.33266035726551

2427796_20201_2_0,bq4wgp4icz,0.7972718385969746,-107.66888472428292,-41.71864708237774

4175665_20201_2_0,bqdh3p4icz,-1.9481578626899987,-103.42630936770047,-5.973719811649389

1475350_20201_2_0,bqj36o4icz,2.4997917880542233,-84.7949158789416,-35.512078228045795

1371118_20201_2_0,bqkf7o4icz,2.711951027319252,-78.69645703464064,-53.864814563087165

3503065_20201_2_0,bqlbeo4icz,0.5868168796976216,-94.6945190688084,-33.59421336210106

3233353_20201_2_0,bqlxep4icz,0.9076205256723842,-117.56596430482054,-50.21405772027617

5630899_20201_2_0,bqqaxn4icz,1.0191451068085187,-109.62982023452113,-45.98870162408453

1496923_20201_2_0,bqsbeo4icz,-2.609563459849523,-98.723915224666,-14.243105530551432

2641186_20201_2_0,bqyv9n4icz,-0.8296190477451482,-94.3583462683633,-39.902636131183144

3409923_20201_2_0,bqzwln4icz,0.8831570820462985,-89.86255987010091,-31.932031052064843

4406649_20201_2_0,br3kxn4icz,-1.4875611458326403,-88.38148215567071,-17.09036592009359

1208645_20201_2_0,br3thn4icz,-1.6114636093903707,-129.80274546331282,-17.071230196368134

3898066_20201_2_0,br3zzo4icz,-1.5990058016966717,-129.35932213038728,-23.573928677900696

3774242_20201_2_0,br67fo4icz,2.164179640717269,-57.53767206060576,-63.873273249802494

2540909_20201_2_0,brasyo4icz,-0.9562856756144648,-80.41542685354443,-24.969522741290945

5253159_20201_2_0,brfc6p4icz,-1.3526942566640403,-109.83651455966941,-26.29520781087146

2890943_20201_2_0,brk5jn4icz,-1.2649973792803726,-93.47983780049321,-26.523734791387

1582981_20201_2_0,bropao4icz,-1.7977499106030423,-112.86256003347711,-16.8880560074749

3421253_20201_2_0,brs6bp4icz,-3.009333175811633,-95.91294407416385,-13.479357946256613

3527506_20201_2_0,brv02p4icz,2.9668031859670796,-90.5646282838402,-50.3579659085828

1406888_20201_2_0,brvn4p4icz,0.7930487448815441,-131.82384353921958,-15.627098047378652

3698210_20201_2_0,brzign4icz,-10.814060091735966,-85.90057948925852,18.587658232689947

3769819_20201_2_0,bs2ojn4icz,-2.834844262683841,-104.89819949668401,-50.34121312149314

4852291_20201_2_0,bs8pan4icz,-1.9904974841101999,-126.69302436040928,-57.05111916770326

5769154_20201_2_0,bsah9p4icz,0.8417242321278264,-52.074652054308274,-64.47185798523742

4335747_20201_2_0,bsfx6p4icz,-1.191630721532577,-86.4678116901712,-41.69424015088789

5710903_20201_2_0,xtmb3p4icz,1.495347323718324,-81.42950168089752,-33.789794389145726

5459051_20201_2_0,bsjfcp4icz,2.4580712699495932,-95.19052746156615,-45.747937759710766

5718644_20201_2_0,bsldpn4icz,2.3204408098959255,-90.86714425121124,-33.23336388651671

1619527_20201_2_0,bslh0p4icz,-0.5677173782393318,-108.19433598909592,-26.245143124459446

5565777_20201_2_0,bsrmap4icz,-0.9521465064410747,-100.77958040826502,-22.412484780664684

4493397_20201_2_0,bt0a7o4icz,-0.10031422855468691,-117.7087174790864,-41.37411622365376

3760514_20201_2_0,bt79un4icz,0.8983005869109116,-91.7880675323002,-30.921852662987845

4993064_20201_2_0,btbfnn4icz,-7.556729607853517,-115.98487657164026,34.70616095805404

5420421_20201_2_0,btj2eo4icz,1.7579477092082145,-76.5893590730245,-28.67255836609651

3388630_20201_2_0,uz15qo4icz,-1.1615444232262109,-68.59036837401084,-29.403146563050683

5833892_20201_2_0,bto5cn4icz,-4.039587127285478,-90.60485675729996,-15.721381922441381

4564087_20201_2_0,btsh7p4icz,0.6035858505977388,-58.22879816781574,-27.47868067650974

5964971_20201_2_0,btvbgn4icz,-0.06646004730633502,-122.13444401323898,-33.78456022184902

5231039_20201_2_0,bu3gdn4icz,1.836897987476339,-106.29344783180963,-56.302837847054775

2448020_20201_2_0,bu458n4icz,1.5521281312520046,-96.3340333337766,-42.79562286845399

5239400_20201_2_0,bu5tvn4icz,-3.156204121872615,-108.99163255960312,-15.425887766486014

3042629_20201_2_0,buevfp4icz,-6.389665665869404,-102.72056063765822,24.073366339822016

1097721_20201_2_0,buf47p4icz,-3.2496220749829257,-112.86389600970156,-36.83636927275478

1367706_20201_2_0,bufpfp4icz,-0.8547244995036184,-73.27951342845245,-35.04582477674485

2092790_20201_2_0,bujiln4icz,-0.15789033792641893,-99.65092067596683,-33.186219545605994

4697849_20201_2_0,buk6mn4icz,-0.5319210137379805,-75.29614714462139,-23.009270947648133

3177758_20201_2_0,bulo9o4icz,-0.14675242745835243,-84.64043570538607,-33.015776967265666

1783432_20201_2_0,bv2kvo4icz,-0.7754080672180306,-80.01978049693037,-25.36741517292225

2287194_20201_2_0,bvb9un4icz,2.722831279156533,-49.664065609513216,-61.82716426322341

4999766_20201_2_0,bvfjgp4icz,-0.6214726621720094,-104.18666478516349,-55.902895004679976

3859389_20201_2_0,bvfnon4icz,1.229920906519533,-64.9615475701809,-32.1195226210216

2820923_20201_2_0,bvfswo4icz,-3.9880200841398654,-97.35412382343716,-16.85043263076139

2334062_20201_2_0,bvjnqo4icz,-1.6874360895107385,-102.63358985341554,-25.24743760501326

4015500_20201_2_0,bvp3gn4icz,1.0105506240268796,-99.67792749285576,-47.00584679902647

3653420_20201_2_0,bvqf6o4icz,2.9872678315005228,-9.62838302786895,-39.27276990133373

2662389_20201_2_0,bvsg5o4icz,-2.1557736784048656,-121.55495534097409,-18.65545094336605

4389225_20201_2_0,bw0l2o4icz,1.2191651952805393,-119.07669222866426,-36.42124124828905

3850399_20201_2_0,bw7vqo4icz,-0.8091521658676099,-64.16223919840226,-22.96353852755807

1614900_20201_2_0,bwb1cn4icz,-0.02129952524362954,-89.62492810047061,-49.56584254080148

4257558_20201_2_0,bwin6o4icz,0.6041011610019938,-86.04007104583093,-46.36347129275647

2859522_20201_2_0,bwls6n4icz,5.85205256326404,-110.21325575212245,-71.35087237391662

3284432_20201_2_0,bwoq7o4icz,1.671492048930496,-61.86091867641886,-32.97558700692049

1781777_20201_2_0,bws7so4icz,1.6858273243942257,-60.867688790024545,-37.97614398732951

2523735_20201_2_0,bwtd0p4icz,-1.222063835369768,-58.494259735625434,-41.76029673543344

2487029_20201_2_0,bwtsro4icz,10.756497855628762,-105.16069788188537,-71.13186154098624

2650904_20201_2_0,bwv02o4icz,0.535871628051195,-100.44572907119027,-62.64846491957418

1769505_20201_2_0,bwvv9n4icz,0.502114300048499,-140.5533271873241,-33.944867092651464

3839368_20201_2_0,bwwqkn4icz,-1.9865965442119722,-125.50731158468048,-31.17050720241741

2815856_20201_2_0,bx32bn4icz,1.3548315411606213,-130.62864364603752,-36.82357802227796

2400353_20201_2_0,bx6nro4icz,-4.437776890953514,-98.7401660786721,-22.66556481868392

5692175_20201_2_0,bxb9ao4icz,-0.15684194781483815,-95.0504379914506,-42.56599277361681

1252323_20201_2_0,bxdv6p4icz,-1.9788925938924389,-110.19709589191419,-28.549568571711063

3822161_20201_2_0,bxehep4icz,-1.0276783121675366,-154.11106453997385,-13.361754720220077

1258943_20201_2_0,bxf51o4icz,0.7062796714584142,-81.15313195283619,-30.210556070572082

5709591_20201_2_0,bxi6mn4icz,-1.2409107595175317,-85.51618174123024,-20.956694044681342

3955946_20201_2_0,bxlyko4icz,-0.7427314617607037,-117.0309241408732,-24.063516867300493

5948341_20201_2_0,bxp8qn4icz,-2.388789147548123,-52.55543571305003,-29.29566004714478

3217794_20201_2_0,bxwpqn4icz,3.943920152874908,-55.54172743090831,-55.786178997411156

5234147_20201_2_0,bxzobo4icz,-0.5998719211673696,-105.85858755104096,-29.689916491348896

5392807_20201_2_0,by6cbp4icz,1.5908638647433935,-92.51021420493794,-40.194723360395244

1021221_20201_2_0,by6h7o4icz,-0.8308484847163166,-97.78721482695158,-34.73799737453173

3201554_20201_2_0,by89oo4icz,0.5797387235246131,-104.3480440295726,-55.369249646812065

2053209_20201_2_0,byga9p4icz,0.8508444960056111,-84.09717775627854,-46.27032083214321

1016040_20201_2_0,byhkun4icz,2.5054189416139856,-106.12315716110677,-42.285121849375315

4767549_20201_2_0,byimyn4icz,-1.3279897637065319,-79.3220031070893,-17.593556395219068

1417297_20201_2_0,bys05p4icz,-1.5821471472219153,-85.4572759867456,-45.67528095691577

4129624_20201_2_0,bysdto4icz,7.505241915670755,-44.90434828619544,-75.83870909878704

4802312_20201_2_0,byvyqn4icz,-0.19208389296446154,-68.81868483552043,-42.854875885085065

2010089_20201_2_0,byz99n4icz,0.7841415861417558,-191.05590846753856,-34.19804123728831

5445634_20201_2_0,byzd6o4icz,0.6422083527033864,-101.50036671792606,-49.99178507110264

5522466_20201_2_0,byzdvn4icz,1.409024255134409,-94.35022099880175,-18.97139040434726

1385640_20201_2_0,bz14no4icz,-0.15042637700661632,-105.47910262419163,-50.14001524619718

1356588_20201_2_0,bz1yjp4icz,44.7313539264821,95.7898587874764,-236.3580870742718

1717080_20201_2_0,gba4tn4icz,-1.3414447763190902,-105.96385882321624,-24.75125760446653

3354462_20201_2_0,bz64wn4icz,-0.6681702631909868,-111.70031344623686,-46.258815095588545

3034034_20201_2_0,bza2eo4icz,-3.650976012950471,-96.55423597471898,-1.0434390658960524

3153021_20201_2_0,bzmbin4icz,-2.051261238772855,-144.83491010992566,-21.4169636729128

4692861_20201_2_0,bzn51o4icz,-1.621925649028393,-107.16733944746662,-29.661803809037636

1679868_20201_2_0,bzsp6p4icz,-2.4248530840836513,-90.39369577889747,-25.75865827710892

2228575_20201_2_0,bzvecp4icz,-6.523804393716726,-94.82664359968024,10.632146349802042

4923158_20201_2_0,bzvzuo4icz,2.0124383964598938,-61.10104448041591,-24.05048990675155

4420561_20201_2_0,bzwthp4icz,-0.6304055592358601,-117.58645929589682,-10.05533543342861

1028373_20201_2_0,bzy61o4icz,1.4110666760976878,-39.27141631964133,-40.40544496192685

2757880_20201_2_0,c00ifp4icz,4.1455210292967815,-77.04902584787686,-57.60513418776162

1441159_20201_2_0,c01deo4icz,-4.67533445954728,-83.53922992062098,-21.91020330241949

3042442_20201_2_0,c05vdp4icz,0.9915225572569811,-78.24704603632102,-48.37823280143573

1471206_20201_2_0,c09k7n4icz,-1.5667604890318232,-77.9165243044458,-32.92971553030114

5862928_20201_2_0,c0frao4icz,1.0563267577562745,-64.39730200117961,-49.017915047334725

3473338_20201_2_0,c0iilo4icz,0.6188513002126772,-99.99541139840841,-19.72849504080206

1820905_20201_2_0,c0lfio4icz,0.5805582156753885,-58.65662751586933,-43.01699873304149

3290496_20201_2_0,c0lk5o4icz,4.795399610715796,-69.8717181884096,-80.45761234122212

1302891_20201_2_0,c0m9jp4icz,1.7595911673628357,-98.14607015773817,-51.171464350971405

2661289_20201_2_0,c0mtco4icz,-0.40906815259399465,-95.9333839828096,-12.155723690555277

1781448_20201_2_0,c0wf0o4icz,-2.688791377650721,-85.45909733388444,-13.804375985515236

3605961_20201_2_0,c0ybgo4icz,-2.482110140998924,-85.74978562188329,-21.53193559172165

5596465_20201_2_0,vy2mso4icz,-2.3504825326396355,-69.89719443322184,-20.204770976135606

2029111_20201_2_0,c1369o4icz,-1.2243109454577807,-130.15810857919502,-29.223490384272367

2179845_20201_2_0,c192zo4icz,-0.3399784348928796,-86.18229584998898,-46.26389869998839

2962399_20201_2_0,c195qn4icz,-0.8083094377191702,-136.78510279966844,-21.78143720195945

5113842_20201_2_0,c1ccio4icz,-1.1283633552401628,-87.36152626916689,-29.31249534897968

1315280_20201_2_0,c1fexn4icz,1.063978259333216,-135.6849744290933,-34.759537322207734

2576458_20201_2_0,c1ffpo4icz,-0.5457678344037296,-133.14907317075438,-25.453877464888294

1010732_20201_2_0,c1fxuo4icz,12.4243799802019,16.64193878441327,-89.40594844545913

1183382_20201_2_0,c1pnfn4icz,1.696958573808737,-98.53075999349943,-31.70842494176719

1785013_20201_2_0,c1qyfo4icz,1.3364763525213785,-70.32782643136798,-48.03026865820027

4099614_20201_2_0,c1vjip4icz,-0.4994333753275425,-66.32911417601957,-17.90769871010521

5089299_20201_2_0,c1z2gp4icz,7.303135057167462,-116.82406897019871,-64.7757326139077

3110461_20201_2_0,c2d0wo4icz,-0.25619656074216085,-94.65390817969003,-37.91564959896421

2121690_20201_2_0,c2khio4icz,0.06667723740458248,-134.94207757698834,-33.53986075923011

3840041_20201_2_0,c2kvso4icz,-1.4250922437834563,-65.48104603509859,-34.04885499635961

1993664_20201_2_0,c2nfgp4icz,-5.526663677626537,-102.74911096596517,4.139337647294212

4193848_20201_2_0,pfl5cn4icz,0.3593090567143172,-73.62089347928352,-26.36548128104478

4838649_20201_2_0,c2ok5p4icz,1.0554842838710639,-64.03825253743832,-47.89952341178636

2087227_20201_2_0,c2osko4icz,1.371416605272783,-79.01274179853525,-50.48819738359698

1919120_20201_2_0,c2po9o4icz,3.7435241426563093,-74.09922641843005,-61.411390581184435

3281384_20201_2_0,c2q49p4icz,-2.9197548997639617,-124.32290716224142,-9.298229400816439

1819334_20201_2_0,c2r5jn4icz,-3.8921728991370226,-84.7916714502158,-55.09718155511456

3766324_20201_2_0,c2tgnn4icz,3.6655207431221495,-100.99821816755377,-54.205825426210595

2932170_20201_2_0,c2zgco4icz,22.165371009236075,-4.197879901714316,-168.64470223117172

1119043_20201_2_0,c37j9o4icz,-1.0713925369113289,-110.05263769684203,-20.269022929467738

5469175_20201_2_0,c38rqn4icz,0.7823971335434156,-140.1919259949926,-35.47026987471487

5062828_20201_2_0,c3bgxn4icz,-1.960067654762183,-70.77390490721012,-23.969109041866375

1964049_20201_2_0,c3hs7o4icz,-1.7767481191002636,-105.48342019090106,-30.49550780400044

4331304_20201_2_0,c3k5ao4icz,-0.17923281193436277,-84.47752389659777,-50.448382299850536

4953451_20201_2_0,c3le8o4icz,-1.1110099398951736,-85.08514344942955,-30.97715081760893

2795595_20201_2_0,c3mdbn4icz,0.05059241640750773,-104.28195634095295,-32.148663326005476

1089768_20201_2_0,c3qxuo4icz,4.740963964528323,-108.89456622736071,-45.25299612363713

1961905_20201_2_0,c3tw8o4icz,0.3818884673307305,-105.25528866669774,-35.09172819526299

4049275_20201_2_0,c3u7ep4icz,-2.3218345854708176,-117.46141338095845,-18.551507470230675

4688396_20201_2_0,c45aip4icz,-0.6082545733511948,-124.23716999515139,-23.576882036693206

1004088_20201_2_0,c46txo4icz,-3.425804891471307,-59.80921907851007,-8.00633394185553

5759528_20201_2_0,c49skn4icz,-2.4792206432562924,-109.63053062612147,-14.81253759611566

5119315_20201_2_0,c4e6wo4icz,-0.1693377717692573,-66.20564145671585,-42.6998158936575

5275797_20201_2_0,ucj31p4icz,-1.706305235128597,-75.42692421142218,-3.034305297979415

5822973_20201_2_0,c4m71p4icz,27.458427374901426,140.39089373920638,-209.5413989611692

4449579_20201_2_0,c4mtzo4icz,0.49738589057925187,-59.6921969865773,-25.417185152697215

4979815_20201_2_0,c4pu8n4icz,1.4769071897925288,-110.36520671853017,-44.81669529208597

3607337_20201_2_0,c4smbo4icz,-2.8733607252479056,-137.98571490597362,-26.159578582093104

1389962_20201_2_0,c4zmrn4icz,-1.6016917704047693,-115.11746960914715,-22.235552619350244

2164010_20201_2_0,c57agp4icz,1.0985028979302134,-101.99115886265434,-63.416571145293744

5654709_20201_2_0,c5aybp4icz,-2.737177685209333,-138.08456685036762,-9.867444727863088

2646517_20201_2_0,c5b7ln4icz,-3.092808963961704,-140.83959968201958,-16.11652899530378

1124117_20201_2_0,c5byyo4icz,-1.2624546294854575,-108.71928087375014,-19.60484478144778

3031616_20201_2_0,c5i3sn4icz,-1.4791262170285704,-81.53415478452305,-26.674285821353948

3760464_20201_2_0,c5jwyo4icz,-0.7076536210313484,-49.571286794666634,-34.03842127158265

4187269_20201_2_0,c5qhto4icz,0.07014923909116509,-147.15985284774823,-28.00625292741006

5187144_20201_2_0,c5tejn4icz,0.22583387656471737,-74.39164519178163,-41.62382295360962

4035045_20201_2_0,c5ut7o4icz,-0.9925382826245215,-92.83766595867638,-32.22320284115884

1349895_20201_2_0,c5vcxn4icz,-0.6064626206694,-108.73574759192235,-36.02007690808895

5235573_20201_2_0,c5x29p4icz,2.8033477330434717,-91.12061264539417,-57.43729397411927

4963674_20201_2_0,c5xb7o4icz,1.5932540469282679,-101.65089806809098,-42.35231155895198

2124859_20201_2_0,c5xcdp4icz,-3.912367538605968,-124.01256728466569,-34.33305282179421

4793643_20201_2_0,c5z2mn4icz,-1.0280584551953085,-63.04460937748544,-35.72117063353579

2849602_20201_2_0,c602ln4icz,-30.961572447275206,-94.79605512061607,162.43654564335418

2377825_20201_2_0,c61vfp4icz,-3.1539435374223665,-88.63490868507765,-9.48670552873071

3628826_20201_2_0,c6do8p4icz,0.4464212789492001,-93.52867754141135,-23.621918171885937

5899548_20201_2_0,c6e0ep4icz,-2.107683125894805,-126.87368044234904,-17.658168940088515

3437896_20201_2_0,c6glep4icz,-0.05660038896098737,-95.29160596789518,-35.14435586572034

3940412_20201_2_0,c6n86o4icz,-0.09218791666238844,-127.39691851392408,-39.13184754771977

5344590_20201_2_0,c6ouvo4icz,0.048018208265426444,-71.3994889398287,-25.641478099762153

3249050_20201_2_0,c6qv3o4icz,-0.7876737814771064,-120.07337237569467,-7.20243619682816

1081944_20201_2_0,c6qyon4icz,-2.4430507294961563,-79.7644829106244,-21.29727678738226

4993399_20201_2_0,c6sa6o4icz,-1.5302134281788782,-114.40227050506789,-28.333852321805622

1714334_20201_2_0,c6wijo4icz,0.6739691153266827,-107.02715094191495,-30.954272890721256

5826754_20201_2_0,c6x4do4icz,7.376758650883294,-86.11186222173299,-72.64937480354901

1512293_20201_2_0,c70uwo4icz,2.0999895210887534,-50.27806986761635,-50.691648378440064

3078246_20201_2_0,c75tdo4icz,-0.36533020967093177,-95.87587646768651,-32.048557310452736

4205418_20201_2_0,c76w9o4icz,0.2142571881071541,-106.97818047264107,-23.309797055136087

2847631_20201_2_0,c77hyo4icz,-4.605275915216166,-92.00089525023517,-16.2888381637636

5228226_20201_2_0,c79r9p4icz,-1.7542699430448647,-110.54840814228362,-31.369440339135068

2287564_20201_2_0,c79ron4icz,-0.7739655830926706,-87.7879615885978,-30.848347098615022

5888162_20201_2_0,c7eron4icz,-1.114472125625233,-125.16672958709665,-27.954356465345427

5100150_20201_2_0,c7la6o4icz,-0.7388009144970885,-115.02057373410724,-40.01872690812133

1627499_20201_2_0,c7muin4icz,-1.2207445000986121,-101.6039623217653,-11.893904572965312

2990296_20201_2_0,c7mw8n4icz,1.0386832693236838,-77.66978153030266,-50.9019903926457

2777630_20201_2_0,c7nl9p4icz,31.07386385650183,48.589884084559145,-153.5671853060399

5736561_20201_2_0,c7nrmo4icz,0.8624645803010299,-95.58955751290864,-35.1189241196232

2056938_20201_2_0,c7nxuo4icz,-8.327105781123077,-125.09846467543241,27.50383824428907

3959953_20201_2_0,c7pc1o4icz,-0.6698593201111325,-96.21979779134557,-32.88475014156029

5325797_20201_2_0,hnwtcp4icz,3.0708897652529923,-88.33735284324138,-57.336907193763864

5598087_20201_2_0,c7rl9p4icz,-1.8508378752038246,-85.35789967373137,-29.6113997986119

3919803_20201_2_0,c7vdrn4icz,-1.6667365038286246,-124.15874446088816,-40.007615360568565

5075397_20201_2_0,c7z5cp4icz,-0.9287979817376262,-119.1438818408048,-43.345751097153524

5260195_20201_2_0,c888ep4icz,-1.8876822412083045,-109.46417370572397,-14.52924382824807

4083481_20201_2_0,c8demo4icz,3.4997508365706858,-63.58273438858029,-40.77631090221564

2714134_20201_2_0,c8j47p4icz,16.80212290703913,-38.15813576450083,-151.5138148520424

5168522_20201_2_0,c8ls9o4icz,-0.36453638445977354,-123.7291774954017,-44.51729067498438

5418775_20201_2_0,c8npbp4icz,0.29776788357714323,-77.6851123598295,-40.97300877414024

3553980_20201_2_0,c8q5ln4icz,1.211144699939696,-98.11341874839647,-60.455323307259505

2553650_20201_2_0,c8ravo4icz,-0.8059885637382985,-73.6633437679026,-21.47960472911589

1151122_20201_2_0,c8v8xn4icz,0.6360876529012276,-119.64575069447963,-45.71312402635681

2107591_20201_2_0,c8vuvn4icz,0.5352461179553027,-131.32879902797322,-48.279614480798756

1987436_20201_2_0,c8x8sn4icz,0.21869637331139136,-81.30993658002251,-66.44319467421056

2297949_20201_2_0,c8znwn4icz,0.20884631321946465,-69.20522674997017,-36.36359404013142

2416640_20201_2_0,c90v9p4icz,-0.9451458734547928,-94.05466975231519,-46.22258878391011

5077035_20201_2_0,c928in4icz,1.0054922939283122,-122.946380015736,-44.15790856954939

5618184_20201_2_0,c967qn4icz,-0.4729215395622332,-94.98217762341514,-37.62349512679067

1227568_20201_2_0,c97ako4icz,4.033325795235453,-67.88025499078074,-50.504299956474725
 81%|████████  | 654/811 [36:44<07:53,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 655/811 [36:47<08:10,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 656/811 [36:50<07:56,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 657/811 [36:53<07:46,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 658/811 [36:56<07:44,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████▏ | 659/811 [37:00<08:19,  3.28s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████▏ | 660/811 [37:07<11:08,  4.43s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 661/811 [37:11<10:44,  4.30s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 662/811 [37:14<09:45,  3.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 663/811 [37:20<11:04,  4.49s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 664/811 [37:22<09:44,  3.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 665/811 [37:25<08:56,  3.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 666/811 [37:28<08:17,  3.43s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 667/811 [37:32<08:18,  3.46s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 668/811 [37:35<07:47,  3.27s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 669/811 [37:38<07:36,  3.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 670/811 [37:41<07:17,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 671/811 [37:43<06:59,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 672/811 [37:46<06:57,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 673/811 [37:49<06:48,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 674/811 [37:52<06:43,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 675/811 [37:55<06:38,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 676/811 [37:58<06:38,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 677/811 [38:01<06:28,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▎ | 678/811 [38:04<06:31,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▎ | 679/811 [38:07<06:36,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 680/811 [38:10<06:26,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 681/811 [38:13<06:23,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 682/811 [38:16<06:15,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 683/811 [38:19<06:23,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 684/811 [38:22<06:17,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 685/811 [38:25<06:12,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▍ | 686/811 [38:28<06:06,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▍ | 687/811 [38:30<05:59,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▍ | 688/811 [38:33<05:54,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▍ | 689/811 [38:36<05:56,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▌ | 690/811 [38:39<05:57,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▌ | 691/811 [38:42<05:49,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▌ | 692/811 [38:45<05:40,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▌ | 693/811 [38:48<05:46,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 694/811 [38:51<05:49,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 695/811 [38:54<05:49,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 696/811 [38:57<05:42,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 697/811 [39:00<05:44,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 698/811 [39:03<05:39,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 699/811 [39:06<05:36,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▋ | 700/811 [39:09<05:32,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▋ | 701/811 [39:12<05:30,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 702/811 [39:15<05:19,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 703/811 [39:18<05:11,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 704/811 [39:20<05:08,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 705/811 [39:23<05:08,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 706/811 [39:28<05:47,  3.31s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 707/811 [39:31<05:40,  3.27s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 708/811 [39:35<06:06,  3.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 709/811 [39:38<05:43,  3.37s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 710/811 [39:41<05:28,  3.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 711/811 [39:44<05:18,  3.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 712/811 [39:47<05:02,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 713/811 [39:50<04:55,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 714/811 [39:53<04:51,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 715/811 [39:56<04:45,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 716/811 [39:59<04:42,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 717/811 [40:02<04:51,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▊ | 718/811 [40:15<09:31,  6.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▊ | 719/811 [40:28<12:24,  8.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 720/811 [40:31<09:56,  6.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 721/811 [40:34<08:12,  5.47s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 722/811 [40:37<06:58,  4.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 723/811 [40:40<06:09,  4.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 724/811 [40:43<05:35,  3.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 725/811 [40:46<05:06,  3.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|████████▉ | 726/811 [40:48<04:45,  3.35s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|████████▉ | 727/811 [40:51<04:28,  3.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|████████▉ | 728/811 [40:54<04:19,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|████████▉ | 729/811 [40:58<04:21,  3.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 730/811 [41:01<04:13,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 731/811 [41:04<04:06,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 732/811 [41:07<04:05,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 733/811 [41:10<03:57,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 734/811 [41:13<04:05,  3.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 735/811 [41:16<03:51,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 736/811 [41:23<05:14,  4.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 737/811 [41:26<04:43,  3.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 738/811 [41:29<04:20,  3.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 739/811 [41:32<04:04,  3.40s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 740/811 [41:35<04:06,  3.47s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████▏| 741/811 [41:40<04:25,  3.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████▏| 742/811 [41:43<04:03,  3.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 743/811 [41:46<03:55,  3.47s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 744/811 [41:49<03:44,  3.34s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 745/811 [41:52<03:31,  3.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 746/811 [41:55<03:23,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 747/811 [41:58<03:21,  3.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 748/811 [42:01<03:11,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 749/811 [42:04<03:05,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 750/811 [42:07<03:01,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 751/811 [42:10<02:55,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 752/811 [42:13<02:54,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 753/811 [42:16<02:54,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 754/811 [42:19<02:52,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 755/811 [42:22<02:47,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 756/811 [42:25<02:47,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 757/811 [42:28<02:42,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 758/811 [42:31<02:42,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▎| 759/811 [42:37<03:21,  3.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▎| 760/811 [42:40<03:01,  3.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 761/811 [42:43<02:55,  3.51s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 762/811 [42:46<02:45,  3.37s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 763/811 [42:49<02:36,  3.27s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 764/811 [42:52<02:28,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 765/811 [42:55<02:26,  3.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 766/811 [42:58<02:19,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▍| 767/811 [43:01<02:19,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▍| 768/811 [43:04<02:12,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▍| 769/811 [43:08<02:12,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▍| 770/811 [43:11<02:06,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▌| 771/811 [43:14<02:02,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▌| 772/811 [43:17<02:04,  3.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▌| 773/811 [43:20<01:58,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▌| 774/811 [43:23<01:53,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 775/811 [43:26<01:48,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 776/811 [43:29<01:50,  3.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 777/811 [43:34<02:02,  3.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 778/811 [43:38<02:06,  3.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 779/811 [43:41<01:54,  3.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 780/811 [43:44<01:46,  3.43s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▋| 781/811 [43:48<01:41,  3.38s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▋| 782/811 [43:51<01:32,  3.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 783/811 [43:57<01:54,  4.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 784/811 [44:00<01:41,  3.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 785/811 [44:03<01:31,  3.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 786/811 [44:06<01:23,  3.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 787/811 [44:09<01:18,  3.27s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 788/811 [44:12<01:13,  3.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 789/811 [44:15<01:08,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 790/811 [44:17<01:03,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 791/811 [44:21<01:00,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 792/811 [44:23<00:56,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 793/811 [44:26<00:53,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 794/811 [44:29<00:51,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 795/811 [44:32<00:47,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 796/811 [44:35<00:45,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 797/811 [44:38<00:42,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 798/811 [44:41<00:38,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▊| 799/811 [44:44<00:35,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▊| 800/811 [44:47<00:31,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 801/811 [44:50<00:29,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 802/811 [44:53<00:27,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 803/811 [44:56<00:24,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 804/811 [44:59<00:21,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 805/811 [45:02<00:17,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 806/811 [45:05<00:15,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|█████████▉| 807/811 [45:08<00:11,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|█████████▉| 808/811 [45:11<00:08,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|█████████▉| 809/811 [45:15<00:06,  3.27s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|█████████▉| 810/811 [45:18<00:03,  3.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|██████████| 811/811 [45:22<00:00,  3.33s/it]100%|██████████| 811/811 [45:22<00:00,  3.36s/it]

1563383_20201_2_0,c99opn4icz,-1.9044186731018116,-76.13417478308628,-21.176256295704846

3701970_20201_2_0,c9bimo4icz,-0.12149315677484032,-128.11607693899342,-32.38510120003954

1034512_20201_2_0,c9c3jn4icz,1.0869002211356384,-133.96120036283915,-47.874849921956695

5153681_20201_2_0,c9fgao4icz,2.6183999447703705,-85.03229682255895,-55.79458922856115

1561816_20201_2_0,c9icbo4icz,3.3600400380463555,-66.4882850418334,-54.25102072237482

4777018_20201_2_0,c9ik3p4icz,-2.5087332149883363,-88.18916067013203,-35.304005393274565

1792504_20201_2_0,c9jokn4icz,-1.1190683096989809,-95.99883950175092,-16.98162143889627

4610052_20201_2_0,c9lndp4icz,-2.318434095572918,-111.67438016266186,-46.3514087018074

3618510_20201_2_0,ca47ao4icz,-0.4213025473004333,-117.72369007522389,-40.34892052657909

1204681_20201_2_0,caarmo4icz,1.3076162017720483,-108.17764412578796,-44.33343868198892

5353235_20201_2_0,cac6no4icz,0.1086022211744398,-115.47732289310855,-35.052467125684444

5055937_20201_2_0,cadrmo4icz,0.5711341288247147,-68.6811567336184,-29.830378205273675

2155177_20201_2_0,cadtfo4icz,0.9402419872201054,-91.3987736889479,-30.51980258172584

4798533_20201_2_0,caf4go4icz,-0.5792833495360733,-106.50591384477741,-20.785951475534887

1779561_20201_2_0,cal8oo4icz,-2.3188097463812714,-94.95151700275284,-10.786432723717525

1559604_20201_2_0,cauwdp4icz,-3.391091634477428,-94.38489067228775,-19.640291988926123

1272960_20201_2_0,cav1xo4icz,1.4046927919002785,-76.92999403939882,-23.610148686884116

6017587_20201_2_0,cavbdn4icz,0.11282917419238774,-162.6084429133791,-31.196813093626815

1722636_20201_2_0,caz2xn4icz,2.6410709439377213,-100.7708055816731,-54.201031893128544

3545236_20201_2_0,cb1hyo4icz,-0.5964846249951485,-70.38394918731882,-49.51176269320665

3765764_20201_2_0,icu9pn4icz,-3.8505385735281883,-71.45920993443107,-10.840020712049395

4671715_20201_2_0,cb7vun4icz,-1.9917768823298727,-116.14138471987246,-19.222653418797933

5361486_20201_2_0,cb8quo4icz,-0.6640871796563108,-95.84527967670277,-44.15397622231782

1650404_20201_2_0,cbb84o4icz,0.5447988646968365,-94.4897425958622,-49.81185027717926

2505001_20201_2_0,cbdton4icz,0.540072217544936,-148.72814349047115,-30.500724871375468

2331449_20201_2_0,cbjumn4icz,-0.6680939087042369,-140.43066500933259,-34.77442703915057

3065178_20201_2_0,cbpm0o4icz,-0.3915909953028969,-92.15748645050738,-47.75422102549612

1406021_20201_2_0,cbqyqo4icz,2.8806589855573375,-68.53901159206904,-45.91308763879819

5599757_20201_2_0,cbtgfp4icz,-0.8397417124976881,-114.96741819703996,-37.20857905683944

1098116_20201_2_0,cbts6n4icz,-4.279729531877723,-115.30162620402368,-8.422295769888294

3779218_20201_2_0,cccxfo4icz,1.0458831276813871,-72.20418005025675,-61.20254138222592

3653140_20201_2_0,ccjd5p4icz,-1.3740198216372068,-94.10311980126411,-36.39244309731964

3875445_20201_2_0,ccs1uo4icz,-1.851124211488533,-54.984957009026886,-38.77694854325935

4008955_20201_2_0,ccs46n4icz,1.193543323941008,-103.59873753107252,-51.15163487918184

1529177_20201_2_0,cd1zco4icz,0.24356793915381933,-101.98821272973873,-22.509430017092015

3160425_20201_2_0,cd37zn4icz,-0.14192052791388446,-93.75699555180356,-35.837562527199424

3774970_20201_2_0,cd4fgn4icz,-6.928693673203035,-113.93627000111317,6.555201629403619

4098165_20201_2_0,cdecip4icz,3.91704281730213,-69.63088880946862,-64.22602227353804

3462393_20201_2_0,cdgoen4icz,0.3652124658409817,-116.24826595012138,-39.782482112151314

2395113_20201_2_0,cdht4p4icz,-1.2619691611200066,-77.26026141177573,-30.682005871330674

2763930_20201_2_0,cdjkpn4icz,0.31511004946216054,-107.9190136503764,-36.75124225170474

2788441_20201_2_0,cdnmlo4icz,1.5428477451395943,-76.71061429636512,-49.705511040602914

3220787_20201_2_0,cdqh8n4icz,1.414226067555451,-72.37346522005242,-36.53152394018568

1282231_20201_2_0,cdsbvn4icz,-1.0633966389176301,-61.14526052001435,-37.570163094531466

4834160_20201_2_0,ce0u5p4icz,-0.4051578111578466,-104.09123189933788,-19.467604613409506

1539024_20201_2_0,ce3s5o4icz,-1.4000959555000467,-59.646578444110105,-25.70500577166115

1201604_20201_2_0,cehvnn4icz,0.14290737583652313,-111.92391063067959,-33.62718427940558

3027436_20201_2_0,cem7no4icz,-1.1737098678317217,-98.63310268430683,-25.653796067053847

4197775_20201_2_0,cep16p4icz,1.3427467217264635,-88.26415309028835,-40.82039640870704

2926364_20201_2_0,cep7hp4icz,-5.769821646988012,-161.75521568531127,-9.392096886749641

2770458_20201_2_0,cet86p4icz,-1.4555449742062665,-86.92776736084247,-14.761911091912623

2612510_20201_2_0,cf2qen4icz,-8.78815745095338,-122.14206176910824,9.650918837705689

1020513_20201_2_0,cfaswo4icz,1.4879041645618623,-75.42526991488432,-51.681328888633146

4626701_20201_2_0,cfifpo4icz,-0.12973005160871817,-137.36169812804334,-32.812049040535086

1533081_20201_2_0,cflfip4icz,-0.32257798244089814,-97.50125152685888,-31.95063341936769

4875627_20201_2_0,cfne8p4icz,0.16576162729102334,-153.66212847607494,-49.02344530802321

3068627_20201_2_0,cfo56p4icz,1.6354170401720367,-124.33910849361598,-54.163463818420965

6019739_20201_2_0,cftcap4icz,1.4149766888152395,-109.71226443398996,-43.30610656623975

3426965_20201_2_0,cfygcp4icz,0.5043265817724251,-110.73718761016775,-30.147946687074963

2157605_20201_2_0,cg1nno4icz,-0.09007310914794887,-135.91744739505518,-27.988914085196896

4080497_20201_2_0,cg4a7o4icz,-1.1348156542604524,-76.16649941654029,-25.367359079915275

1339143_20201_2_0,cg5f3o4icz,0.07592326859184184,-68.5651468714758,-39.587259252808906

2993294_20201_2_0,cg5kxo4icz,-0.8637012825340922,-67.17517630773139,-54.99583935528155

1257785_20201_2_0,cgbsin4icz,1.9453550386903613,-84.9419941879793,-38.321125739657475

5047199_20201_2_0,cgjeho4icz,-1.286487564159263,-58.92301577227704,-12.491119176808652

5777036_20201_2_0,cgkymn4icz,-2.0734897444060802,-81.14486395594724,-11.505261104614362

2491419_20201_2_0,cgnfpo4icz,-1.710944014220945,-88.48752376277622,-17.179409603815515

2563442_20201_2_0,cgokso4icz,-0.29822708993085206,-83.0214655546356,-38.35485252518899

2163650_20201_2_0,cgp56p4icz,0.296401111363275,-98.90446610173828,-26.517955752045964

1812520_20201_2_0,cgpn4p4icz,0.7839219466600644,-111.1043763991998,-42.212265581069914

5659407_20201_2_0,cguezo4icz,-1.245325475697274,-57.47111866524318,-36.529524552883046

1734157_20201_2_0,cguv8p4icz,-1.7164933330671204,-117.62413539757762,-23.517017816137795

2165701_20201_2_0,cgv7tn4icz,-0.36507782892866775,-80.85916791818252,-39.36110067619873

3301839_20201_2_0,cgvd2o4icz,0.9302826789496597,-126.0528273651125,-27.344152050693097

1204690_20201_2_0,cgwa6p4icz,-0.5681211710291031,-145.0813538751403,-31.67718743085014

1421434_20201_2_0,cgwjqo4icz,-0.14673899152650574,-67.89964598133761,-8.958135525834365

2618030_20201_2_0,cgyvuo4icz,-0.47954036584892257,-88.2235971332739,-44.56085895887631

1108017_20201_2_0,cgyyfo4icz,-3.5472868242855706,-94.74744216156338,-32.17843399507014

3822301_20201_2_0,ch148p4icz,-0.7023472434054857,-59.596522164920685,-34.75230609274193

2132686_20201_2_0,chajtn4icz,-1.3084420470847427,-148.3584501786677,-34.45322583000778

2212368_20201_2_0,chcj0p4icz,0.11525754158516707,-108.97534251723985,-43.896886798832284

4574218_20201_2_0,chgxpn4icz,-1.3114911493691543,-97.06842610298685,-38.082318873343866

4298604_20201_2_0,chiijp4icz,-2.252363383500983,-86.57146388259594,-13.44759350543427

4536563_20201_2_0,chqf9p4icz,1.0148346782597562,-109.31350733158683,-27.48375422298963

2324041_20201_2_0,chvoon4icz,0.05951634132266536,-87.23789148038944,-35.257335767071154

4178135_20201_2_0,ci0sln4icz,0.18633103345127816,-107.34250594694018,-3.7531622103856535

1486748_20201_2_0,ci3l9o4icz,-12.06479050913129,-52.46784044805105,61.897390469110164

5573830_20201_2_0,ci6ijn4icz,2.150166399007947,-75.39040065165759,-52.24988049951595

5369017_20201_2_0,ciag1o4icz,0.5871860667314898,-93.79117752283977,-51.70301640523884

2677671_20201_2_0,cicy9o4icz,2.9329978665646608,-57.51193401619162,-34.90324710696892

4310653_20201_2_0,ciec6n4icz,-2.049662673376986,-118.55757231575095,-26.900731610624163

3679294_20201_2_0,cij2uo4icz,0.840484325403457,-60.47610911585372,-38.361136784864286

5460727_20201_2_0,cin4ro4icz,-2.140330044613428,-96.63841865555699,-6.51398248134052

5603913_20201_2_0,cin8bp4icz,-2.5696565544763286,-65.86082655818416,-41.116684029003224

5416362_20201_2_0,cin91p4icz,-0.7828845704715824,-117.20337014147077,-32.72438723585644

1902175_20201_2_0,cipx5o4icz,2.221183895685512,-76.469160357828,-60.47642605825415

5511836_20201_2_0,cisxwn4icz,-1.668667448907907,-111.95734547082824,-38.754329438822154

4318700_20201_2_0,ciw31p4icz,-1.6556835443841302,-141.82691852905995,-23.998987677785223

2168236_20201_2_0,cj061p4icz,-2.008121807058791,-130.54403913907146,-19.21012626441143

2507354_20201_2_0,m05l7o4icz,1.4901646410832885,-101.9085290056884,-46.63873047315005

1481909_20201_2_0,cj7fso4icz,0.5760042674286988,-64.00831335214781,-20.8217991029355

1682658_20201_2_0,cjbadn4icz,-0.9234983372331448,-76.5526644399925,-21.288248278821868

3100590_20201_2_0,cjbien4icz,-0.3389319042706014,-131.8415791835661,-12.158820078957888

1612064_20201_2_0,cjdrbp4icz,-0.6912580073519371,-111.82403783823094,-52.38892262102833

1110372_20201_2_0,cje36o4icz,-9.103093333808959,-166.47647996497335,8.379392111937747

4481500_20201_2_0,cjkp6o4icz,-0.8049886245325774,-80.48681023431155,-31.032661735829308

2890939_20201_2_0,cjuzgo4icz,5.148198209044898,-65.05317245043975,-56.29695753276809

4049861_20201_2_0,cjwogo4icz,2.1797064325817246,-101.26770995315817,-36.86849904714008

2628863_20201_2_0,cjyjxo4icz,-3.625669495944009,-120.34932578727839,-12.242270711578357

2349771_20201_2_0,ck1mdp4icz,6.632514393771169,-117.29622418713046,-73.6220450987681

1833588_20201_2_0,ck37qo4icz,-3.7408542775936398,-139.61937591841027,-12.190578277786074

2780554_20201_2_0,ck3w5o4icz,2.7824542535030643,-142.00220213927162,-48.23328684912482

5372069_20201_2_0,ck4ixn4icz,1.0317154292163206,-72.97943730105138,-48.441715684934024

5835979_20201_2_0,ck9pfn4icz,-1.7687750917955656,-96.65119851235269,-25.55927284044651

4226332_20201_2_0,ckbbqo4icz,0.3823662138929652,-98.14820577367283,-36.76393914727089

4359082_20201_2_0,ckf9zo4icz,0.8711040883760516,-98.56965459988194,-44.69968630120873

4755665_20201_2_0,ckmbrn4icz,-2.734636846755692,-117.95425393367034,-18.00059995280614

1534574_20201_2_0,ckrjqn4icz,-2.902581041028853,-77.10324925808536,-6.424544629938083

5960041_20201_2_0,cksxyo4icz,4.719981460664472,-79.18521835058388,-73.72843730791352

1208392_20201_2_0,ckwxno4icz,-0.43534522459043284,-112.63391633680092,-31.134937664584086

5661018_20201_2_0,cl38cp4icz,-1.6836239942882558,-82.25987888938789,-37.24445916177086

4600188_20201_2_0,cl49so4icz,-8.177746746713948,-105.89184129537816,20.931791342043894

1684826_20201_2_0,clddwn4icz,0.12653615401930762,-86.04088951100587,-28.885777537196418

2978179_20201_2_0,cldtip4icz,0.6563163882159148,-129.14990199499465,-59.218899047023314

3966958_20201_2_0,clhbgo4icz,-1.642392478242407,-79.15898528786244,-32.24981126478659

4939369_20201_2_0,cliyon4icz,2.5159375660179895,-124.11524376154804,-59.561814097042046

5268696_20201_2_0,clnmgo4icz,-0.4867842525140182,-119.8214096742081,-21.383526446814813

2829722_20201_2_0,cltesn4icz,-1.3847313083267712,-90.19486486784297,-30.959371043687796

3144370_20201_2_0,clv2xn4icz,-0.3684655459553533,-130.2850214294323,-41.85888623767548

5942984_20201_2_0,clwhdp4icz,1.9598087088353384,-71.60077596881473,-33.2804512008251

1799705_20201_2_0,cm1fcn4icz,0.19202194038126277,-104.45324735463419,-29.452760841896932

1237025_20201_2_0,cm1xip4icz,-3.8201196386241225,-153.46028458390654,-7.948491022607286

3965448_20201_2_0,cm4gxn4icz,-3.0801021035702294,-111.57983645841404,-25.83713668715393

5298582_20201_2_0,cmcu3p4icz,1.553321504693314,-55.124428550568155,-45.79535693139684

2311919_20201_2_0,cmezen4icz,-5.922135869904006,-125.22415416544965,-17.045284888867954

4339203_20201_2_0,cmfa4o4icz,-3.100279055968552,-95.829033109079,-31.48121638880562

2968857_20201_2_0,cmk3fp4icz,-0.3135170465900301,-127.77250493431407,-47.52001573065826

2536328_20201_2_0,cmp1oo4icz,25.275003832309892,53.01315270273301,-215.39555174511543

3099627_20201_2_0,cmpvpn4icz,-0.19190220294205085,-85.59833528152771,-34.549877815016146

3805171_20201_2_0,cmq0bn4icz,-2.591253184695434,-98.64141651952514,-33.88627789630078

4598066_20201_2_0,cmq7ap4icz,-0.5630370894613881,-112.74334074499316,-28.74966038285187

5042810_20201_2_0,cmurho4icz,-0.5352678972420227,-103.50617736358814,-23.858738856742107

3561849_20201_2_0,cmz8ln4icz,-0.2747942153696101,-114.87312217727057,-50.1854003234306

1773435_20201_2_0,cn0ooo4icz,3.3170786846800393,-87.75141749172457,-53.150770545118434

4855568_20201_2_0,cn5p0p4icz,-0.1972764717682009,-104.98878153180962,-53.2293432597789

4323562_20201_2_0,cn67qo4icz,1.1778355103118947,-104.97368152907194,-29.168977580865814

5444635_20201_2_0,ubg2jp4icz,1.422566602234272,-106.01313128264547,-30.70767740832501

2211463_20201_2_0,cn851o4icz,-2.195560364428038,-80.56118906980319,-24.059277069145878

2902580_20201_2_0,cn9g6o4icz,0.10417802694481244,-67.1383131822032,-33.84453400538108

5876357_20201_2_0,cne8bp4icz,-2.0014756520581263,-108.85615000441231,-20.95284748244815

2415795_20201_2_0,cnhuyo4icz,-1.528196555404918,-92.54301036899687,-35.95143218715806

1732258_20201_2_0,cnjpsn4icz,-0.07479105500111285,-106.14156092252634,-25.993874660027103

1056292_20201_2_0,cno6yo4icz,3.0860826630787335,-62.41953736404332,-48.766665985431345

3942999_20201_2_0,cnqa6n4icz,3.334268080041714,-103.02276963107823,-40.89793511621467

2899302_20201_2_0,cnrj2p4icz,-1.928657216000245,-129.40560875551645,-28.423149070910384

4410514_20201_2_0,cntsvn4icz,-2.537620681696408,-86.82357231321717,-32.638904991551655

4572969_20201_2_0,co17zo4icz,1.1183678503719239,-92.22308903720435,-34.7849515884721

3980436_20201_2_0,cobb7o4icz,-0.9477101578892672,-104.92041766226356,-26.663559479720135

4876679_20201_2_0,cobibp4icz,9.066499129342652,-82.9299258054628,-88.31706441964282

2249898_20201_2_0,codm5n4icz,-2.9642636866689775,-127.00176955114335,-10.742425139461218

1844213_20201_2_0,cogzfp4icz,-2.5604263578055924,-73.78986390033143,-45.72429727408377

3981322_20201_2_0,cohd5p4icz,0.18247292588658848,-84.1135862223804,-39.04318616672573

2106933_20201_2_0,cok4to4icz,-1.8597971196432033,-65.5973674205971,-38.24671408486557

1011451_20201_2_0,cood9o4icz,0.7758736720265796,-88.33575918028447,-30.679820716290536

2142252_20201_2_0,coth0o4icz,-0.7661647571319307,-96.42760742709936,-38.91172711977836

1195043_20201_2_0,cotx5o4icz,1.3105161031567754,-89.37745778366553,-34.486044510686256

2021434_20201_2_0,coulon4icz,0.5892848255401945,-73.69882488781863,-45.335993374636516

5768058_20201_2_0,coywsn4icz,-0.24781365874859446,-70.73964909138388,-49.08810521191964

3261190_20201_2_0,cp047o4icz,-3.5850938225803937,-86.6685448125782,-19.187976470620214

4109757_20201_2_0,cp2zln4icz,5.615297566028097,-69.54111735749595,-67.77000863026741

4216848_20201_2_0,cp7bcp4icz,-5.008335067373554,-151.94998411120622,-5.845444969809662

1451844_20201_2_0,cp8rxo4icz,2.1043646058999257,-72.05568094508578,-61.82109013365036

1066259_20201_2_0,cpadyo4icz,3.670822104668104,-69.65618439310808,-53.019903578353706

4307712_20201_2_0,cpehdn4icz,0.7432254013916608,-103.80963672322179,-55.46982260657603

5407037_20201_2_0,cpejip4icz,-9.829325192740704,-71.98487684583495,10.92451548438764

5685942_20201_2_0,cpfeip4icz,10.986406979465519,-55.470431229763875,-95.10674073374165

1184307_20201_2_0,cpjr8p4icz,1.6884235736446689,-85.86221788479992,-32.81189189027232

1862660_20201_2_0,cpjudn4icz,0.7230466821518465,-113.87876672418369,-35.266444480259665

3313227_20201_2_0,cpn5fp4icz,4.417295726839046,-116.31813457217606,-85.18620872011866

1039544_20201_2_0,xrmvun4icz,-0.7998381389631058,-80.81755060718669,-31.835853192096124

3807954_20201_2_0,cprx5o4icz,0.47421351996248773,-88.16251947677833,-53.35870440193395

5774071_20201_2_0,cps0to4icz,0.7870058048999052,-93.62920934851846,-52.844208930509964

2101945_20201_2_0,cpv0io4icz,2.3932517537416715,-80.68353865434725,-28.494571252261082

4885111_20201_2_0,cpwlfp4icz,-1.9493813603176993,-20.428480789034154,-12.688200415403614

1734219_20201_2_0,cq0sso4icz,0.39653937569481373,-83.39769720816571,-31.047065627740267

5175182_20201_2_0,cq5lwo4icz,1.8034701450449857,-71.87814266999385,-35.700057637862

3494787_20201_2_0,cq86eo4icz,-3.4781645739013585,-74.05696247967222,-12.61313016575366

2279171_20201_2_0,cq936p4icz,-2.4899252871951476,-98.7723713285773,-27.928308453190084

3201907_20201_2_0,cq9gho4icz,-0.33349384125364345,-96.3250123658749,-39.413079603810644

3929499_20201_2_0,cqlg4p4icz,-5.983514104387855,-188.71786515994802,-16.843322787294255

2045098_20201_2_0,cqqbap4icz,1.780595228811694,-29.62134112169599,-51.50334668419728

4187258_20201_2_0,cqqhyo4icz,-1.4818703375370865,-52.91408117661683,-25.0441822132982

3482090_20201_2_0,cqsr8p4icz,0.2746193061836188,-117.88103065887708,-37.44087449891538

4531450_20201_2_0,cqxkco4icz,-4.387562599046832,-96.10425928083203,-4.6351751020354754

1730591_20201_2_0,cr0sao4icz,1.9853696512463503,-60.24188915808162,-41.570321693731984

5181630_20201_2_0,cr438o4icz,-0.0918088119704706,-111.28362043010836,-43.75040328179439

1308966_20201_2_0,cr75ho4icz,1.9216818723930738,-104.08196856539985,-47.265918633885136

4529800_20201_2_0,cr8k8p4icz,-0.7405107768957601,-94.80013329472754,-23.68781808495362

4077671_20201_2_0,cr8z1p4icz,-2.957106679511692,-113.82338400785923,-29.30443618113621

5636348_20201_2_0,cr9l0o4icz,-9.835385164840245,-147.41914658202296,9.122642192911371

5625924_20201_2_0,crbcfn4icz,-11.007150115581567,-91.12772771729283,33.11431876199248

3331097_20201_2_0,crdmhp4icz,-5.5712407992761275,-77.33080045039472,4.680575247373277

5131685_20201_2_0,crqveo4icz,0.4993094318965021,-61.86329313955807,-36.99032163104094

3293384_20201_2_0,cruoyo4icz,0.14940564077995766,-99.93373578647234,-48.954241841378206

1178446_20201_2_0,cs0ulo4icz,0.2703432847726252,-51.22678768009109,-34.218133615757026

4402798_20201_2_0,cs178n4icz,-2.7852920770984864,-98.62236458104209,-16.0944146343885

3669462_20201_2_0,cs33ko4icz,-1.0245781943164334,-114.23016093889325,-32.100312364575885

5226283_20201_2_0,cs3ifo4icz,1.6069984369174841,-67.21233581787095,-44.73630113804006

5608274_20201_2_0,cs3rro4icz,0.07213638075404566,-92.70037191489257,-41.009584440983474

5530070_20201_2_0,cs72jp4icz,-1.6380028738189663,-115.83609331852404,-19.780316643129396

1209712_20201_2_0,cs90en4icz,-0.3629039339448916,-102.93169148910866,-27.729525447034092

4677698_20201_2_0,csfcro4icz,2.8592728692783402,-113.9286956678016,-50.583934466602244

2158676_20201_2_0,csgcdo4icz,-1.7994398677345522,-137.3845998700383,-21.19302636843514

4632738_20201_2_0,csgzun4icz,-0.055090481488510666,-72.21713415430105,-46.787751468824695

2036669_20201_2_0,csh1to4icz,-2.8353938198405024,-126.31124725736083,-40.464659946948615

5551406_20201_2_0,csh2uo4icz,-0.9996639999352789,-102.61877128107423,-22.362004754958747

1404980_20201_2_0,cshh5p4icz,-1.775861987483172,-100.5151467618042,-31.34084180918697

4104941_20201_2_0,csmo7o4icz,-2.8810380713060946,-89.83576954821999,-22.98881345934568

5346156_20201_2_0,csqz5o4icz,-3.6362946842430524,-139.05122194300495,-14.206216029446537

4158927_20201_2_0,cst64p4icz,0.43867314141565217,-110.04043849330407,-34.73059211731878

5221374_20201_2_0,csydbp4icz,-0.8501418984451059,-116.07499911391218,-25.26373124680576

3831226_20201_2_0,cszbrn4icz,0.19597254591370358,-125.3185034076667,-38.73594922703171

2298823_20201_2_0,cszpln4icz,-1.2089832573125407,-110.94587053764079,-27.68032141244447

3123825_20201_2_0,cszs4p4icz,3.9270351040896325,-89.2266220094753,-45.20238670945086

4772899_20201_2_0,ct07oo4icz,0.8142384409471987,-99.11200075847893,-43.094332195237726

4552982_20201_2_0,ct2h8p4icz,0.19708954093162775,-74.15661939810815,-39.40098121634654

3412113_20201_2_0,ct2v4p4icz,-1.1556020783089775,-73.95410559326223,-42.26784614876078

2482327_20201_2_0,ct7qen4icz,-0.24504902305102563,-88.05507067727635,-37.405625503271665

1293551_20201_2_0,ct9hgn4icz,1.258371506844833,-120.77076185534631,-49.83593784914392

2371711_20201_2_0,ctao9n4icz,-0.5210229129809513,-77.45232643190482,-38.889967354993544

4690079_20201_2_0,ctc76p4icz,-2.9174476329858883,-126.19419844659481,-21.554368644053483

4600001_20201_2_0,ctcfyn4icz,3.5389450542684497,-81.13307820734082,-82.17672631545324

1088875_20201_2_0,ctnl8o4icz,-3.3490967268569873,-128.92477379047978,0.20858019366215785

4379582_20201_2_0,ctrp8p4icz,2.411573093507837,-104.05191776527172,-40.122323829493666

3659441_20201_2_0,ctzkyo4icz,-2.4399922632356916,-107.65737153049176,-23.799378311489207

5884291_20201_2_0,cu2hjp4icz,0.32774120502495796,-76.24658279760658,-41.14430976024295

1758583_20201_2_0,cu4pon4icz,-2.5770390701506907,-92.76605213318382,-26.756508336942517

1658602_20201_2_0,cu7oqo4icz,-3.438189141493147,-104.8178923136646,-5.078351480157892

3116272_20201_2_0,cue87p4icz,-4.0984871570286625,-78.60685217203033,-4.972407413924401

1827462_20201_2_0,cuezeo4icz,-0.7471293061357931,-58.91554355524633,-40.248649820710526

4303313_20201_2_0,cuhzco4icz,-0.1962535942527246,-104.84454635334205,-14.722161545197906

1360002_20201_2_0,culcjn4icz,-0.8911895985920454,-75.87569097026949,-28.5324227979621

4206761_20201_2_0,cupyvo4icz,-1.3944538296073792,-90.7547986513215,-47.213990496726225

1449350_20201_2_0,cus9ro4icz,0.49559028387144155,-80.08001110306918,-30.021133351938772

3013506_20201_2_0,cutf8n4icz,-2.5843943356526684,-153.0478245480979,-17.912204212219365

5850807_20201_2_0,cuudep4icz,-8.335241959379523,-142.922038541922,16.22981734747833

5999775_20201_2_0,cux7gp4icz,0.6293566468879189,-95.47909288867424,-50.62575842415254

4732797_20201_2_0,cuysvo4icz,0.036797484644962415,-114.7128135760262,-33.7381022253676

3966932_20201_2_0,cv6xun4icz,-0.4612559862686827,-103.32954796364501,-42.99350580819919

1987352_20201_2_0,a1hz9n4icz,0.5194921862787366,-131.96429746028983,-43.71529289569436

/users/rhydian/anaconda3/envs/torch_env/lib/python3.7/site-packages/torch/cuda/__init__.py:52: UserWarning: CUDA initialization: Found no NVIDIA driver on your system. Please check that you have an NVIDIA GPU and installed a driver from http://www.nvidia.com/Download/index.aspx (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729006826/work/c10/cuda/CUDAFunctions.cpp:100.)
  return torch._C._cuda_getDeviceCount() > 0
  0%|          | 0/102 [00:00<?, ?it/s]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 1/102 [00:05<08:49,  5.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 2/102 [00:08<07:36,  4.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 3/102 [00:11<06:45,  4.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/102 [00:14<06:12,  3.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▍         | 5/102 [00:17<05:47,  3.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 6/102 [00:20<05:29,  3.44s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 7/102 [00:23<05:19,  3.36s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 8/102 [00:26<05:11,  3.31s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 9/102 [00:30<05:04,  3.28s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|▉         | 10/102 [00:32<04:50,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 11/102 [00:36<04:47,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 12/102 [00:39<04:41,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 13/102 [00:42<04:32,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▎        | 14/102 [00:44<04:22,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▍        | 15/102 [00:47<04:17,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 16/102 [00:50<04:18,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 17/102 [00:54<04:34,  3.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 18/102 [00:57<04:20,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▊        | 19/102 [01:00<04:15,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|█▉        | 20/102 [01:03<04:17,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 21/102 [01:07<04:19,  3.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 22/102 [01:10<04:12,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 23/102 [01:12<04:01,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▎       | 24/102 [01:15<03:53,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▍       | 25/102 [01:18<03:52,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▌       | 26/102 [01:21<03:47,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▋       | 27/102 [01:24<03:42,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 28/102 [01:27<03:37,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 29/102 [01:30<03:37,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 30/102 [01:33<03:36,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|███       | 31/102 [01:36<03:35,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███▏      | 32/102 [01:40<03:46,  3.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 33/102 [01:43<03:34,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 34/102 [02:00<08:09,  7.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 35/102 [02:03<06:38,  5.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▌      | 36/102 [02:06<05:35,  5.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▋      | 37/102 [02:09<04:50,  4.48s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 38/102 [02:12<04:21,  4.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 39/102 [02:15<03:57,  3.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 40/102 [02:18<03:37,  3.50s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|████      | 41/102 [02:21<03:27,  3.40s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 42/102 [02:24<03:19,  3.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 43/102 [02:31<04:14,  4.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 44/102 [02:34<03:46,  3.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 45/102 [02:47<06:18,  6.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▌     | 46/102 [02:50<05:13,  5.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 47/102 [02:54<04:38,  5.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 48/102 [03:07<06:42,  7.46s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 49/102 [03:10<05:27,  6.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 50/102 [03:13<04:31,  5.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 51/102 [03:17<04:10,  4.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 52/102 [03:20<03:38,  4.38s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 53/102 [03:23<03:07,  3.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 54/102 [03:26<02:54,  3.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 55/102 [03:29<02:40,  3.42s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▍    | 56/102 [03:32<02:32,  3.31s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 57/102 [03:35<02:23,  3.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 58/102 [03:48<04:26,  6.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 59/102 [03:50<03:38,  5.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 60/102 [03:53<03:04,  4.40s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|█████▉    | 61/102 [03:56<02:40,  3.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 62/102 [03:59<02:26,  3.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 63/102 [04:13<04:20,  6.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 64/102 [04:16<03:29,  5.52s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▎   | 65/102 [04:19<02:56,  4.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▍   | 66/102 [04:22<02:32,  4.24s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 67/102 [04:25<02:15,  3.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 68/102 [04:28<02:01,  3.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 69/102 [04:31<01:54,  3.46s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▊   | 70/102 [04:34<01:47,  3.35s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|██████▉   | 71/102 [04:37<01:38,  3.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 72/102 [04:40<01:32,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 73/102 [04:42<01:27,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 74/102 [04:46<01:28,  3.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▎  | 75/102 [04:49<01:24,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▍  | 76/102 [04:52<01:19,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▌  | 77/102 [04:55<01:15,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▋  | 78/102 [04:58<01:16,  3.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 79/102 [05:01<01:11,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 80/102 [05:04<01:07,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 81/102 [05:07<01:04,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 82/102 [05:11<01:05,  3.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████▏ | 83/102 [05:14<01:02,  3.27s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 84/102 [05:17<00:56,  3.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 85/102 [05:20<00:51,  3.04s/it] 84%|████████▍ | 86/102 [05:23<00:48,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▌ | 87/102 [05:27<00:49,  3.28s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▋ | 88/102 [05:30<00:43,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 89/102 [05:32<00:39,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 90/102 [05:36<00:39,  3.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 91/102 [05:40<00:36,  3.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 92/102 [05:43<00:32,  3.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 93/102 [05:46<00:30,  3.35s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 94/102 [05:50<00:26,  3.29s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 95/102 [05:52<00:22,  3.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 96/102 [05:55<00:18,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▌| 97/102 [05:58<00:15,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 98/102 [06:03<00:14,  3.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 99/102 [06:06<00:10,  3.51s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 100/102 [06:10<00:06,  3.40s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 101/102 [06:13<00:03,  3.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|██████████| 102/102 [06:18<00:00,  3.82s/it]100%|██████████| 102/102 [06:18<00:00,  3.71s/it]
Trying to load from /users/rhydian/self-supervised-project/model_weights/SSECEncodersBothBoth
==> Resuming model trained for 106 epochs...
Trying to load from ../model_weights/angle_regressor4
==> Resuming model trained for 7 epochs...
3994312_20201_2_0,axpogo4icz,-1.3100400095633091,-98.64648965000825,-12.907766132001413

2078836_20201_2_0,aypr8o4icz,-1.046061813707082,-121.33593133389562,-35.283926111146656

5978896_20201_2_0,az52un4icz,9.649999829458695,-28.814766915528196,-76.47388130700142

2392641_20201_2_0,b23dwn4icz,-12.252682010561486,-164.48558341489303,46.14343882264049

4894250_20201_2_0,b26s7n4icz,-0.6270573265258738,-122.04452814860036,-27.196695433209285

4563696_20201_2_0,b2l48n4icz,0.04973877147908569,-73.87821988388316,-31.159032833731374

5440132_20201_2_0,b2o42o4icz,-1.5630125606169258,-105.27589629330956,-43.12858076956947

1362431_20201_2_0,b2y46p4icz,-1.2544358159010245,-116.35217698812062,-32.19350965855456

1045712_20201_2_0,b41cpo4icz,1.5082275736289568,-87.19306090656625,-58.36529017883977

4898059_20201_2_0,b42dwn4icz,-0.9041073623663615,-82.36415350295701,-32.17060455118687

1648360_20201_2_0,b46m3o4icz,-0.15279241383766576,-108.30821378992621,-52.81927190428735

4933715_20201_2_0,b5jlmo4icz,0.46509303815686365,-87.1205869664183,-45.20623825624881

4496116_20201_2_0,b76lep4icz,-0.7945588049763572,-69.29864764108146,-29.6631217580142

5361297_20201_2_0,b7cuko4icz,4.17744620428851,-66.34220618203653,-47.48448151312691

2330185_20201_2_0,b7km9n4icz,0.3100509221290289,-91.52169772047782,-38.500628563899355

3217065_20201_2_0,b7kpto4icz,2.127567002928282,-94.66465059871524,-67.35741659141844

5748392_20201_2_0,b7sxyn4icz,-0.29214702695303063,-116.07715407057714,-40.80405864841421

3230123_20201_2_0,b90qco4icz,1.7746374252456425,-95.88371401891783,-37.94943681028607

5432830_20201_2_0,b9fcon4icz,4.059183414423708,-46.29351190237077,-47.077483621570366

4934234_20201_2_0,b9olcn4icz,0.20172607000080278,-102.18774725430734,-27.886712347000085

5748995_20201_2_0,bb40ap4icz,2.4268199999261117,-100.01215614436953,-58.77425539909636

4902023_20201_2_0,bbt57o4icz,-0.20326115641258471,-87.11526943191214,-37.0800058417273

5830946_20201_2_0,bcctjo4icz,0.9333032466698119,-77.51118183891731,-33.304007490680846

5457413_20201_2_0,bd00fp4icz,0.9945946027090572,-77.81197373747275,-46.67811263762614

6009753_20201_2_0,bd0ngo4icz,0.8058832456291875,-109.2749684946339,-62.15252525507779

2616814_20201_2_0,bfsjon4icz,-0.11364199897011996,-100.05507855957822,-11.221041114247399

2285161_20201_2_0,bgbftn4icz,0.8261719135353052,-79.97201570518808,-38.43518035348423

5073986_20201_2_0,bgc1vo4icz,0.2997097620543624,-127.4733843420072,-17.121859628610807

4967290_20201_2_0,bgj97o4icz,0.31215908787032376,-52.8033152200249,-43.748103642598295

5534551_20201_2_0,bgk7no4icz,0.9943283170677435,-89.23979872681156,-42.324574622488996

5066044_20201_2_0,bgovwo4icz,-11.367340138714008,-89.23540643108845,9.602421657587755

2122519_20201_2_0,bh5kjn4icz,-1.5030044426752618,-107.07447235251993,-24.869955029467164

2727374_20201_2_0,bi09dp4icz,3.492997684737984,-102.78942031502001,-45.67072842501959

5793060_20201_2_0,ol8qap4icz,1.042321156553603,-78.63011367290125,-35.65212445706922

4489621_20201_2_0,bilafp4icz,-0.3463583939187424,-79.40283592105791,-44.53785488912665

1746641_20201_2_0,bip9jp4icz,5.226907503783038,-96.13038522440473,-52.3921084401029

4992588_20201_2_0,bjeuro4icz,-0.3069423210224102,-68.57124238003877,-44.74883497811187

4219682_20201_2_0,bjibgn4icz,0.07897071915606237,-166.6910026560413,-35.95284551380041

5336439_20201_2_0,bjnpcn4icz,-2.2978826458880186,-118.31537124821642,-13.271934293535978

2876782_20201_2_0,bkah5p4icz,0.6370958356493538,-104.15957118239317,-30.209563629171512

2378361_20201_2_0,blgbjo4icz,-0.9534115644281157,-77.51595274574612,-10.698354650885605

1768572_20201_2_0,blwjxo4icz,2.12528744701706,-41.70494754457428,-57.114010292136086

3386989_20201_2_0,bmg2tn4icz,-1.3364472397975227,-76.31438891827878,-50.87014338526208

6008726_20201_2_0,bmp8xo4icz,73.66754539748227,-6.079845721944793,-197.18617950162985

5702003_20201_2_0,bnq16p4icz,2.908086024411564,-81.52903145101561,-39.64402865530323

3985226_20201_2_0,boffep4icz,-0.17736158834519158,-79.85832435319662,-36.54926216032507

5762340_20201_2_0,bpcz9n4icz,1.8371259455413635,-73.06292497696384,-40.904651628641275

4656138_20201_2_0,bpe27p4icz,10.94978230793382,-39.831580683399636,-113.13388890354082

4717856_20201_2_0,bpptqo4icz,4.777768170774181,-61.81206082817036,-55.49958601630652

3804949_20201_2_0,bpxnap4icz,0.3162672347033693,-55.443055284072074,-33.588892100630545

5515324_20201_2_0,r5z33o4icz,0.4864713093079193,-98.84121716523893,-35.11011924544259

2572804_20201_2_0,brsbtn4icz,-4.459269088187915,-79.07493774993,-29.569191434807664

4395679_20201_2_0,bruhqn4icz,-0.4125617792669742,-86.86670813668763,-34.90590436531066

5674740_20201_2_0,brwc6p4icz,4.437633764849456,-105.46068929198742,-60.80737400893523

6024389_20201_2_0,brzcun4icz,-0.8601946242564719,-121.51901761823461,-19.620099355206122

2183582_20201_2_0,btky0p4icz,-0.001653645927839684,-127.17863489947655,-24.120235287977266

1841954_20201_2_0,bu49xo4icz,3.100225649470483,-97.91778942729695,-40.621177921272675

2200057_20201_2_0,bu4c9p4icz,-5.0634058207798285,-122.05028468497275,-16.834722171769684

1243820_20201_2_0,buwy6o4icz,4.188151009632784,-105.22643458393549,-34.09441444474338

4292387_20201_2_0,bv5qgn4icz,0.00408090266132577,-97.83082348993722,-35.61230218818014

5887474_20201_2_0,bv6cgo4icz,-1.6428233876786673,-137.2430076145567,-28.952969315600342

5256864_20201_2_0,bxjf9o4icz,0.8387509230013617,-92.32896254227879,-26.3931905261623

1441689_20201_2_0,bzmv8p4icz,-6.091686431906267,-69.57002609738822,8.56196902391082

2614839_20201_2_0,bzo18p4icz,3.897713069894591,-118.3107925367039,-48.63154057080004

2054483_20201_2_0,c06zjn4icz,-4.3078316486884,-90.79505754335241,-24.348404064740393

4812872_20201_2_0,c0mnqo4icz,-4.432698411047791,-97.22976458057201,-14.110890434825478

1165364_20201_2_0,c13kfn4icz,-1.07820634975385,-113.84092761855806,-35.230344339635536

3203100_20201_2_0,c1dfwn4icz,-1.0024837267840703,-107.2401204406464,-29.550072038896417

3862076_20201_2_0,c1yvln4icz,-3.0359848901366973,-135.4623890713656,-19.07974646100817

3460875_20201_2_0,c2zyco4icz,-0.3818802607307698,-80.51747648748588,-33.72620022506618

1688194_20201_2_0,c36c7p4icz,-1.7318073524618398,-104.86070016083116,-36.89820568503296

5223237_20201_2_0,c3alvn4icz,1.8088816730621722,-80.9107832683842,-29.651875099728784

1724412_20201_2_0,c5as9o4icz,1.5718962550521527,-96.38234555544344,-41.77567715685548

2220867_20201_2_0,c67g8n4icz,-0.2600972156445092,-141.83131723534086,-27.834345176566018

2917263_20201_2_0,c6ek3o4icz,1.0721898096610964,-126.67426859944726,-41.42713839927262

3181141_20201_2_0,c7rmnn4icz,-0.17776747394072434,-101.47525438237469,-35.78526720309175

4261614_20201_2_0,c81b6o4icz,2.2302633022931633,-113.00046016738014,-42.9934063867461

1408399_20201_2_0,fc4mzo4icz,2.9205564340344075,-67.04798448310723,-47.44433088475816

4152120_20201_2_0,c92lwo4icz,-16.07209491323197,-159.66830147592165,53.38043395294274

2728106_20201_2_0,c9hkno4icz,0.5965161341196619,-54.352769575075854,-47.12391436773649

5979339_20201_2_0,cat53p4icz,-3.601331476366153,-137.91943137277448,10.019250002816932

1355139_20201_2_0,cbaxco4icz,0.4798989391519133,-93.54562349363005,-23.70064426699463

2493251_20201_2_0,cbznap4icz,0.22865249107475266,-101.46566201712085,-32.057877872794066

1728992_20201_2_0,cc247n4icz,2.9087050593280885,-146.77114591148091,-67.67273172168122

5503654_20201_2_0,ccu2bn4icz,-0.7697648315130551,-102.57246050565865,-37.71381420711455

4539601_20201_2_0,cdi2kn4icz,-171.18166869024066,523.4945124712204,10.68889346453858

3529072_20201_2_0,cdiq0o4icz,-1.2249049222833488,-113.99266412833902,-21.772520536688447

4351567_20201_2_0,ce6oeo4icz,0.19186762500796892,-67.26277691270639,-26.91013990930884

5655371_20201_2_0,cefrqo4icz,7.451802671543101,-54.68802518671819,-73.6807996297167

1925828_20201_2_0,cfjfto4icz,0.9963681337378549,-70.15672063368149,-51.44455004575214

5744299_20201_2_0,cg2kip4icz,-0.8560563756912518,-78.89376816419727,-22.158687338411013

1432104_20201_2_0,cgdnbo4icz,-0.23139551325136035,-94.71954649017025,-22.826170692125913

5367074_20201_2_0,cgxmro4icz,-3.3748426269504654,-121.57801365475942,-39.32512427977534

4383210_20201_2_0,chluwo4icz,0.6611196537696936,-72.8267575726378,-43.645883384302735

3027956_20201_2_0,ci12lo4icz,-0.632375234379791,-42.1845322432514,-40.38150363648616

1136419_20201_2_0,cir6vn4icz,0.4029636606559667,-129.1263307154523,-33.6336486301597

6022397_20201_2_0,cj21yo4icz,2.016829954827285,-104.3778093776765,-56.818509907463124

4560187_20201_2_0,clhasn4icz,-0.9842838939460107,-88.18606382358442,-33.757554636088145

2413473_20201_2_0,clhkcn4icz,-5.19242906904718,-93.75255204267609,-8.199074284328162

5687988_20201_2_0,clp0ko4icz,0.7805894536454397,-91.73005107298744,-36.71375968480473

4555440_20201_2_0,cma6yo4icz,-1.0054027364269131,-120.96874652183152,-35.117176659281625

4991517_20201_2_0,oyluvn4icz,-0.8865077969339716,-119.35606213373143,-28.971236292702613

/users/rhydian/anaconda3/envs/torch_env/lib/python3.7/site-packages/torch/cuda/__init__.py:52: UserWarning: CUDA initialization: Found no NVIDIA driver on your system. Please check that you have an NVIDIA GPU and installed a driver from http://www.nvidia.com/Download/index.aspx (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729006826/work/c10/cuda/CUDAFunctions.cpp:100.)
  return torch._C._cuda_getDeviceCount() > 0
  0%|          | 0/101 [00:00<?, ?it/s]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 1/101 [00:03<05:11,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 2/101 [00:06<05:16,  3.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 3/101 [00:09<05:04,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/101 [00:12<05:02,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▍         | 5/101 [00:15<04:50,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 6/101 [00:18<04:47,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 7/101 [00:20<04:31,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 8/101 [00:24<04:33,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 9/101 [00:27<04:36,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|▉         | 10/101 [00:29<04:27,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 11/101 [00:33<04:31,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 12/101 [00:36<04:27,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 13/101 [00:39<04:23,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 14/101 [00:42<04:21,  3.01s/it] 15%|█▍        | 15/101 [00:45<04:17,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 16/101 [00:48<04:19,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 17/101 [00:51<04:13,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 18/101 [00:54<04:05,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 19/101 [00:56<04:00,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|█▉        | 20/101 [00:59<03:57,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 21/101 [01:02<03:53,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 22/101 [01:05<03:47,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 23/101 [01:08<03:46,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 24/101 [01:11<03:43,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▍       | 25/101 [01:14<03:44,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 26/101 [01:17<03:45,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 27/101 [01:20<03:44,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 28/101 [01:23<03:39,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▊       | 29/101 [01:26<03:37,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|██▉       | 30/101 [01:29<03:33,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 31/101 [01:32<03:26,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 32/101 [01:35<03:29,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 33/101 [01:38<03:24,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▎      | 34/101 [01:41<03:20,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▍      | 35/101 [01:44<03:13,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 36/101 [01:47<03:11,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 37/101 [01:50<03:08,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 38/101 [01:53<03:08,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▊      | 39/101 [01:56<03:08,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|███▉      | 40/101 [02:02<03:58,  3.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 41/101 [02:05<03:39,  3.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 42/101 [02:08<03:22,  3.44s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 43/101 [02:11<03:11,  3.30s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▎     | 44/101 [02:14<03:04,  3.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▍     | 45/101 [02:18<03:10,  3.40s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 46/101 [02:25<04:08,  4.52s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 47/101 [02:28<03:37,  4.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 48/101 [02:31<03:18,  3.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▊     | 49/101 [02:34<03:01,  3.48s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|████▉     | 50/101 [02:37<02:50,  3.35s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 51/101 [02:40<02:39,  3.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████▏    | 52/101 [02:44<02:46,  3.39s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 53/101 [02:47<02:47,  3.49s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 54/101 [02:50<02:33,  3.27s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 55/101 [02:53<02:23,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▌    | 56/101 [02:56<02:15,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▋    | 57/101 [02:58<02:10,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 58/101 [03:02<02:12,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 59/101 [03:05<02:10,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 60/101 [03:08<02:03,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|██████    | 61/101 [03:11<01:59,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████▏   | 62/101 [03:14<01:56,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 63/101 [03:17<01:54,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 64/101 [03:20<01:52,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 65/101 [03:23<01:48,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▌   | 66/101 [03:26<01:44,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▋   | 67/101 [03:34<02:31,  4.46s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 68/101 [03:36<02:11,  3.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 69/101 [03:40<01:59,  3.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 70/101 [03:43<01:49,  3.52s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|███████   | 71/101 [03:45<01:38,  3.27s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████▏  | 72/101 [03:48<01:32,  3.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 73/101 [03:54<01:49,  3.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 74/101 [03:57<01:38,  3.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 75/101 [04:00<01:30,  3.49s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▌  | 76/101 [04:03<01:24,  3.40s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 77/101 [04:06<01:19,  3.30s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 78/101 [04:09<01:13,  3.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 79/101 [04:12<01:06,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 80/101 [04:15<01:02,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 81/101 [04:18<01:00,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 82/101 [04:21<00:58,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 83/101 [04:24<00:54,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 84/101 [04:27<00:52,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 85/101 [04:30<00:48,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▌ | 86/101 [04:33<00:44,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 87/101 [04:36<00:41,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 88/101 [04:39<00:40,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 89/101 [04:42<00:37,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 90/101 [04:46<00:34,  3.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 91/101 [04:52<00:40,  4.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 92/101 [04:55<00:33,  3.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 93/101 [04:58<00:28,  3.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 94/101 [05:01<00:24,  3.45s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 95/101 [05:04<00:19,  3.31s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▌| 96/101 [05:07<00:16,  3.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 97/101 [05:10<00:12,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 98/101 [05:13<00:09,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 99/101 [05:16<00:06,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 100/101 [05:19<00:02,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|██████████| 101/101 [05:22<00:00,  3.17s/it]100%|██████████| 101/101 [05:22<00:00,  3.20s/it]
Trying to load from /users/rhydian/self-supervised-project/model_weights/SSECEncodersBothBoth
==> Resuming model trained for 106 epochs...
Trying to load from ../model_weights/angle_regressor4
==> Resuming model trained for 7 epochs...
2230396_20201_2_0,aqjv1o4icz,-2.780446828836978,-97.0769752015917,-31.50825393699691

2153103_20201_2_0,aqoxnn4icz,-2.704445391129303,-100.76727421753756,-21.332595379070696

5861559_20201_2_0,ar6deo4icz,0.04713407639923123,-94.213019158945,-25.388476853430532

4648820_20201_2_0,arcw9p4icz,-0.2598133442594252,-93.77252716951168,-32.86236799306087

3381353_20201_2_0,arrnxn4icz,2.279906683632622,-108.87389641089783,-47.95718753533765

3629698_20201_2_0,asc2pn4icz,-2.5011620515510478,-128.06133484038315,-11.182568932040084

5820907_20201_2_0,at28go4icz,-1.6121474919218568,-82.34062289906853,-16.006216897286734

2608358_20201_2_0,at3aio4icz,-2.7321623335067597,-104.43450389110339,-29.950980537104257

5057018_20201_2_0,atd67o4icz,0.4515648684863116,-72.69358778308273,-43.43719236830188

4077563_20201_2_0,atfgvo4icz,26.955763269004407,37.66244591821766,-198.25310767236513

2921216_20201_2_0,atkwmn4icz,1.215576135625306,-138.74013471304838,-43.66121497876051

3073098_20201_2_0,atotwn4icz,-3.5135830911966033,-87.58842566173533,-36.485539946508425

1960213_20201_2_0,avavmo4icz,1.8847484265175742,-69.87103144716272,-44.57341288400474

2316000_20201_2_0,ax8ctn4icz,0.30927136722562576,-99.5599700328547,-45.59643852888246

5411589_20201_2_0,aynq9n4icz,174.2874929520736,475.9742447943706,-41.2916892647126

1164182_20201_2_0,azb96p4icz,-3.6146076633693887,-101.2322355577634,-8.587410090855613

2263805_20201_2_0,azbzzo4icz,-5.378971684801769,-85.72122091354674,-1.566716643135834

3579321_20201_2_0,azxjxn4icz,0.8184267079415143,-112.92071028866141,-40.97395772614644

4098495_20201_2_0,7u2uco4icz,-1.7922549038817286,-125.31879494005292,-21.97281638056444

3915882_20201_2_0,b0enio4icz,1.742619803071414,-119.63465501705525,-38.26140002434002

1880776_20201_2_0,b0snun4icz,-4.50837827542989,-69.18252407221189,-30.53179735417885

1051842_20201_2_0,b23v8p4icz,-0.6429759789578273,-90.05566163639037,-34.27928472714359

4949571_20201_2_0,b2e7dp4icz,0.09790856295292945,-96.61510977123496,-47.71546255020222

1054487_20201_2_0,b3dq0o4icz,-4.094312758164325,-120.290975393673,-2.482543668524414

1696364_20201_2_0,b6zjqo4icz,-0.4782197815326557,-82.75239347707364,-35.071421954010574

1947293_20201_2_0,b8d85p4icz,-0.4772227944748497,-94.06719034264077,-28.003063952763455

3181628_20201_2_0,b8t6bo4icz,0.11179041919751234,-125.34177726162966,-26.128234406263232

1672427_20201_2_0,b9t5in4icz,-0.26885010490494315,-84.43374924359168,-35.67034773740407

2176369_20201_2_0,bbs4vo4icz,0.4755022000201389,-60.054730924390526,-39.73741097497778

1482728_20201_2_0,bc149o4icz,-32.775256105279844,-110.65376536148256,125.53177371087006

1403732_20201_2_0,bcwnqo4icz,-1.0732231137538857,-95.09530447107807,-40.924637678301025

3487777_20201_2_0,bd2e2p4icz,-2.2157158086794384,-108.53658094504121,-18.212608520478256

2718375_20201_2_0,bdd6no4icz,-2.9852928559756604,-70.87971398844408,-7.048141039035457

4489497_20201_2_0,bdjfko4icz,-22.73256894909195,-156.58401088359722,84.39333456372776

1834057_20201_2_0,bfj84o4icz,2.7293731331853666,-108.5547351539818,-47.39126435901136

1043272_20201_2_0,bgbgzo4icz,-1.596905681570705,-128.67327800001206,-18.094302316238597

4894563_20201_2_0,bgmq7o4icz,-0.27325255491832334,-90.28404734601583,-32.54852656468648

5290651_20201_2_0,bh1hwn4icz,-0.9579797101234869,-92.1195186462192,-27.95090235110044

2699898_20201_2_0,bh7yrn4icz,0.191250808992822,-98.16749424899993,-30.289682768000333

5003666_20201_2_0,bhh33o4icz,0.6997066427800246,-67.90698027385014,-42.37321546081566

3464100_20201_2_0,bi3gon4icz,-1.6570047467688975,-115.44862396687839,-11.043219768449987

3458989_20201_2_0,bj3d1o4icz,0.9748978332088886,-98.18783976655985,-50.74763668749418

2661775_20201_2_0,bk5fpn4icz,0.478290605251502,-88.64981936898448,-40.182007192048175

2393182_20201_2_0,bkbxuo4icz,-0.9806305917912859,-97.96905648899664,-37.17111633708987

3568710_20201_2_0,rrapmo4icz,-1.0813622184033642,-109.35414326233365,-36.51736256940988

3551458_20201_2_0,bkgcbo4icz,0.477483027406537,-71.42067403023759,-36.245610993630436

5595625_20201_2_0,bkt80p4icz,-1.0390311670932926,-103.68351203353362,-31.88139465082513

4213777_20201_2_0,9mmkso4icz,-2.184005525939594,-71.64771752215756,-26.597404654770358

1369716_20201_2_0,bpdbep4icz,-1.182449095902813,-94.80122238577968,-26.042920552900327

4322397_20201_2_0,bsjjyo4icz,0.16612618131451043,-103.88761738809293,-47.048228039781506

5662162_20201_2_0,bta2cp4icz,-1.0286043848928874,-119.05791330038684,-37.13335801757444

4534126_20201_2_0,skr3pn4icz,-0.026276002572682096,-131.99158490262437,-25.439327531955513

2727205_20201_2_0,srq4bo4icz,-0.965649464122932,-84.57430752699932,-36.304820235161486

5275482_20201_2_0,bu32zo4icz,0.08369172919309699,-96.11297963497324,-43.47869931740708

2167519_20201_2_0,buimho4icz,2.731062357580386,-82.78169476588562,-46.37332373734431

2314357_20201_2_0,bvupzo4icz,1.464760761975132,-69.03571142090792,-29.557734726258175

1551033_20201_2_0,bvzlzo4icz,-0.26099546422467423,-119.03174952055946,-18.314952198259064

4402653_20201_2_0,bw0rmo4icz,0.07572409173436671,-107.06112320089417,-17.52821843267857

2392463_20201_2_0,bws5gn4icz,-4.3510374271482855,-128.78175831488647,-19.89955053309501

3532526_20201_2_0,bwuq5p4icz,-0.9086364535467947,-72.69821452003634,-42.39078625518239

3823867_20201_2_0,by5imo4icz,-0.4408636299771738,-107.11106361558595,-47.37330543386034

2941114_20201_2_0,byjdin4icz,19.61585501002884,-57.756598723362146,-133.8076454369415

1339423_20201_2_0,bz3win4icz,-4.677360853187448,-106.05215229397572,-22.43886788494825

1371973_20201_2_0,bzxhdp4icz,1.600309705865969,-101.2619632796717,-52.69556071381925

2101239_20201_2_0,c0516o4icz,-0.5595748758379356,-99.39561473932906,-51.510873458962436

5376201_20201_2_0,c0lsbo4icz,-1.418510854570598,-22.619867607124036,-29.47867969278586

4469443_20201_2_0,c0scsn4icz,-1.4649157657407466,-106.74152317225912,-17.73815232233042

5554193_20201_2_0,c0u3zo4icz,-0.6880207802847695,-105.36308152229552,-39.582811275620614

4785930_20201_2_0,c14qcn4icz,-4.294521368575804,-115.53276148070654,-17.533092308439493

4689651_20201_2_0,c26ryo4icz,-5.292228507263013,-96.20562154398226,0.36489451669515915

4272401_20201_2_0,c2fbpo4icz,0.6485900129331074,-85.64785541374275,-37.07099171033555

3689961_20201_2_0,c54npo4icz,-2.3168457623846415,-125.89686823497402,-32.717605299688984

5290795_20201_2_0,c5uecn4icz,0.32705216706144746,-90.75268830576528,-36.05440855849655

3974734_20201_2_0,c60k8p4icz,-2.8064396277041945,-114.62098099050465,-13.73800512771848

5729318_20201_2_0,c6a07o4icz,-2.027248211517022,-92.5145327284485,-27.654416525230424

2142498_20201_2_0,c87v6p4icz,-1.227122164044392,-101.07045036648222,-44.02856558851266

4282204_20201_2_0,c89gto4icz,1.5500903073371133,-101.7228805023363,-59.10863137599064

2755715_20201_2_0,cbx1fp4icz,0.5176890294833781,-105.53458720304857,-38.45881505881397

4164466_20201_2_0,cc0xsn4icz,0.8204891012586124,-87.66125680335176,-46.752839078357795

5233989_20201_2_0,cckybp4icz,-7.72048999990426,-144.52258772754416,16.466919943032764

2006004_20201_2_0,cde6no4icz,-5.049998191702694,-112.26604862652647,-3.2539923896839866

4197246_20201_2_0,cdi4ko4icz,2.440321036869934,-62.074041561321735,-48.04685866402377

1524253_20201_2_0,cec2lo4icz,2.8131360703953083,-117.29925173195963,-46.68768727432801

5176626_20201_2_0,cg31bo4icz,0.7654378059620536,-77.04179777875774,-48.373131210147676

3882708_20201_2_0,chciun4icz,0.9472687588385715,-87.55100865043511,-32.992431966743254

5047452_20201_2_0,707fwn4icz,-2.31866753032526,-134.85085470954698,-20.030637885643273

4428061_20201_2_0,ci7p9o4icz,2.4261300636586856,-116.54663886905229,-51.9278277986602

5472355_20201_2_0,ci9n7p4icz,2.888286480814059,-98.35313652455812,-50.78452885422361

3110862_20201_2_0,gwwjan4icz,-0.09991119520980704,-110.9560909014113,-45.39431891458703

5620001_20201_2_0,cjv6ip4icz,-12.159098421154733,-103.22373340773078,37.05284118630905

1226160_20201_2_0,ck7qnn4icz,-3.9508315498767628,-78.54830189145721,-16.608589222687897

5098888_20201_2_0,ckeoso4icz,2.9004964193453735,-76.16801274552364,-48.52892545463871

1418126_20201_2_0,cl15fp4icz,0.8726853476057721,-102.25672384495519,-45.24511498018656

2196993_20201_2_0,cmplfp4icz,0.3656819044227025,-83.08881957850599,-42.85298581295585

4325519_20201_2_0,codpdp4icz,-2.6226220341426822,-75.09918795031143,-24.97416766439845

5194196_20201_2_0,couybp4icz,-0.8602967838617598,-130.48233215967147,-49.49579175005215

1645057_20201_2_0,cowrwn4icz,-4.511745446725658,-106.34372044147781,-12.072765316893936

3961860_20201_2_0,cpvb9p4icz,-0.1313417796707024,-127.897854795034,-33.540473199108675

4983082_20201_2_0,cqd89p4icz,-7.302729754410815,-143.34241308401442,13.149258086872692

5046549_20201_2_0,cqokin4icz,-0.4195880113681272,-69.81471002894568,-39.67030519319708

5415305_20201_2_0,tr4wtn4icz,2.3036778013985924,-74.54182634675703,-33.642352470865745

