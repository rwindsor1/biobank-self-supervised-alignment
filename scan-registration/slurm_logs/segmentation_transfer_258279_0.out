0 th decile
0
.05
/users/rhydian/anaconda3/envs/torch_env/lib/python3.7/site-packages/torch/cuda/__init__.py:52: UserWarning: CUDA initialization: Found no NVIDIA driver on your system. Please check that you have an NVIDIA GPU and installed a driver from http://www.nvidia.com/Download/index.aspx (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729006826/work/c10/cuda/CUDAFunctions.cpp:100.)
  return torch._C._cuda_getDeviceCount() > 0
  0%|          | 0/810 [00:00<?, ?it/s]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  0%|          | 1/810 [00:22<5:07:47, 22.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  0%|          | 2/810 [00:25<3:45:37, 16.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  0%|          | 3/810 [00:27<2:48:04, 12.50s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  0%|          | 4/810 [00:30<2:08:25,  9.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 5/810 [00:33<1:40:32,  7.49s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 6/810 [00:35<1:20:00,  5.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 7/810 [00:38<1:06:27,  4.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 8/810 [00:41<57:12,  4.28s/it]  Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 9/810 [00:43<50:18,  3.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 10/810 [00:47<51:00,  3.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|▏         | 11/810 [00:50<45:41,  3.43s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|▏         | 12/810 [00:52<42:54,  3.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 13/810 [00:55<40:39,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 14/810 [01:00<47:22,  3.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 15/810 [01:03<44:50,  3.38s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 16/810 [01:07<48:20,  3.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 17/810 [01:10<43:55,  3.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 18/810 [01:12<40:57,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 19/810 [01:17<46:43,  3.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 20/810 [01:19<43:09,  3.28s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 21/810 [01:22<39:57,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 22/810 [01:26<44:35,  3.40s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 23/810 [01:29<41:21,  3.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 24/810 [01:41<1:18:09,  5.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 25/810 [01:54<1:44:30,  7.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 26/810 [01:57<1:26:12,  6.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 27/810 [02:00<1:10:47,  5.42s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 28/810 [02:03<59:53,  4.59s/it]  Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▎         | 29/810 [02:05<51:49,  3.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▎         | 30/810 [02:08<46:29,  3.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 31/810 [02:11<43:03,  3.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 32/810 [02:13<39:58,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 33/810 [02:16<40:10,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 34/810 [02:19<38:27,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 35/810 [02:22<38:34,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 36/810 [02:24<36:23,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▍         | 37/810 [02:27<35:38,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▍         | 38/810 [02:29<34:28,  2.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▍         | 39/810 [02:32<34:12,  2.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▍         | 40/810 [02:35<34:13,  2.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▌         | 41/810 [02:37<34:09,  2.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▌         | 42/810 [02:40<34:08,  2.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▌         | 43/810 [02:43<34:38,  2.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▌         | 44/810 [02:46<34:17,  2.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 45/810 [02:48<35:01,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 46/810 [02:51<35:11,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 47/810 [02:54<34:26,  2.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 48/810 [02:56<34:03,  2.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 49/810 [02:59<34:44,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 50/810 [03:02<34:04,  2.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▋         | 51/810 [03:04<33:29,  2.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▋         | 52/810 [03:07<33:21,  2.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 53/810 [03:10<33:02,  2.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 54/810 [03:33<1:49:56,  8.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 55/810 [03:35<1:27:00,  6.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 56/810 [03:38<1:11:06,  5.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 57/810 [03:41<59:49,  4.77s/it]  Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 58/810 [03:43<51:21,  4.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 59/810 [03:47<48:26,  3.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 60/810 [03:49<44:44,  3.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 61/810 [03:52<41:07,  3.29s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 62/810 [03:55<37:59,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 63/810 [03:57<36:18,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 64/810 [04:00<36:06,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 65/810 [04:03<35:14,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 66/810 [04:06<35:21,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 67/810 [04:08<34:47,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 68/810 [04:11<33:59,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▊         | 69/810 [04:13<33:02,  2.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▊         | 70/810 [04:16<33:09,  2.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 71/810 [04:21<39:25,  3.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 72/810 [04:23<36:48,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 73/810 [04:26<36:19,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 74/810 [04:29<36:47,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 75/810 [04:32<35:59,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 76/810 [04:34<34:31,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|▉         | 77/810 [04:37<33:24,  2.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|▉         | 78/810 [04:40<33:05,  2.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|▉         | 79/810 [04:42<33:43,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|▉         | 80/810 [04:45<33:02,  2.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|█         | 81/810 [04:48<33:25,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|█         | 82/810 [04:51<33:35,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|█         | 83/810 [04:53<33:12,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|█         | 84/810 [04:56<32:48,  2.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|█         | 85/810 [04:59<33:45,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 86/810 [05:02<34:40,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 87/810 [05:05<34:49,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 88/810 [05:08<35:01,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 89/810 [05:11<35:33,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 90/810 [05:14<35:21,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 91/810 [05:17<34:58,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█▏        | 92/810 [05:20<35:24,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█▏        | 93/810 [05:26<45:11,  3.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 94/810 [05:28<41:42,  3.50s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 95/810 [05:31<39:05,  3.28s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 96/810 [05:34<37:59,  3.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 97/810 [05:37<38:27,  3.24s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 98/810 [05:40<36:58,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 99/810 [05:43<36:35,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 100/810 [05:48<42:55,  3.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 101/810 [05:51<40:40,  3.44s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 102/810 [05:54<38:53,  3.30s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 103/810 [05:57<37:18,  3.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 104/810 [06:00<35:43,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 105/810 [06:03<34:51,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 106/810 [06:06<37:10,  3.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 107/810 [06:09<36:31,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 108/810 [06:12<35:54,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 109/810 [06:15<36:18,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▎        | 110/810 [06:18<34:57,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▎        | 111/810 [06:21<35:31,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 112/810 [06:24<34:34,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 113/810 [06:27<34:05,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 114/810 [06:30<34:00,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 115/810 [06:33<34:12,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 116/810 [06:36<34:14,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 117/810 [06:39<34:04,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▍        | 118/810 [06:42<34:06,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▍        | 119/810 [06:45<34:18,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▍        | 120/810 [06:48<33:46,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▍        | 121/810 [06:51<33:55,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▌        | 122/810 [06:54<34:02,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▌        | 123/810 [06:57<33:56,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▌        | 124/810 [07:06<56:46,  4.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▌        | 125/810 [07:09<49:22,  4.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 126/810 [07:13<47:01,  4.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 127/810 [07:16<43:30,  3.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 128/810 [07:19<42:49,  3.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 129/810 [07:22<39:44,  3.50s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 130/810 [07:25<37:45,  3.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 131/810 [07:28<36:13,  3.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▋        | 132/810 [07:31<35:15,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▋        | 133/810 [07:34<35:01,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 134/810 [07:37<34:01,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 135/810 [07:40<33:49,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 136/810 [07:43<33:33,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 137/810 [07:46<34:51,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 138/810 [07:49<35:06,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 139/810 [07:52<34:00,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 140/810 [07:56<35:43,  3.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 141/810 [07:59<35:38,  3.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 142/810 [08:02<34:13,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 143/810 [08:06<37:16,  3.35s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 144/810 [08:09<36:47,  3.31s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 145/810 [08:13<37:49,  3.41s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 146/810 [08:16<36:03,  3.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 147/810 [08:19<35:02,  3.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 148/810 [08:21<34:01,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 149/810 [08:24<32:56,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▊        | 150/810 [08:27<32:29,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▊        | 151/810 [08:30<31:36,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 152/810 [08:33<32:06,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 153/810 [08:37<34:33,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 154/810 [08:39<33:39,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 155/810 [08:42<32:51,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 156/810 [08:46<36:25,  3.34s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 157/810 [08:49<35:27,  3.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|█▉        | 158/810 [08:52<34:38,  3.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|█▉        | 159/810 [08:55<33:33,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|█▉        | 160/810 [08:58<32:20,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|█▉        | 161/810 [09:01<31:50,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|██        | 162/810 [09:04<31:20,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|██        | 163/810 [09:07<31:17,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|██        | 164/810 [09:10<31:49,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|██        | 165/810 [09:13<33:42,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|██        | 166/810 [09:16<33:16,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 167/810 [09:24<48:12,  4.50s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 168/810 [09:27<42:57,  4.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 169/810 [09:30<38:55,  3.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 170/810 [09:33<37:25,  3.51s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 171/810 [09:36<35:02,  3.29s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 172/810 [09:39<33:55,  3.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██▏       | 173/810 [09:42<32:47,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██▏       | 174/810 [09:45<33:12,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 175/810 [09:48<32:05,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 176/810 [09:50<31:31,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 177/810 [09:54<32:15,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 178/810 [09:57<31:57,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 179/810 [10:00<33:18,  3.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 180/810 [10:08<47:59,  4.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 181/810 [10:11<42:41,  4.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 182/810 [10:14<38:43,  3.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 183/810 [10:17<36:26,  3.49s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 184/810 [10:20<34:41,  3.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 185/810 [10:22<33:03,  3.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 186/810 [10:25<31:48,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 187/810 [10:28<31:12,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 188/810 [10:31<30:54,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 189/810 [10:34<30:06,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 190/810 [10:37<29:52,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▎       | 191/810 [10:39<29:41,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▎       | 192/810 [10:42<29:42,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 193/810 [10:45<29:28,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 194/810 [10:48<29:17,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 195/810 [10:51<29:28,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 196/810 [10:54<29:31,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 197/810 [10:57<29:00,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 198/810 [11:00<29:47,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▍       | 199/810 [11:03<29:46,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▍       | 200/810 [11:06<29:39,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▍       | 201/810 [11:08<29:05,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▍       | 202/810 [11:11<29:14,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▌       | 203/810 [11:14<29:53,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▌       | 204/810 [11:17<28:47,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▌       | 205/810 [11:20<28:57,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▌       | 206/810 [11:23<28:32,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 207/810 [11:25<28:31,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 208/810 [11:28<28:34,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 209/810 [11:31<28:47,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 210/810 [11:34<29:29,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 211/810 [11:37<29:16,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 212/810 [11:40<28:58,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▋       | 213/810 [11:43<28:38,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▋       | 214/810 [11:46<28:03,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 215/810 [11:49<28:15,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 216/810 [11:51<28:20,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 217/810 [11:54<28:22,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 218/810 [11:59<34:01,  3.45s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 219/810 [12:02<32:07,  3.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 220/810 [12:05<32:38,  3.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 221/810 [12:08<31:33,  3.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 222/810 [12:12<31:19,  3.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 223/810 [12:14<29:56,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 224/810 [12:18<30:24,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 225/810 [12:21<30:05,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 226/810 [12:23<29:30,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 227/810 [12:26<29:28,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 228/810 [12:29<29:23,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 229/810 [12:33<29:33,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 230/810 [12:36<29:31,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▊       | 231/810 [12:39<29:06,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▊       | 232/810 [12:42<29:52,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 233/810 [12:45<29:28,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 234/810 [12:48<28:43,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 235/810 [12:50<28:02,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 236/810 [12:53<28:07,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 237/810 [12:56<27:39,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 238/810 [13:00<30:28,  3.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|██▉       | 239/810 [13:03<29:52,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|██▉       | 240/810 [13:07<31:32,  3.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|██▉       | 241/810 [13:10<30:46,  3.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|██▉       | 242/810 [13:13<29:35,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|███       | 243/810 [13:16<28:57,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|███       | 244/810 [13:19<28:54,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|███       | 245/810 [13:22<28:36,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|███       | 246/810 [13:25<27:56,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|███       | 247/810 [13:27<27:22,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 248/810 [13:31<29:15,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 249/810 [13:34<28:40,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 250/810 [13:37<28:20,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 251/810 [13:40<28:28,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 252/810 [13:46<37:18,  4.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 253/810 [13:49<33:55,  3.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███▏      | 254/810 [13:52<31:46,  3.43s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███▏      | 255/810 [13:55<30:07,  3.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 256/810 [13:58<29:25,  3.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 257/810 [14:01<28:18,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 258/810 [14:04<28:29,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 259/810 [14:07<29:19,  3.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 260/810 [14:10<29:22,  3.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 261/810 [14:13<28:53,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 262/810 [14:16<28:24,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 263/810 [14:19<27:27,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 264/810 [14:22<26:31,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 265/810 [14:25<26:20,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 266/810 [14:28<25:47,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 267/810 [14:30<25:05,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 268/810 [14:33<25:21,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 269/810 [14:36<25:40,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 270/810 [14:39<26:06,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 271/810 [14:42<26:22,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▎      | 272/810 [14:45<27:05,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▎      | 273/810 [14:48<26:40,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 274/810 [14:52<29:24,  3.29s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 275/810 [14:55<28:41,  3.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 276/810 [14:58<27:44,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 277/810 [15:01<27:34,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 278/810 [15:04<26:40,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 279/810 [15:07<27:06,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▍      | 280/810 [15:10<26:11,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▍      | 281/810 [15:13<26:29,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▍      | 282/810 [15:16<26:00,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▍      | 283/810 [15:19<26:03,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▌      | 284/810 [15:24<30:56,  3.53s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▌      | 285/810 [15:47<1:23:03,  9.49s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▌      | 286/810 [15:50<1:06:25,  7.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▌      | 287/810 [15:57<1:03:57,  7.34s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 288/810 [16:01<54:54,  6.31s/it]  Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 289/810 [16:04<45:36,  5.25s/it] 36%|███▌      | 290/810 [16:07<40:24,  4.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 291/810 [16:10<36:12,  4.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 292/810 [16:13<32:06,  3.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 293/810 [16:16<30:06,  3.49s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▋      | 294/810 [16:19<28:41,  3.34s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▋      | 295/810 [16:22<27:41,  3.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 296/810 [16:25<29:00,  3.39s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 297/810 [16:28<28:14,  3.30s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 298/810 [16:31<26:57,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 299/810 [16:34<26:13,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 300/810 [16:37<25:43,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 301/810 [16:40<25:34,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 302/810 [16:43<25:30,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 303/810 [16:46<24:57,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 304/810 [16:49<24:58,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 305/810 [16:52<24:42,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 306/810 [16:55<25:24,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 307/810 [16:58<26:02,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 308/810 [17:01<25:30,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 309/810 [17:04<24:50,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 310/810 [17:07<24:41,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 311/810 [17:20<49:52,  6.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▊      | 312/810 [17:23<41:21,  4.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▊      | 313/810 [17:26<36:42,  4.43s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 314/810 [17:29<33:24,  4.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 315/810 [17:32<30:39,  3.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 316/810 [17:35<28:44,  3.49s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 317/810 [17:38<27:21,  3.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 318/810 [17:41<26:40,  3.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 319/810 [17:44<25:49,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|███▉      | 320/810 [17:47<25:10,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|███▉      | 321/810 [17:50<26:23,  3.24s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|███▉      | 322/810 [17:53<25:54,  3.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|███▉      | 323/810 [18:01<36:33,  4.50s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|████      | 324/810 [18:04<32:29,  4.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|████      | 325/810 [18:07<31:10,  3.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|████      | 326/810 [18:10<28:22,  3.52s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|████      | 327/810 [18:13<26:45,  3.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|████      | 328/810 [18:15<25:03,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 329/810 [18:18<24:48,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 330/810 [18:22<24:36,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 331/810 [18:24<24:01,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 332/810 [18:27<23:54,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 333/810 [18:30<23:30,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 334/810 [18:43<47:10,  5.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████▏     | 335/810 [18:46<39:45,  5.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████▏     | 336/810 [18:49<34:51,  4.41s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 337/810 [18:52<31:45,  4.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 338/810 [18:55<28:43,  3.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 339/810 [18:58<26:59,  3.44s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 340/810 [19:01<25:51,  3.30s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 341/810 [19:04<25:02,  3.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 342/810 [19:07<24:42,  3.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 343/810 [19:10<24:43,  3.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 344/810 [19:13<23:58,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 345/810 [19:16<24:19,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 346/810 [19:19<23:34,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 347/810 [19:22<22:55,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 348/810 [19:25<22:34,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 349/810 [19:28<22:33,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 350/810 [19:30<21:59,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 351/810 [19:33<22:21,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 352/810 [19:38<26:35,  3.48s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▎     | 353/810 [19:41<25:24,  3.34s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▎     | 354/810 [19:44<24:03,  3.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 355/810 [19:51<32:32,  4.29s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 356/810 [19:54<29:32,  3.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 357/810 [19:57<26:59,  3.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 358/810 [19:59<25:11,  3.34s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 359/810 [20:04<26:48,  3.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 360/810 [20:07<25:43,  3.43s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▍     | 361/810 [20:40<1:31:43, 12.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▍     | 362/810 [20:42<1:10:17,  9.41s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▍     | 363/810 [20:45<55:24,  7.44s/it]  Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▍     | 364/810 [20:48<45:15,  6.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▌     | 365/810 [20:51<38:17,  5.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▌     | 366/810 [20:54<33:11,  4.49s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▌     | 367/810 [20:58<32:22,  4.39s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▌     | 368/810 [21:01<28:55,  3.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 369/810 [21:04<26:21,  3.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 370/810 [21:07<24:42,  3.37s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 371/810 [21:09<23:17,  3.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 372/810 [21:12<22:25,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Trying to load from /users/rhydian/self-supervised-project/model_weights/SSECEncodersBothBoth
==> Resuming model trained for 106 epochs...
Trying to load from ../model_weights/angle_regressor4
==> Resuming model trained for 7 epochs...
3143057_20201_2_0,000nvn4icz,0.1684533102566536,-93.38852935578817,-42.86759423058189

5220475_20201_2_0,0015mn4icz,-0.6071336251913834,-106.90143204065947,-23.05647191849448

2739088_20201_2_0,005h5p4icz,0.20199806485232794,-59.56199822256943,-35.41475357531826

1222180_20201_2_0,005mdp4icz,0.1571824068816052,-117.51615025471753,-26.57411786577262

4243018_20201_2_0,006s5o4icz,-3.1616486040282825,-62.42023845678139,-25.03494753852044

5721159_20201_2_0,008yon4icz,0.8871625290547123,-149.23767646781494,-47.815696173139656

4872976_20201_2_0,00ea4p4icz,4.699464002035046,-79.34338266459505,-68.00685380786031

4506799_20201_2_0,00fcdo4icz,8.847992152179202,-51.104536756697996,-85.37278002103322

5872255_20201_2_0,00gidp4icz,5.252274713264003,-88.65906375754494,-68.01868538354483

4502362_20201_2_0,00gkao4icz,1.9962043197852386,-86.60879202528656,-53.74192157633449

3752659_20201_2_0,00gtsn4icz,0.5614934486194041,-112.3815220900469,-36.0958076562321

2935429_20201_2_0,00i3fo4icz,-1.6394915585539187,-67.23376253361977,-7.401459797237507

4789727_20201_2_0,00ms5p4icz,5.223998498368014,-113.40596978832642,-95.8324715973909

5157140_20201_2_0,00okzo4icz,2.738119620477348,-75.72101901227336,-59.86609397892303

2020542_20201_2_0,00om5o4icz,-0.4052861944704392,-151.7132587700956,-32.52808795187448

3559467_20201_2_0,7kfspn4icz,1.6593398591406059,-110.68773146522656,-34.57311363190419

1628506_20201_2_0,00qn6o4icz,4.624280008318749,-55.373770618580494,-68.58827764992482

2687864_20201_2_0,00sphp4icz,-1.4678953294543111,-70.64911159367284,-36.21393014379153

2216789_20201_2_0,00u9yo4icz,0.8554969986357983,-57.21227326904349,-46.10527245464256

5069220_20201_2_0,00xdpo4icz,0.10539026325799422,-98.60591664706047,-16.909433574782298

2417594_20201_2_0,00z0mo4icz,-1.0007849864535752,-102.61702697533653,-20.83773858200341

5280004_20201_2_0,010edo4icz,-0.3762051482654099,-108.84133777738728,-39.20229946261112

3693546_20201_2_0,011w5o4icz,0.8704390446213202,-95.94190928084285,-28.966190425433766

5442359_20201_2_0,01a1to4icz,-0.272676468661058,-102.07335699292378,-30.982542985341397

1311332_20201_2_0,01m2go4icz,0.13679367297333872,-93.13590286495767,-37.15264008713302

3001947_20201_2_0,01mhep4icz,-1.5229524596176431,-88.39266992750828,-13.06707461633583

5590978_20201_2_0,01nz7p4icz,1.2558161890588937,-115.99913870069855,-48.67711359430358

1582241_20201_2_0,01sr4p4icz,6.34294427453964,-79.44803616728836,-60.923715730795166

1276311_20201_2_0,01t1ln4icz,-1.9121629690231352,-107.8574433189413,-27.112928948862944

5950233_20201_2_0,01t9yo4icz,1.1914578646999614,-52.82271670725831,-40.78650555019763

2609656_20201_2_0,01yp7n4icz,0.7803101477868901,-109.8845374529102,-40.4483552503136

1826989_20201_2_0,01zwxo4icz,-0.2964214042282592,-48.5845807314025,-37.20998332270425

4250682_20201_2_0,0219vo4icz,-2.7507544661607097,-114.23919133294325,-22.229109989328478

1491360_20201_2_0,021f3o4icz,2.196881656687821,-115.1500588896603,-53.29989450611829

2175802_20201_2_0,021kdp4icz,-2.5587249943036405,-135.0309302298675,-17.151742133839875

4570642_20201_2_0,021qap4icz,-0.7832694344189052,-72.2000195183679,-36.42752423246749

2864379_20201_2_0,02aldn4icz,-4.7149916353937105,-115.03691622554234,-7.2600463122349765

4512090_20201_2_0,02aqhp4icz,-4.178376399634845,-152.4998712223171,-2.3882008846356797

5900158_20201_2_0,02d4uo4icz,-2.9515289991131346,-61.34661279421039,-10.290139596731905

2620877_20201_2_0,02d9ho4icz,0.8571885019271938,-87.17689804592212,-22.910316474507198

3981134_20201_2_0,02eatn4icz,-0.5758186879117412,-102.40708011369475,-19.912082743870485

3506459_20201_2_0,02ecfn4icz,-0.7840365417144205,-114.80284721893491,-30.814729828508632

1462279_20201_2_0,02lrun4icz,1.5833141425871151,-63.25708560011026,-58.48149803207944

5179534_20201_2_0,02svin4icz,-0.9706148332979374,-93.00766012002501,-28.133003182629224

2229838_20201_2_0,02x4xo4icz,2.16249083496787,-93.87894990216097,-61.12555044935209

1995337_20201_2_0,03265o4icz,-2.2240367351061767,-79.19893264252289,-28.449540142978478

2531164_20201_2_0,034zwn4icz,2.3016949411756675,-140.03231079472107,-39.51433062639961

5034380_20201_2_0,036r6p4icz,-0.15617306362393238,-84.97619215936459,-46.7711470979327

1598857_20201_2_0,038dso4icz,0.7782547051931967,-84.41799319621896,-37.804501955369574

3304860_20201_2_0,03gg8p4icz,-2.9483918402281177,-101.19397631937011,-24.995030946792653

3377988_20201_2_0,03goso4icz,-0.47040946941909384,-112.51209040580741,-38.806226868769045

4740914_20201_2_0,03i8bo4icz,-1.7176397605284441,-71.65915189471818,-55.05146882103641

2039391_20201_2_0,03rico4icz,2.8067009319411187,-83.52623654647647,-44.3813617603209

4534467_20201_2_0,03twoo4icz,2.101601569827171,-100.70785013581633,-49.65702790103907

1192094_20201_2_0,040w5p4icz,2.15690465580967,-105.49375928274523,-71.18504843329609

1713728_20201_2_0,0439sn4icz,-1.6822487789126033,-139.1750951954055,-27.818978907808344

4993945_20201_2_0,044egp4icz,1.5282127252094992,-92.37817105976956,-39.03352825790064

4127330_20201_2_0,046frn4icz,-0.5721737888541508,-84.32515505014351,-21.280014840722288

4099578_20201_2_0,046hwn4icz,-2.0498669261461004,-110.69325992180868,-11.307652125703626

3544669_20201_2_0,049b3o4icz,0.022139564484325414,-92.11751555538271,-17.705428859940056

1608696_20201_2_0,049fyo4icz,0.33807777146217677,-87.43459083735672,-14.998961097924195

3587951_20201_2_0,04b6io4icz,-4.559028086360924,-79.42173331879889,-16.58090415791044

4007609_20201_2_0,04f3oo4icz,-1.7735044078192694,-94.46834359299845,-33.33644429731065

4972388_20201_2_0,04fato4icz,-4.279973035447121,-77.21423382697648,-20.521166151602927

4665589_20201_2_0,04fj2o4icz,-13.709921630553543,-153.98289769961735,23.48360237369795

1519972_20201_2_0,04frto4icz,-4.631542568128233,-97.50744055118474,-23.125499229331453

3932010_20201_2_0,04fsgn4icz,1.5368707621396516,-119.64912790643956,-31.147889395473754

5226058_20201_2_0,04gxqo4icz,1.1780595156822495,-106.712659999343,-45.94593477090409

1990567_20201_2_0,04i6bp4icz,0.04569314739583198,-76.21055268999561,-42.83163183004223

3615910_20201_2_0,04j4do4icz,-4.716182848493476,-78.55061317352565,-12.782144771941063

3429342_20201_2_0,1hgfdn4icz,-3.3738958040701985,-78.88062880885224,-12.604853970186326

4635778_20201_2_0,04tepn4icz,-1.4233757307384642,-134.69969941775443,-5.066937189115933

4259907_20201_2_0,04u42o4icz,-0.7593826103196013,-128.2641755762689,-29.810673229555945

3868711_20201_2_0,04udto4icz,-1.804410238597737,-83.356206069004,-27.538148368674584

5601355_20201_2_0,04wqko4icz,1.0693512436993091,-89.53178997394784,-71.47356343965012

4621475_20201_2_0,04ywfn4icz,-1.9012245056686716,-106.49204211331002,-28.126811179216745

4512724_20201_2_0,053bfp4icz,5.131088922300899,-107.05945396858016,-61.4103554201304

5979022_20201_2_0,053shp4icz,0.03538197118556006,-103.49562391196213,-41.003398120989544

2457663_20201_2_0,056e4o4icz,0.8019664222148717,-119.81723422444159,-50.313494723808276

2748411_20201_2_0,057sep4icz,0.9897082518443393,-104.05291996462762,-54.465245004188816

2749347_20201_2_0,058iun4icz,-12.185527825598871,-153.7456796059077,31.31073395238606

3171151_20201_2_0,05b0hp4icz,-1.515845728770815,-110.18038813094441,-42.594008571212385

2265529_20201_2_0,05fc9p4icz,0.4960183663313601,-74.20600703653668,-53.142839024206395

5191285_20201_2_0,05g58p4icz,2.857527824235696,-101.54794169570718,-49.76685180952845

2874857_20201_2_0,05hgao4icz,0.3629143774109856,-67.67837846130843,-26.932322725150726

1119524_20201_2_0,05u5zo4icz,-0.566404812045929,-74.42591076637183,-76.03045583475034

3825552_20201_2_0,05wyun4icz,-0.8011647281082578,-68.40637981510363,-31.261589876881047

5818325_20201_2_0,061uen4icz,-0.13710726939458717,-54.61619130033307,-48.62471734450915

4081747_20201_2_0,063kfp4icz,-0.25205422212549455,-100.13429648965314,-57.48259446376319

4761427_20201_2_0,065a7p4icz,0.6536764674169547,-121.22207690879856,-40.04037866107714

3687749_20201_2_0,06606p4icz,2.751119881947147,-65.07975696142839,-36.91897539101565

2007127_20201_2_0,06aslo4icz,3.3346269012243,-125.47446406242193,-57.188312845951586

5296130_20201_2_0,06b85p4icz,-1.663065712903281,-102.85070377172485,-33.79649882292287

1746197_20201_2_0,06mrzo4icz,6.338204920772168,-51.25370770130115,-60.47858741500056

1563785_20201_2_0,06nrln4icz,-1.7714508328396141,-103.45785588480138,-35.85656358474078

2899787_20201_2_0,06oh2p4icz,-3.5684459003880793,-96.37835305337038,-18.50364489633003

1432177_20201_2_0,06q75o4icz,-0.8369720995074575,-128.08329482069973,-26.456162335846983

2796636_20201_2_0,06tz5o4icz,2.627602420972687,-90.67613878679464,-40.620097705443385

4141960_20201_2_0,06vkso4icz,2.1534530621863506,-89.29125687553531,-35.33442484091411

4568595_20201_2_0,071nbo4icz,2.459791686403305,-81.75036105477051,-50.37336665435804

3127201_20201_2_0,072pvo4icz,-1.2640710673826347,-103.31259848337169,-25.342735991902984

2859126_20201_2_0,075ojp4icz,18.259840829274747,20.105325431620088,-141.3628236105984

4172696_20201_2_0,076hno4icz,-7.578511959096207,-65.3321244634906,4.002025199343933

3947700_20201_2_0,077ygp4icz,2.7067204999827403,-102.92431796953844,-55.13766402004174

1077673_20201_2_0,078own4icz,1.5539623892826737,-119.95684320405118,-30.424110631831695

4418816_20201_2_0,07bojo4icz,0.7339742905411504,-81.00345758034442,-55.17478492750166

3203894_20201_2_0,07bqin4icz,0.04848752819500265,-120.67532148410302,-27.089479531503372

2527203_20201_2_0,07g1qn4icz,0.18568604939910358,-123.26192406807453,-52.26309953069702

4296012_20201_2_0,07gtjn4icz,-0.1121237818501442,-96.8967708130987,-33.23549473882201

2778108_20201_2_0,07t5jp4icz,-0.2747878335058152,-72.58412446713686,-43.403180856713064

1981877_20201_2_0,07vmap4icz,-2.395817722492191,-50.419988926402056,-26.88405948437068

3167452_20201_2_0,07zsbp4icz,0.3352563637395501,-81.77883579429911,-40.113577510438645

4990257_20201_2_0,080tfn4icz,3.8517050189271327,-125.56996105387759,-63.028192676527155

2354099_20201_2_0,082nkn4icz,-0.5582344239296845,-56.16510430582349,-43.326957177307804

3013341_20201_2_0,082zjo4icz,-0.5677913987456877,-100.24925949371004,-29.114994605274603

1700957_20201_2_0,08kr3o4icz,-1.9918124857420996,-122.11156408154582,-33.31817679782229

5457665_20201_2_0,08lscp4icz,0.7571987879049987,-113.1599671498723,-24.292813783363428

4664326_20201_2_0,08mbjo4icz,0.7055406430346614,-61.65819062215837,-64.10597031919667

5119867_20201_2_0,08szlo4icz,1.767980145341496,-60.29910459595041,-37.36705459005819

4458913_20201_2_0,0912nn4icz,-1.9004459694846518,-114.52217113985003,-23.171798626596598

1534952_20201_2_0,091u9o4icz,-0.05269697041032532,-93.52954902602383,-33.834386614466354

2978001_20201_2_0,iltbto4icz,-0.23853260681295693,-85.45663941443328,-18.044432333000586

2280034_20201_2_0,098pmn4icz,-0.9070090434106509,-112.80974099999318,-35.00566718810002

2723422_20201_2_0,09aojp4icz,-0.297815131897457,-130.20824507691975,-32.41940738364323

1092291_20201_2_0,09jkso4icz,-3.3052776119344838,-128.47937783284019,1.8341842569877258

5832166_20201_2_0,09m5xo4icz,1.3382716714912346,-115.69560795408674,-33.662832915685016

2253779_20201_2_0,09ts0p4icz,1.3823823812828564,-80.88304447106538,-44.704415943202164

2460465_20201_2_0,40eldn4icz,-1.5603071039971774,-116.96457502164563,-47.07615703028624

2846150_20201_2_0,09xnzo4icz,0.6994117362261935,-49.70620417802047,-53.27683701370535

4595005_20201_2_0,09ytwo4icz,4.95847560371112,-27.2542473744613,-68.37027814153153

3073100_20201_2_0,09z6do4icz,2.1160332981168395,-85.27000070272086,-29.460501643516366

4072492_20201_2_0,09zwip4icz,-0.6888205892175537,-103.70181054264182,-21.417220223161365

4661828_20201_2_0,0a7fjo4icz,2.882821241348686,-65.89010917000374,-68.52892695979762

4537373_20201_2_0,0abecn4icz,-0.019355900459308493,-69.77124310666437,-25.735969647618248

2025406_20201_2_0,0acjbo4icz,1.9148308527461428,-95.93560708444451,-58.723858418106445

3553999_20201_2_0,0acl0p4icz,0.9044988333296394,-93.3144980360021,-31.621578512270105

2610835_20201_2_0,jg8mfp4icz,-0.40473162459842466,-109.8696486492208,-36.51991856183858

2463330_20201_2_0,0ag01p4icz,2.4991411768941196,-101.26888897472773,-50.37040206183096

3528925_20201_2_0,0agmwo4icz,0.820748109838379,-43.12977412759312,-37.241986312068875

5160396_20201_2_0,0ansmn4icz,1.489043245580294,-123.09052457891667,-36.37595124082064

1061219_20201_2_0,0aoqyo4icz,1.224457313048881,-80.11704487382204,-37.70973595555958

2749395_20201_2_0,0aqb7o4icz,3.166416261092674,-115.08104765041492,-47.39171699426963

3344384_20201_2_0,0awcco4icz,-1.3415706896233754,-85.24007048830987,-33.19321508961636

1502287_20201_2_0,0b0y7p4icz,2.220304796102535,-137.33431445034418,-51.59609066172949

3932087_20201_2_0,0b4abn4icz,0.6071826535601473,-110.38608905694485,-47.77105791269901

3350279_20201_2_0,0b5cxn4icz,2.258457702987089,-84.96888381515762,-32.481952419247364

3843671_20201_2_0,0bcnkn4icz,1.1237943198212597,-72.94505181070525,-44.9982695726861

4148754_20201_2_0,0bm2bn4icz,-0.2323466459797665,-96.41918356658823,-41.27722841938025

3771125_20201_2_0,0bnjgp4icz,-1.74915114706625,-74.62869546466601,-33.6517844249191

4965160_20201_2_0,rns0gp4icz,-0.31443368655686993,-59.481522565993544,-40.37723037296139

2235816_20201_2_0,0bq2vn4icz,2.088269078244126,-121.95747385496432,-51.5940175761491

2223000_20201_2_0,0btsgp4icz,0.6316462949026901,-69.34050891849671,-27.39365806159303

3015391_20201_2_0,0bw3uo4icz,-0.7827347823867536,-102.7465480569929,-37.343500587728784

3556323_20201_2_0,0bxgpn4icz,-1.4309442227039835,-61.37304109090533,-37.62141479515313

1425838_20201_2_0,0byn8o4icz,0.5827934450527645,-124.12899757059154,-43.99385789876885

2723901_20201_2_0,0bzejo4icz,-5.75020785749348,-101.82522607059741,1.563424611872918

2566177_20201_2_0,0c0mln4icz,0.9760627861579411,-106.93206238862524,-36.86738473666145

4267910_20201_2_0,0cah7o4icz,1.4801456840644753,-75.55666793528235,-65.34360656952519

2730303_20201_2_0,0caquo4icz,-0.7416120236833977,-106.49657960254649,-25.82663280162626

4943099_20201_2_0,0cc31o4icz,2.23288707071951,-130.38843659547442,-40.272812160310835

1802867_20201_2_0,0cgzrn4icz,1.3624933444895815,-63.63489066419615,-45.82701980141479

2765851_20201_2_0,0clijp4icz,-0.7697663662272087,-109.95111585306137,-43.63459476466406

1435968_20201_2_0,0clu2p4icz,1.0784815438417725,-64.52885687777419,-44.839993430701114

2810695_20201_2_0,0ctzgp4icz,3.0045362959002726,-57.64779811946906,-58.42557904357584

2504063_20201_2_0,0cu2mn4icz,3.1515898224987065,-109.8459417704623,-55.73518866207944

2396862_20201_2_0,0d0tmn4icz,-2.10758120862982,-81.06060067343489,-22.462582553518843

1019957_20201_2_0,0d55fo4icz,-2.6441255362378078,-72.56288209047418,-12.879249049567676

1956475_20201_2_0,0dcbrn4icz,0.6784778283524215,-91.76531684305235,-57.11772837773347

2491317_20201_2_0,0ddmln4icz,-4.42146810837553,-154.2603069360023,14.120711509254846

1266210_20201_2_0,0ddx8p4icz,2.1703016445964556,-95.58270761274076,-57.19225032292823

4413516_20201_2_0,0dp48n4icz,-0.6868849499666455,-129.50928414806515,-39.0326473957043

3604250_20201_2_0,0dwc5o4icz,0.9634117169742079,-96.59800600256884,-31.48661124414798

2399700_20201_2_0,0dxhko4icz,0.10856555851911878,-98.8800284417417,-29.58969058199456

3992194_20201_2_0,0dxnfo4icz,0.7710388494640378,-103.31196446345069,-48.07735893889473

4748805_20201_2_0,0e3t4p4icz,2.553141643047526,-89.07904085410996,-64.70793429954833

5819890_20201_2_0,0e3tmo4icz,-3.1356684657758755,-75.76829830749818,-20.56159062238558

1081730_20201_2_0,0e3vho4icz,-25.779493394095283,-59.61571480145966,148.93454164536138

4223081_20201_2_0,0e63bo4icz,1.1726843828920084,-109.79743998484327,-30.238087033410693

2715277_20201_2_0,0e743p4icz,-0.7096834158654126,-59.78730604534283,-36.46341084383812

4297982_20201_2_0,0e7h5p4icz,-2.74697399643146,-121.08202472375652,-23.984731236644123

3677587_20201_2_0,0e9p4p4icz,-1.723540226245011,-48.827920218345696,-25.29110312102955

1305646_20201_2_0,0ea9jp4icz,-0.8219730793685974,-76.8952558238303,-30.133301033135737

2535387_20201_2_0,0eb25o4icz,-5.202971704114952,-124.58316119636785,0.2611933954088528

3266457_20201_2_0,0eckpn4icz,-0.43082760810983267,-122.92876422065717,-24.651979069439022

1721442_20201_2_0,0edlmn4icz,-4.256824774970885,-150.61533922072155,11.858902947362964

3572864_20201_2_0,0eefbn4icz,-0.7366274151103469,-110.43169069724212,-32.219666340618815

5460975_20201_2_0,0efzzo4icz,-0.2927786215129927,-100.74348290733946,-23.60428063975978

1028188_20201_2_0,0ehtdp4icz,-1.6672558466252418,-90.41717228637663,-31.111733969652022

2673452_20201_2_0,0eifcp4icz,-3.5612010890733647,-75.85485783967692,-19.113762848084633

3014643_20201_2_0,0ejldp4icz,0.7352738527543592,-77.47846248343356,-37.61297020266059

4014181_20201_2_0,0eke8n4icz,-1.6433628801314761,-85.15157313884,-24.39208560526707

4576597_20201_2_0,0ekqno4icz,-0.02434985763154202,-121.28322936916697,-48.38023565274983

3600429_20201_2_0,0elfdn4icz,-1.105917741699647,-88.93688272302904,-27.314656269052875

3961834_20201_2_0,0eloen4icz,-0.17699697472979195,-132.23818558786644,-40.862490191958955

6023937_20201_2_0,0em31p4icz,-0.5268726015436225,-69.48413958362494,-42.269242033491736

1857432_20201_2_0,0emcoo4icz,-5.612960304308345,-113.1104073095014,-18.9768686373165

5916283_20201_2_0,0er2vn4icz,3.0202484963378686,-78.24032796642197,-46.828765328320685

4559513_20201_2_0,0ewpfp4icz,-1.017665089410104,-93.89342483336574,-33.77492474658847

3248007_20201_2_0,0f1vdo4icz,-3.452224040383573,-162.78934907451622,-25.780047434334122

2943726_20201_2_0,0f35fp4icz,-0.6575414502688293,-92.30212747874319,-33.82745452519323

1025867_20201_2_0,0f3iao4icz,0.028986057989058525,-81.82622352717175,-46.36777342754311

2127431_20201_2_0,0f9zho4icz,-0.43261800785088295,-116.3684733712546,-39.3679099946864

5020498_20201_2_0,0fbt8o4icz,3.350724635176338,-72.25369251586022,-45.568886511081445

3059120_20201_2_0,0fjorn4icz,0.12464190051723166,-119.01047100451476,-22.33097007277128

1831568_20201_2_0,0fktho4icz,1.662130456558882,-88.4906596707635,-50.806469462748794

2473239_20201_2_0,0fktlo4icz,1.0779696416194102,-91.08059238714233,-41.9730465557131

5499238_20201_2_0,0fo1so4icz,0.7019408175854461,-70.44088834200946,-43.7947269322015

2358451_20201_2_0,0fqjvn4icz,1.6543903033678575,-108.67180363613522,-35.88926021570498

3362852_20201_2_0,0fqrdp4icz,-0.8702711702461797,-123.68712051553211,-46.09185594536754

3336862_20201_2_0,0fu8mo4icz,-0.463118610859628,-130.5810997281642,-25.881730202409443

3167155_20201_2_0,0fv11o4icz,-0.8714835933969506,-86.15030530880054,-31.299600460005536

4545897_20201_2_0,0fwnjo4icz,-4.565105411970503,-42.49950453587752,2.413606573790844

4867802_20201_2_0,0fzvkn4icz,-0.49197814585032584,-111.46834021720872,-18.24431414433056

2243673_20201_2_0,0g08po4icz,0.4446186784372535,-91.38185241504937,-49.07046878762172

5146126_20201_2_0,0g2eyo4icz,-2.5808400972004866,-88.84277768339521,-14.750246672980666

1274900_20201_2_0,0gd32p4icz,-0.9909474270489838,-96.56681295902982,-18.4553538487246

4295176_20201_2_0,0gdcip4icz,-0.16008687770057708,-132.82092959384144,-51.55647481207778

4959854_20201_2_0,0ge71o4icz,27.138366429677475,-19.5514690372581,-167.91776730685413

3391272_20201_2_0,0gegan4icz,2.6304537804258947,-121.53368353633238,-43.33647482268219

2851519_20201_2_0,0ghlbo4icz,2.2692419882468524,-98.42552343244478,-51.673967804396995

2275517_20201_2_0,0gko7o4icz,3.053934681847889,-50.78966168064204,-31.826960745846165

3022081_20201_2_0,0gkqpn4icz,0.19435544655563367,-94.93279476609794,-35.780322733672136

2107307_20201_2_0,0gl89o4icz,0.34904831013857995,-125.3126358539254,-24.454556741566776

3023062_20201_2_0,0gqcsn4icz,-0.9309140073742997,-112.13612662476498,-33.35629783769508

2854553_20201_2_0,0gzcwn4icz,-4.644884791776566,-99.93881655697524,-0.02415230557600978

4942688_20201_2_0,0h247o4icz,0.8594510071098543,-79.84044508436,-25.144183769866743

5468036_20201_2_0,0h4ocp4icz,-3.40220403014364,-73.70631663730745,-17.420032095152465

4926557_20201_2_0,0h582o4icz,-1.6685257652499932,-78.38129790379242,-27.90326553157513

4749024_20201_2_0,0h5d1p4icz,1.901983444790573,-75.29855477438224,-44.48549314182608

1944922_20201_2_0,0h72nn4icz,-4.506329050939994,-95.15401423865742,-5.3311385837901355

1961150_20201_2_0,0h8edo4icz,0.7220253572048436,-88.22495548748284,-39.0377027803988

1649966_20201_2_0,0hex5o4icz,2.2855189150769335,-81.12710574629617,-44.663663787570755

5076751_20201_2_0,0hoouo4icz,0.21901719128473682,-67.01038502326713,-52.72914018428723

1137437_20201_2_0,0hs0go4icz,-1.2914732880027304,-128.83848255691603,-26.957358925800378

4675930_20201_2_0,0htgjp4icz,-20.483277214841145,-118.18751073887225,118.02942840555104

2704737_20201_2_0,0huesn4icz,1.867288665866125,-85.36802894526969,-50.49517918346399

2874831_20201_2_0,0hxcfo4icz,2.278190855206849,-112.55940654943396,-63.474682635526776

4447482_20201_2_0,0i1p0p4icz,-3.138386248481685,-95.53658596335791,-18.158233675061055

4499730_20201_2_0,0i2lkn4icz,1.5798300440138013,-49.22517737833408,-59.85352863960969

1853124_20201_2_0,0i37dp4icz,-1.6735105571456876,-87.77601220336453,-49.04936948385631

5091078_20201_2_0,0i3wrn4icz,4.579264163878112,-97.80582270253569,-75.83251374613555

3053787_20201_2_0,0i8y7p4icz,2.308058103011512,-125.6725068103377,-41.75381431042602

4912987_20201_2_0,0iceho4icz,0.8486923431140883,-52.08568377877356,-32.23347980040833

2692494_20201_2_0,0idojo4icz,-0.2657957717370326,-98.25910118577164,-24.20223498037815

3564210_20201_2_0,0iijyo4icz,-1.7543143250562283,-100.88721776510661,-20.755079077661918

3706969_20201_2_0,0ij5co4icz,1.1445335408529145,-132.89716353143325,-42.72086919940466

3588969_20201_2_0,0ip5wn4icz,0.475496255527685,-50.861403958150646,-27.74549615556532

4851967_20201_2_0,0iyson4icz,2.206679626750422,-83.09121547418755,-47.21038942920268

1653655_20201_2_0,0j0a9p4icz,2.554550308796682,-50.15760395922109,-40.307954561009694

3228446_20201_2_0,0j1xxo4icz,0.9375257700331101,-58.845115481272245,-41.93054477611119

1493064_20201_2_0,0j4mun4icz,-2.9223744870375117,-63.19522971299878,-23.339805071891732

1879570_20201_2_0,0j6ibp4icz,1.2810707335769351,-88.65093696163203,-45.64601768712795

4921884_20201_2_0,0j9ono4icz,3.76669552179111,-119.84522474952709,-36.03169360552893

2450203_20201_2_0,0jaseo4icz,15.059662734180627,-68.1150101312783,-118.38676907255544

4269452_20201_2_0,0jgydn4icz,-0.8775634323287222,-95.13431497401163,-40.349005446315886

2033390_20201_2_0,0jtzdn4icz,-2.223841559477063,-140.1253093285682,-19.860504294001814

4590235_20201_2_0,0jxgeo4icz,1.3090036671060614,-101.53573252450838,-44.824539419524996

1595493_20201_2_0,0jypjo4icz,0.6137753020979804,-75.12102756594885,-43.460362844423784

2606101_20201_2_0,0k1fln4icz,-4.4228174766672135,-114.41896992640667,-10.489939798924553

2354290_20201_2_0,0k3cxn4icz,-2.8634718574874984,-118.55649517906508,-30.0674376577808

3866789_20201_2_0,0k4g0p4icz,0.5216634029346395,-81.88158049814595,-36.56522409757861

1311138_20201_2_0,0k7mco4icz,-1.0187189544984765,-109.55290987750345,-29.689965258185296

4697383_20201_2_0,0k7r8o4icz,-0.059334008020819666,-125.08687635134007,-30.306764427653988

5078788_20201_2_0,0ka14o4icz,-5.525490895640265,-131.56336411171532,-1.1847384457517052

3493446_20201_2_0,0kadjo4icz,-0.8773367503942976,-29.627112111542885,-28.834094265538567

1286204_20201_2_0,0kbhyo4icz,-1.5166933080577663,-119.34879302317836,-32.31168034052723

4632337_20201_2_0,0kd0ap4icz,-6.296015330734331,-129.2124144291372,-1.5565558568382016

5092779_20201_2_0,0kdbgn4icz,3.3422760541202403,-87.80316426567623,-49.17332853017864

1754944_20201_2_0,0kefep4icz,-0.9592527311696181,-65.59681391727315,-45.556291157007294

2077522_20201_2_0,0kezpn4icz,0.10122127891836845,-123.16127359218785,-28.793612627199337

2214813_20201_2_0,0kil2p4icz,-0.4130090346530383,-76.46201441500884,-30.223982273163514

1380275_20201_2_0,0kirfp4icz,4.419884102661979,-81.17195487723549,-60.39009324837885

5661910_20201_2_0,0kl3co4icz,-4.572833790110583,-75.93190912486583,-18.928177915176747

1292567_20201_2_0,0koeun4icz,-1.2109571641511416,-94.80272619596687,-31.196023147793625

4279734_20201_2_0,0kq60p4icz,-1.404146938564554,-69.98104283982627,-27.65768186982916

1248149_20201_2_0,0kun4p4icz,-1.192654678677141,-72.27417783530197,-32.512805719236326

5941605_20201_2_0,0kxx9n4icz,-0.8420661572898708,-120.85656142752825,-34.9967647114576

5569297_20201_2_0,0kz0yo4icz,-1.8289572075970773,-71.15930042915394,-29.646949967179665

2572435_20201_2_0,0l263o4icz,-0.43789229579215083,-126.84582769380754,-28.76505607652868
 46%|████▌     | 373/810 [21:15<21:42,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 374/810 [21:18<22:28,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▋     | 375/810 [21:21<22:09,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▋     | 376/810 [21:25<23:45,  3.29s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 377/810 [21:28<23:24,  3.24s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 378/810 [21:31<22:57,  3.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 379/810 [21:34<21:58,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 380/810 [21:38<23:23,  3.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 381/810 [21:41<22:38,  3.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 382/810 [21:44<21:46,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 383/810 [21:49<27:50,  3.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 384/810 [21:52<25:46,  3.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 385/810 [21:55<23:54,  3.38s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 386/810 [21:58<22:21,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 387/810 [22:01<21:31,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 388/810 [22:04<21:26,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 389/810 [22:07<21:45,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 390/810 [22:10<20:54,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 391/810 [22:12<20:16,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 392/810 [22:16<21:07,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▊     | 393/810 [22:20<23:02,  3.31s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▊     | 394/810 [22:22<21:49,  3.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 395/810 [22:26<21:47,  3.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 396/810 [22:28<21:06,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 397/810 [22:31<20:19,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 398/810 [22:34<20:16,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 399/810 [22:39<24:16,  3.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 400/810 [22:42<22:55,  3.36s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|████▉     | 401/810 [22:45<22:01,  3.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|████▉     | 402/810 [22:48<21:13,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|████▉     | 403/810 [22:51<20:36,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|████▉     | 404/810 [22:54<20:20,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 405/810 [22:57<20:20,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 406/810 [23:02<25:35,  3.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 407/810 [23:05<23:21,  3.48s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 408/810 [23:08<22:40,  3.38s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 409/810 [23:11<21:42,  3.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 410/810 [23:14<20:57,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 411/810 [23:17<20:37,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 412/810 [23:20<20:48,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 413/810 [23:23<20:15,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 414/810 [23:26<19:58,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 415/810 [23:29<19:47,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████▏    | 416/810 [23:32<19:16,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████▏    | 417/810 [23:34<18:50,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 418/810 [23:37<18:48,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 419/810 [23:41<19:29,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 420/810 [23:44<19:40,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 421/810 [23:47<19:19,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 422/810 [23:49<18:35,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 423/810 [23:52<18:37,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 424/810 [23:55<18:28,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 425/810 [23:58<18:35,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 426/810 [24:01<18:39,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 427/810 [24:04<18:13,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 428/810 [24:07<18:33,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 429/810 [24:10<18:53,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 430/810 [24:13<18:47,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 431/810 [24:16<18:30,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 432/810 [24:18<18:08,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 433/810 [24:21<18:00,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▎    | 434/810 [24:24<18:19,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▎    | 435/810 [24:27<17:59,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 436/810 [24:30<17:53,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 437/810 [24:32<17:24,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 438/810 [24:36<17:54,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 439/810 [24:38<17:44,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 440/810 [24:41<17:29,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 441/810 [24:44<17:37,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▍    | 442/810 [24:47<17:51,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▍    | 443/810 [24:50<17:44,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▍    | 444/810 [24:53<18:04,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▍    | 445/810 [24:56<17:43,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▌    | 446/810 [24:59<17:38,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▌    | 447/810 [25:01<17:13,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▌    | 448/810 [25:04<17:17,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▌    | 449/810 [25:13<26:54,  4.47s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 450/810 [25:16<24:19,  4.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 451/810 [25:19<22:16,  3.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 452/810 [25:21<20:38,  3.46s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 453/810 [25:24<19:33,  3.29s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 454/810 [25:27<19:08,  3.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 455/810 [25:30<18:17,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▋    | 456/810 [25:33<18:01,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▋    | 457/810 [25:36<17:44,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 458/810 [25:39<17:20,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 459/810 [25:42<17:28,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 460/810 [25:49<24:34,  4.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 461/810 [25:52<22:28,  3.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 462/810 [25:55<21:28,  3.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 463/810 [25:59<20:44,  3.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 464/810 [26:02<20:55,  3.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 465/810 [26:06<20:12,  3.51s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 466/810 [26:08<18:50,  3.29s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 467/810 [26:12<18:41,  3.27s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 468/810 [26:15<18:06,  3.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 469/810 [26:18<17:28,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 470/810 [26:20<16:53,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 471/810 [26:23<16:44,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 472/810 [26:27<18:47,  3.34s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 473/810 [26:30<17:37,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▊    | 474/810 [26:33<16:58,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▊    | 475/810 [26:36<16:52,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 476/810 [26:40<17:57,  3.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 477/810 [26:43<17:49,  3.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 478/810 [26:46<17:40,  3.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 479/810 [26:49<17:18,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 480/810 [26:53<18:08,  3.30s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 481/810 [26:56<17:45,  3.24s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|█████▉    | 482/810 [26:59<17:46,  3.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|█████▉    | 483/810 [27:03<19:10,  3.52s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|█████▉    | 484/810 [27:07<20:15,  3.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|█████▉    | 485/810 [27:10<18:47,  3.47s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|██████    | 486/810 [27:16<22:27,  4.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|██████    | 487/810 [27:20<22:27,  4.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|██████    | 488/810 [27:23<20:23,  3.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|██████    | 489/810 [27:26<19:19,  3.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|██████    | 490/810 [27:29<18:22,  3.45s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 491/810 [27:32<17:42,  3.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 492/810 [27:35<16:46,  3.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 493/810 [27:38<16:36,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 494/810 [27:41<16:20,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 495/810 [27:44<16:02,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 496/810 [27:49<19:03,  3.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████▏   | 497/810 [27:52<17:33,  3.37s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████▏   | 498/810 [27:55<17:01,  3.28s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 499/810 [27:58<16:51,  3.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 500/810 [28:01<16:25,  3.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 501/810 [28:05<17:43,  3.44s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 502/810 [28:08<16:37,  3.24s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 503/810 [28:13<19:36,  3.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 504/810 [28:16<18:19,  3.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 505/810 [28:19<17:06,  3.37s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 506/810 [28:22<16:21,  3.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 507/810 [28:25<16:40,  3.30s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 508/810 [28:28<16:03,  3.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 509/810 [28:31<15:38,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 510/810 [28:34<15:07,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 511/810 [28:37<15:01,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 512/810 [28:40<14:53,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 513/810 [28:43<14:29,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 514/810 [28:47<15:31,  3.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▎   | 515/810 [28:49<15:08,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▎   | 516/810 [28:52<14:47,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 517/810 [28:55<14:54,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 518/810 [28:58<14:32,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 519/810 [29:01<14:23,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 520/810 [29:04<14:05,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 521/810 [29:07<13:52,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 522/810 [29:10<13:56,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▍   | 523/810 [29:12<13:35,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▍   | 524/810 [29:15<13:20,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▍   | 525/810 [29:18<13:56,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▍   | 526/810 [29:21<13:51,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▌   | 527/810 [29:25<14:08,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▌   | 528/810 [29:27<13:46,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▌   | 529/810 [29:30<13:47,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▌   | 530/810 [29:35<16:01,  3.44s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 531/810 [29:38<14:59,  3.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 532/810 [29:40<14:24,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 533/810 [29:43<14:11,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 534/810 [29:46<14:08,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 535/810 [29:49<13:34,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 536/810 [29:52<13:33,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▋   | 537/810 [29:55<13:19,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▋   | 538/810 [29:58<13:33,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 539/810 [30:01<13:45,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 540/810 [30:04<13:41,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 541/810 [30:07<13:45,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 542/810 [30:11<13:46,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 543/810 [30:13<13:15,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 544/810 [30:17<14:13,  3.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 545/810 [30:20<13:47,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 546/810 [30:23<14:02,  3.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 547/810 [30:26<13:19,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 548/810 [30:29<13:17,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 549/810 [30:32<12:51,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 550/810 [30:37<15:05,  3.48s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 551/810 [30:39<14:18,  3.31s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 552/810 [30:42<13:27,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 553/810 [30:45<12:47,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 554/810 [30:48<12:31,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▊   | 555/810 [30:50<12:13,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▊   | 556/810 [30:53<12:00,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 557/810 [30:56<11:46,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 558/810 [30:59<11:40,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 559/810 [31:03<13:21,  3.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 560/810 [31:06<12:50,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 561/810 [31:08<12:24,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 562/810 [31:11<12:12,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|██████▉   | 563/810 [31:14<12:08,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|██████▉   | 564/810 [31:17<11:47,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|██████▉   | 565/810 [31:20<12:02,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|██████▉   | 566/810 [31:24<12:53,  3.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|███████   | 567/810 [31:26<12:21,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|███████   | 568/810 [31:29<12:12,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|███████   | 569/810 [31:32<11:56,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|███████   | 570/810 [31:35<11:58,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|███████   | 571/810 [31:38<11:37,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 572/810 [31:41<11:29,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 573/810 [31:44<11:18,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 574/810 [31:47<11:28,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 575/810 [31:50<11:35,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 576/810 [31:53<11:30,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 577/810 [31:56<11:26,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████▏  | 578/810 [31:59<11:31,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████▏  | 579/810 [32:02<11:36,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 580/810 [32:05<11:15,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 581/810 [32:08<11:39,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 582/810 [32:11<11:20,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 583/810 [32:14<11:24,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 584/810 [32:17<11:37,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 585/810 [32:20<11:50,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 586/810 [32:33<22:30,  6.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 587/810 [32:36<18:50,  5.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 588/810 [32:40<17:58,  4.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 589/810 [32:43<15:29,  4.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 590/810 [32:46<14:21,  3.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 591/810 [32:54<18:40,  5.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 592/810 [32:57<16:14,  4.47s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 593/810 [33:00<14:33,  4.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 594/810 [33:03<13:12,  3.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 595/810 [33:06<12:29,  3.48s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▎  | 596/810 [33:09<11:57,  3.35s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▎  | 597/810 [33:12<11:40,  3.29s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 598/810 [33:15<11:15,  3.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 599/810 [33:18<11:12,  3.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 600/810 [33:21<10:52,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 601/810 [33:24<10:56,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 602/810 [33:27<10:42,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 603/810 [33:30<10:31,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▍  | 604/810 [33:34<11:11,  3.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▍  | 605/810 [33:37<11:01,  3.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▍  | 606/810 [33:40<10:56,  3.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▍  | 607/810 [33:43<10:31,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▌  | 608/810 [33:46<10:15,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▌  | 609/810 [33:49<10:12,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▌  | 610/810 [33:52<09:52,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▌  | 611/810 [33:56<10:51,  3.27s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 612/810 [34:00<11:07,  3.37s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 613/810 [34:03<10:59,  3.35s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 614/810 [34:06<10:25,  3.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 615/810 [34:19<19:50,  6.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 616/810 [34:22<16:37,  5.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 617/810 [34:24<14:23,  4.47s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▋  | 618/810 [34:27<12:46,  3.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▋  | 619/810 [34:30<11:43,  3.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 620/810 [34:33<10:54,  3.45s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 621/810 [34:38<11:52,  3.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 622/810 [34:41<11:02,  3.53s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 623/810 [34:44<10:37,  3.41s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 624/810 [34:47<10:10,  3.28s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 625/810 [34:50<10:05,  3.27s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 626/810 [34:53<09:36,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 627/810 [34:56<09:26,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 628/810 [34:59<09:30,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 629/810 [35:02<09:25,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 630/810 [35:05<09:11,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 631/810 [35:08<08:53,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 632/810 [35:11<08:46,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 633/810 [35:14<08:38,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 634/810 [35:17<08:36,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 635/810 [35:21<09:36,  3.30s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▊  | 636/810 [35:24<09:12,  3.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▊  | 637/810 [35:26<08:53,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 638/810 [35:29<08:44,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 639/810 [35:32<08:25,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 640/810 [35:35<08:20,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 641/810 [35:38<08:22,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 642/810 [35:41<08:28,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 643/810 [35:54<16:31,  5.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|███████▉  | 644/810 [35:57<14:01,  5.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|███████▉  | 645/810 [36:00<12:16,  4.47s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|███████▉  | 646/810 [36:03<10:44,  3.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|███████▉  | 647/810 [36:06<10:00,  3.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 648/810 [36:09<09:17,  3.44s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 649/810 [36:12<08:48,  3.28s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 650/810 [36:15<08:24,  3.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 651/810 [36:17<08:05,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 652/810 [36:20<07:51,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 653/810 [36:23<07:45,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 654/810 [36:26<07:29,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).

2531343_20201_2_0,0l4s9o4icz,-2.5996391310270868,-85.38486253174565,-45.00887397811434

5399332_20201_2_0,0l7m6p4icz,4.867072049712602,-69.4341916293481,-53.27504391744955

1194397_20201_2_0,0l9kln4icz,-1.0043890256061734,-116.50335162956864,-33.87456588765137

5592609_20201_2_0,0la30p4icz,0.79593458877549,-146.82909626343698,-45.97677294325965

4301360_20201_2_0,0lg2gn4icz,-2.0064007847225778,-98.71752893392667,-44.739723625321375

4922735_20201_2_0,0lg9ao4icz,1.297810561719116,-85.86529465407017,-40.19220108695933

5121480_20201_2_0,0llgqo4icz,0.8993849568418788,-90.1184262712585,-50.914393461026776

3042490_20201_2_0,0lp2tn4icz,0.45567737336211533,-69.42086444495322,-38.97444049542146

5479822_20201_2_0,0luxrn4icz,1.2019246293757078,-58.87548015998078,-41.27579168098549

3134730_20201_2_0,0lwlun4icz,2.7025192948438406,-89.98263950978418,-54.33519179598812

5643866_20201_2_0,0lwwao4icz,-127.27373789967032,442.60599138046655,295.5544634673554

2862498_20201_2_0,0lxxuo4icz,-0.3586187489263912,-86.40561044057614,-48.65042570610791

2003973_20201_2_0,0m5ozo4icz,1.8208207578314102,-94.59483034404673,-55.67475254681213

6012891_20201_2_0,0m65do4icz,0.24171603633657393,-78.97121447068523,-38.391762764113906

2962432_20201_2_0,0m8dfp4icz,1.19275515813804,-118.3426802402364,-40.61664539621495

3523573_20201_2_0,0m99ho4icz,0.7693462814396398,-39.10001633553924,-38.20757787139274

5563488_20201_2_0,0mdlbp4icz,0.6191947775867321,-85.93127883104168,-16.685608716727742

5505422_20201_2_0,0mdrln4icz,1.25754689973073,-119.52342532675436,-37.55332608267517

4752363_20201_2_0,0mjjgp4icz,-2.754521604203569,-106.32487161254457,-9.123885765263225

5915217_20201_2_0,0mjjmo4icz,-0.5479131813667674,-50.538958739219765,-46.9646010641581

5966280_20201_2_0,0mkfcp4icz,-0.9467730981583001,-92.20189546900394,-33.33711515507338

4120557_20201_2_0,0moxuo4icz,-8.20755343614028,-132.24144008827335,-2.553632256117197

1852177_20201_2_0,0mrw8o4icz,1.9559104044694453,-78.72419430321867,-48.87070190402568

5289546_20201_2_0,0ms1sn4icz,1.4623617850759931,-72.88402332396052,-29.507171905678646

3501050_20201_2_0,0ms7zo4icz,1.6538463023320482,-97.93326396538558,-61.86665438177489

2986255_20201_2_0,0msjxn4icz,-1.0529143089314401,-146.18062509466472,-29.75585110299926

3658190_20201_2_0,0msr6p4icz,-1.6951536753641896,-115.86163585569449,-36.022641041720206

4728308_20201_2_0,0mtdyn4icz,0.6849119680031587,-94.91217594689812,-48.79353886823553

2005692_20201_2_0,0mvjjn4icz,2.31795473404435,-75.89500224359719,-47.73798745891891

2778755_20201_2_0,0mwk9o4icz,-1.488149433614551,-85.77975196129321,-33.59438257445035

4923016_20201_2_0,0mx3lo4icz,-0.5557555235006628,-156.05389869216873,-26.529403719263172

2340126_20201_2_0,0my3uo4icz,4.449619299093316,-79.31844223727356,-54.953043490099674

3855791_20201_2_0,0n6wkn4icz,0.44893756518624384,-140.35650526454725,-44.188549418359614

4786880_20201_2_0,0nb69o4icz,-5.344657161281256,-104.4945348238291,-9.86372312944016

2193687_20201_2_0,0nelvo4icz,-1.5418148312526063,-48.00044386910224,-17.309487291382368

5005105_20201_2_0,0nhuip4icz,-0.9916149997739375,-56.64911233625813,-50.76049119067372

2047799_20201_2_0,0nmn4p4icz,-2.181311280615439,-81.12163993466328,-11.747984923996668

3812496_20201_2_0,0nrlko4icz,1.5493740430874974,-93.55859803085932,-28.998092889292153

5418973_20201_2_0,0nyz0o4icz,-0.3639584403718574,-128.0763867477102,-46.02379106805709

4695482_20201_2_0,0nzhfo4icz,-9.48606669117653,-150.12520767673175,21.17837991385494

2225536_20201_2_0,0o236o4icz,-3.496829924523531,-58.12163259248112,-20.00326611162653

5107551_20201_2_0,goejto4icz,0.16843589834166073,-93.9328863966227,-25.90292050696459

4214127_20201_2_0,0o2mjn4icz,4.5915060000855625,-90.80634616847823,-52.60221776861624

3103623_20201_2_0,0o7avo4icz,-15.038269510433459,6.445041364032647,20.509630788886525

2216114_20201_2_0,0o8p6n4icz,1.9802458966476428,-95.1863313008107,-50.304298556742665

4220198_20201_2_0,8xcqnn4icz,-2.3182101354085436,-132.68131073167874,-20.481808165553588

5477034_20201_2_0,0oeu3p4icz,2.3779907395792867,-78.64782384207629,-41.514602357317415

5418162_20201_2_0,0ojzbn4icz,-1.3930381381310615,-123.8128923664203,-49.61725828393156

2904324_20201_2_0,0om3sn4icz,0.07104623266846333,-68.3119685076878,-38.385983690148365

5707442_20201_2_0,0om69o4icz,0.9842448836518526,-50.019605549552296,-41.155912910671404

3693963_20201_2_0,0oowbp4icz,4.914218303367109,-138.3263390451525,-58.18448415905982

3670705_20201_2_0,0oqiyn4icz,0.9119776190241016,-78.06115667344523,-54.504278607960686

3886548_20201_2_0,0osj0p4icz,-0.3584508178865314,-68.94176324805767,-28.198658514338803

4580549_20201_2_0,0ou55p4icz,-1.0980498121226996,-93.91057310636992,-24.402342393492233

5917066_20201_2_0,0ozn6p4icz,-1.3246357915789706,-125.68939842048206,-56.575434207942095

5435051_20201_2_0,0oznao4icz,1.3420517194089239,-102.32513451652903,-44.368678049825434

4444231_20201_2_0,0pex1p4icz,-0.7040310338919751,-47.903517310816795,-25.451270605601067

5785816_20201_2_0,0phoso4icz,-1.542072642777037,-97.88033791888432,-33.463959691845474

3234532_20201_2_0,0pm8tn4icz,-2.5554953811734533,-95.00472848860787,-27.812774968834162

5569069_20201_2_0,0pnono4icz,0.5238761928488346,-72.25327706662961,-40.162469364820865

2772188_20201_2_0,0po46o4icz,28.639700445309625,-13.024225231581227,-170.33286414792298

2059527_20201_2_0,0pr18p4icz,-2.764994745615989,-120.20261494392972,-28.558651990822767

1613557_20201_2_0,0pszkn4icz,0.9036913189241013,-85.8624860608848,-33.14271026716048

3347476_20201_2_0,0q4gip4icz,6.610746484293648,-97.25800088201294,-37.011807177781236

5656449_20201_2_0,0qhg1o4icz,-3.8243047334887295,-112.96573435220284,-12.418996891465653

5695633_20201_2_0,0qhxzo4icz,0.20418826716328195,-64.32038965786785,-34.80621646235784

1724996_20201_2_0,0qk5so4icz,1.742303176560246,-81.52975502628988,-54.21237109563555

5619945_20201_2_0,0qknxo4icz,-0.6295050905378614,-102.44226577744743,-39.43331208009528

5087586_20201_2_0,0qqkpn4icz,0.5877436518056025,-69.43866832459508,-45.30994780766308

3597915_20201_2_0,0quaxn4icz,0.5328174891418451,-129.09480242890712,-39.4250275828893

2251229_20201_2_0,0qwnan4icz,-0.7886662816161116,-106.22886073382915,-35.82960668386767

1409867_20201_2_0,0qwvnn4icz,-1.3698470953058195,-80.65240783472458,-30.86060487537459

4334319_20201_2_0,0qztep4icz,1.7578158704145765,-91.20509535711957,-46.17605018294262

1185936_20201_2_0,0r1fuo4icz,1.7527149024173865,-65.46519436437922,-22.04169367857685

5957180_20201_2_0,0r1uep4icz,-0.980550334194913,-98.12079388656062,-32.80314333688075

1365676_20201_2_0,0r2ypo4icz,0.3145401820679456,-137.9222076173846,-41.556412338388014

1041527_20201_2_0,0r3nto4icz,0.0751286214203019,-100.99348919678744,-33.919142430070906

3958721_20201_2_0,0r53ip4icz,-9.009583115095781,-64.32238363994838,12.025607600217455

1844022_20201_2_0,0rdkap4icz,0.7968399438639058,-112.69837251001681,-31.356639662935436

3671372_20201_2_0,0res7n4icz,5.90072449340281,-49.999152450513066,-76.5211632373265

5750679_20201_2_0,0rf8fn4icz,-0.5239808653697764,-85.6260335511675,-29.438233509704986

3621641_20201_2_0,0rn5pn4icz,-0.7773199663172533,-75.7655223266998,-28.672556059094248

2328757_20201_2_0,0rnqjp4icz,1.939276819934144,-89.89179379738769,-50.59695325420223

3522043_20201_2_0,0rsf2p4icz,5.454520138818449,-97.52449845572505,-66.75210865177066

1056686_20201_2_0,0rtmeo4icz,1.2049992131367067,-58.09877745923748,-50.81492909427493

4533690_20201_2_0,0ru49p4icz,5.166367732538288,-55.330792138869185,-54.39146175414332

3145170_20201_2_0,0rzeyn4icz,-4.619598280282723,-99.04626956285907,-14.529464177193773

5126875_20201_2_0,0s07mo4icz,0.15317979000334728,-66.11787334209762,-41.13268715661188

5588858_20201_2_0,0s3zsn4icz,1.9459335487527079,-93.59953080806378,-65.70220401172674

4441468_20201_2_0,0s42co4icz,-5.387287813196993,-90.88580570630774,-13.97439938975053

2109963_20201_2_0,0s8xvo4icz,-2.1629571308641378,-127.11093782022286,-36.87218693424241

2832172_20201_2_0,0sa12p4icz,-1.012819057776115,-67.58287101756363,-25.82381904265199

5368070_20201_2_0,0sa8on4icz,-2.254306097407196,-101.34041011386688,-17.312649880066004

4134788_20201_2_0,0sd6dn4icz,0.9804115077453731,-104.36075886500933,-53.029140998021205

2634797_20201_2_0,0seyip4icz,-2.735670229291178,-108.70386394818277,-10.871507863477191

4130149_20201_2_0,0sls0o4icz,-0.8197544113985094,-111.66666944843166,-25.986299753348163

5283156_20201_2_0,0snzwo4icz,1.383900977576972,-40.5223227033037,-45.29300963552484

3748119_20201_2_0,0t0kcn4icz,-2.0353465764808014,-94.41479528103895,-28.55639723100643

1154890_20201_2_0,0t1mfp4icz,2.5995537631346757,-100.0482591118222,-57.34820241663937

1260284_20201_2_0,0t1vip4icz,-2.096219273081931,-80.64002740203213,-64.48227064073977

5343947_20201_2_0,0t23ro4icz,0.6840682312699027,-33.79774459483468,-37.293012670172956

1850589_20201_2_0,0tajkn4icz,-1.43406841500844,-86.3365155138774,-21.638440323454546

1009244_20201_2_0,0tfp6o4icz,3.873922389703812,-92.5223557195572,-51.06286094374438

1907166_20201_2_0,0tj7sn4icz,-0.7012114392922143,-102.47149537879551,-39.75302844072702

4815883_20201_2_0,xkesin4icz,0.6123634580107665,-104.97240048020473,-45.001082196189586

3933193_20201_2_0,0tl7fp4icz,-3.0667578948827883,-100.74350142105678,-24.363850516708723

3218966_20201_2_0,0tva6o4icz,2.108340043424981,-84.25559564401138,-58.56549349642401

3065870_20201_2_0,0tzgun4icz,1.1100117182516767,-76.77538581800849,-37.99340279202626

4229809_20201_2_0,0u547o4icz,1.0651971088894032,-79.05969735496689,-48.07343731485963

5767345_20201_2_0,0u6cro4icz,1.1955325177773775,-68.45315054176871,-36.08970258000856

5348360_20201_2_0,0ud49o4icz,-0.9065501375697294,-81.35726459091518,-30.23624721176732

2231726_20201_2_0,0uhjgp4icz,-0.8822610618372572,-87.59569721907019,-44.11873483594229

5134255_20201_2_0,0uhk3o4icz,0.8986406495287759,-121.54743606775503,-52.950433610368364

2754731_20201_2_0,0ujrco4icz,-0.05578375607254538,-95.39211278782864,-28.464603460424684

2431193_20201_2_0,0uk05o4icz,0.1970119264941947,-101.8013405689135,-36.50076636289688

3555880_20201_2_0,0uk0io4icz,2.507914071824862,-76.6947938768065,-45.93338915329977

1467256_20201_2_0,0ul0eo4icz,-1.8025572719080094,-112.30599653954147,-37.635945847706836

1142232_20201_2_0,0um23p4icz,-1.081634183125346,-113.79802895588253,-48.878788280521746

2581570_20201_2_0,0umfto4icz,1.7930191114234042,-58.19904613453673,-46.047648126997984

1890025_20201_2_0,0uo3dp4icz,2.0387210778983658,-80.08606087960399,-52.972258118653556

2057289_20201_2_0,0url4p4icz,-0.889913447456915,-128.12263758576157,-18.035936700773618

3594033_20201_2_0,0uwabp4icz,1.8600817498144786,-67.74990043438922,-50.559981386764704

4953985_20201_2_0,0uwwqn4icz,0.067066029733804,-70.77873354394828,-31.74064616984225

2078824_20201_2_0,0uzqvn4icz,-1.08196812430012,-90.89906070147475,-40.32447211555561

4365681_20201_2_0,0v0g6o4icz,-0.5396671350920638,-113.88099169208724,-46.741677168342136

2352878_20201_2_0,0v11fo4icz,-0.8019013390977731,-65.7369646811992,-32.7207306100953

4570089_20201_2_0,0v4bln4icz,1.439816898902608,-138.86354768869512,-53.337405391018294

2261409_20201_2_0,0v8h5p4icz,-0.9526724092531768,-126.19987774829067,-20.92569324743984

5112900_20201_2_0,0vcdco4icz,-1.8681214061787568,-99.76963931623064,-11.514201551846043

2713937_20201_2_0,0vdyon4icz,0.30249388537446,-102.57332521401156,-55.44344169147324

1840909_20201_2_0,0ve08p4icz,-2.370186051241392,-84.17053156323652,-27.9537538510301

4581001_20201_2_0,0ven4p4icz,-2.108346719610667,-97.97321318569183,-35.567180947947264

2098162_20201_2_0,0vf5qo4icz,3.4598091875732897,-69.5121400622181,-45.978146639738384

5356096_20201_2_0,0vucfp4icz,3.2145924459647497,-116.24467001267965,-56.43099048571466

5978747_20201_2_0,0vyfdn4icz,-0.7018032400390701,-103.70915650748276,-29.33376700450323

4493132_20201_2_0,0vz75p4icz,1.334352750529201,-72.7201347949715,-32.89435765768218

2864019_20201_2_0,0w2gxn4icz,-1.9202719436185751,-76.96759312952122,-24.791907073830714

4617586_20201_2_0,0wd54p4icz,-0.2888449790378068,-125.03094745837132,-41.669114612472015

1049951_20201_2_0,0we58p4icz,-0.02494920449316146,-69.60334198437735,-43.28888766633739

5039852_20201_2_0,0wgexn4icz,-3.02636660082449,-136.95720740379483,-4.149025306155309

2980552_20201_2_0,0wgzao4icz,-2.997490485964983,-101.12803538160517,-4.513489487754782

3161779_20201_2_0,0whxwn4icz,0.3097016962580856,-65.80371422059687,-37.830164788628565

2911007_20201_2_0,0woloo4icz,5.19080204760858,-56.19462792390368,-71.73399572752456

2075321_20201_2_0,0wpcln4icz,-1.3413395305245273,-137.4317110982665,-49.15924419276466

5850570_20201_2_0,0wqthp4icz,-3.304075824979555,-115.30784353605165,-20.765294719695987

4927528_20201_2_0,0wxh4o4icz,1.7256948197275686,-77.41824542075517,-33.062491131356495

4490574_20201_2_0,0wy77p4icz,1.4485104592473055,-119.12275702624027,-49.65322075742414

3953019_20201_2_0,0wyi5p4icz,-1.0963392961044343,-66.40919151986085,-10.46356058177497

4874136_20201_2_0,0wzhjn4icz,0.13925071383466045,-65.39108150599733,-34.80091725598783

1436495_20201_2_0,0x0u8p4icz,3.0796732608900683,-84.68989724869752,-61.999019416229174

4447571_20201_2_0,0x35vo4icz,2.6118704132461708,-46.86357449785706,-52.904424629914345

3359452_20201_2_0,0x3hkn4icz,-1.2569242638092952,-96.24080902301404,-35.70715956405439

4887099_20201_2_0,0x6tqo4icz,-3.9886767387218143,-98.24060036335624,-8.080203787797501

1494306_20201_2_0,0x9oeo4icz,-2.3317949367302,-114.68328301448716,-12.187275095256012

3448220_20201_2_0,0xbwmn4icz,-0.08419998387686295,-60.24149120511365,-45.34853101519789

1790866_20201_2_0,0xclko4icz,-0.7135623277349641,-111.28747161831106,-19.86600375476135

3753824_20201_2_0,0xerbp4icz,-1.1469633157551722,-104.33890732719064,-50.65008647586738

4489917_20201_2_0,0xf0no4icz,-1.7068918181430477,-124.31800328303578,-16.882918111916936

1395808_20201_2_0,0xispo4icz,1.3057212117385573,-88.98583370333324,-52.75735611077663

4910362_20201_2_0,0xkv1o4icz,-0.10986937805531562,-134.2038116308924,-25.03187470946618

1303375_20201_2_0,0xm7gn4icz,-1.6039471483408254,-138.11640298994928,-24.69639294179774

5477624_20201_2_0,0xqihp4icz,1.277310340221666,-105.09893980691413,-41.377784246252986

4907186_20201_2_0,0xqmkn4icz,-1.9587273835488384,-126.37590893809212,-20.253604237497115

2627682_20201_2_0,0xt7lo4icz,-0.7093951787490395,-90.75110522783916,-48.58677034342546

2134851_20201_2_0,0xvgjo4icz,-6.756988680967093,-154.37529614338607,8.32365249291766

3497167_20201_2_0,0xwhmn4icz,-0.5987357158598997,-92.56683063466582,-42.76570304626662

4584369_20201_2_0,0xwsvn4icz,-0.7195345404251322,-93.06529447526276,-22.044686404536833

4466191_20201_2_0,0y1wwn4icz,-0.4883480471321002,-141.15481376067063,-33.194083753523515

1077417_20201_2_0,0y3gbo4icz,-0.6153072397599855,-92.85367799360478,-14.951956462783528

4178538_20201_2_0,0y3i5n4icz,-1.0627457759715488,-97.21184431191517,-26.62029336078716

1022280_20201_2_0,0y5tbo4icz,1.4015382263515967,-101.8545844241645,-40.66843861852256

4358396_20201_2_0,0y7fwn4icz,-0.15652031546434433,-100.13532240673584,-38.44563498058962

5884392_20201_2_0,0ybpdp4icz,-0.8678717005090293,-75.26430288041288,-23.975559510651635

1049320_20201_2_0,0yc23p4icz,-3.459312589580674,-89.45946817445565,-2.6441253336866453

3190396_20201_2_0,0yet8o4icz,-3.022551004549096,-114.99320039972335,-20.91460940410498

5694958_20201_2_0,0yj5nn4icz,1.9079241478021502,-119.561857235064,-51.34577283649901

3292092_20201_2_0,0yk49p4icz,-4.683537350341096,-110.28049411285451,-15.715301343273978

2727510_20201_2_0,0ylr3o4icz,3.2891630292284377,-99.11704803734875,-53.16453054109769

1451619_20201_2_0,0yq4vo4icz,-2.9956571539057086,-84.78957695980512,-13.872300917991822

3658265_20201_2_0,0ysico4icz,0.9326256296085408,-125.14015961879383,-39.26193569035303

6005585_20201_2_0,0yttao4icz,1.3380665278878483,-95.29630491717629,-32.47851617901921

1652497_20201_2_0,0yvoin4icz,-2.0782822689191565,-98.91641291152405,-26.947388438054332

3591697_20201_2_0,0yxlao4icz,-1.1986773489018587,-72.50123598556362,-22.16466872927805

4888445_20201_2_0,0yxrco4icz,-0.6212225554052182,-87.1404008474691,-23.400003325086885

4450787_20201_2_0,0yzxbo4icz,1.8225227570066174,-61.147960837596486,-43.23169487050835

1831280_20201_2_0,0z849n4icz,-1.353274354989511,-91.11806396243716,-32.301762238413744

4081070_20201_2_0,0z85hp4icz,1.69697111914492,-94.09822651893151,-55.543460962358466

4774379_20201_2_0,0z8y0o4icz,-1.8220057580595257,-100.85205419506039,-36.801031795620574

5526090_20201_2_0,0z9wip4icz,2.7110377824986984,-86.26778867488588,-52.45360238274961

4785553_20201_2_0,0zcbhp4icz,-1.8002078904573764,-99.68809867699284,-35.12708479992612

2034950_20201_2_0,0zffgp4icz,-2.4240360989509413,-126.97866576245937,-23.56921213779559

4009078_20201_2_0,0zs1wn4icz,2.074001485252266,-106.62710635645556,-33.390330597652266

3451166_20201_2_0,0zt9kn4icz,-0.29497777328887437,-116.83744032915232,-33.519975996528686

3648792_20201_2_0,100hcp4icz,-1.467966367885363,-99.8296158269489,-34.282737017647904

3066708_20201_2_0,101jgn4icz,0.4643733214096502,-107.4019973991399,-32.14011629540005

3385695_20201_2_0,105i8p4icz,1.706054967182522,-91.59979291726981,-41.91553965241087

2372909_20201_2_0,107wko4icz,-0.6605724387080572,-97.8566820017598,-38.876511351456784

5107404_20201_2_0,108kcn4icz,-1.1779336386274406,-122.87381507206328,-17.849550230881178

2929214_20201_2_0,1097zo4icz,-0.9416559684825828,-92.5721525220722,-30.68721674139644

2564632_20201_2_0,10f3ln4icz,2.579730103245508,-89.74149035349623,-43.35888894167421

2871719_20201_2_0,10k4yo4icz,-5.217252030856621,-106.22178843547681,-7.3879188067471375

5543760_20201_2_0,10kp8p4icz,-1.140592795065117,-96.59004762487001,-29.129854098993647

4683503_20201_2_0,10pcan4icz,1.6012355833155134,-71.1058648095999,-42.61983625285956

2047902_20201_2_0,10r2mn4icz,-1.6468004993689518,-68.8924986297339,-34.58047808934644

2613825_20201_2_0,10scvo4icz,-12.518002113962957,-65.85160306574943,29.985446871425452

2324612_20201_2_0,1154cp4icz,-0.01611250041682039,-67.19466562074004,-31.945284458145736

5745624_20201_2_0,11591p4icz,-1.0155214988857133,-80.72938593083018,-34.118890781150085

5208671_20201_2_0,11825o4icz,-1.223530826230877,-122.95605701051707,-39.26974521762264

5913873_20201_2_0,119ifo4icz,-0.2902095191789593,-74.56800451748,-32.88217809409633

4539261_20201_2_0,11gnxn4icz,3.527647798876487,-99.06707552396216,-44.57675565864733

5429592_20201_2_0,11jtun4icz,-0.4417365087881187,-76.54096388184442,-45.147546285256595

2752944_20201_2_0,11khgp4icz,0.7893575308163843,-92.37327538479863,-51.98298388211235

3618325_20201_2_0,11n3uo4icz,1.7411931460998478,-58.62638199783072,-37.76216313825387

4886410_20201_2_0,11ozap4icz,-1.0024254486990944,-40.56310971927019,-34.62379919716349

5518924_20201_2_0,11ucun4icz,20.713559493049072,-15.007705226474997,-99.60035464676457

3774644_20201_2_0,11vuyo4icz,-0.7253168974865858,-79.93724102289565,-29.14320805357856

2831416_20201_2_0,11ykio4icz,2.5446705035404285,-82.05713120765444,-43.63327577025983

5329491_20201_2_0,11ynso4icz,-0.23782641696403575,-105.5151293681302,-39.94636343841759

4853501_20201_2_0,11zten4icz,0.9088163206411185,-111.60433103120232,-40.90359769439017

5100648_20201_2_0,123idp4icz,1.0104698695404943,-64.75670655024751,-46.09026689897797

5184420_20201_2_0,12g0tn4icz,-0.9063004465696011,-79.82504381897664,-51.922947795244326

1843266_20201_2_0,12giqn4icz,1.621817841423887,-92.89199768263677,-44.12735643058993

5432631_20201_2_0,12io7p4icz,-2.8040343821604456,-95.09822077834778,-13.399834908841811

3843668_20201_2_0,12lifp4icz,-0.13131347922340034,-112.18401445907588,-52.134694998176414

2922856_20201_2_0,12neap4icz,0.7149478527941024,-106.5014949592042,-66.99869848314539

5740976_20201_2_0,12t2ep4icz,-0.9316723510670003,-80.1744820852752,-39.962100209711096

5496292_20201_2_0,12u22p4icz,-0.12030738312403556,-90.14757875887796,-28.48212897923908

4629480_20201_2_0,12vzgp4icz,-3.140829475951698,-97.81535871480418,-16.941537974520813

2092848_20201_2_0,12w3ln4icz,1.6331922066141338,-113.5618355439851,-41.17888165793576

4173667_20201_2_0,12w90p4icz,1.011221238203488,-78.35271141489892,-36.15751023801971

5029964_20201_2_0,12y0bp4icz,-5.426886617655642,-111.26137372461025,-14.56410841369518

3577861_20201_2_0,1328pn4icz,-1.9130830255106803,-96.07256458860039,-35.74541338665978

4869020_20201_2_0,1364yo4icz,-0.4128878782992233,-90.55161831016596,-28.52757615158241

5481512_20201_2_0,137o5o4icz,-1.5136778610358053,-123.18513882626522,-15.213809189598805

1296257_20201_2_0,139n0o4icz,1.3958107763168952,-90.49267034163717,-33.049303125403114

3892068_20201_2_0,13fyqn4icz,-2.275597529962282,-85.66233787243081,-18.040463097231566

2424192_20201_2_0,13gfmn4icz,-1.4779604884858408,-141.4739272829984,-23.760185169801446

4028998_20201_2_0,13uijp4icz,0.43625258183133064,-83.13300636987884,-45.50532782560114

4023239_20201_2_0,13unfp4icz,-1.432488421213851,-130.88417593520785,-29.753631941216014

5150211_20201_2_0,13zeun4icz,1.9156850647288797,-75.13859660496709,-39.687848576537505

3894004_20201_2_0,13zotn4icz,0.9037197541007526,-87.28250374414054,-44.75846220131734

3895731_20201_2_0,1403vo4icz,-1.8840280760735855,-105.00822386789446,-34.77873449854006

5413602_20201_2_0,14faon4icz,-2.37069181631598,-102.27703478916106,-38.45218295492434

4192243_20201_2_0,14kpxo4icz,1.0918416745912032,-87.41145409459105,-58.63946261472216

5771755_20201_2_0,14l14o4icz,-1.1723840286795506,-115.02473886203586,-25.27783407196773

5590445_20201_2_0,14my2p4icz,-0.20004485297518432,-141.19617292693368,-40.402107575805246

5427760_20201_2_0,14srqo4icz,-2.1990309494033986,-85.88052522345347,-8.093880491349566

2821758_20201_2_0,14vclo4icz,2.889577690081199,-112.96172104074955,-55.96918960343581

2663902_20201_2_0,14y29o4icz,0.9391365537794306,69.11674580085463,-47.87936533261863

3560417_20201_2_0,14z57p4icz,-9.197622685704005,-96.71522355281004,38.0271788301736

5899197_20201_2_0,14zcqo4icz,1.8297330155718108,-80.58791112637564,-53.95204058995867

4211978_20201_2_0,14zp8p4icz,0.49176669887946856,-94.54027328594549,-25.449498580995012

4187365_20201_2_0,151h5p4icz,-3.230460753075415,-126.34292373090133,-46.050337192631616

3852610_20201_2_0,1590lo4icz,0.06639731226369187,-69.25298313419276,-33.63148436495106

1507721_20201_2_0,15i9so4icz,2.0090673243476536,-85.23430346225186,-47.603824515076

4053690_20201_2_0,15k56p4icz,0.6360566917128148,-90.12354820816944,-35.49965445161493

4868687_20201_2_0,15lubo4icz,0.6796708461169555,-113.73824774163413,-30.01788908780854

1040087_20201_2_0,15nbno4icz,-0.3009962993561541,-95.49993727294941,-21.537782203621774

2458277_20201_2_0,15rudn4icz,-1.4853063835078344,-106.33620209863471,-24.884360145879157

3357641_20201_2_0,15ruon4icz,1.0065122380695508,-102.84370708990224,-45.66821062676915

4810528_20201_2_0,15telo4icz,0.08123591108760844,-78.05037472831202,-50.07522765802695

4690273_20201_2_0,15usbp4icz,4.757251173560799,-117.17703116598074,-72.9793713345295

2076566_20201_2_0,15vfqn4icz,2.597988613503278,-107.87754888351643,-54.46839904749481

1763617_20201_2_0,15vmpo4icz,-1.3688384777195277,-118.67770015649364,-34.49836210865435

1060609_20201_2_0,15xsro4icz,1.1350832753585187,-143.3046469394063,-58.08356129258976

1314471_20201_2_0,161zoo4icz,-6.399909501908127,-70.84097520475967,-3.84832360478903

5732250_20201_2_0,16734p4icz,-1.1925076363546185,-80.61822516539172,-26.549467453306193

2477615_20201_2_0,168ybp4icz,-0.8365092918133166,-117.50208852225575,-29.347356648370493

3341928_20201_2_0,16d6ro4icz,2.2466176225710512,-105.18168208945025,-50.05086600878042

3406483_20201_2_0,16nzkn4icz,1.0472078911421967,-65.7265015322939,-49.126203168398575

3227323_20201_2_0,16onvo4icz,0.4987371447343547,-95.78146750149918,-29.146175911539515

3900966_20201_2_0,16qq6n4icz,0.36726580507379886,-89.97660583838638,-53.407666273175664

1931618_20201_2_0,16y06o4icz,-0.946210301998322,-89.0915121790525,-47.02450964728138

2046390_20201_2_0,172oqn4icz,-0.7075101990568373,-117.2138939452363,-24.164807448147116

3157436_20201_2_0,177w9p4icz,1.517800916799742,-75.71019716968314,-54.83086232552276

5069501_20201_2_0,178d3p4icz,2.6928214275103133,-64.36294288046363,-59.190081104910405

5858843_20201_2_0,179jep4icz,-0.15530065262435339,-87.72304342553565,-47.91055270139316

1057058_20201_2_0,17bbno4icz,1.8989138334605158,-83.4618738906172,-37.14290227376705

2148028_20201_2_0,17drqo4icz,-1.1327993465217037,-102.505919908598,-30.14375958206294

1286296_20201_2_0,17k4bp4icz,-15.252160403073477,-90.12234087888615,44.22325078738899

5052540_20201_2_0,17ljbp4icz,-1.676585612429887,-105.89043143201823,-34.430214861612825

4261990_20201_2_0,17qkno4icz,0.9274744496930251,-79.32491879901505,-56.64145917090478
 81%|████████  | 655/810 [36:29<07:22,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 656/810 [36:32<07:37,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 657/810 [36:35<07:28,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 658/810 [36:38<07:40,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████▏ | 659/810 [36:41<07:56,  3.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████▏ | 660/810 [36:45<07:58,  3.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 661/810 [36:48<07:44,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 662/810 [36:50<07:26,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 663/810 [36:53<07:13,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 664/810 [36:56<07:04,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 665/810 [36:59<07:23,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 666/810 [37:06<10:00,  4.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 667/810 [37:09<09:10,  3.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 668/810 [37:12<08:24,  3.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 669/810 [37:39<24:57, 10.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 670/810 [37:52<26:36, 11.40s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 671/810 [37:55<20:25,  8.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 672/810 [37:58<16:08,  7.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 673/810 [38:01<13:10,  5.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 674/810 [38:04<11:05,  4.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 675/810 [38:07<09:52,  4.39s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 676/810 [38:10<08:49,  3.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▎ | 677/810 [38:13<08:02,  3.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▎ | 678/810 [38:16<07:29,  3.40s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 679/810 [38:19<07:04,  3.24s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 680/810 [38:21<06:45,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 681/810 [38:24<06:29,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 682/810 [38:27<06:24,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 683/810 [38:30<06:24,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 684/810 [38:33<06:27,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▍ | 685/810 [38:36<06:14,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▍ | 686/810 [38:39<06:06,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▍ | 687/810 [38:42<06:04,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▍ | 688/810 [38:45<05:59,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▌ | 689/810 [38:48<05:59,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▌ | 690/810 [38:51<05:56,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▌ | 691/810 [38:54<05:59,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▌ | 692/810 [38:57<05:53,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 693/810 [39:00<05:43,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 694/810 [39:03<05:37,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 695/810 [39:05<05:28,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 696/810 [39:08<05:32,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 697/810 [39:11<05:27,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 698/810 [39:14<05:27,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▋ | 699/810 [39:17<05:25,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▋ | 700/810 [39:20<05:19,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 701/810 [39:23<05:14,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 702/810 [39:27<05:55,  3.30s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 703/810 [39:30<05:47,  3.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 704/810 [39:34<05:43,  3.24s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 705/810 [39:37<05:41,  3.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 706/810 [39:40<05:34,  3.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 707/810 [39:43<05:25,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 708/810 [39:46<05:16,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 709/810 [39:49<05:09,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 710/810 [39:52<04:58,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 711/810 [39:55<04:51,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 712/810 [39:58<04:51,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 713/810 [40:00<04:44,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 714/810 [40:04<04:47,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 715/810 [40:06<04:39,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 716/810 [40:10<04:40,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▊ | 717/810 [40:18<07:12,  4.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▊ | 718/810 [40:21<06:20,  4.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 719/810 [40:24<05:38,  3.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 720/810 [40:27<05:28,  3.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 721/810 [40:30<05:06,  3.44s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 722/810 [40:33<04:48,  3.28s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 723/810 [40:36<04:32,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 724/810 [40:39<04:24,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|████████▉ | 725/810 [40:42<04:22,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|████████▉ | 726/810 [40:45<04:13,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|████████▉ | 727/810 [40:48<04:10,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|████████▉ | 728/810 [40:51<04:06,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 729/810 [40:54<04:02,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 730/810 [40:57<04:10,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 731/810 [41:01<04:11,  3.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 732/810 [41:03<04:00,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 733/810 [41:06<03:55,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 734/810 [41:09<03:44,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 735/810 [41:12<03:44,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 736/810 [41:15<03:43,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 737/810 [41:22<05:10,  4.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 738/810 [41:25<04:36,  3.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 739/810 [41:28<04:16,  3.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████▏| 740/810 [41:31<03:56,  3.38s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████▏| 741/810 [41:35<04:01,  3.50s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 742/810 [41:38<03:47,  3.35s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 743/810 [41:41<03:33,  3.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 744/810 [41:44<03:24,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 745/810 [41:46<03:16,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 746/810 [41:49<03:10,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 747/810 [41:52<03:05,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 748/810 [41:55<03:03,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 749/810 [41:58<02:59,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 750/810 [42:01<02:56,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 751/810 [42:04<02:49,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 752/810 [42:07<02:48,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 753/810 [42:10<02:46,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 754/810 [42:12<02:41,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 755/810 [42:16<02:42,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 756/810 [42:19<02:38,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 757/810 [42:21<02:34,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▎| 758/810 [42:24<02:30,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▎| 759/810 [42:28<02:47,  3.28s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 760/810 [42:31<02:39,  3.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 761/810 [42:36<02:59,  3.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 762/810 [42:39<02:44,  3.42s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 763/810 [42:42<02:32,  3.24s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 764/810 [42:45<02:24,  3.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 765/810 [42:48<02:17,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▍| 766/810 [42:51<02:14,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▍| 767/810 [42:54<02:10,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▍| 768/810 [42:56<02:03,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▍| 769/810 [42:59<01:58,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▌| 770/810 [43:02<01:53,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▌| 771/810 [43:05<01:51,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▌| 772/810 [43:08<01:49,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▌| 773/810 [43:11<01:51,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 774/810 [43:14<01:46,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 775/810 [43:17<01:45,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 776/810 [43:20<01:40,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 777/810 [43:23<01:37,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 778/810 [43:26<01:36,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 779/810 [43:29<01:31,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▋| 780/810 [43:33<01:41,  3.39s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▋| 781/810 [43:36<01:34,  3.24s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 782/810 [43:39<01:27,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 783/810 [43:42<01:21,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 784/810 [43:45<01:18,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 785/810 [43:48<01:15,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 786/810 [43:53<01:30,  3.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 787/810 [43:56<01:21,  3.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 788/810 [44:00<01:19,  3.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 789/810 [44:03<01:13,  3.51s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 790/810 [44:06<01:05,  3.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 791/810 [44:09<00:59,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 792/810 [44:12<00:56,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 793/810 [44:15<00:53,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 794/810 [44:18<00:48,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 795/810 [44:21<00:46,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 796/810 [44:24<00:43,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 797/810 [44:27<00:39,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▊| 798/810 [44:30<00:36,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▊| 799/810 [44:33<00:33,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 800/810 [44:36<00:29,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 801/810 [44:40<00:28,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 802/810 [44:43<00:25,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 803/810 [44:46<00:21,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 804/810 [44:48<00:17,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 805/810 [44:51<00:14,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|█████████▉| 806/810 [44:54<00:11,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|█████████▉| 807/810 [44:57<00:08,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|█████████▉| 808/810 [45:00<00:05,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|█████████▉| 809/810 [45:03<00:02,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|██████████| 810/810 [45:06<00:00,  3.06s/it]100%|██████████| 810/810 [45:06<00:00,  3.34s/it]

1773999_20201_2_0,17vjto4icz,-2.15165345392154,-132.3808931974135,-26.487646020410693

2536623_20201_2_0,17zv0o4icz,-0.7014622671238699,-85.02718872372807,-31.902987518426713

3350082_20201_2_0,1810lo4icz,-0.3204382560443802,-119.70580001749212,-34.9612661489045

1763120_20201_2_0,181exn4icz,2.391207029832492,-86.46966676362334,-36.44512230220985

4474028_20201_2_0,181qjn4icz,-0.484258444642438,-95.61269546455341,-82.43471252155852

1091896_20201_2_0,182uuo4icz,3.3588913173917523,-79.166010753611,-59.25508681658934

2559417_20201_2_0,185o7n4icz,2.8413967518335506,-73.68262335059475,-52.12008517234446

2959343_20201_2_0,186fao4icz,0.5174005190696883,-87.13779839820162,-32.62715553710717

3012458_20201_2_0,186gbo4icz,1.1047059233747982,-90.06442288545932,-36.92232349542873

1746712_20201_2_0,18bi4p4icz,2.0165979272145225,-104.74871749483083,-36.00249681714706

4518087_20201_2_0,18bicn4icz,-4.350198897449155,-97.49082291300698,-18.244474015276182

3516026_20201_2_0,18bngp4icz,-3.688507677039262,-69.46112160515327,-5.590830912318879

4626512_20201_2_0,18d07o4icz,-1.4962254371449137,-97.55776262723683,-23.103120011952726

2087526_20201_2_0,18dzuo4icz,1.7372079304559054,-54.7680239446218,-41.33373733583352

1804115_20201_2_0,18eavo4icz,0.7343805581544984,-98.1764984148362,-43.54650114029178

3882356_20201_2_0,18f2rn4icz,-2.81699256283996,-110.88023536261076,-23.052303518041356

4545256_20201_2_0,18igdp4icz,2.472120607825605,-76.54146192316702,-58.47076273989235

2578006_20201_2_0,18mjdp4icz,3.991906872674179,-76.11369552080518,-24.695989214688325

2318541_20201_2_0,18t3ln4icz,-1.0095375708070835,-102.81318130194634,-29.8130205737791

1432732_20201_2_0,18u4dp4icz,-1.3860717381213774,-126.42104042079805,-36.57842810481307

3177732_20201_2_0,18uien4icz,-3.1166550175334664,-115.5280693013429,-25.34314150323121

3045954_20201_2_0,18vklo4icz,-2.1519301525389682,-132.70232286784727,-38.29799921347424

4192285_20201_2_0,18wiwn4icz,-0.4413962173275473,-90.82695205784287,-45.000337309065344

5051938_20201_2_0,18yb7o4icz,-1.4377290713636568,-73.44345035218385,-21.094717041188375

4843569_20201_2_0,194f3o4icz,-4.313243764838669,-120.98470154315345,-8.432844078770003

1652715_20201_2_0,194nip4icz,1.159569767890027,-103.07947311841556,-28.214046832517695

4671014_20201_2_0,1954ap4icz,-0.5319208763206335,-71.45169195881215,-40.68507992460064

1255046_20201_2_0,19c2rn4icz,3.871743788956697,-63.221470019488834,-48.35912825008012

4909260_20201_2_0,19g8on4icz,-0.6470567496076358,-124.93224942548494,-18.209176439622382

5622815_20201_2_0,19hhyn4icz,-2.1619784618654396,-119.77662305836887,-34.20622186867077

4544822_20201_2_0,19hz8p4icz,1.8212598046714858,-63.674833458826214,-49.706431884388195

3321902_20201_2_0,19khep4icz,1.3145182465382954,-86.26449556739578,-25.991719433947978

4077367_20201_2_0,19kvao4icz,1.5089353733924074,-111.5136418826838,-36.5391024574064

5697598_20201_2_0,19mdpo4icz,-1.0576740712145614,-90.96786514557377,-23.39989285839104

5907154_20201_2_0,19ml7p4icz,-0.15129478058885173,-89.8294417825193,-32.08767052786973

4082129_20201_2_0,19mqrn4icz,2.9890131931458717,-103.13097007345661,-54.179040877987774

2131530_20201_2_0,19naxn4icz,-1.7490096567188218,-105.93713961901747,-28.646058513679208

2830007_20201_2_0,19pono4icz,-0.9802609364833879,-55.1164580409671,-26.59907619492043

5182854_20201_2_0,19ucho4icz,0.2762332065119066,-104.33580242879177,-48.56780503203706

2633237_20201_2_0,19xq0o4icz,-5.758350346091902,-111.9612070437476,-24.717516736542137

2884685_20201_2_0,19zjho4icz,1.8576796223320906,-47.55677555139212,-19.152526457215515

3862217_20201_2_0,1a0m2p4icz,-1.5523621003572714,-90.23097406670826,-24.35966194557949

1967540_20201_2_0,1a29vo4icz,-1.4478926539348247,-82.78311600098942,-38.476220086728944

3912059_20201_2_0,1a7p2o4icz,2.273616812172371,-98.51275346576182,-52.347368944677214

1166832_20201_2_0,1aeico4icz,-2.3166023613034223,-101.52474005151927,-17.142554963981382

4519135_20201_2_0,1aej0p4icz,1.0033495762980378,-96.99848783136451,-40.33581245597904

5834562_20201_2_0,1aekgn4icz,0.8659047440542961,-84.745386770002,-44.23784313002433

5210408_20201_2_0,1agd3p4icz,2.7319210770679194,-61.48144861413161,-49.6036236971549

4566256_20201_2_0,1ah3mo4icz,0.370893062337368,-65.65200380860182,-52.09140541358721

5538492_20201_2_0,1ah4tn4icz,-1.487276145356564,-105.84304419402972,-18.316281152569502

4680688_20201_2_0,1aj78o4icz,2.1580502320004586,-104.06812296574103,-30.784869921795178

3076054_20201_2_0,1az8jo4icz,0.9357746901977818,-74.87128637687613,-44.72905583415621

1912172_20201_2_0,1b2h3o4icz,-3.991493161153489,-131.11011208410164,-25.346246933475356

2638772_20201_2_0,1b3o3o4icz,-0.3116230751415601,-70.27293942847433,-15.693892129172099

2481014_20201_2_0,1b7r2p4icz,2.1873194347160427,-113.7850457560375,-47.72378884361831

5810921_20201_2_0,1basen4icz,-0.07081198131896563,-83.78051132441641,-51.658213257551125

4812168_20201_2_0,1bfiqo4icz,-0.8227648939101009,-126.52503960580285,-42.40108838259475

5119689_20201_2_0,1bij9o4icz,1.3688272884118,-83.20253595783822,-45.25759387888347

5446013_20201_2_0,1bnnqo4icz,0.8288058427859558,-82.89405117300882,-34.416833864368485

1045637_20201_2_0,1bvs9p4icz,0.7045712186074392,-90.61469984816168,-32.9801836647016

3082994_20201_2_0,1bw1ap4icz,-1.4000928892006514,-116.05156078863553,-16.390327367667666

5917163_20201_2_0,1c0arn4icz,1.099884714328717,-81.13423516925855,-39.86526916479146

3257444_20201_2_0,1c145p4icz,-1.7552700895447542,-98.36074662993323,-13.688279905203203

3701876_20201_2_0,1c2wgp4icz,-3.615618743533585,-135.85798032941636,-5.30299833067744

3357183_20201_2_0,1c62no4icz,-1.7393774392385688,-121.40652463177611,-34.158134832564215

5993236_20201_2_0,1cdiao4icz,0.04653874076467189,-120.74727912900067,-32.391186266730074

4908458_20201_2_0,1civen4icz,-2.9401094058361585,-112.82315881362518,-25.370949756959135

2359909_20201_2_0,1cp9go4icz,3.045159624403453,-69.12417767693609,-46.82617387664229

5375626_20201_2_0,1cqsro4icz,0.2316559094678336,-116.57332978375956,-27.82171085687341

5435324_20201_2_0,1cr5ap4icz,0.8034858915858275,-72.37590965593725,-32.058462655200785

2906686_20201_2_0,1crm3o4icz,0.21525033402600768,-77.18280902445048,-29.22167113477815

3917920_20201_2_0,1cu44o4icz,-0.013920145339093942,-102.89159831253605,-30.353876743106454

3463421_20201_2_0,1d2z1o4icz,2.0251882510637698,-88.71972992776966,-49.84046698647984

2286708_20201_2_0,1d68wo4icz,-0.05047333023140345,-82.80255339245304,-27.02939774696364

6006000_20201_2_0,1dfklo4icz,-2.079823651976537,-108.17340815482044,-23.413836655896958

1782996_20201_2_0,1dhu0p4icz,-0.7657714673565372,-103.10164486558142,-24.3512936202939

3467075_20201_2_0,1djuko4icz,-3.8849610287726137,-87.16912756960286,-23.980077060741493

3108404_20201_2_0,1drien4icz,2.7796699465369734,-68.18764917099122,-49.49154608571716

3642167_20201_2_0,1drrun4icz,2.490936568302684,-50.47095604804176,-54.59499811395642

4386190_20201_2_0,1dtl5n4icz,0.8074553368951548,-48.54332924294869,-36.17901834824042

2177297_20201_2_0,1dx1pn4icz,-1.3807059908252322,-87.0450640410188,-41.63005014163993

4410260_20201_2_0,1e1s8p4icz,3.315639440736536,-74.39612140378051,-47.630391133873076

2551393_20201_2_0,1ebheo4icz,-0.684226257431551,-98.2730098476413,-31.285140920031367

5411068_20201_2_0,1ee16o4icz,1.6399004781802795,-111.54033764103824,-53.198462373972134

4727208_20201_2_0,1ee3qn4icz,-0.5743575990183551,-121.38358081778284,-32.70179398191682

1154406_20201_2_0,1eifyn4icz,-1.3452111835250693,-82.08688043585238,-51.498507498048866

2152596_20201_2_0,1ejeao4icz,0.24574684508656935,-132.2447919143718,-19.412693247924892

5845253_20201_2_0,1ejiao4icz,-2.02668970354849,-125.108915177298,-17.959751467374474

5104806_20201_2_0,1eke6o4icz,-1.6198659340682398,-102.34956755567083,-25.618380269354816

3862045_20201_2_0,1eym5o4icz,0.25597588475225713,-130.75849366681805,-25.601898890426597

5154522_20201_2_0,1f0kxn4icz,-3.8706299394781736,-129.6071688453028,1.6623670807649944

5786008_20201_2_0,1f2ljp4icz,2.5549906743862754,-101.09923397858856,-37.528689510531905

5677689_20201_2_0,1f65sn4icz,-0.23126654167354357,-137.216089097877,-27.207981600611674

3319288_20201_2_0,1f6lbo4icz,-0.7335912549920967,-90.40162635980289,-38.75774527240287

5486952_20201_2_0,1f7ucp4icz,1.112498652297753,-122.31470261403598,-36.057851118297876

4995330_20201_2_0,1fb3fp4icz,3.82403228298464,-86.09445207116443,-64.18427491539939

2951044_20201_2_0,1fb5zo4icz,-1.002471541507367,-117.00768544878497,-30.333215931022494

1493336_20201_2_0,1ffrdo4icz,0.41836196455379376,-118.06816030912802,-28.359695208082172

1900986_20201_2_0,1fh3co4icz,-3.7564770970247556,-101.83487257131262,-1.138237504280056

4259033_20201_2_0,1fiwmo4icz,-3.04395884697164,-69.90389457166935,-12.900353770224498

5593284_20201_2_0,1fjqyo4icz,0.49015998902757524,-136.41689990860078,-35.269831539297456

1367348_20201_2_0,1fqj7p4icz,-2.123234194126883,-124.25723584591077,-4.995219298988587

1084646_20201_2_0,1ftv0o4icz,-3.161959698622833,-102.70423296628829,-1.287931549332427

3521028_20201_2_0,1fvwfn4icz,-0.47038327956650056,-120.00762389648244,-23.676534167603265

5945931_20201_2_0,1g0ckn4icz,0.5307432202860394,-90.50553074703512,-38.41516633673983

2847830_20201_2_0,1g1e7p4icz,-1.1764814080662742,-82.45894741528582,-25.547247479774654

1832243_20201_2_0,1g4f5p4icz,0.8752638954973665,-65.39740091270204,-56.067358353942936

2462500_20201_2_0,1g5c5p4icz,0.560687921336472,-87.40836935594353,-42.54460242936531

4585294_20201_2_0,1gcgfo4icz,-0.7917138150734553,-113.9404787412349,-36.4221795133257

5055761_20201_2_0,1gf9hp4icz,-0.5810171844058349,-105.98550812053224,-36.05090040414167

3970005_20201_2_0,1gfdhp4icz,0.24385330764763294,-169.41963138161893,-28.529665978874917

5605774_20201_2_0,1gfmao4icz,0.22070949320843328,-116.7701079894799,-18.79759942956757

1341777_20201_2_0,1gh07o4icz,0.35249632763970873,-97.92230122114808,-53.8355674541767

2901414_20201_2_0,1glk3o4icz,-2.637943451837226,-94.56774835189069,-29.03219562732845

5190857_20201_2_0,1gnp6p4icz,4.262367422156784,-44.03233793222742,-59.76852886332189

1603408_20201_2_0,1go3eo4icz,0.43489407966033833,-48.67069799921126,-45.26097564939546

5868987_20201_2_0,1gqrhp4icz,3.3132530595160707,-90.0919072840893,-47.9612359573631

2615294_20201_2_0,1h5xso4icz,1.020876513976153,-94.56481953316,-22.600676671528177

5745769_20201_2_0,1h7lep4icz,-4.310122818693755,-143.12907281372162,-10.231668515675736

1778809_20201_2_0,1ha91p4icz,2.5295894394209797,-94.52987181086891,-54.259694419732256

5087388_20201_2_0,1hee4o4icz,-0.7287606716912295,-84.1555772278752,-43.24209471830409

5298874_20201_2_0,1hf0nn4icz,2.1337907352121266,-109.2179216921646,-36.91715266709089

3429342_20201_2_0,1hgfdn4icz,-3.3738958040701985,-78.88062880885224,-12.604853970186326

2180889_20201_2_0,1hj6yo4icz,-1.2880069415526283,-119.63281632813036,-28.17276816946618

4116915_20201_2_0,1hjfuo4icz,0.9258374534435382,-53.03134922814883,-39.48702806177327

4386795_20201_2_0,1hqnso4icz,-0.12278766845938964,-100.797800854097,-48.7269569002393

3300895_20201_2_0,1htxso4icz,-3.756772833277777,-118.29356044581664,-12.542315381368496

2476078_20201_2_0,1i0vjn4icz,-2.4328964501147703,-80.01519196642042,-20.233220333447377

1651897_20201_2_0,1i18cp4icz,11.788953307963801,-32.05718344254825,-118.21893939691662

1550094_20201_2_0,1i54so4icz,1.5017032577135292,-83.48865577716336,-49.48475760939452

2439743_20201_2_0,1iblbp4icz,3.248676265625817,-49.227827037755844,-43.69521538545517

1119268_20201_2_0,1id8tn4icz,-1.3552258742134167,-111.82751233818016,-19.076489477063035

2009171_20201_2_0,1igxln4icz,-1.2417885998544924,-90.31726067527279,-25.22944223764638

5780607_20201_2_0,1ilh0o4icz,-1.878122596294259,-126.7260789424281,-30.988980094337762

3261454_20201_2_0,1isgap4icz,-1.077609166601831,-105.46538195417943,-41.115277379808816

3985081_20201_2_0,1it8jn4icz,-0.8259259323442193,-71.91538069381915,-33.00821798966214

2826310_20201_2_0,1iv15o4icz,2.2184090161888608,-95.86834957476773,-46.871438593316384

2474182_20201_2_0,1ivnho4icz,2.3232149556559576,-117.7587188296452,-32.88871584546598

5071140_20201_2_0,1j1zxo4icz,1.533211183162669,-76.2915779851914,-28.623451819314212

3960971_20201_2_0,1j212o4icz,-0.5782869179346091,-95.37289452835509,-31.36018007789596

3555943_20201_2_0,1j5kfp4icz,-0.713750066632653,-73.5298226963715,-37.80056728684323

1483821_20201_2_0,1j6m6p4icz,-1.1750825017919007,-132.2531661304714,-29.375253754385994

5033512_20201_2_0,1j76gn4icz,2.6618334751932884,-104.4343659882073,-44.720889309842846

3963881_20201_2_0,1j7frn4icz,2.4566242779677507,-107.80705121738842,-43.80167671033725

4329343_20201_2_0,1j7mhp4icz,16.89707497454121,9.968749073001334,-105.2785423278929

5500398_20201_2_0,1jamln4icz,-3.0869870754206237,-96.26243236993014,-27.599079811835736

5124007_20201_2_0,1jdw0p4icz,-0.32533200970325904,-76.32513395836926,-23.894134933803684

1028398_20201_2_0,1jhmln4icz,25.033112395531635,-62.90702826026168,-164.8998035829298

2220622_20201_2_0,1jlguo4icz,-3.251613395553305,-59.10924636368202,-1.8842606105311148

2632845_20201_2_0,1jm1xn4icz,0.15400744114531864,-61.32454855090012,-43.03879698644312

4115485_20201_2_0,1jnyfo4icz,0.4031469743996535,-118.0648191073584,-21.557868998276234

2226193_20201_2_0,1jozdn4icz,-0.7091032511756032,-108.81148689910242,-23.251567443278418

3760565_20201_2_0,1jt4io4icz,-0.7761075968739427,-63.016527640256214,-22.884927977355417

5437042_20201_2_0,1khu9o4icz,2.211543589770669,-94.0304112778309,-54.13059819418109

2998505_20201_2_0,1kk71o4icz,1.8906475268331204,-104.82218621012757,-21.896722110274254

5004970_20201_2_0,1klkeo4icz,2.2364903504519935,-142.55683490287487,-60.05407066358579

3531188_20201_2_0,1kn2yo4icz,4.054882965859225,-61.08473286278806,-51.72356340595266

4920086_20201_2_0,1knlxn4icz,4.5639758186997765,-90.6071904749054,-46.730161891975456

4515656_20201_2_0,1kp8gp4icz,-2.6336064436972006,-103.02822255911258,-15.0216851117965

5234962_20201_2_0,1kpbro4icz,0.029211213013993487,-91.84573447318814,-41.28848506820826

5572351_20201_2_0,1l1ifp4icz,1.9980783897935261,-103.64866312699743,-50.257295892133925

3671355_20201_2_0,1l26nn4icz,-1.338223583947061,-89.08776724056858,-33.45492705329646

1433978_20201_2_0,1l391p4icz,-1.39761130428219,-92.30130838802128,-30.65067123445337

4426577_20201_2_0,1l3bap4icz,2.0617885612324276,-81.76796778030965,-52.36140524205486

1355624_20201_2_0,1lbmjn4icz,-3.130117668988861,-116.4509195148081,-3.9058068164796396

4214988_20201_2_0,1ldyyo4icz,1.48952764129294,-76.65071059481323,-50.36856898085887

1060232_20201_2_0,1le0gn4icz,-1.9419602870230213,-78.84234798857676,-20.512062678518333

5045147_20201_2_0,1lrf9o4icz,0.11606423553503432,-99.70828315952613,-28.640304275129196

5360185_20201_2_0,1lrhvo4icz,1.1218805493834139,-45.20077637828268,-39.53104531401536

1875580_20201_2_0,1lrzgp4icz,0.20885270839205758,-66.24059642366527,-30.327957717079443

5769250_20201_2_0,1ls2gp4icz,1.531251945626207,-119.55930815673739,-32.431641845351606

1896991_20201_2_0,1lw9cp4icz,-2.8133416266946134,-96.88354824374028,-30.05846540061198

2786433_20201_2_0,1lyxpn4icz,0.8048328866431156,-85.89471471292038,-42.19286616124455

5299575_20201_2_0,1m1p6n4icz,-2.982971143414037,-129.5049499310504,-31.65641354186917

2593710_20201_2_0,1m3r2o4icz,-1.5266718928692793,-123.59712175145759,-41.74827068186872

1034530_20201_2_0,1m5ucp4icz,2.8138312537195826,-76.3659812185451,-39.485760427350485

4240575_20201_2_0,1m5z8o4icz,-0.9389966266387949,-121.2884906142697,-28.508790378690094

3137645_20201_2_0,1m71qn4icz,1.291801342843925,-117.79775170217144,-48.63663242516377

2925835_20201_2_0,1ma6go4icz,0.6366609776130744,-97.09557509749544,-32.15850058815131

5324834_20201_2_0,1mflip4icz,0.8678577227044738,-70.20403281312488,-46.1831855609709

3778962_20201_2_0,1mhpdp4icz,-0.14842235704115858,-99.72766029289318,-19.454575700740946

4946172_20201_2_0,1mivdp4icz,-0.919266365070034,-119.06591761430406,-47.63478600487076

3594328_20201_2_0,1mkl7p4icz,1.3646495589456342,-94.9118001449522,-46.835868078185825

1993435_20201_2_0,1mnybo4icz,-0.5230752323412445,-45.28850341587054,-21.663717737837786

3810820_20201_2_0,1mo0yo4icz,0.31721243858958664,-100.36471164903784,-42.93014295967083

2424717_20201_2_0,1myd5p4icz,-0.5559713934375895,-69.36969249347473,-34.15172010877431

3734058_20201_2_0,1n6iqo4icz,0.055078129801284265,-80.03350443476117,-55.77611117500166

4605651_20201_2_0,1n6mnn4icz,-1.7046684812810837,-69.00675621190649,-13.542176010443441

2234135_20201_2_0,1n6tmo4icz,0.5672801529377479,-56.6981233533852,-43.85794058723107

3725316_20201_2_0,1na60p4icz,2.134714951774266,-90.45741762118354,-49.15183367108153

2522762_20201_2_0,1nawwo4icz,1.3143864477576532,-44.35398420233719,-39.511255492340524

4433865_20201_2_0,1nf5qn4icz,-0.6278178540194361,-96.87780556583434,-34.521459532093914

1541620_20201_2_0,1ngbno4icz,-0.09158847200168979,-115.54089543589726,-21.8359678440236

4346211_20201_2_0,1nhzbn4icz,-1.1704425816825414,-149.46812934546185,-26.135711644756938

5641739_20201_2_0,1nis9o4icz,-0.1535609456083379,-123.26279116108066,-33.81886594155418

2440803_20201_2_0,1njzjp4icz,-2.870854364699537,-73.16846939085119,-24.597511171445575

1735453_20201_2_0,1npbgo4icz,1.1859145297443123,-95.43040494232136,-27.334665847035538

1422828_20201_2_0,1npg3p4icz,-0.7023890690808143,-83.92025108921399,-16.738292824306654

1914885_20201_2_0,1o1x6p4icz,-3.871978004297237,-74.83981437838455,-12.889199617615503

2423751_20201_2_0,1o39ao4icz,-0.9440325476804393,-100.18339131627974,-22.24683196105103

5385302_20201_2_0,1o85mo4icz,-1.8381856312352705,-79.83393498481237,-16.97093418747636

4879108_20201_2_0,1o8q5p4icz,-0.5487438671016056,-99.43541121761535,-25.069032398940706

5433915_20201_2_0,1ofcip4icz,1.4456633066319353,-75.9131193672317,-39.72148701426988

1282206_20201_2_0,1ogemo4icz,3.140874015400578,-61.10778142781521,-54.48954285707062

4744313_20201_2_0,1ogm8p4icz,2.4508041058295107,-128.71873018617688,-49.16541795277877

4488200_20201_2_0,1oic0p4icz,-2.0088960667977425,-80.70028282957725,-10.154730967951451

2637163_20201_2_0,1oikap4icz,0.7845392368903533,-117.79350365060489,-37.69189984537519

2689647_20201_2_0,1oiqkn4icz,4.481080560012888,-100.14952454391207,-61.79266633402793

2144306_20201_2_0,1ok2vn4icz,-1.3565983324461703,-81.24784306662661,-17.04663439966548

5986448_20201_2_0,1olwoo4icz,26.463292776451233,107.67710350812635,-162.5683888519192

5341912_20201_2_0,1opb3p4icz,-0.6089083560296399,-126.13027389121288,-24.829615665716418

1929251_20201_2_0,1otlfn4icz,-0.6807357798321785,-104.09778223047834,-23.588957273987916

3385005_20201_2_0,1oyj8p4icz,-7.527144119141291,-96.20432832830716,11.097257183621537

5278069_20201_2_0,1oyz0p4icz,0.9824976740444856,-74.77586814859006,-31.999260155501645

4157599_20201_2_0,1p0hrn4icz,-5.854613221092948,-117.0501089414268,8.219812391672136

1541633_20201_2_0,1p1xvo4icz,1.9922516836386268,-79.23414360593821,-46.65278782207932

5609593_20201_2_0,1p5bjn4icz,-1.2708155039095996,-80.69151783526482,-34.47132292965894

2442197_20201_2_0,1p7uwn4icz,-0.8389612654022924,-126.03034412695808,-36.92333600158034

3545803_20201_2_0,1p9f5p4icz,0.03653288499458709,-100.45386207076794,-47.199515451399165

3865878_20201_2_0,1p9iho4icz,-0.38539101663270886,-107.06075768177703,-37.86066898997444

1282560_20201_2_0,1p9izo4icz,0.6750634560889935,-117.15918013923229,-37.51025663869524

3800361_20201_2_0,1pjeun4icz,-8.499755295770788,-103.7758475034758,-14.235622865334292

2259227_20201_2_0,1pka6n4icz,-0.11672083542751563,-109.01781656384702,-29.233860023920755

4321781_20201_2_0,1psxwo4icz,1.3867567979012292,-117.44235866928611,-25.557843799705296

4020435_20201_2_0,1ptcso4icz,-0.07675391912847702,-93.05078456377447,-17.035049315513604

1285004_20201_2_0,1puu7p4icz,2.642221069308524,-53.45194485791663,-64.73859602167802

4008326_20201_2_0,huj7uo4icz,1.457707362329575,-100.05089243556992,-57.62866999329019

3854797_20201_2_0,1qb4po4icz,-0.4116881323736581,-91.61700942633752,-23.561106229827686

4663769_20201_2_0,1qhj7p4icz,-2.8000011141718995,-85.08346357727717,-26.988321301450142

4254508_20201_2_0,1qpfcp4icz,0.5828050805492345,-124.65523300577041,-27.432637667573545

1661904_20201_2_0,1qq0vn4icz,-3.6063766435731384,-92.99321821257587,-24.290726020895676

3714616_20201_2_0,1qro0o4icz,-1.9345293482695438,-93.88769822620307,-44.57072495135856

1306090_20201_2_0,1qwa2p4icz,2.2730278354363422,-53.94482677586524,-43.7203239352597

5018236_20201_2_0,1qymvn4icz,1.4238957303827815,-48.237751011154785,-42.6800793805742

5697388_20201_2_0,1r4m6p4icz,18.586706827271467,-67.55536035921017,-125.674872656194

2283717_20201_2_0,1r6ueo4icz,3.5606340000154084,-90.6156462642218,-49.063564303015454

4874180_20201_2_0,1rfa4p4icz,3.5519180078949684,-86.74648799456892,-58.86470019386634

3425852_20201_2_0,1rfadn4icz,-0.3897983260741093,-77.27624246221598,-40.85406409024388

2610019_20201_2_0,1rfh0o4icz,-1.104305654922489,-115.06479660620391,-27.900207695827802

5607040_20201_2_0,1rftmo4icz,-1.4931792232779573,-87.69573200241194,-29.929050343916572

2400075_20201_2_0,1rfw0o4icz,0.4425198285420717,-60.91850995069143,-33.78971129908551

2291559_20201_2_0,1rmato4icz,4.108252830306443,-83.16904064929591,-75.03169698637622

3176886_20201_2_0,1rn6bp4icz,-1.2017504299927912,-90.32399466384135,-30.823942123138778

4199861_20201_2_0,1rqhio4icz,-3.4156728821593427,-151.41764424364013,-14.71912693741777

5278337_20201_2_0,1rx6vo4icz,-0.8250508877539318,-82.19386437327358,-28.666733906299953

3486162_20201_2_0,1rywun4icz,0.5407400059952859,-67.41698549412533,-43.55190897172028

4921113_20201_2_0,1rz3cn4icz,-5.3388404586592575,-133.36606878734028,6.451676642769542

2054729_20201_2_0,1s39oo4icz,1.9764500029781278,-52.31782879183686,-44.187607598312965

5372514_20201_2_0,240ofp4icz,-1.0754396957674404,-108.2738872774741,-40.292337326678876

/users/rhydian/anaconda3/envs/torch_env/lib/python3.7/site-packages/torch/cuda/__init__.py:52: UserWarning: CUDA initialization: Found no NVIDIA driver on your system. Please check that you have an NVIDIA GPU and installed a driver from http://www.nvidia.com/Download/index.aspx (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729006826/work/c10/cuda/CUDAFunctions.cpp:100.)
  return torch._C._cuda_getDeviceCount() > 0
  0%|          | 0/101 [00:00<?, ?it/s]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 1/101 [00:03<05:41,  3.42s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 2/101 [00:06<05:38,  3.42s/it]  3%|▎         | 3/101 [00:10<05:51,  3.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/101 [00:13<05:28,  3.38s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▍         | 5/101 [00:19<06:22,  3.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 6/101 [00:22<05:54,  3.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 7/101 [00:25<05:31,  3.53s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 8/101 [00:28<05:12,  3.36s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 9/101 [00:31<04:53,  3.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|▉         | 10/101 [00:34<04:48,  3.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 11/101 [00:37<04:37,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 12/101 [00:40<04:34,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 13/101 [00:42<04:24,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 14/101 [00:46<04:27,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▍        | 15/101 [00:49<04:25,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 16/101 [00:52<04:14,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 17/101 [00:54<04:06,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 18/101 [00:57<04:05,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 19/101 [01:00<03:59,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|█▉        | 20/101 [01:03<03:53,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 21/101 [01:06<03:53,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 22/101 [01:09<03:53,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 23/101 [01:12<03:46,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 24/101 [01:15<03:40,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▍       | 25/101 [01:17<03:35,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 26/101 [01:21<03:42,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 27/101 [01:24<03:36,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 28/101 [01:27<03:36,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▊       | 29/101 [01:30<03:47,  3.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|██▉       | 30/101 [01:33<03:46,  3.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 31/101 [01:36<03:40,  3.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 32/101 [01:39<03:31,  3.06s/it] 33%|███▎      | 33/101 [01:42<03:25,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▎      | 34/101 [01:45<03:22,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▍      | 35/101 [01:49<03:23,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 36/101 [01:52<03:18,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 37/101 [01:55<03:14,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 38/101 [01:58<03:16,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▊      | 39/101 [02:03<03:45,  3.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|███▉      | 40/101 [02:05<03:24,  3.36s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 41/101 [02:08<03:15,  3.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 42/101 [02:11<03:03,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 43/101 [02:14<03:00,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▎     | 44/101 [02:17<02:57,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▍     | 45/101 [02:20<02:46,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 46/101 [02:23<02:41,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 47/101 [02:26<02:40,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 48/101 [02:29<02:40,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▊     | 49/101 [02:32<02:35,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|████▉     | 50/101 [02:35<02:33,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 51/101 [02:45<04:11,  5.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████▏    | 52/101 [02:48<03:33,  4.36s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 53/101 [02:51<03:13,  4.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 54/101 [02:54<02:50,  3.63s/it] 54%|█████▍    | 55/101 [02:57<02:39,  3.47s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▌    | 56/101 [03:00<02:32,  3.39s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▋    | 57/101 [03:03<02:22,  3.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 58/101 [03:06<02:14,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 59/101 [03:09<02:10,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 60/101 [03:12<02:07,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|██████    | 61/101 [03:14<01:58,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████▏   | 62/101 [03:18<01:56,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 63/101 [03:21<01:55,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 64/101 [03:24<01:53,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 65/101 [03:27<01:50,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▌   | 66/101 [03:30<01:45,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▋   | 67/101 [03:33<01:41,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 68/101 [03:36<01:40,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 69/101 [03:39<01:36,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 70/101 [03:42<01:30,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|███████   | 71/101 [03:44<01:26,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████▏  | 72/101 [03:47<01:23,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 73/101 [03:50<01:20,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 74/101 [03:53<01:20,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 75/101 [03:56<01:17,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▌  | 76/101 [03:59<01:14,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 77/101 [04:02<01:09,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 78/101 [04:05<01:07,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 79/101 [04:08<01:04,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 80/101 [04:11<01:00,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 81/101 [04:14<00:59,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 82/101 [04:16<00:54,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 83/101 [04:19<00:51,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 84/101 [04:22<00:47,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 85/101 [04:25<00:45,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▌ | 86/101 [04:28<00:42,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 87/101 [04:31<00:40,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 88/101 [04:34<00:37,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 89/101 [04:36<00:34,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 90/101 [04:40<00:32,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 91/101 [04:42<00:29,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 92/101 [04:45<00:26,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 93/101 [04:48<00:23,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 94/101 [04:51<00:20,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 95/101 [04:55<00:18,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▌| 96/101 [04:58<00:16,  3.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 97/101 [05:01<00:12,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 98/101 [05:05<00:10,  3.36s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 99/101 [05:09<00:06,  3.38s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 100/101 [05:12<00:03,  3.24s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|██████████| 101/101 [05:15<00:00,  3.31s/it]100%|██████████| 101/101 [05:15<00:00,  3.12s/it]
Trying to load from /users/rhydian/self-supervised-project/model_weights/SSECEncodersBothBoth
==> Resuming model trained for 106 epochs...
Trying to load from ../model_weights/angle_regressor4
==> Resuming model trained for 7 epochs...
4071259_20201_2_0,00661p4icz,-0.7026465057168861,-102.16925020923074,-36.28443999023672

1314373_20201_2_0,00stun4icz,-1.8711018545311466,-113.26358749815972,-24.433354488121452

1904096_20201_2_0,01mgan4icz,-22.16245166902682,-43.28273931606827,319.72451262515585

4469551_20201_2_0,01wd6o4icz,-0.7407033083404693,-97.747537828546,-27.370712988848908

6015058_20201_2_0,023vqn4icz,1.4080121262012881,-85.41174045922733,-41.614906815492304

3503526_20201_2_0,02mvxo4icz,-1.612067177922924,-109.17316185895257,-34.677385296402065

3777047_20201_2_0,03p7ln4icz,-0.4464830221045054,-78.99797367342336,-25.110743245133307

5523029_20201_2_0,04ba6o4icz,1.8430524477146122,-95.17681691646072,-39.49313242300242

4575753_20201_2_0,04kcfp4icz,-0.45057930818539155,-93.73188521156757,-34.49418271170315

1289699_20201_2_0,04ndtn4icz,1.0211978376510016,-84.99901037291815,-48.046336554706016

5859022_20201_2_0,051qeo4icz,5.713122395430253,-99.92358807494,-54.34161547979957

3285136_20201_2_0,06t3so4icz,-0.08348621308941775,-110.04447635506193,-40.46350005847876

1836546_20201_2_0,07hrqo4icz,-4.140734468591666,-91.43096271640692,-5.774581143930277

3221211_20201_2_0,07svrn4icz,0.5004122972438657,-147.61591178699857,-46.61151742082325

3423983_20201_2_0,07ylln4icz,0.8154942244564717,-117.71490480113374,-20.28994113270491

2967162_20201_2_0,08fcxo4icz,-0.6716670816056854,-70.44210581217669,-27.96783186444756

5901857_20201_2_0,098tho4icz,-2.239920093947081,-73.81304128492084,-27.6715999090232

3991804_20201_2_0,09mzlo4icz,2.4740091910611834,-46.11577039411344,-44.02763892444342

5504497_20201_2_0,09ub9o4icz,0.591223240728425,-133.93325962593576,-26.74902921351071

2823115_20201_2_0,0amqgp4icz,-0.5606247673211253,-79.7099443989737,-32.178602974628404

1730802_20201_2_0,0b76eo4icz,-0.6266109860016723,-87.00530400843331,-40.62427074748618

2916296_20201_2_0,0c7dzo4icz,2.262676137755847,-73.04116034451238,-63.510888162849525

5540058_20201_2_0,0de5nn4icz,2.3712764900727814,-62.709763220299635,-57.668151637266135

1668493_20201_2_0,0dfqep4icz,-2.471704409204302,-64.59000125205773,-22.64633765203827

5318295_20201_2_0,0dgowo4icz,-1.5042704590583567,-90.75444782612038,-22.735114421808134

1166321_20201_2_0,0diihp4icz,0.02004496262969957,-121.44613043172853,-43.265250690970305

2293209_20201_2_0,0e4ain4icz,3.6697625221032553,-65.26699057245756,-62.36722270241425

3510296_20201_2_0,0ffxsn4icz,0.6758305436076553,-59.77881066029363,-39.74637724902814

4273761_20201_2_0,0hp07o4icz,0.44229581433154064,-103.63083940637375,-34.58971415902383

5487941_20201_2_0,0hruip4icz,-3.196684794246803,-129.04649626676883,-36.09753330899525

4751468_20201_2_0,0ig2kn4icz,-2.6174592231429115,-81.88148851024019,-15.722451694336783

3506373_20201_2_0,0iu09p4icz,1.0158845949691517,-74.60795081370375,-34.469631320708785

4772506_20201_2_0,0jei1o4icz,4.662801119212318,-159.19501901770863,170.39013281025572

2658023_20201_2_0,0kc5xo4icz,-3.237644990747004,-140.18316942246298,-13.518460250595666

2650531_20201_2_0,0kea9o4icz,0.9960171046063415,-103.55440390658228,-15.847343553079298

3451586_20201_2_0,0kfsuo4icz,0.5963269223385709,-117.25933263362731,-44.06524991768518

5678942_20201_2_0,0krhtn4icz,5.795525157331439,-131.05027666842693,-76.17665118375214

1649242_20201_2_0,0lu4fo4icz,-2.98588948380868,-83.9130024924184,-23.66328990054555

2395251_20201_2_0,0lwh7p4icz,-2.0036047650461195,-102.44789349463537,-16.047390368457627

1830072_20201_2_0,0mw2yo4icz,6.151413391044219,-85.06125543997743,-65.18124777480215

3896325_20201_2_0,0nqc8o4icz,-2.73601481679285,-75.93789516801147,-24.344067338155043

4808166_20201_2_0,0nw26n4icz,-0.7213746500226461,-144.2276659035649,-31.73954848837309

4372759_20201_2_0,0o82so4icz,-0.008224926434889366,-72.42882604081885,-21.45437513283119

5204733_20201_2_0,0podrn4icz,-0.43073449997221835,-105.46566934925417,-32.57363398489764

5432500_20201_2_0,0qhmhp4icz,-23.645365996124312,-144.9906354629149,89.1489850730749

2844219_20201_2_0,0qv2mo4icz,-0.242277834205654,-60.43279318144968,-30.870414945546756

5205270_20201_2_0,0rjdno4icz,-1.4334726577347863,-101.4722341891549,-25.27191198520063

5289033_20201_2_0,0rwzjp4icz,0.8969506543409234,-78.87836683650039,-55.41929575079973

4728120_20201_2_0,0svtso4icz,-1.8271567313323336,-108.23234155112448,-16.894915801546844

4674408_20201_2_0,0t4vho4icz,-0.19291068665671934,-124.64348516789497,-40.94821597942291

3798293_20201_2_0,gqgvlo4icz,-2.6102183532465233,-91.16774169824373,-15.531466474184441

3239586_20201_2_0,0tu6ko4icz,0.5937991542599714,-110.76114735608252,-36.059634941692565

1846848_20201_2_0,0v7iln4icz,0.33653883808590407,-65.50128335728334,-60.01956310056973

3414768_20201_2_0,0vzg3o4icz,-0.20363073611556992,-111.36376931729797,-23.060597185056537

2299025_20201_2_0,0xol0p4icz,-96.11589105001259,590.2114021860743,507.1331134279028

4004419_20201_2_0,0xubtn4icz,-1.3435667825007633,-105.86680116185599,-11.714949434215754

2270916_20201_2_0,0xuwip4icz,1.6391022459803197,-131.15091334102937,-52.61559471354178

1324696_20201_2_0,0y9edo4icz,-1.86009033746704,-72.50932795488083,-30.27654187672941

4283719_20201_2_0,0ykb7p4icz,5.7415687654206415,-48.54651468715156,-64.67087081246149

3369513_20201_2_0,103fbn4icz,1.762039386963669,-135.05843407535454,-69.66475820603112

2872796_20201_2_0,11ypnn4icz,-1.6273548541338165,-93.39474026196018,-18.731707946927997

1369955_20201_2_0,12mc6o4icz,-3.128071846770959,-127.24695664398095,-9.110579185201232

4125580_20201_2_0,13kr6p4icz,0.35483532189780403,-100.38792954900282,-48.643221785439835

3612461_20201_2_0,14fhrn4icz,0.43793001155489025,-62.83248468360284,-54.07251120904361

1503536_20201_2_0,14vjfp4icz,-1.483320843305999,-83.58732604825241,-45.616590667293906

1043957_20201_2_0,15b5ip4icz,0.13798993488175917,-78.9426639598287,-49.010586302346425

4557070_20201_2_0,160npo4icz,0.6504737546157189,-53.7085581852763,-49.64474013998719

4622957_20201_2_0,16dymo4icz,0.4577363534483728,-102.14829998123165,-48.443461044162305

4187210_20201_2_0,171lgn4icz,-6.568460245210047,-110.8035402435219,-34.47657797651679

5500219_20201_2_0,175lvn4icz,-0.5251587863971463,-117.37124721342616,-38.32093287650915

5742754_20201_2_0,17px9n4icz,-0.6003528867634047,-127.5267815096903,-28.128399438237025

2339482_20201_2_0,180whp4icz,5.402738860849076,-80.33504813968753,-67.43246150360036

4351831_20201_2_0,18fu6n4icz,0.3587759661008615,-89.00501450803577,-42.3890656031827

5167245_20201_2_0,18viso4icz,1.9570536974826733,-89.0908261094805,-64.49572425055

5939133_20201_2_0,190lap4icz,-2.9573185552512347,-148.9350483552672,-9.178512733587638

3687259_20201_2_0,19e84o4icz,-1.4381984036697688,-117.3742569445644,-28.919693933763483

4628811_20201_2_0,1ampqn4icz,-2.8911249621233828,-105.0564598502585,-27.1730516247342

2706270_20201_2_0,1bgz5o4icz,-0.5645188848695571,-68.53187930360207,-21.918914174110554

1545026_20201_2_0,1bw09o4icz,2.121527661477944,-83.80490684181004,-27.90182992872539

4406664_20201_2_0,1chwrn4icz,-1.8316967066455239,-81.63604179252644,-26.10439825962274

3062919_20201_2_0,1d4olo4icz,-1.4525916140051731,-96.27531313953688,-26.225774621954187

4914779_20201_2_0,1dykjp4icz,0.4468979464097393,-98.22400945203728,-30.631569582750814

1663471_20201_2_0,1epuro4icz,-2.4099618827881053,-117.47549711983282,-34.1774840865786

5391463_20201_2_0,1epvln4icz,1.830399633597043,-89.99234910327584,-44.81626610159928

1133492_20201_2_0,1esdyn4icz,3.103882020750181,-86.01720230697458,-44.48963837380849

2443141_20201_2_0,1euehp4icz,-0.8967176455346202,-87.58295353171565,-33.24780692051972

1510016_20201_2_0,1fip8o4icz,1.7360956757163544,-100.59100226195855,-44.13150024601997

1509313_20201_2_0,1fjnjn4icz,-1.3359092974107623,-111.72739814225739,-22.092920660902877

3596243_20201_2_0,1fxren4icz,-2.5636486544023174,-94.35492690512854,-25.563121778347238

5039746_20201_2_0,1gtg3o4icz,-0.6593465623181648,-131.00908707982992,-20.454681033558188

1093442_20201_2_0,1hb6mn4icz,0.4887306593535265,-79.13069982827307,-26.756498984952998

4497896_20201_2_0,1hi2gn4icz,-0.9972151425189764,-105.89668244064458,-41.244443318987464

3073765_20201_2_0,1kyfbo4icz,-1.431440521399955,-113.36954928937524,-18.02067609525804

2223453_20201_2_0,1l2rqn4icz,-1.4240958912746748,-98.48358940544205,-32.134258926972805

1715798_20201_2_0,1lbwcp4icz,-0.26647560107884427,-126.3312951540862,-56.254617680426776

5735094_20201_2_0,1mldro4icz,-2.008976442569542,-105.40453795734888,-40.92825521995104

2452264_20201_2_0,1nfxun4icz,-0.2091361809596176,-126.29607586112292,-37.38743432664265

1237258_20201_2_0,1nh3qn4icz,-0.598466201559904,-126.33450473992414,-31.693111527393157

1761236_20201_2_0,u7b4wn4icz,1.5028088173986989,-83.66630194782252,-40.55725949736109

1028883_20201_2_0,1o2hwn4icz,1.4813160186364194,-94.56382475598602,-34.50689757878813

5137980_20201_2_0,xrzhdo4icz,0.33362776934446403,-66.49228203092608,-51.29282298046675

/users/rhydian/anaconda3/envs/torch_env/lib/python3.7/site-packages/torch/cuda/__init__.py:52: UserWarning: CUDA initialization: Found no NVIDIA driver on your system. Please check that you have an NVIDIA GPU and installed a driver from http://www.nvidia.com/Download/index.aspx (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729006826/work/c10/cuda/CUDAFunctions.cpp:100.)
  return torch._C._cuda_getDeviceCount() > 0
  0%|          | 0/101 [00:00<?, ?it/s]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 1/101 [00:03<05:30,  3.30s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 2/101 [00:06<05:20,  3.24s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 3/101 [00:09<05:07,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/101 [00:12<04:56,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▍         | 5/101 [00:15<05:08,  3.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 6/101 [00:18<05:01,  3.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 7/101 [00:21<04:49,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 8/101 [00:25<05:02,  3.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 9/101 [00:28<04:56,  3.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|▉         | 10/101 [00:31<04:39,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 11/101 [00:34<04:52,  3.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 12/101 [00:37<04:36,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 13/101 [00:40<04:23,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 14/101 [00:43<04:19,  2.98s/it] 15%|█▍        | 15/101 [00:46<04:13,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 16/101 [00:49<04:12,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 17/101 [00:51<04:02,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 18/101 [00:54<03:58,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 19/101 [00:59<04:36,  3.38s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|█▉        | 20/101 [01:03<04:44,  3.52s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 21/101 [01:05<04:23,  3.29s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 22/101 [01:08<04:07,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 23/101 [01:11<03:58,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 24/101 [01:18<05:22,  4.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▍       | 25/101 [01:21<04:54,  3.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 26/101 [01:24<04:36,  3.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 27/101 [01:27<04:16,  3.47s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 28/101 [01:31<04:27,  3.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▊       | 29/101 [01:34<04:04,  3.40s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|██▉       | 30/101 [01:37<03:52,  3.27s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 31/101 [01:40<03:34,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 32/101 [01:43<03:33,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 33/101 [01:46<03:26,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▎      | 34/101 [01:59<06:41,  6.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▍      | 35/101 [02:32<15:33, 14.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 36/101 [02:45<14:58, 13.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 37/101 [02:48<11:19, 10.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 38/101 [02:51<08:39,  8.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▊      | 39/101 [02:53<06:46,  6.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|███▉      | 40/101 [02:56<05:32,  5.46s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 41/101 [02:59<04:41,  4.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 42/101 [03:02<04:08,  4.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 43/101 [03:05<03:40,  3.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▎     | 44/101 [03:08<03:24,  3.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▍     | 45/101 [03:11<03:15,  3.49s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 46/101 [03:18<04:09,  4.53s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 47/101 [03:21<03:35,  3.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 48/101 [03:24<03:15,  3.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▊     | 49/101 [03:51<09:14, 10.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|████▉     | 50/101 [03:54<06:59,  8.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 51/101 [03:57<05:31,  6.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████▏    | 52/101 [03:59<04:28,  5.48s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 53/101 [04:02<03:45,  4.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 54/101 [04:05<03:17,  4.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 55/101 [04:08<02:57,  3.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▌    | 56/101 [04:12<02:54,  3.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▋    | 57/101 [04:15<02:37,  3.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 58/101 [04:18<02:29,  3.47s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 59/101 [04:21<02:19,  3.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 60/101 [04:24<02:10,  3.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|██████    | 61/101 [04:28<02:10,  3.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████▏   | 62/101 [04:30<02:02,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 63/101 [04:33<01:56,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 64/101 [04:41<02:49,  4.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 65/101 [04:44<02:25,  4.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▌   | 66/101 [04:47<02:12,  3.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▋   | 67/101 [04:51<02:03,  3.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 68/101 [04:54<01:52,  3.42s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 69/101 [04:56<01:41,  3.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 70/101 [04:59<01:35,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|███████   | 71/101 [05:02<01:31,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████▏  | 72/101 [05:05<01:29,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 73/101 [05:10<01:43,  3.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 74/101 [05:13<01:33,  3.46s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 75/101 [05:16<01:27,  3.36s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▌  | 76/101 [05:20<01:26,  3.44s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 77/101 [05:23<01:20,  3.35s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 78/101 [05:26<01:13,  3.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 79/101 [05:29<01:07,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 80/101 [05:32<01:02,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 81/101 [05:34<00:58,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 82/101 [05:37<00:54,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 83/101 [05:40<00:50,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 84/101 [05:43<00:48,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 85/101 [05:45<00:44,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▌ | 86/101 [05:48<00:41,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 87/101 [05:51<00:39,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 88/101 [05:54<00:36,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 89/101 [05:57<00:34,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 90/101 [06:00<00:33,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 91/101 [06:08<00:43,  4.30s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 92/101 [06:10<00:34,  3.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 93/101 [06:13<00:28,  3.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 94/101 [06:16<00:23,  3.38s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 95/101 [06:19<00:19,  3.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▌| 96/101 [06:22<00:15,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 97/101 [06:25<00:12,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 98/101 [06:28<00:09,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 99/101 [06:31<00:06,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 100/101 [06:34<00:02,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|██████████| 101/101 [06:37<00:00,  2.98s/it]100%|██████████| 101/101 [06:37<00:00,  3.93s/it]
Trying to load from /users/rhydian/self-supervised-project/model_weights/SSECEncodersBothBoth
==> Resuming model trained for 106 epochs...
Trying to load from ../model_weights/angle_regressor4
==> Resuming model trained for 7 epochs...
2101277_20201_2_0,017r4p4icz,2.558390675884746,-103.22146896572008,-47.12822059931756

4886135_20201_2_0,01bpbp4icz,3.9067736426983184,-124.47350574297721,-56.6903869256642

4027300_20201_2_0,041mnn4icz,-1.802189206039224,-79.85658337490989,-17.70966384245284

4868543_20201_2_0,04d2go4icz,-0.5011525295443271,-69.0722078733202,-27.375098890744525

4080618_20201_2_0,04ghno4icz,4.714609057077116,-106.44712387363478,-39.93767510546907

2464969_20201_2_0,05k9nn4icz,1.814579786659955,-94.07368007479579,-34.023368124676495

2919371_20201_2_0,06dykn4icz,0.3144161316205424,-148.32388495218325,-27.623294953046084

3782198_20201_2_0,0862ln4icz,-1.8394783125380954,-96.91658746288829,-43.03940381783232

5438489_20201_2_0,08wp5o4icz,-1.9035534721391234,-103.10715137568286,-33.401415925809246

1747362_20201_2_0,090ago4icz,0.8319850457654304,-132.71290731828293,-44.25623270607895

1748027_20201_2_0,09h32p4icz,2.4014529468192016,-118.3160358385332,-42.35675227263964

1394259_20201_2_0,09kcan4icz,1.9797030299537575,-135.5537341794038,-50.66675450958343

5501130_20201_2_0,0a2buo4icz,0.3034614434557393,-95.32723289122129,-35.17876597134446

3356923_20201_2_0,0achin4icz,-1.5966023037527397,-59.00769323794782,-41.17072920151777

5649172_20201_2_0,0ai58o4icz,-55.45623739701359,-18.27599346820446,241.4875183876821

1165970_20201_2_0,0czuvn4icz,-1.5782057946271248,-100.42338500271018,-29.08653155250805

4188310_20201_2_0,0et97p4icz,-3.680009695314907,-129.82852707544353,-6.3053850706227195

4794147_20201_2_0,0fum7o4icz,0.07637950696945874,-103.6633617272903,-42.73466348782344

4928025_20201_2_0,0fzogp4icz,-3.1307791391825757,-81.85902003102714,-17.688530364160187

2854246_20201_2_0,0g1scn4icz,-3.7437239971507674,-150.8417378196676,-16.198142081357616

1363993_20201_2_0,0gq2ro4icz,-5.836356016267347,-110.34486976187972,1.993541390203461

1838969_20201_2_0,0h7jcp4icz,-1.3746341223407363,-76.36121542255677,-23.985010842024565

2322677_20201_2_0,0hbrdp4icz,2.1692944526789315,-78.64861627318868,-44.23277069996237

2616176_20201_2_0,0i27ao4icz,2.1867603222391208,-95.00208509624548,-47.05958153869645

5257052_20201_2_0,0idpko4icz,-0.4033236077740779,-70.94811792122843,-27.115616166993206

3820518_20201_2_0,0iizrn4icz,0.8257133568038278,-51.366273080037615,-34.67356624405909

2702243_20201_2_0,0iv0ko4icz,5.293926600325914,-4.1858752097402885,-44.75344985913745

3606125_20201_2_0,0jzn8o4icz,1.5495502069774023,-116.2465438067469,-21.17643579290059

2095852_20201_2_0,0k3ggp4icz,2.7589819272641294,-94.91895483672667,-51.45885969210133

3348036_20201_2_0,0kj9rn4icz,-0.10837414910346972,-109.56786682051407,-39.24943615017416

2626078_20201_2_0,0klcip4icz,0.8589261555300041,-89.88848908297916,-43.58475769273218

5268532_20201_2_0,0kme6o4icz,0.6319168572572604,-100.1248558714108,-53.64955040943357

4970172_20201_2_0,0l5qno4icz,-5.278662985121937,-88.89263777535479,-5.576553854313431

2374978_20201_2_0,0lh1fn4icz,-0.7955721254772451,-121.96205066090829,-22.46595488597599

2256875_20201_2_0,ymm4po4icz,1.596041452415539,-79.28674554885237,-41.85171939548417

1390261_20201_2_0,0luq7o4icz,-2.407829271185741,-127.35208879538149,-29.910870663957922

5887694_20201_2_0,0mqubo4icz,-0.9826989354007577,-129.33121882287205,-28.556079937681915

3374698_20201_2_0,0ndqap4icz,1.3296097518023542,-97.14009020071032,-38.70099850231932

2159608_20201_2_0,0nindp4icz,0.2670311648320894,-80.73184940225147,-57.232157307799284

3236376_20201_2_0,0nixrn4icz,0.5549903099090474,-65.6066957985584,-76.26369049248424

3234816_20201_2_0,0of3qn4icz,-0.8338062356222044,-116.06398563671391,-42.41835182808738

2003278_20201_2_0,0p1sho4icz,0.18510064167423612,-80.37762746416252,-15.45566156575886

2708268_20201_2_0,0pjopo4icz,-3.578018287916886,-92.6153541093696,-21.33814137829117

5686077_20201_2_0,0qqz3p4icz,-1.723470996632135,-96.464326186991,-14.505194483361223

4905864_20201_2_0,0qtv5o4icz,-0.41704111198974825,-114.85995599660774,-30.626518144773428

2822727_20201_2_0,0qugjo4icz,-1.4707334715457154,-98.0115748002645,-22.363449867023206

3136621_20201_2_0,0qxkgn4icz,0.36689549945966926,-72.05604395909404,-58.184819726176286

2913377_20201_2_0,0r241p4icz,1.0786465024321454,-91.56081159087563,-49.29762205871933

5375562_20201_2_0,0rg0eo4icz,3.350716974599044,-100.56358392524012,-51.03619482229148

3994675_20201_2_0,0rvxyo4icz,3.297455389806498,-76.72844435377522,-67.23160150100568

1601959_20201_2_0,0tcbuo4icz,0.25662809564668604,-96.84079355241104,-46.498627032529

5097488_20201_2_0,0ti49p4icz,-1.9811305611292516,-86.68361691377547,-14.890936097943992

3112540_20201_2_0,0twbdn4icz,0.7675084621847292,-85.28713892878329,-31.1822270214287

1615214_20201_2_0,0v83mn4icz,0.781237517979764,-103.62956501657445,-7.068979503183968

1225665_20201_2_0,0whrfo4icz,-1.1830188988154944,-103.60430181725854,-28.557266067153463

1878172_20201_2_0,0x1ucp4icz,1.1169050964181901,-99.3774492676221,-51.26122897235145

2094920_20201_2_0,0yszuo4icz,-6.448924944539074,-74.39538986440132,-10.495367915622381

5636815_20201_2_0,0yzezo4icz,-0.2797781128562898,-113.05829825396259,-28.769514085458837

5227257_20201_2_0,0zu4oo4icz,4.278993067879077,-58.541738288100305,-42.987887278853236

1610238_20201_2_0,10anbo4icz,-1.3870360997450455,-154.9365821027744,-31.40438285711207

1601038_20201_2_0,10g1mo4icz,-2.4104079103824705,-65.36343170196119,-14.9332652771038

2247374_20201_2_0,10xhjn4icz,-0.7902645496914983,-79.0684156129887,-16.053252626899493

4171263_20201_2_0,11z6ip4icz,0.3663394653974454,-127.02712466645266,-46.43904675342458

4469418_20201_2_0,12ppso4icz,0.05215142004124336,-103.99537871000152,-33.32567248467845

5614225_20201_2_0,14prho4icz,-0.8806726635300872,-59.71753580433747,-20.0672685493262

4620335_20201_2_0,157xxo4icz,-3.630145992476073,-52.650855152832406,-20.25599480814499

2371164_20201_2_0,162c7o4icz,-1.1912317576136213,-79.60750605419506,-36.651308342272515

5325466_20201_2_0,16vtpn4icz,1.2067510266769161,-113.79927641592542,-44.82204230294249

1974592_20201_2_0,16vv3p4icz,-0.2524215698314866,-102.34928531595608,-32.86983918390399

4348748_20201_2_0,17lmjp4icz,-2.8944898465911675,-106.72307906741244,-21.583245309052955

1061131_20201_2_0,1891fo4icz,1.2052442567108805,-97.02251417303387,-36.3941332456657

5135515_20201_2_0,18c0yo4icz,-2.013447495567678,-89.56275786829747,-12.94051788843268

1931741_20201_2_0,1943oo4icz,-0.7964441869376376,-93.87685633473669,-38.93988239103152

2277339_20201_2_0,19f07o4icz,1.050343874797346,-103.93537020770637,-54.1676678102837

5828803_20201_2_0,1a5s8p4icz,-3.0189390006510157,-96.42993373683512,-15.293764586277945

5059770_20201_2_0,1ayfon4icz,-2.6227983459849202,-104.66638829275504,-19.44524640511858

2326975_20201_2_0,1b9c2p4icz,-1.8519412970032474,-122.35191173167425,-22.705407295147978

2275095_20201_2_0,1cxeeo4icz,-0.5471932206215783,-89.48678556423539,-30.789129352331543

5324420_20201_2_0,1eftvo4icz,1.2377701149748066,-87.15117426694968,-36.95045226389439

3585924_20201_2_0,1eio5p4icz,1.0670501513549266,-83.30986240330688,-57.262298419728424

1228403_20201_2_0,1emlgp4icz,-2.884861549659521,-89.39595432368856,-24.77997615680627

3737928_20201_2_0,1eug5o4icz,2.13353214518343,-104.17750704781665,-56.93365546246817

1930647_20201_2_0,1fejrn4icz,1.6282189747949305,-124.59144836935968,-50.562535517481564

2959339_20201_2_0,1gr22p4icz,3.1734864412752404,-119.76822957320184,-47.434445925583944

5897720_20201_2_0,1h171o4icz,-0.8369722950380242,-61.15370707157069,-29.695566938163523

4502810_20201_2_0,1hxi7o4icz,0.08636628420303627,-77.34833316617215,-29.39498665338185

4422479_20201_2_0,1i8xhp4icz,1.795500559149986,-101.76459950003354,-51.75033684174758

1157390_20201_2_0,1is51p4icz,-0.2499825853688754,-77.70257552371302,-23.358972241648473

4931425_20201_2_0,1isiun4icz,0.8798752790738925,-108.25252867586781,-29.095574469141965

3926652_20201_2_0,1iwofn4icz,-0.824027615825216,-111.77740515816646,-24.792775723746047

1545058_20201_2_0,1k9ftn4icz,-5.513271691924307,-61.46851177486093,-8.226925051630644

2409951_20201_2_0,1l1dun4icz,5.013890276204096,-67.15741174708356,-45.13139639627995

2507322_20201_2_0,1lh6ip4icz,-1.868743441270787,-89.86696829424613,-29.28837600973759

4486198_20201_2_0,1lytrn4icz,1.1708440674906049,-64.50959063845241,-37.774537786796756

3708403_20201_2_0,1mdihp4icz,-0.7212983888175383,-100.26967648446166,-41.27533724102484

2558130_20201_2_0,1mgrbp4icz,-1.3618281544914008,-58.52597440927016,5.2241998349844465

2618487_20201_2_0,1mktsn4icz,0.5614478205685999,-119.46253565121572,-40.92393611204892

3568104_20201_2_0,1n2nyo4icz,-1.673560678013813,-127.31351352003585,-32.57451377611609

1730409_20201_2_0,1o2aip4icz,2.065925433266203,-128.82893854314432,-49.660310790741605

2494133_20201_2_0,1olzen4icz,-1.3081020492744686,-74.36555418575978,-34.128063224502114

3786025_20201_2_0,5e52uo4icz,3.1450077606130753,-73.21751155676782,-51.30592128109413

