12 th decile
.60
.65
/users/rhydian/anaconda3/envs/torch_env/lib/python3.7/site-packages/torch/cuda/__init__.py:52: UserWarning: CUDA initialization: Found no NVIDIA driver on your system. Please check that you have an NVIDIA GPU and installed a driver from http://www.nvidia.com/Download/index.aspx (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729006826/work/c10/cuda/CUDAFunctions.cpp:100.)
  return torch._C._cuda_getDeviceCount() > 0
  0%|          | 0/810 [00:00<?, ?it/s]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  0%|          | 1/810 [00:22<5:05:27, 22.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  0%|          | 2/810 [00:25<3:44:44, 16.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  0%|          | 3/810 [00:28<2:47:59, 12.49s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  0%|          | 4/810 [00:30<2:08:17,  9.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 5/810 [00:33<1:40:27,  7.49s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 6/810 [00:36<1:21:12,  6.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 7/810 [00:38<1:06:43,  4.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 8/810 [00:42<1:01:25,  4.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 9/810 [00:44<53:13,  3.99s/it]  Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 10/810 [00:48<50:00,  3.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|▏         | 11/810 [00:50<45:00,  3.38s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|▏         | 12/810 [00:53<41:52,  3.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 13/810 [00:55<39:31,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 14/810 [01:00<46:22,  3.50s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 15/810 [01:03<43:23,  3.28s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 16/810 [01:05<40:29,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 17/810 [01:08<38:57,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 18/810 [01:11<37:14,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 19/810 [01:13<36:35,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 20/810 [01:17<40:16,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 21/810 [01:20<38:21,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 22/810 [01:22<37:27,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 23/810 [01:26<41:04,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 24/810 [01:29<39:12,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 25/810 [01:31<37:20,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 26/810 [01:34<36:31,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 27/810 [01:37<36:31,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 28/810 [01:40<36:33,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▎         | 29/810 [01:42<35:57,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▎         | 30/810 [01:45<35:27,  2.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 31/810 [01:48<35:30,  2.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 32/810 [01:50<35:09,  2.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 33/810 [01:53<33:58,  2.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 34/810 [01:55<34:04,  2.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 35/810 [01:58<34:03,  2.64s/it]  4%|▍         | 36/810 [02:01<33:44,  2.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▍         | 37/810 [02:03<33:33,  2.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▍         | 38/810 [02:06<33:38,  2.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▍         | 39/810 [02:09<34:33,  2.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▍         | 40/810 [02:11<34:00,  2.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▌         | 41/810 [02:14<33:50,  2.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▌         | 42/810 [02:16<33:47,  2.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▌         | 43/810 [02:20<36:29,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▌         | 44/810 [02:22<35:52,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 45/810 [02:25<36:20,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 46/810 [02:28<34:54,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 47/810 [02:31<34:45,  2.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 48/810 [02:33<33:48,  2.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 49/810 [02:36<34:27,  2.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 50/810 [02:39<34:26,  2.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▋         | 51/810 [02:42<34:59,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▋         | 52/810 [02:44<34:04,  2.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 53/810 [02:47<35:01,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 54/810 [02:50<34:31,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 55/810 [02:52<34:01,  2.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 56/810 [02:55<33:19,  2.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 57/810 [02:57<32:43,  2.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 58/810 [03:00<32:57,  2.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 59/810 [03:03<32:22,  2.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 60/810 [03:05<31:49,  2.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 61/810 [03:08<32:30,  2.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 62/810 [03:10<32:49,  2.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 63/810 [03:13<33:30,  2.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 64/810 [03:18<40:40,  3.27s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 65/810 [03:21<39:14,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 66/810 [03:24<39:39,  3.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 67/810 [03:27<38:12,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 68/810 [03:31<41:43,  3.37s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▊         | 69/810 [03:33<38:12,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▊         | 70/810 [03:36<37:08,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 71/810 [03:39<35:41,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 72/810 [03:42<35:39,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 73/810 [03:44<34:19,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 74/810 [03:48<37:39,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 75/810 [03:51<38:12,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 76/810 [03:54<37:34,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|▉         | 77/810 [03:57<36:12,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|▉         | 78/810 [04:00<36:00,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|▉         | 79/810 [04:03<36:51,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|▉         | 80/810 [04:06<36:05,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|█         | 81/810 [04:09<35:20,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|█         | 82/810 [04:12<35:57,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|█         | 83/810 [04:14<35:06,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|█         | 84/810 [04:17<35:16,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|█         | 85/810 [04:20<34:54,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 86/810 [04:23<34:35,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 87/810 [04:26<34:46,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 88/810 [04:29<35:41,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 89/810 [04:32<35:31,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 90/810 [04:35<36:35,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 91/810 [04:38<35:33,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█▏        | 92/810 [04:41<36:43,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█▏        | 93/810 [04:44<35:30,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 94/810 [04:47<35:43,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 95/810 [04:51<39:11,  3.29s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 96/810 [04:54<37:43,  3.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 97/810 [04:57<37:37,  3.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 98/810 [05:01<37:51,  3.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 99/810 [05:04<37:11,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 100/810 [05:07<38:26,  3.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 101/810 [05:10<36:55,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 102/810 [05:13<36:53,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 103/810 [05:16<36:33,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 104/810 [05:19<35:48,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 105/810 [05:22<35:54,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 106/810 [05:25<35:50,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 107/810 [05:28<34:54,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 108/810 [05:31<36:41,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 109/810 [05:34<34:51,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▎        | 110/810 [05:37<34:30,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▎        | 111/810 [05:40<34:30,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 112/810 [05:43<33:59,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 113/810 [05:45<33:17,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 114/810 [05:49<35:56,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 115/810 [05:53<38:03,  3.29s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 116/810 [05:56<36:36,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 117/810 [05:59<36:58,  3.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▍        | 118/810 [06:02<35:55,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▍        | 119/810 [06:05<35:37,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▍        | 120/810 [06:08<34:22,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▍        | 121/810 [06:11<35:32,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▌        | 122/810 [06:14<35:33,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▌        | 123/810 [06:18<37:05,  3.24s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▌        | 124/810 [06:21<35:44,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▌        | 125/810 [06:24<35:11,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 126/810 [06:26<34:15,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 127/810 [06:29<33:35,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 128/810 [06:32<32:08,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 129/810 [06:35<32:37,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 130/810 [06:38<34:29,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 131/810 [06:41<33:47,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▋        | 132/810 [06:44<33:27,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▋        | 133/810 [06:47<33:07,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 134/810 [06:50<35:28,  3.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 135/810 [06:53<34:11,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 136/810 [06:56<33:25,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 137/810 [07:03<47:12,  4.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 138/810 [07:07<44:21,  3.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 139/810 [07:09<40:34,  3.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 140/810 [07:12<37:55,  3.40s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 141/810 [07:15<36:05,  3.24s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 142/810 [07:18<34:32,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 143/810 [07:21<35:11,  3.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 144/810 [07:24<35:10,  3.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 145/810 [07:27<34:29,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 146/810 [07:30<34:00,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 147/810 [07:33<33:37,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 148/810 [07:36<32:52,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 149/810 [07:39<32:28,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▊        | 150/810 [07:42<32:00,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▊        | 151/810 [07:45<31:42,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 152/810 [07:48<31:37,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 153/810 [07:50<31:15,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 154/810 [07:53<31:08,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 155/810 [07:56<31:15,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 156/810 [07:59<31:20,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 157/810 [08:02<31:10,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|█▉        | 158/810 [08:06<34:56,  3.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|█▉        | 159/810 [08:09<33:57,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|█▉        | 160/810 [08:13<36:47,  3.40s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|█▉        | 161/810 [08:15<34:25,  3.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|██        | 162/810 [08:18<33:23,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|██        | 163/810 [08:21<32:29,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|██        | 164/810 [08:24<32:35,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|██        | 165/810 [08:27<33:13,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|██        | 166/810 [08:30<32:30,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 167/810 [08:33<31:56,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 168/810 [08:36<30:51,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 169/810 [08:39<30:30,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 170/810 [08:43<34:06,  3.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 171/810 [08:46<35:05,  3.29s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 172/810 [08:49<33:19,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██▏       | 173/810 [08:52<33:33,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██▏       | 174/810 [08:55<32:26,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 175/810 [08:58<32:16,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 176/810 [09:01<31:08,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 177/810 [09:04<30:37,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 178/810 [09:06<30:48,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 179/810 [09:09<30:44,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 180/810 [09:13<33:50,  3.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 181/810 [09:16<32:38,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 182/810 [09:24<48:20,  4.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 183/810 [09:27<42:45,  4.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 184/810 [09:30<39:52,  3.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 185/810 [09:33<37:05,  3.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 186/810 [09:36<34:52,  3.35s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 187/810 [09:39<34:08,  3.29s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 188/810 [09:42<32:37,  3.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 189/810 [09:45<31:35,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 190/810 [09:48<30:38,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▎       | 191/810 [09:51<30:33,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▎       | 192/810 [09:54<30:09,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 193/810 [09:57<30:29,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 194/810 [10:11<1:05:52,  6.42s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 195/810 [10:14<55:38,  5.43s/it]  Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 196/810 [10:17<47:17,  4.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 197/810 [10:20<42:25,  4.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 198/810 [10:23<38:08,  3.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▍       | 199/810 [10:26<36:00,  3.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▍       | 200/810 [10:29<34:56,  3.44s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▍       | 201/810 [10:32<32:42,  3.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▍       | 202/810 [10:35<32:19,  3.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▌       | 203/810 [10:48<1:01:20,  6.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▌       | 204/810 [10:50<51:10,  5.07s/it]  Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▌       | 205/810 [10:53<44:19,  4.40s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▌       | 206/810 [10:56<39:36,  3.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 207/810 [11:00<39:24,  3.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 208/810 [11:03<36:20,  3.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 209/810 [11:06<34:02,  3.40s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 210/810 [11:09<32:18,  3.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 211/810 [11:12<31:59,  3.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 212/810 [11:15<31:07,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▋       | 213/810 [11:28<1:00:51,  6.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▋       | 214/810 [11:31<50:54,  5.13s/it]  Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 215/810 [11:33<44:09,  4.45s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 216/810 [11:36<39:18,  3.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 217/810 [11:40<38:39,  3.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 218/810 [11:43<35:47,  3.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 219/810 [11:46<33:18,  3.38s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 220/810 [11:49<32:33,  3.31s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 221/810 [11:52<31:53,  3.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 222/810 [11:55<31:30,  3.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 223/810 [11:59<34:29,  3.52s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 224/810 [12:03<33:15,  3.41s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 225/810 [12:06<31:39,  3.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 226/810 [12:08<30:45,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 227/810 [12:12<31:05,  3.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 228/810 [12:15<30:26,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 229/810 [12:18<29:45,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 230/810 [12:21<29:04,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▊       | 231/810 [12:23<28:30,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▊       | 232/810 [12:27<29:25,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 233/810 [12:30<29:58,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 234/810 [12:33<29:51,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 235/810 [12:36<29:04,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 236/810 [12:39<28:47,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 237/810 [12:42<29:28,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 238/810 [12:45<29:17,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|██▉       | 239/810 [12:48<28:43,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|██▉       | 240/810 [12:51<27:53,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|██▉       | 241/810 [12:54<27:30,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|██▉       | 242/810 [12:56<27:03,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|███       | 243/810 [13:00<30:31,  3.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|███       | 244/810 [13:03<29:49,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|███       | 245/810 [13:07<31:41,  3.37s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|███       | 246/810 [13:20<58:50,  6.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|███       | 247/810 [13:23<49:21,  5.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 248/810 [13:26<42:11,  4.50s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 249/810 [13:29<38:00,  4.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 250/810 [13:32<35:17,  3.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 251/810 [13:35<32:54,  3.53s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 252/810 [13:38<31:38,  3.40s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 253/810 [13:41<29:50,  3.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███▏      | 254/810 [13:46<35:27,  3.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███▏      | 255/810 [13:49<32:54,  3.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 256/810 [13:52<31:03,  3.36s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 257/810 [13:55<29:30,  3.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 258/810 [13:58<28:54,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 259/810 [14:01<27:45,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 260/810 [14:04<27:38,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 261/810 [14:07<28:54,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 262/810 [14:10<29:29,  3.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 263/810 [14:14<28:53,  3.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 264/810 [14:17<28:27,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 265/810 [14:19<27:32,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 266/810 [14:22<27:14,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 267/810 [14:25<27:19,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 268/810 [14:28<27:30,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 269/810 [14:33<30:21,  3.37s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 270/810 [14:36<30:56,  3.44s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 271/810 [14:39<29:41,  3.31s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▎      | 272/810 [14:42<28:55,  3.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▎      | 273/810 [14:45<28:13,  3.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 274/810 [14:48<27:59,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 275/810 [14:52<30:00,  3.36s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 276/810 [14:55<28:29,  3.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 277/810 [14:58<27:34,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 278/810 [15:01<27:03,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 279/810 [15:04<27:11,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▍      | 280/810 [15:07<27:09,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▍      | 281/810 [15:10<26:40,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▍      | 282/810 [15:13<26:50,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▍      | 283/810 [15:18<31:56,  3.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▌      | 284/810 [15:21<29:46,  3.40s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▌      | 285/810 [15:44<1:21:19,  9.29s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▌      | 286/810 [15:48<1:06:46,  7.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▌      | 287/810 [15:51<55:08,  6.33s/it]  Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 288/810 [15:57<54:22,  6.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 289/810 [16:01<48:44,  5.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 290/810 [16:04<41:17,  4.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 291/810 [16:07<37:28,  4.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 292/810 [16:10<34:03,  3.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 293/810 [16:13<30:33,  3.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▋      | 294/810 [16:16<28:50,  3.35s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▋      | 295/810 [16:21<32:57,  3.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 296/810 [16:24<31:18,  3.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 297/810 [16:29<34:00,  3.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 298/810 [16:32<32:28,  3.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 299/810 [16:36<32:13,  3.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 300/810 [16:39<29:35,  3.48s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 301/810 [16:42<27:52,  3.29s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 302/810 [16:45<29:21,  3.47s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 303/810 [16:48<27:45,  3.29s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 304/810 [16:51<26:59,  3.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 305/810 [16:54<26:15,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 306/810 [16:58<29:07,  3.47s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 307/810 [17:01<27:27,  3.27s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 308/810 [17:04<25:57,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 309/810 [17:07<25:53,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 310/810 [17:10<25:27,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 311/810 [17:13<24:57,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▊      | 312/810 [17:18<30:53,  3.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▊      | 313/810 [17:21<28:34,  3.45s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 314/810 [17:24<27:02,  3.27s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 315/810 [17:27<26:49,  3.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 316/810 [17:30<25:19,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 317/810 [17:33<24:51,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 318/810 [17:35<24:00,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 319/810 [17:38<23:30,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|███▉      | 320/810 [17:41<23:34,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|███▉      | 321/810 [17:44<22:58,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|███▉      | 322/810 [17:47<23:05,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|███▉      | 323/810 [17:50<23:15,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|████      | 324/810 [17:53<23:31,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|████      | 325/810 [17:55<23:16,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|████      | 326/810 [18:01<29:54,  3.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|████      | 327/810 [18:04<27:32,  3.42s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|████      | 328/810 [18:07<26:20,  3.28s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 329/810 [18:10<27:16,  3.40s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 330/810 [18:13<26:08,  3.27s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 331/810 [18:18<29:32,  3.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 332/810 [18:21<27:04,  3.40s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 333/810 [18:24<26:19,  3.31s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 334/810 [18:27<25:55,  3.27s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████▏     | 335/810 [18:30<25:07,  3.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████▏     | 336/810 [18:33<24:20,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 337/810 [18:37<26:18,  3.34s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 338/810 [18:40<24:55,  3.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 339/810 [18:42<24:04,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 340/810 [18:45<23:33,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 341/810 [18:48<23:14,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 342/810 [18:51<23:16,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 343/810 [18:54<23:40,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 344/810 [18:57<22:50,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 345/810 [19:00<22:49,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 346/810 [19:03<22:29,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 347/810 [19:06<22:22,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 348/810 [19:09<22:44,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 349/810 [19:12<22:59,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 350/810 [19:15<22:48,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 351/810 [19:18<22:48,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 352/810 [19:21<22:29,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▎     | 353/810 [19:24<22:34,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▎     | 354/810 [19:27<22:10,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 355/810 [19:29<22:03,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 356/810 [19:34<24:56,  3.30s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 357/810 [19:38<28:04,  3.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 358/810 [19:41<26:32,  3.52s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 359/810 [19:44<24:31,  3.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 360/810 [19:51<32:13,  4.30s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▍     | 361/810 [19:54<28:58,  3.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▍     | 362/810 [19:57<26:44,  3.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▍     | 363/810 [20:00<25:17,  3.40s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▍     | 364/810 [20:04<27:21,  3.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▌     | 365/810 [20:07<25:36,  3.45s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▌     | 366/810 [20:10<24:35,  3.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▌     | 367/810 [20:13<23:18,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▌     | 368/810 [20:16<23:12,  3.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 369/810 [20:19<24:02,  3.27s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 370/810 [20:26<32:07,  4.38s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 371/810 [20:29<28:30,  3.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 372/810 [20:33<28:52,  3.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Trying to load from /users/rhydian/self-supervised-project/model_weights/SSECEncodersBothBoth
==> Resuming model trained for 106 epochs...
Trying to load from ../model_weights/angle_regressor4
==> Resuming model trained for 7 epochs...
3196999_20201_2_0,luyr3p4icz,0.5517929274254375,-59.37905084671098,-46.837753041704815

3456218_20201_2_0,lv1zvo4icz,-3.4910788802043227,-58.1348128812657,-46.663291416038945

5268618_20201_2_0,lv2wkn4icz,-1.5490624442466305,-101.0941724373181,-32.333468915645824

3638102_20201_2_0,lv2y9n4icz,-1.6610373318864537,-108.78467242984215,-27.700628560382142

2841698_20201_2_0,lv4wcp4icz,-5.413524204622112,-166.97451076175608,9.860030371347335

3814055_20201_2_0,lv8e9p4icz,-2.9155223785015867,-160.35931755885028,-24.252426052202168

4632904_20201_2_0,lvaedo4icz,-3.2303606306777017,-99.83706448124232,-20.332213465052376

5193818_20201_2_0,lvd87p4icz,3.3029088903986876,-92.99971811605491,-47.11078511077886

1427070_20201_2_0,lvfmjo4icz,-0.4256052298062581,-84.7566490676881,-32.610408113480844

3944455_20201_2_0,lvje1o4icz,0.6495971670247591,-127.28605588337777,-44.28672911849138

2718936_20201_2_0,lvlw9p4icz,0.8544960863477952,-98.21701742439308,-31.28960864229441

1415124_20201_2_0,lvoz3o4icz,-2.104581466473162,-82.70136177193825,-29.075693002644982

1340163_20201_2_0,lvqfyo4icz,0.7868212452506076,-97.94895217835759,-46.819939712438625

3494819_20201_2_0,lvqv7o4icz,2.2229999628511767,-117.39812363970776,-52.01788108161678

4391691_20201_2_0,lvvaho4icz,0.16625840972473244,-67.96151371150478,-46.19631609830361

4191396_20201_2_0,lvyfmn4icz,0.8493071332968927,-133.39418121975183,-45.40085649090686

4318495_20201_2_0,lw0pkn4icz,2.055087630533806,-66.3151852908405,-46.85858251061701

5622005_20201_2_0,lw75fn4icz,8.701405526264585,-166.60323368322614,-66.76802601322225

1666685_20201_2_0,lwef5o4icz,0.15323127848194673,-85.9075763026004,-24.83982118653499

1977491_20201_2_0,lwjm5o4icz,-1.4418323459161562,-87.50740879003024,-25.28758872253333

4471073_20201_2_0,lwpgun4icz,1.3695623322396677,-113.77141079707224,-47.766518622762476

4414169_20201_2_0,lwpzgp4icz,1.7023781986109243,-51.95877292279505,-31.268436774853313

1283299_20201_2_0,lwt0cp4icz,-0.32754461887263575,-114.73171634699591,-39.193025731801754

3919164_20201_2_0,lwuaxo4icz,2.2854705157598754,-92.36095671765659,-47.98023057466901

1691284_20201_2_0,lwvehp4icz,-2.8907508183420734,-88.18362072975569,-22.851966557133863

1253814_20201_2_0,lww5eo4icz,1.3226168704109649,-117.23953482839033,-40.55125504220783

3665435_20201_2_0,lx1qcp4icz,4.641519136075001,-89.18030147970742,-65.48391703871822

3498036_20201_2_0,lx2r9o4icz,2.5708869073533323,-85.93253330655779,-45.79266933836507

1682188_20201_2_0,lx6qwo4icz,1.6542706286503628,-100.11082643525214,-51.9472525541816

4826888_20201_2_0,lxj1fo4icz,-0.3671872009720569,-95.43916776548704,-26.872761405632133

3185322_20201_2_0,lxn82o4icz,-3.3036411919969275,-104.3234803016025,-27.772169609548143

1348011_20201_2_0,lxpumo4icz,-2.02166602320737,-111.75335347252897,-12.026624033543456

5694567_20201_2_0,lxqefp4icz,-1.0050229449641663,-120.73973335489208,-30.993563426268906

4395455_20201_2_0,lxs13o4icz,0.3149506743633554,-68.48795963027987,-37.23754241681891

2863005_20201_2_0,lxs7en4icz,-2.4648949468072825,-135.14752091182675,-28.501949340781565

2353077_20201_2_0,lxwu8o4icz,-63.891194772307294,407.5484643371653,491.6127616612198

4614284_20201_2_0,lxzrgn4icz,-3.0429009096162876,-112.7530646098316,-21.06685561387306

5834067_20201_2_0,ly0o6p4icz,0.8520318887093643,-113.768249403516,-56.547295813320574

1036022_20201_2_0,ly2fco4icz,-0.05877196244968711,-83.75125953108468,-48.616540411681754

4531736_20201_2_0,ly67fp4icz,3.5661824617506195,-131.14193765968776,-58.29261215229292

4273157_20201_2_0,ly8jyn4icz,-4.789581347974631,-80.90364456578709,-5.348684416468714

4707746_20201_2_0,ly8lbp4icz,1.2368287687722654,-70.37086236568504,-56.556151910073396

3576497_20201_2_0,ly9v3o4icz,-2.668493705786718,-110.14920865354327,4.052805887600613

3771344_20201_2_0,lybubo4icz,0.8453199692319106,-55.677905846925114,-42.87345403303303

4116398_20201_2_0,lyh6tn4icz,0.2101073341192397,-108.72555527689357,-50.90832674642229

5845376_20201_2_0,lyhico4icz,1.220038288908767,-135.52203922859312,-41.79906943809323

4558846_20201_2_0,lyjmin4icz,2.9812681862508486,-79.27007088818988,-56.91225527543449

5968097_20201_2_0,lyp5un4icz,-2.4110325433244126,-141.47162153803015,-25.675007260548995

2532146_20201_2_0,lyti7o4icz,-2.3004026273847322,-126.78310067363145,-25.286712994750474

4993098_20201_2_0,lz08rn4icz,0.9165791437417636,-107.59140763102485,-39.82512942235786

1837359_20201_2_0,lz1dxo4icz,-1.1812710417697412,-84.66563510083691,-40.17895289553337

1031229_20201_2_0,lz9bjo4icz,-2.1071384014466696,-88.05379761790243,-18.218868872524553

5444245_20201_2_0,lzatxo4icz,-2.290117059947416,-73.53014153499439,-16.124537821949005

4806209_20201_2_0,lzig8n4icz,-3.2422500690891582,-139.62995095889454,-20.9279981279264

1780369_20201_2_0,lzjvjn4icz,-2.4395430939170466,-93.25830842518045,-23.513540629425208

1744387_20201_2_0,lzk3so4icz,0.9832202665760912,-60.70519163997551,-55.75405794584334

1282528_20201_2_0,lzorun4icz,3.2569401118543153,-97.48007485227353,-60.76368563282341

4879232_20201_2_0,lzpafp4icz,-5.676299905272765,-141.68514877678913,-23.00469001949324

1128886_20201_2_0,lzry8n4icz,2.2526420810172567,-103.23861296393972,-36.93342010786233

1530875_20201_2_0,m00n9n4icz,-2.8982500557119946,-98.28771308212677,-14.82229499501372

1241823_20201_2_0,m01w3p4icz,8.206607308320264,-100.83083725851,-69.70453746543362

2882491_20201_2_0,m031tn4icz,-1.5022510354888445,-125.89111880356171,-26.884054429280724

2507354_20201_2_0,m05l7o4icz,1.4901646410832885,-101.9085290056884,-46.63873047315005

2480367_20201_2_0,actxro4icz,1.1814440274997744,-60.808226517771516,-51.412811260236396

2170547_20201_2_0,m0cvqn4icz,-2.233893621341463,-107.61229277651924,-5.252014412473372

5591649_20201_2_0,m96t8o4icz,1.931737864853833,-101.46403294628473,-54.56623699332873

3217057_20201_2_0,m0h54p4icz,-1.2060975321530245,-106.74041859640195,-36.997210997467306

5249625_20201_2_0,m0k0bo4icz,1.0039951090710015,-108.86705970708456,-16.136351912554815

1392126_20201_2_0,m0m49p4icz,1.7366607996775982,-117.1266839758313,-21.515873123837764

2805108_20201_2_0,m0mfyn4icz,-3.1099406322122403,-89.70166440829126,-11.552341939359465

2586784_20201_2_0,m0nh6o4icz,-1.2357343607329607,-112.33840424785438,-25.334256609143566

4382442_20201_2_0,m0nmhp4icz,-0.9295426670837019,-74.47445072733044,-22.669169886968405

5115942_20201_2_0,m0r67p4icz,-4.03672255217473,-108.14833796801827,-18.746767258237426

2964079_20201_2_0,22klro4icz,2.966085402090713,-53.14310309490574,-49.629168760773354

1840519_20201_2_0,m0v79o4icz,3.338466888558728,-89.9032387504979,-50.59056583588233

3901164_20201_2_0,m0y02p4icz,-1.2682937181328453,-111.7550311119146,-25.770217353041048

3162304_20201_2_0,m0z6mo4icz,0.40824481553066866,-79.21909180970215,-41.05503388814999

5038110_20201_2_0,m10qho4icz,-0.375065849683593,-111.27259878124366,-15.61809178264211

2267649_20201_2_0,m14tip4icz,-4.077394374957735,-44.44851282303432,-1.7470249811470637

4886894_20201_2_0,m18dwo4icz,0.6196160734661739,-89.86510529604797,-47.021079669067575

3371179_20201_2_0,m19p0p4icz,-10.017764870323834,-103.18971886616856,37.8646802849415

5855204_20201_2_0,m1dx1p4icz,-0.7574416377093247,-89.79372390313716,-31.200978476704137

5942902_20201_2_0,m1g3vo4icz,-0.7100360256412265,-81.3019937871988,-36.805051683550005

5702032_20201_2_0,m1hdtn4icz,2.2819070758028888,-87.30279039948468,-53.029870516968174

1206075_20201_2_0,m1ojbp4icz,0.9847748493281956,-61.51597514352477,-56.7906631348194

4196974_20201_2_0,m1sgzo4icz,-1.4935504200187963,-124.61088228257597,-17.71346977008787

4740061_20201_2_0,m1y33o4icz,-1.1988919795351722,-65.419951374437,-27.598457193748217

4453157_20201_2_0,m1yk3p4icz,0.14119813875743825,-100.76586472876906,-40.07885121142452

5945437_20201_2_0,m21cep4icz,-0.9619628135882076,-109.43656074935689,-11.920656086107115

1010406_20201_2_0,m27hio4icz,-0.9255769061266511,-71.34281425206672,-58.640004848669065

3608640_20201_2_0,m2ac9p4icz,-3.5867988469438075,-95.93726678732929,-24.960931383109653

6003731_20201_2_0,m2b9ho4icz,-3.720476903220887,-104.23288488933969,-13.775244773270359

5859965_20201_2_0,m2ctqo4icz,-1.6169145828353897,-89.30306758493782,-22.38592589700275

2258905_20201_2_0,m2f36p4icz,-1.4059251069348226,-112.78636138070789,-32.64829884570051

4217223_20201_2_0,f6b9dp4icz,-1.3698212401342638,-103.52782849295704,-25.255948510486746

3842824_20201_2_0,m2vxgo4icz,-0.7209694146024089,-140.31034103085247,-30.33254202164639

1001362_20201_2_0,m2vy8p4icz,2.149347766464778,-93.30388978038212,-56.96989059032208

5209184_20201_2_0,m2waco4icz,-0.7218026462476891,-87.06684740203198,-42.79874327173059

1382251_20201_2_0,m2wy1o4icz,4.564397031057589,-70.43322155956983,-56.77084552017233

1755714_20201_2_0,m2ybpo4icz,-3.512527359081492,-81.0760933531842,-13.860716754066402

3074645_20201_2_0,m33ido4icz,-2.6070718266290656,-109.4337516562261,-12.815999175682435

5401338_20201_2_0,m33pmo4icz,-0.6087868463846299,-78.72374407739929,-23.596053889764605

2958733_20201_2_0,m3fbbn4icz,0.2485688103189652,-74.97750709357703,-37.40189589565175

1672707_20201_2_0,m3i4vn4icz,1.1406255107001133,-119.05166579089718,-39.65848182249289

4666727_20201_2_0,m3ipsn4icz,-4.064291882286925,-125.21914879864516,-8.830476383168389

3706295_20201_2_0,m3r7en4icz,-31.267432945801385,-239.19334459924158,149.4689076200276

1687651_20201_2_0,m3umep4icz,-2.8034009430014915,-109.56296235844954,-40.29287227255834

1568477_20201_2_0,m3v3gn4icz,-4.057434581754903,-132.3684073601279,-9.198391304705737

2044975_20201_2_0,m3w9no4icz,0.23130948538238277,-128.22623270579493,-28.71147574292668

5080624_20201_2_0,m44htn4icz,4.338735893756805,-90.78145982736058,-47.224928007156976

1074408_20201_2_0,m4cueo4icz,0.7412754721197737,-62.108949845410706,-28.10388157830363

4557885_20201_2_0,m4k62p4icz,5.051784257313394,-50.73630885527632,-68.75866979646116

4034642_20201_2_0,m4lcfp4icz,0.70343485366307,-92.25273999983864,-49.536349619977045

3500401_20201_2_0,m4n6bn4icz,-2.9742853909077485,-117.9054570507192,-8.205348258193638

4484902_20201_2_0,m4svun4icz,1.0997231277383792,-72.53047736239068,-40.491512698032636

1740878_20201_2_0,m4vhxo4icz,2.299503383679548,-23.987397508998868,-47.91549731983011

2139359_20201_2_0,m4zdgp4icz,4.295511247279613,-30.830089487976977,-53.623490787669425

4911744_20201_2_0,m527on4icz,5.76754995407143,-61.32515699001766,-76.27199751520983

5571381_20201_2_0,m53gto4icz,-4.962727881138689,-143.32569376810815,-4.862946411240188

3980640_20201_2_0,m55eqn4icz,0.9834470796531941,-96.57201274690638,-45.55183564806633

4775675_20201_2_0,m56a4o4icz,-0.0207754293598655,-92.53771494567397,-36.48719366059906

2813942_20201_2_0,m57bjn4icz,0.9423505052444038,-129.87215775089666,-38.38639360941846

5146981_20201_2_0,m5i82o4icz,-2.266370175514072,-93.44464839531196,-22.70505155860822

5860036_20201_2_0,m5leao4icz,2.593570294128463,-72.66872526621714,-25.17251212972681

5223229_20201_2_0,m5nbhp4icz,-2.8934826065071833,-121.25282078420548,-37.846913975449255

2267733_20201_2_0,m5pbno4icz,-2.239720617358271,-87.5704356948734,-24.069912413930354

3342000_20201_2_0,m5qifp4icz,0.026208426422946796,-115.53273406843942,-26.987364033683633

2661185_20201_2_0,m5qqgp4icz,-1.8108549576335595,-134.58976269658433,-14.06290379308652

1897638_20201_2_0,m5t2on4icz,0.5584818531451287,-82.90647802552718,-26.069587681002233

4662544_20201_2_0,m61lbo4icz,-2.9798750599993875,-101.44530243416725,-9.037113139607769

5150824_20201_2_0,m62tdo4icz,1.7972658287241692,-77.81969223851243,-45.982787348445925

2657433_20201_2_0,m63v2p4icz,-3.1029138806049144,-103.10761596610408,-11.666577595876689

5587574_20201_2_0,m67e4o4icz,2.930205320667663,-120.53967870474838,-37.79085352369536

3012909_20201_2_0,jrtxpn4icz,0.8807614872562759,-76.13100876805953,-49.69308527385522

3550806_20201_2_0,m6atsn4icz,-2.532318347435128,-102.21468246345941,-26.042693731723602

4243268_20201_2_0,m6bhep4icz,0.4965247220761385,-97.44246006076352,-53.54863995493059

1239826_20201_2_0,m6cuuo4icz,0.8077419796968625,-93.71924487503168,-47.1543628652489

2860627_20201_2_0,m6ezso4icz,0.06982235657262299,-89.58781530604873,-37.911678720938724

5250562_20201_2_0,m6fkfp4icz,0.8974226021172111,-66.06841728566465,-52.178813785298786

3848150_20201_2_0,m6inxn4icz,1.3278744877990523,-95.53908911624276,-55.25990748643795

5190932_20201_2_0,m6lf9p4icz,-1.3074745431189225,-111.77337331602499,-27.755109311406144

1085713_20201_2_0,m6lmhp4icz,-0.7744871562228267,-96.8475052532466,-41.46461842982792

1944847_20201_2_0,m6m56p4icz,-3.0421725616286,-81.46525838548473,-14.09166677804447

4731934_20201_2_0,m6mg3o4icz,0.6780285613546221,-118.03863769126866,-40.133704253572475

1197364_20201_2_0,m6razo4icz,-2.268076789904221,-105.61177179786375,-17.145392039952

4343851_20201_2_0,m7jkwn4icz,0.41809109016736345,-82.84386507748394,-44.130369257910615

2165817_20201_2_0,m7m97o4icz,-0.09309222030180705,-93.12342243940896,-32.72474990530678

5729869_20201_2_0,m7n3hp4icz,-1.7345852045909647,-87.5130821145639,-38.52100642724905

4134581_20201_2_0,m7q29p4icz,1.5613893928732467,-61.40121184933696,-88.69754590132492

1995159_20201_2_0,m7qo3p4icz,1.9430660571187146,-121.02654543359947,-67.23046776605605

1728656_20201_2_0,m7te4p4icz,-0.2585024821456917,-110.77720672149886,-29.112278087937426

1171394_20201_2_0,m7y7lo4icz,-2.987531112937069,-126.44686514592175,-4.767301663012759

4875843_20201_2_0,m80exn4icz,1.412441834151648,-72.8331070045025,-51.55178851357813

4433346_20201_2_0,m82ago4icz,0.8779326392179531,-99.76221884066095,-48.058870098351804

1892510_20201_2_0,m85wbo4icz,2.3316328031448346,-68.62251927069153,-52.9087513909908

1651274_20201_2_0,m86cto4icz,-1.1683188993923401,-98.10624544393207,-31.81850364401096

5406943_20201_2_0,m86gjn4icz,0.8668805320158605,-87.21204776962992,-49.055587666877955

3343583_20201_2_0,m8aqap4icz,-0.638141043248121,-109.43533045160319,-24.432232427811343

2016818_20201_2_0,m8aqun4icz,1.9338076573869103,-99.33319418469415,-37.55390093034694

5302649_20201_2_0,m8f69o4icz,-1.3054142939230415,-96.04388654035625,-25.351498636309287

2258162_20201_2_0,m8gaxn4icz,-4.045896462503936,-106.37344737108751,-22.91074734787594

3250750_20201_2_0,m8i6to4icz,0.7711208032913354,-102.37275099442815,-45.3380901689419

4978557_20201_2_0,m8ihcp4icz,-0.8541921025480945,-78.53117294488911,-46.88428114067462

3752475_20201_2_0,m8j1fp4icz,-0.5124481259977592,-139.63449670261528,-31.577222696656946

1954266_20201_2_0,m8kcmo4icz,2.991293974448936,-78.81221211813224,-55.93889221755933

5349055_20201_2_0,m8krqo4icz,-1.7622315796558137,-110.84459869686418,-24.81327376819749

1421199_20201_2_0,m8l5sn4icz,-5.805982772610995,-136.06641665573454,-3.390211092314246

2193811_20201_2_0,m8mwdp4icz,-1.4295234005337707,-101.25345789346895,-28.55617783301345

5782220_20201_2_0,m8pz7p4icz,1.5654127609858857,-67.65151251910927,-39.3927499805619

1936366_20201_2_0,m8rh2p4icz,-0.08085259847005515,-61.97345627675051,-52.340020173220495

1124538_20201_2_0,m8rson4icz,-1.7002745657516856,-73.52500738691606,-21.27861980228687

3973500_20201_2_0,m8tgpn4icz,2.295701505727572,-64.18222088468383,-48.2316007350736

4175614_20201_2_0,m8toep4icz,-4.198837364430768,-149.3769735534207,-29.349229481945883

3583790_20201_2_0,m8uvnn4icz,-0.8388726842944243,-112.5848862575138,-38.09781633493023

4291137_20201_2_0,m8uzjp4icz,-3.181295562491118,-107.1157031616635,-4.6708492114105695

6003563_20201_2_0,m8y1hp4icz,7.708640710044121,-54.4141352054919,-61.50628773992986

5312909_20201_2_0,m90kho4icz,-1.1733711187951323,-90.95024024279618,-35.58916995794743

5048852_20201_2_0,m94ano4icz,0.5599192748104346,-87.44974263221451,-19.949555853088455

5905108_20201_2_0,m94lyn4icz,-1.0582603390633176,-100.18589533771606,-30.421373641741738

5320023_20201_2_0,m96gcn4icz,1.5508657806723487,-92.02979339557314,-42.5996456765879

1580196_20201_2_0,m96iho4icz,-0.6414488113373974,-69.05672062282136,-46.784795956893674

2347218_20201_2_0,m96o9n4icz,1.2254430924505995,-126.86723282428471,-41.47940016231118

5591649_20201_2_0,m96t8o4icz,1.931737864853833,-101.46403294628473,-54.56623699332873

5600233_20201_2_0,m97qco4icz,-1.4389240421501328,-138.42044218238087,-9.592633117034694

5093622_20201_2_0,m9gdyo4icz,-0.8276978431114835,-62.59182785264272,-35.395379543650236

1675420_20201_2_0,m9h1sn4icz,-1.3088503849578632,-135.01604996398405,-20.84610199380296

1653359_20201_2_0,m9mj9o4icz,0.7851018255994601,-93.93311229801122,-26.495976833270035

2239966_20201_2_0,m9q2io4icz,-0.8107245759234151,-104.37273904241573,-26.250654998309784

1670673_20201_2_0,m9qkjp4icz,-2.436950573500262,-84.85214360232729,-26.45227276130531

3805184_20201_2_0,ma0ito4icz,0.908925679199293,-98.33100740808155,-53.395885882071724

5004188_20201_2_0,ma1kvo4icz,0.29402110681486393,-68.02087450758103,-45.721737984293895

1980820_20201_2_0,ma7sln4icz,4.355210342148391,-71.8817370224507,-57.94718168165372

3731806_20201_2_0,ma8cvo4icz,0.5755452034119568,-74.39998746585258,-24.62138986021766

4210792_20201_2_0,ma9pqn4icz,-1.43826138219918,-118.22889683686736,-26.486591912285462

4192313_20201_2_0,maarbo4icz,0.3952105433496016,-101.0488568297576,-35.864580343247525

1221860_20201_2_0,mahghp4icz,1.6130723422530122,-52.83535112603289,-52.00113999137605

5533098_20201_2_0,maxtzo4icz,0.9001031648867762,-84.7914975916629,-49.1164686795739

5789691_20201_2_0,mb0atn4icz,-1.2516158664678683,-122.33919692497699,-33.47822577008769

2379269_20201_2_0,mb496p4icz,0.3454412170261373,-82.28564872857444,-50.63458435641371

5792741_20201_2_0,mbc9eo4icz,-0.16622385378815666,-93.8237173235654,-28.177448184140587

3395265_20201_2_0,mbe0no4icz,-1.667268032777654,-112.15768752502353,-16.11152239761671

3125554_20201_2_0,mbuejn4icz,3.3910984070003547,-95.29260715981991,-61.96991484849394

2851064_20201_2_0,mbv5ep4icz,-1.1741246567698669,-114.759838077594,-14.36934006269911

2084316_20201_2_0,mbxwvn4icz,-1.1217989430050137,-117.59301485095008,-21.883731460472532

2253556_20201_2_0,mbyo2o4icz,-0.5064876517164657,-110.9087049245233,-37.01800492569396

1136085_20201_2_0,mc2hgo4icz,-1.4682442312656454,-79.30062964122703,-40.52158674308613

3707299_20201_2_0,t5m0jp4icz,-1.5372549729288822,-106.54101398819819,-7.467497304221467

4594958_20201_2_0,mc8xuo4icz,-1.876279048422685,-111.31145781254054,-7.9983621282290756

6005157_20201_2_0,mcb0wo4icz,-2.7123434028777065,-113.679658296257,-23.995061295742445

3401276_20201_2_0,mcfjrn4icz,1.6589152109805196,-80.16703535932521,-42.397623418430044

2165724_20201_2_0,mci76p4icz,2.369881789641143,-103.43461617036431,-65.39614810210313

2944257_20201_2_0,mciiuo4icz,0.17509423342472205,-81.1146060608298,-28.44641881668457

4249218_20201_2_0,mck8to4icz,-0.6132683292429633,-84.50604004027048,-34.36852474702667

5119756_20201_2_0,mcmhmn4icz,1.146480105868317,-100.43128806030967,-44.95785971797699

4193588_20201_2_0,mctsxn4icz,-3.691962604474292,-141.3543745069751,-13.832865033310867

1800478_20201_2_0,mcvdto4icz,-1.0684989111492154,-105.68340011452162,-25.617287802315786

2090094_20201_2_0,md8gip4icz,1.1817317836280663,-102.53766163790621,-39.64507838673207

2838239_20201_2_0,md9flo4icz,-0.6424517328392464,-164.00960156819946,-41.23685044619728

3804905_20201_2_0,mda4lo4icz,0.4266340769274621,-86.96665886880152,-37.08370962003036

1362293_20201_2_0,mdkafo4icz,-1.2665922837069659,-60.302801290596534,-29.24722043595176

3063778_20201_2_0,mdkjep4icz,-3.1394280680113114,-99.40076721529945,-7.307332098175181

4750861_20201_2_0,mdm4yo4icz,-1.2733565868261265,-79.76206857712418,-34.97437847559131

2375804_20201_2_0,mdn62o4icz,-2.6692006957621675,-116.01531569821461,-15.727310948313658

3057466_20201_2_0,knwg7o4icz,-0.2679543229802217,-92.8179020560699,-41.6428910971747

4696097_20201_2_0,mdqxyn4icz,0.9216699779920948,-102.64863410238652,-30.585248574788622

3498897_20201_2_0,mds58p4icz,-3.183764469293894,-114.87129704121244,-29.390957980582172

2377699_20201_2_0,mdvhdo4icz,-1.7578415852394007,-79.03226895262955,-23.906126625800766

1240522_20201_2_0,mdzaso4icz,2.3623182410225008,-77.6311486197867,-66.53767274417541

3567438_20201_2_0,me0aro4icz,-1.4346648965947428,-97.39745615413759,-33.73046158917832

1055342_20201_2_0,me5ijn4icz,2.2064845735229004,-88.83211410252218,-38.06969106715208

4141178_20201_2_0,me7ngp4icz,-0.5183799348706755,-77.18932914026146,-49.04421376055434

4370719_20201_2_0,mee4lo4icz,-0.4467101007696002,-123.37294888878174,-50.06986404886621

4499197_20201_2_0,meg0po4icz,0.1920945299215765,-71.32196311917707,-29.849168667247824

5838523_20201_2_0,megpko4icz,0.018866584706561267,-90.2817090407238,-23.819273738090146

5265764_20201_2_0,mejc4o4icz,3.1331749767398986,-51.51342189736775,-42.82100610744436

3971325_20201_2_0,mels2o4icz,1.9545917945894493,-42.29400837915102,-56.72255676100889

4841393_20201_2_0,meo4xn4icz,-0.3730063526088879,-67.95589107229608,-18.320262791153056

4652814_20201_2_0,meq7in4icz,-2.247183034126341,-90.00369206534234,-25.892130725486453

4387308_20201_2_0,metkso4icz,1.9276140351740545,-112.37332426157974,-30.324698695321842

5041952_20201_2_0,meu11o4icz,-1.8491369015630437,-104.00041107753708,-28.789046097682757

1225480_20201_2_0,mewsgp4icz,0.6582780144485819,-59.99343255301159,-34.404053130169885

2513391_20201_2_0,mey2ip4icz,1.1071946903093453,-79.21223681463005,-40.05992804765302

4159895_20201_2_0,mf0gko4icz,0.7124333815993081,-72.33111037686973,-19.454342872105457

1080631_20201_2_0,mf50un4icz,-0.15657374143724237,-51.64410823507359,-28.862664030297935

1917093_20201_2_0,mf693o4icz,-4.693848810582633,-138.78940049105202,-22.304773661290042

2021503_20201_2_0,mf9vdp4icz,-3.0471166395873857,-51.533599594753866,-35.34264620632574

4006662_20201_2_0,mfaonn4icz,-7.159061075427808,-119.60444848502831,18.564272308643908

2525178_20201_2_0,mfbvdp4icz,-0.1725819162768459,-57.76292727827561,-40.843939629595155

5193673_20201_2_0,mfcuro4icz,1.114188838307415,-87.51586640602477,4.6055722365606755

4285795_20201_2_0,mfg0wo4icz,-3.107734067349292,-104.74523284672696,-6.042820528488264

1444773_20201_2_0,mfg6dn4icz,3.8744301752304917,-65.1135795210914,-54.27558298276709

1325181_20201_2_0,yw4xfn4icz,-0.2617439321954725,-129.17297105000566,-32.69051706634433

3598124_20201_2_0,mfkwoo4icz,-2.5971691850352907,-103.39444752915685,-17.75406343226487

2085514_20201_2_0,mfmyvn4icz,-0.2710642611247596,-84.81046636615477,-26.453650920356708

5557689_20201_2_0,mfn9bn4icz,-0.7321492549009935,-113.93436029567255,-37.4711799746828

1103199_20201_2_0,mftirn4icz,0.46203528635826746,-53.488689857185875,-29.183920072096214

1441781_20201_2_0,mfzo7p4icz,0.47894383582231564,-68.27535160827037,-31.11023834543154

5947640_20201_2_0,mfzrjp4icz,0.8725695733686241,-121.47989125018421,-51.47408931900347

2481390_20201_2_0,mg0q3p4icz,1.7369393490533425,-134.78069732583236,-57.667847671318256

2710185_20201_2_0,mg1c5p4icz,3.709118254515269,-52.75336932181716,-59.59414412342119

5905258_20201_2_0,mg2mun4icz,0.28760950907123484,-67.42762846620366,-26.150032742155616

4854596_20201_2_0,mg3hhp4icz,-5.351272554446543,-119.54990695694073,-0.11236955946174021

1891834_20201_2_0,mg3sco4icz,-1.411766931861642,-95.90810864739427,-12.547575967055906

4106333_20201_2_0,mg4mlo4icz,14.43254965491381,-55.4887904555527,-112.94563771024751

1745383_20201_2_0,mg8kap4icz,-0.02030086742990951,-108.63326800525599,-35.04742524731124

1892884_20201_2_0,mg8mln4icz,-5.524798186888959,-157.96952952116916,4.0532577725401495

1102278_20201_2_0,mge7jo4icz,-1.7806828600311617,-98.66084197666268,-36.19894858947657

3681864_20201_2_0,mghn4p4icz,-1.6733372009717546,-87.43308222721146,-37.0705899052724

4148929_20201_2_0,mgtrjn4icz,-0.6331835780446721,-121.08864601579094,-32.21425198395322

3287996_20201_2_0,mgv62p4icz,-0.014717882787619038,-73.89967126010202,-33.61977603897952

5053012_20201_2_0,mgx7po4icz,2.5421372718292448,-50.36648836784187,-63.13457401363259

5683293_20201_2_0,mgzudo4icz,-1.9372957168336846,-112.59784185849031,-46.29084045666329

3781005_20201_2_0,mh0b8p4icz,3.992216612270623,-105.13664480255079,-89.20161143152791

2351649_20201_2_0,mh29qn4icz,2.24274874664734,-99.84481713518105,-50.860029844903465

5126709_20201_2_0,mh3jrn4icz,0.8623160399617871,-115.69035100143043,-32.53976747486945

2278239_20201_2_0,mh498p4icz,-1.736999339761656,-80.62884659295176,-38.54881099308295

1274445_20201_2_0,mhdedp4icz,-2.1047609684363997,-86.53619797414339,-42.83885595843746

3028801_20201_2_0,mhh9un4icz,-8.622164588334854,-105.00284654398254,17.493312673774824

1840792_20201_2_0,mhj38o4icz,-0.5004213680898392,-111.61367320030138,-33.64073169057747
 46%|████▌     | 373/810 [20:36<26:42,  3.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 374/810 [20:40<26:27,  3.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▋     | 375/810 [20:43<24:45,  3.41s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▋     | 376/810 [20:46<23:58,  3.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 377/810 [20:49<23:36,  3.27s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 378/810 [20:51<22:02,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 379/810 [20:54<22:08,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 380/810 [20:58<23:13,  3.24s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 381/810 [21:01<22:14,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 382/810 [21:04<21:28,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 383/810 [21:07<21:35,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 384/810 [21:10<21:06,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 385/810 [21:12<20:50,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 386/810 [21:15<20:20,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 387/810 [21:18<21:04,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 388/810 [21:21<20:29,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 389/810 [21:24<20:17,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 390/810 [21:27<20:17,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 391/810 [21:30<20:30,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 392/810 [21:33<20:29,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▊     | 393/810 [21:36<20:11,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▊     | 394/810 [21:39<19:57,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 395/810 [21:41<19:37,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 396/810 [21:44<19:20,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 397/810 [21:49<24:32,  3.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 398/810 [21:52<23:03,  3.36s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 399/810 [21:55<22:15,  3.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 400/810 [21:58<21:12,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|████▉     | 401/810 [22:01<20:38,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|████▉     | 402/810 [22:04<20:10,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|████▉     | 403/810 [22:07<19:49,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|████▉     | 404/810 [22:10<20:44,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 405/810 [22:13<20:53,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 406/810 [22:19<26:58,  4.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 407/810 [22:22<24:53,  3.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 408/810 [22:25<23:54,  3.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 409/810 [22:29<23:04,  3.45s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 410/810 [22:32<21:54,  3.29s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 411/810 [22:35<21:31,  3.24s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 412/810 [22:39<23:24,  3.53s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 413/810 [22:42<22:03,  3.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 414/810 [22:45<21:37,  3.28s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 415/810 [22:48<20:37,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████▏    | 416/810 [22:50<19:50,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████▏    | 417/810 [22:53<19:26,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 418/810 [22:56<19:34,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 419/810 [22:59<18:59,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 420/810 [23:03<20:06,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 421/810 [23:06<19:43,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 422/810 [23:08<19:02,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 423/810 [23:11<18:56,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 424/810 [23:14<18:40,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 425/810 [23:17<18:20,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 426/810 [23:20<18:33,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 427/810 [23:23<18:43,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 428/810 [23:26<19:08,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 429/810 [23:29<18:56,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 430/810 [23:32<19:21,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 431/810 [23:36<21:26,  3.40s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 432/810 [23:39<20:12,  3.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 433/810 [23:42<19:35,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▎    | 434/810 [23:45<18:50,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▎    | 435/810 [23:47<18:14,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 436/810 [23:50<18:27,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 437/810 [23:54<18:40,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 438/810 [23:57<19:05,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 439/810 [24:00<18:37,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 440/810 [24:02<17:50,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 441/810 [24:05<17:36,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▍    | 442/810 [24:08<17:28,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▍    | 443/810 [24:11<17:10,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▍    | 444/810 [24:14<18:20,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▍    | 445/810 [24:17<18:06,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▌    | 446/810 [24:20<18:04,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▌    | 447/810 [24:23<17:47,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▌    | 448/810 [24:26<17:34,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▌    | 449/810 [24:29<17:31,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 450/810 [24:31<17:13,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 451/810 [24:34<17:12,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 452/810 [24:37<17:09,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 453/810 [24:40<17:13,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 454/810 [24:43<17:09,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 455/810 [24:46<17:59,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▋    | 456/810 [24:50<18:58,  3.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▋    | 457/810 [24:53<18:11,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 458/810 [24:56<17:43,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 459/810 [24:58<17:21,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 460/810 [25:01<16:57,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 461/810 [25:04<16:54,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 462/810 [25:18<36:06,  6.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 463/810 [25:21<30:27,  5.27s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 464/810 [25:24<26:22,  4.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 465/810 [25:27<23:18,  4.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 466/810 [25:30<21:46,  3.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 467/810 [25:33<19:50,  3.47s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 468/810 [25:36<19:09,  3.36s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 469/810 [25:39<18:30,  3.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 470/810 [25:42<17:48,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 471/810 [25:48<22:50,  4.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 472/810 [25:51<20:23,  3.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 473/810 [25:53<18:59,  3.38s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▊    | 474/810 [25:56<18:01,  3.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▊    | 475/810 [25:59<17:37,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 476/810 [26:03<17:47,  3.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 477/810 [26:06<17:29,  3.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 478/810 [26:09<17:13,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 479/810 [26:12<17:11,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 480/810 [26:15<16:44,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 481/810 [26:17<16:17,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|█████▉    | 482/810 [26:20<15:46,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|█████▉    | 483/810 [26:23<15:51,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|█████▉    | 484/810 [26:28<18:32,  3.41s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|█████▉    | 485/810 [26:41<34:04,  6.29s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|██████    | 486/810 [26:43<28:10,  5.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|██████    | 487/810 [26:47<25:49,  4.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|██████    | 488/810 [26:50<22:57,  4.28s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|██████    | 489/810 [26:54<21:23,  4.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|██████    | 490/810 [26:57<20:01,  3.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 491/810 [27:00<18:37,  3.50s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 492/810 [27:03<18:40,  3.52s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 493/810 [27:16<33:23,  6.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 494/810 [27:20<30:01,  5.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 495/810 [27:23<25:16,  4.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 496/810 [27:26<22:51,  4.37s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████▏   | 497/810 [27:29<20:27,  3.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████▏   | 498/810 [27:32<18:53,  3.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 499/810 [27:35<18:04,  3.49s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 500/810 [27:38<17:20,  3.36s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 501/810 [27:42<16:46,  3.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 502/810 [27:44<15:55,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 503/810 [27:49<19:03,  3.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 504/810 [27:52<17:49,  3.50s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 505/810 [27:55<16:31,  3.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 506/810 [27:58<15:51,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 507/810 [28:01<15:04,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 508/810 [28:03<14:56,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 509/810 [28:06<14:51,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 510/810 [28:09<14:36,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 511/810 [28:13<15:50,  3.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 512/810 [28:16<15:54,  3.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 513/810 [28:19<15:26,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 514/810 [28:22<14:59,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▎   | 515/810 [28:25<15:22,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▎   | 516/810 [28:28<15:06,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 517/810 [28:31<14:56,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 518/810 [28:34<14:32,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 519/810 [28:37<14:32,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 520/810 [28:40<14:01,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 521/810 [28:43<13:44,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 522/810 [28:46<13:50,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▍   | 523/810 [28:49<13:48,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▍   | 524/810 [28:51<13:53,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▍   | 525/810 [28:54<13:45,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▍   | 526/810 [28:57<13:30,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▌   | 527/810 [29:00<13:18,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▌   | 528/810 [29:03<13:13,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▌   | 529/810 [29:06<13:18,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▌   | 530/810 [29:18<27:10,  5.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 531/810 [29:21<23:04,  4.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 532/810 [29:24<20:13,  4.37s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 533/810 [29:27<18:07,  3.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 534/810 [29:30<16:39,  3.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 535/810 [29:35<19:01,  4.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 536/810 [29:39<18:04,  3.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▋   | 537/810 [29:42<16:33,  3.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▋   | 538/810 [29:45<15:29,  3.42s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 539/810 [29:48<15:06,  3.34s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 540/810 [29:51<14:26,  3.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 541/810 [29:54<13:46,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 542/810 [29:56<13:30,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 543/810 [29:59<13:03,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 544/810 [30:02<12:57,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 545/810 [30:05<12:55,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 546/810 [30:08<12:42,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 547/810 [30:11<12:46,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 548/810 [30:14<12:53,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 549/810 [30:17<13:05,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 550/810 [30:20<12:55,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 551/810 [30:23<13:28,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 552/810 [30:37<26:20,  6.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 553/810 [30:39<21:54,  5.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 554/810 [30:42<18:49,  4.41s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▊   | 555/810 [30:45<16:38,  3.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▊   | 556/810 [30:48<15:25,  3.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 557/810 [30:51<14:29,  3.44s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 558/810 [30:53<13:29,  3.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 559/810 [30:56<13:04,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 560/810 [30:59<12:30,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 561/810 [31:03<13:50,  3.34s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 562/810 [31:06<13:09,  3.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|██████▉   | 563/810 [31:29<38:04,  9.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|██████▉   | 564/810 [31:32<30:11,  7.37s/it] 70%|██████▉   | 565/810 [31:35<24:43,  6.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|██████▉   | 566/810 [31:38<20:53,  5.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|███████   | 567/810 [31:41<18:11,  4.49s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|███████   | 568/810 [31:44<15:50,  3.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|███████   | 569/810 [31:48<15:20,  3.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|███████   | 570/810 [31:50<14:03,  3.52s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|███████   | 571/810 [31:53<13:12,  3.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 572/810 [31:56<12:43,  3.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 573/810 [31:59<12:14,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 574/810 [32:02<11:46,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 575/810 [32:05<11:34,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 576/810 [32:08<11:27,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 577/810 [32:10<11:10,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████▏  | 578/810 [32:13<11:02,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████▏  | 579/810 [32:16<11:19,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 580/810 [32:20<12:07,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 581/810 [32:23<11:43,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 582/810 [32:32<18:19,  4.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 583/810 [32:34<15:57,  4.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 584/810 [32:37<14:27,  3.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 585/810 [32:41<14:00,  3.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 586/810 [32:44<12:58,  3.48s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 587/810 [32:47<12:28,  3.36s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 588/810 [32:53<15:43,  4.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 589/810 [32:56<14:09,  3.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 590/810 [32:59<12:57,  3.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 591/810 [33:02<12:05,  3.31s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 592/810 [33:05<11:31,  3.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 593/810 [33:07<11:11,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 594/810 [33:10<10:54,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 595/810 [33:14<11:13,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▎  | 596/810 [33:17<11:33,  3.24s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▎  | 597/810 [33:20<11:03,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 598/810 [33:23<10:52,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 599/810 [33:26<10:30,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 600/810 [33:29<10:22,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 601/810 [33:32<10:15,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 602/810 [33:35<10:30,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 603/810 [33:38<10:05,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▍  | 604/810 [33:41<10:17,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▍  | 605/810 [33:44<10:07,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▍  | 606/810 [33:47<10:06,  2.97s/it] 75%|███████▍  | 607/810 [33:49<09:54,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▌  | 608/810 [33:52<09:53,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▌  | 609/810 [33:57<11:23,  3.40s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▌  | 610/810 [34:00<10:41,  3.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▌  | 611/810 [34:02<10:20,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 612/810 [34:06<10:15,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 613/810 [34:09<10:04,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 614/810 [34:12<10:01,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 615/810 [34:17<12:35,  3.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 616/810 [34:20<11:39,  3.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 617/810 [34:23<10:50,  3.37s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▋  | 618/810 [34:26<10:37,  3.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▋  | 619/810 [34:29<10:11,  3.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 620/810 [34:32<09:36,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 621/810 [34:38<12:34,  3.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 622/810 [34:42<11:59,  3.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 623/810 [34:44<10:56,  3.51s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 624/810 [34:47<10:09,  3.27s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 625/810 [34:50<09:47,  3.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 626/810 [34:53<09:34,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 627/810 [34:56<09:36,  3.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 628/810 [34:59<09:17,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 629/810 [35:02<09:10,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 630/810 [35:05<08:58,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 631/810 [35:08<09:06,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 632/810 [35:11<08:57,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 633/810 [35:14<08:55,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 634/810 [35:17<08:51,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 635/810 [35:21<09:25,  3.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▊  | 636/810 [35:24<09:03,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▊  | 637/810 [35:27<09:00,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 638/810 [35:30<08:41,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 639/810 [35:33<08:27,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 640/810 [35:35<08:11,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 641/810 [35:38<08:07,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 642/810 [35:41<08:13,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 643/810 [35:44<08:02,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|███████▉  | 644/810 [35:47<07:57,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|███████▉  | 645/810 [35:50<08:01,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|███████▉  | 646/810 [35:53<07:52,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|███████▉  | 647/810 [35:56<07:52,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 648/810 [35:59<07:58,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 649/810 [36:02<07:58,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 650/810 [36:05<07:55,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 651/810 [36:07<07:49,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 652/810 [36:10<07:48,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 653/810 [36:13<07:35,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 654/810 [36:16<07:36,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).

5256413_20201_2_0,mhk03p4icz,-1.942434874759419,-110.49502013930328,-30.94139065214661

2763052_20201_2_0,mhmhbp4icz,-0.6736480677808406,-92.74806544656377,-38.635449332435655

4209391_20201_2_0,mhni1o4icz,0.9574339584824798,-76.9656521708419,-22.941032808979912

4043370_20201_2_0,mhoi3p4icz,0.6578021982893782,-113.71135951226603,-39.21494609232701

2670919_20201_2_0,mht91p4icz,0.5596436001186335,-112.44960302217459,-61.09516063540684

5000497_20201_2_0,mhx58p4icz,-0.9558860333334209,-119.18495870395819,-28.49912193633699

4040778_20201_2_0,mhymjp4icz,0.3923474866913788,-99.15525073224742,-43.235619143636015

1787335_20201_2_0,mi3vfo4icz,1.7930776069819507,-72.25867277475169,-47.92181958084683

5087291_20201_2_0,mi616o4icz,0.47902727005517526,-106.18300781452527,-31.65249511817609

1155678_20201_2_0,mi7kun4icz,3.5039032542570494,-64.92693296814915,-62.91436077641971

4967001_20201_2_0,miaesn4icz,-3.059811391437651,-87.77242362591505,-15.106320763316589

3747063_20201_2_0,mic0pn4icz,2.2938850675357214,-86.6102795919781,-57.88491554520331

1156275_20201_2_0,mic4io4icz,12.703120333422708,-75.6987260638852,-99.88584426542965

1797037_20201_2_0,micqlo4icz,0.42337171001700413,-83.50027889917155,-32.08746621762907

1993066_20201_2_0,mie7sn4icz,2.042315383181641,-102.7959811909644,-55.35502389739456

1792072_20201_2_0,pmr09o4icz,-1.8332231430483108,-64.64217156371723,-16.774418045651544

4918956_20201_2_0,mikaho4icz,-1.2582077567291463,-145.9344044858907,-20.106583992679603

5920826_20201_2_0,mirs0p4icz,2.5421500068712883,-73.87842022771906,-59.01711908207773

2158573_20201_2_0,mitieo4icz,2.265412218773435,-132.41953541670915,-57.31279352819615

5341246_20201_2_0,mixuvn4icz,0.9403396010576202,-108.70944677320827,-34.57557906639691

3426054_20201_2_0,miz6jn4icz,0.08506832339672951,-118.0713738778071,-29.48217946196307

4963267_20201_2_0,miztbn4icz,2.866645557924521,-35.28356931583636,-61.48443729544631

3564878_20201_2_0,mj76wn4icz,0.7374314050277887,-109.92226838945209,-31.52044844069293

4650415_20201_2_0,mjfymn4icz,0.3746674907794751,-70.07077645024611,-20.02285834239629

4114405_20201_2_0,mjgkhp4icz,-0.5891608538171393,-67.51812375888471,-32.36424366078852

1530350_20201_2_0,mjgvao4icz,-0.3672284710347649,-107.32272926624614,-39.62922180735461

1722601_20201_2_0,mjlaho4icz,-1.2985671073386844,-122.60657414276503,-21.567135925456284

2745536_20201_2_0,mjuvjp4icz,-1.3528888282286609,-91.11217084399672,-31.133541073449194

2744554_20201_2_0,mjw0ko4icz,3.7726010579639975,-62.20861235696432,-60.58740372786522

2661196_20201_2_0,mjy0go4icz,-0.8354238961020315,-101.03930726588939,-24.497006203942107

1077948_20201_2_0,mk0nep4icz,-7.450751225884623,-136.89950196305972,9.931536826250351

2279091_20201_2_0,mk8i6o4icz,-4.647533651874226,-129.42278783388804,11.069515770839956

2975366_20201_2_0,mk9eqn4icz,-1.2398291492158424,-81.37186882370057,-22.488229558410197

4548139_20201_2_0,mkat6o4icz,2.8329288480898778,-134.29625935077766,-48.93917333219025

1344194_20201_2_0,mkh3so4icz,1.4450422353660846,-94.12512541049753,-39.121674812067724

1709669_20201_2_0,mkixqo4icz,-1.8884589197078532,-110.91095298471856,-19.857686576815397

1895095_20201_2_0,mknhkn4icz,10.27141598094562,-70.30423872489524,-94.86460716374211

4046535_20201_2_0,mkpgxo4icz,-0.10016573440245025,-106.77783657739039,-44.42136691601986

3106813_20201_2_0,mksvuo4icz,-1.0449110051507933,-70.27885450911418,-22.664918683560273

4673068_20201_2_0,mku3no4icz,-2.031339937709033,-51.01700462752808,-35.87306410203905

1405345_20201_2_0,mkvr6p4icz,-4.461130486829243,-100.74569870625265,-19.471161070409522

1535460_20201_2_0,mkx2vo4icz,2.4338777551063893,-84.46518387544691,-48.59269730035838

4825376_20201_2_0,mkygnn4icz,-2.7951938640863183,-113.2542757425818,-13.097503149606865

5895143_20201_2_0,mkzfvo4icz,0.6705401409986493,-58.67713576300497,-37.41517797293825

2194773_20201_2_0,mkzlbp4icz,4.94029621777171,-40.83573219251531,-68.20669193433518

5620966_20201_2_0,ml1h0o4icz,-1.467285977537872,-106.71501808286712,-38.91396079569496

5625400_20201_2_0,ml745p4icz,1.6439855123766223,-102.68883025209064,-47.370595566058356

4172249_20201_2_0,mlg4mn4icz,5.792640340170563,-50.14402092454577,-54.70082590534615

1987631_20201_2_0,mlm8to4icz,-2.004132212430522,-121.91283737251129,-23.569118383572516

5218059_20201_2_0,mln6xn4icz,-3.939047184492915,-131.4819410937291,-14.80726859630137

4416808_20201_2_0,mlstwo4icz,2.285150667227108,-78.22272125156385,-44.315799796570204

1763120_20201_2_0,181exn4icz,2.391207029832492,-86.46966676362334,-36.44512230220985

3397302_20201_2_0,mlu4yo4icz,2.874303572743788,-75.0012815946589,-61.97903126907474

3804787_20201_2_0,mm1p7p4icz,-1.5435476361001346,-99.29072987346117,-34.586698988358734

4523405_20201_2_0,mm2y7p4icz,0.467295842504381,-91.45745303955539,-44.45654897947881

6002315_20201_2_0,mm9lep4icz,-2.9865611903199474,-115.19218048346161,-25.793836043707472

5865924_20201_2_0,mmcjpn4icz,-1.1529279457152553,-109.41951737862644,-22.204456780916445

4743530_20201_2_0,mmd2ep4icz,-2.0769208706238507,-81.48119907198821,-20.957622637099675

5196835_20201_2_0,mmmqno4icz,2.609228430822496,-98.27524946901812,-49.08845780554219

5294549_20201_2_0,mmviyo4icz,-0.7766651616761935,-113.68246595814546,-23.729065893616593

2290013_20201_2_0,mmxgqo4icz,-0.09187497620069393,-91.59432279698117,-47.853778151312

2326111_20201_2_0,mmxydo4icz,-0.24882517670871757,-118.2959732413521,-39.52957589686379

4713635_20201_2_0,mmyf9p4icz,0.7988999108594864,-66.52035231130748,-31.153951140808786

2175753_20201_2_0,mmyztn4icz,-1.4430300651098278,-87.2297513857184,-55.72824982234735

1443207_20201_2_0,mn372p4icz,-0.6401683298848386,-60.49656464527902,-31.642409543648796

3698137_20201_2_0,mn47zn4icz,-0.6550441168207808,-79.85759416815955,-44.39686428215839

3363455_20201_2_0,mn6vln4icz,-3.2818181113474667,-99.20909307948148,-23.283631662236033

1811668_20201_2_0,mne4rn4icz,3.082024477729401,-94.87936990103978,-51.9291226651161

2918460_20201_2_0,mnevso4icz,1.00601271713746,-53.39325394759294,-33.528715724698216

2866844_20201_2_0,mnfpxn4icz,1.1885429565184553,-60.55477244272123,-38.71146047840119

3909755_20201_2_0,mnfz8p4icz,-0.8415541506151631,-109.91190010551284,-21.389499693124122

3846408_20201_2_0,mngxjp4icz,-0.612206206285238,-86.9599786964335,-35.12492936447889

4604696_20201_2_0,mni9ho4icz,2.411998728923261,-114.6451169761389,-47.09782723806221

2924133_20201_2_0,mnoi8p4icz,-0.3843624744392044,-56.32023893395956,-9.954823135426224

4593809_20201_2_0,mnuz7p4icz,3.816362226489761,-80.19977608354148,-71.34914563819612

2474724_20201_2_0,mny5ep4icz,-0.2814108725154145,-116.37657070599238,-29.0481263641515

1906167_20201_2_0,mo4m8p4icz,0.053497974280755874,-114.00766380181761,-27.68959928552755

1509620_20201_2_0,mo9gqn4icz,-0.8886762680858714,-130.01742889469418,-28.59161292159581

3248314_20201_2_0,moa67p4icz,-8.002619402548156,-152.03980613206073,2.9967078160976257

4541721_20201_2_0,mod0hp4icz,0.39074514499517665,-129.676446000666,-48.154295660443694

5338468_20201_2_0,mogsgo4icz,-0.7276829297139863,-80.04996168065398,-27.19088054915042

2496953_20201_2_0,momfbn4icz,-0.08477237911539562,-74.77447234516677,-24.587202194371343

3253816_20201_2_0,momhmo4icz,-2.3367016316135447,-95.36456565953475,-26.044840420001876

5271163_20201_2_0,moqloo4icz,0.714737633834645,-106.94003387689301,-36.643715727626216

1843467_20201_2_0,motjzn4icz,-0.9504188717323404,-82.53673605220015,-50.72542926786966

5701397_20201_2_0,movsdp4icz,-0.44496368157138516,-48.06954684010762,-29.27613831087504

3704446_20201_2_0,movzkn4icz,-0.1362368589868881,-141.27591827283027,-32.51127765689721

1671704_20201_2_0,moxaqn4icz,-0.8729185295205181,-105.73571390573824,-22.783783432884917

5866413_20201_2_0,mp1rdp4icz,0.24725825528542017,-101.29365670553392,-23.28758913175136

2440728_20201_2_0,mp2lgp4icz,-4.10161860293086,-109.32820458651642,-6.479896382917815

2673409_20201_2_0,mp6b1o4icz,0.583213962260986,-93.72647665812204,-37.11559120749621

2833359_20201_2_0,mplbep4icz,0.22784562058259222,-102.58313887698358,-33.950882246921466

2338156_20201_2_0,mposin4icz,-2.1344202744481913,-115.53141541559873,-33.28844133737637

4542058_20201_2_0,mppeap4icz,-0.3509728795451983,-56.232834981560416,-58.34198807536187

1723510_20201_2_0,mptzwo4icz,-4.093334769919728,-90.6485572052703,-34.264583080625655

1076069_20201_2_0,mpu6dp4icz,-0.49524611947915187,-106.62093087137842,-37.58404087967551

1657000_20201_2_0,mpxbno4icz,3.715452856199545,-60.714583144611396,-54.407954141505684

5625795_20201_2_0,mq156p4icz,-0.6064161946345397,-91.76535001183777,-20.211608421685554

5985664_20201_2_0,mq2gip4icz,-5.1771687128275925,-154.00701028297854,-30.267235858907796

3478728_20201_2_0,mq4kxn4icz,0.9502561187149545,-54.06702759076714,-33.61779766773023

3447973_20201_2_0,mq7p9p4icz,1.1625274266094756,-79.80336147667796,-31.336378614977548

3400060_20201_2_0,mqb8io4icz,3.2334099131134355,-101.88374207248435,-45.92547418431853

5662594_20201_2_0,mqenfn4icz,-14.998219958211935,-141.39813616994212,33.88984515702808

5945350_20201_2_0,mqeqhp4icz,0.783812494269503,-92.46441952055508,-33.893247129109824

1820097_20201_2_0,mqfpvo4icz,2.4405943644534593,-85.083012636739,-49.82167948705168

2436232_20201_2_0,mqg4to4icz,5.406932802819392,-60.38379605055172,-62.84675841124535

3204564_20201_2_0,mqgrln4icz,-0.9329238524098021,-95.92945981197744,-20.409420599426866

1124250_20201_2_0,mqgxjn4icz,1.4488731214624546,-86.63420653821487,-41.03564319515981

1603000_20201_2_0,mqhbjo4icz,-7.974941468126579,-110.71191642532074,-9.04148288865423

4269708_20201_2_0,mql4ep4icz,-4.848536096203086,-126.5066296009264,-34.783931681383976

1772130_20201_2_0,mqlmwo4icz,-1.3120281386558705,-59.320777821018225,-33.75842614430795

3926634_20201_2_0,mqlz7p4icz,1.1277711362998415,-75.20021354934568,-34.333781032137864

1643683_20201_2_0,mqmiwn4icz,3.8733290730413783,-61.54391723781703,-72.12386520913222

2613162_20201_2_0,mqr84p4icz,-2.385103586085775,-49.84007951401293,-35.03037782257371

3078672_20201_2_0,mqrlip4icz,1.4329251553552367,-73.73619886122731,-65.87912576279676

1885057_20201_2_0,mqw2ip4icz,-4.809480928882247,-90.70881474123448,11.352105276527709

2225932_20201_2_0,mqw7dn4icz,-2.3050337036689332,-118.24598735589237,-14.5471263711989

2086496_20201_2_0,mqwt3p4icz,3.04777396547144,-85.01684653617303,-30.816642080249323

5407511_20201_2_0,mr0o8o4icz,0.1895947136666872,-69.66325048823884,-40.532517997024414

4111857_20201_2_0,mr5xqn4icz,5.473684808929802,-89.11590626950738,-56.39031224360312

2334524_20201_2_0,mr6fno4icz,-1.8976509060226185,-72.07210472496766,-27.448165834246723

4679712_20201_2_0,mr7qhp4icz,0.46441514399718525,-100.07895261121251,-40.66491133719077

5949866_20201_2_0,mr92so4icz,-1.906324867344644,-131.2210717404367,-13.56557309107039

2267181_20201_2_0,mrbjdn4icz,0.262974079503009,-97.00233117512573,-36.332344945224634

5022972_20201_2_0,mrdtmo4icz,1.3425397134023729,-102.67072042712425,-21.407352560391416

3843426_20201_2_0,mrem9n4icz,4.016971893660538,-97.29301304406039,-45.16920878822559

2009506_20201_2_0,mrgdkn4icz,-3.994477978997814,-78.10033959517378,-35.78777300198517

5120138_20201_2_0,mritqo4icz,-1.22234743710695,-98.76736176233567,-28.623715183302693

1171774_20201_2_0,mrjcqo4icz,-0.7323080653273095,-136.97240082567689,-36.18460517331724

5016048_20201_2_0,mrl9ao4icz,-1.6144270565962884,-64.66401077836565,-25.17097241589849

1936184_20201_2_0,mrml2o4icz,5.023125758409212,-67.71008719550841,-57.66707803702582

3282773_20201_2_0,mrr9wn4icz,-0.36642153610997896,-70.81630992656565,-51.51564104279545

1889929_20201_2_0,mrs6vn4icz,-0.8610239745795619,-62.01028294203073,-28.891176634049472

4969235_20201_2_0,mrwiyo4icz,-2.3606944956884,-49.171295260537136,-10.67225194933431

3175698_20201_2_0,mrxbro4icz,-4.373738460175157,-95.80068349143204,-18.212635723687242

1477187_20201_2_0,ms1rgp4icz,-0.5367554039307746,-121.49729944938494,-32.83458336767427

4193184_20201_2_0,ms3rfn4icz,2.6236790806858354,-99.80160876043959,-62.429102284452796

2504182_20201_2_0,ms7heo4icz,0.28666684203070464,-150.35787183030024,-42.840234086369065

3075550_20201_2_0,msi8vn4icz,-3.368816434842837,-99.65037711902599,-45.84848250170353

5254816_20201_2_0,msokao4icz,-0.3690683246625273,-60.107112833773044,-36.45166796720653

1729597_20201_2_0,mspqcp4icz,2.2152299609896096,-116.19473938135704,-49.557234452187785

4857397_20201_2_0,msunan4icz,-2.119794310465402,-81.54272370160427,-33.95781483644396

1402079_20201_2_0,mt0mao4icz,-4.3054540140821835,-80.97205402406942,-3.7035013680053765

2122894_20201_2_0,mt6kso4icz,-4.378353319081569,-120.69582764635132,8.504915788967338

4776625_20201_2_0,mtboln4icz,2.7773815574101186,-119.75349660897069,-37.32382288895549

3222110_20201_2_0,mtegvo4icz,-1.6758166390260658,-78.30220876272514,-26.028051352158087

5248576_20201_2_0,mth7gn4icz,-1.9664022916041244,-81.72379463147385,-17.505632363119418

5117441_20201_2_0,mtpe3o4icz,-2.4486344448321784,-91.16425439875113,-14.432401642231767

1544289_20201_2_0,mtr46o4icz,1.4450775707841206,-77.64442993908119,-40.083585911938556

5655570_20201_2_0,mu2ayo4icz,1.349469133618431,-92.69995326613778,-40.53938552654927

2735994_20201_2_0,mu8s3o4icz,-0.027301757371394075,-113.81083786752072,-16.779296598074907

5973123_20201_2_0,mu8vvo4icz,3.605876407384245,-66.41448391488339,-51.66579761580503

2794140_20201_2_0,mubs7o4icz,1.1743960757999423,-83.97142092093975,-41.6319250906507

4290184_20201_2_0,mucrsn4icz,0.7798867544904724,-99.91100928371313,-48.878193723539766

2569792_20201_2_0,mueabo4icz,-2.172516275655458,-80.29686041356669,-21.155419798698162

5311957_20201_2_0,mugmnn4icz,-4.260082537541498,-121.3278068472161,-5.801415993631878

4915737_20201_2_0,mugvdp4icz,-1.3628463909216286,-107.00361778176412,-36.78855533363783

2757617_20201_2_0,muhfjp4icz,19.588762689055894,-27.52743715099234,-136.62851187882052

2063906_20201_2_0,muizen4icz,-3.112260705781051,-113.95853457641772,-27.927073479357148

3886085_20201_2_0,muj79n4icz,1.5931579634313038,-119.19238376750755,-36.19593194805154

2711473_20201_2_0,muoeco4icz,0.5815959830964436,-56.380621337368666,-31.062609823042152

1559483_20201_2_0,muol8o4icz,-0.20486073269418525,-96.45775582767163,-26.349424353077623

3196029_20201_2_0,muozjp4icz,5.709949990422506,-93.96375267691909,-82.59084479935025

2048489_20201_2_0,mup6ip4icz,-0.1495665194261353,-140.42741040869396,-27.37641162783612

3393297_20201_2_0,mupqmn4icz,-0.3874108960893959,-88.37773626220005,-40.3302280893333

4537398_20201_2_0,mut1en4icz,1.739130521815022,-112.63467846265445,-58.46182781966414

3100542_20201_2_0,mutjon4icz,-2.177768161755881,-99.82695841639074,-6.318638004021622

3934306_20201_2_0,muvrhp4icz,-4.03117073440339,-115.79186465989324,-21.569624692089576

1637753_20201_2_0,mv78gp4icz,0.8562979994696951,-98.61690042935766,-56.682522648509064

1679307_20201_2_0,mv90ep4icz,1.3179993825209206,-54.111387985471794,-41.92387559302148

1152728_20201_2_0,mva16o4icz,-0.04118229162954475,-94.75246220702329,-38.65952664610721

4154505_20201_2_0,mvdkjo4icz,-1.8870748599043699,-68.8347150889183,-21.069829982630495

3626834_20201_2_0,mvfatn4icz,-3.140928183912081,-60.448850568372336,-15.391160358679713

1692414_20201_2_0,mvgc4p4icz,-0.40435076660612945,-115.01523859234288,-37.84817736807044

4821876_20201_2_0,mvl0uo4icz,4.804488773753497,-24.927916487752015,-53.934941771359945

5184811_20201_2_0,oepmeo4icz,-1.9255359546486768,-95.19062641993551,-31.33091151845025

4347720_20201_2_0,mvq5no4icz,1.5411935446363136,-77.96354462278757,-37.700163918541435

4287703_20201_2_0,mvu6qo4icz,0.6475500436114429,-96.21702803311999,-37.052767283690855

4003242_20201_2_0,mvyiso4icz,-1.1274150746303662,-100.2020978048308,-26.76843236839528

5402192_20201_2_0,mvz6sn4icz,-1.0488486822779237,-133.92406384128208,-30.02890413127045

3581151_20201_2_0,mvznfo4icz,6.149393818470106,-54.29056080495431,-48.65169999956899

1167666_20201_2_0,mw0qun4icz,2.1249364210903705,-84.43840761492498,-54.4670806540596

1685261_20201_2_0,mw1kqn4icz,1.0995276027998464,-119.28910397249282,-42.487219586791085

2488697_20201_2_0,mw1u7p4icz,-0.2557442850552378,-78.96830125200816,-16.20622445505559

4822741_20201_2_0,mw2ako4icz,0.8328107235616764,-58.65593618330067,-57.90591012431439

4119174_20201_2_0,mw2gsn4icz,8.93134478430004,-101.00503607672601,-102.21983509953095

3772421_20201_2_0,mw4wlo4icz,-2.963700445019301,-76.10832567198591,-20.912959597485752

5790153_20201_2_0,mw69oo4icz,0.626225976669888,-132.8530520213823,-47.50021247020432

5604465_20201_2_0,mw6kqo4icz,-5.861702930738854,-127.27473430413744,-9.12408133395364

3531484_20201_2_0,mw8rfp4icz,0.9892846403916741,-96.6789142247502,-35.53663549549947

1495114_20201_2_0,mwbedo4icz,-5.078927077745126,-140.4812683088914,-20.195103319207533

4254423_20201_2_0,mwbulo4icz,0.7858919416488143,-101.21483531493348,-49.54226958506736

3055187_20201_2_0,mwd6do4icz,1.7253090544376284,-99.21822708698281,-48.295977288303646

2447540_20201_2_0,mwewrn4icz,-38.254303757985994,-82.00658748960458,203.62525136469242

1067339_20201_2_0,mwezco4icz,-0.5224630835724718,-103.36812756370384,-22.698276540073337

3522361_20201_2_0,mwhnip4icz,-2.5153897663356077,-152.61495673669955,-13.212673426248045

5401230_20201_2_0,mwi8dp4icz,3.8877681413629825,-51.307481302828535,-40.58335514144417

5911319_20201_2_0,mwiqcp4icz,0.03362913351716595,-124.4516979494856,-57.63640827352707

1437779_20201_2_0,mwmbpo4icz,-1.345399640280224,-90.86582719736828,-51.47387776219085

4251633_20201_2_0,mwpvao4icz,-0.20619458751273811,-91.83916900140684,-42.73893691765238

3247511_20201_2_0,mwrkep4icz,-1.3760368915296588,-129.3582458782352,-38.64246837348722

2898023_20201_2_0,mwwzkn4icz,-4.792893957309319,-128.23600378866183,-2.9924163429634802

3100146_20201_2_0,mwzczo4icz,-1.01072702565599,-147.65549965313338,-15.391942171238114

2784058_20201_2_0,mx1kfp4icz,-2.67098400218345,-55.26849980416819,-14.218161356383021

3929812_20201_2_0,mx4swo4icz,0.1077150816374918,-100.67484926845526,-36.210343299306814

5471619_20201_2_0,mxd1xo4icz,-0.8175654536429132,-73.55142809036849,-17.502942492335848

5496231_20201_2_0,mxfxho4icz,17.821295489531785,-33.785147072153705,-124.0834297369797

3514299_20201_2_0,mxgabo4icz,-0.09703873888476362,-100.80410457411702,-30.2877687030969

1803808_20201_2_0,mxogjp4icz,-3.606585905525351,-112.22123200671177,-30.49215422512586

3199778_20201_2_0,mxqwvn4icz,-14.288350832187477,-105.9769901031402,27.683999260376908

1861375_20201_2_0,mxtfip4icz,0.03521949926655494,-103.76540704606273,-21.547647159390763

4135532_20201_2_0,mxv2ko4icz,12.841652852789014,-58.33121458139047,-86.42627794847097

1677050_20201_2_0,my2pto4icz,3.034929794050646,-67.51078293318724,-66.68481691332806

4231447_20201_2_0,my528p4icz,1.1788039368777345,-81.12574422270791,-45.976836535469886

1225692_20201_2_0,myd6bn4icz,0.7913369085030513,-76.83397038028951,-34.10178596381439

1678890_20201_2_0,myi5ap4icz,-0.3700674603794472,-81.10532480143965,-15.322802094330314

4977956_20201_2_0,myoc8o4icz,0.5049650235386974,-104.37518531961203,-34.89255043820452

3729608_20201_2_0,mypdto4icz,0.5080910506556187,-65.3010564593512,-35.597390000226596

5964947_20201_2_0,2m6wro4icz,2.9507678737891547,-77.63299488494354,-61.59130696809957

1584050_20201_2_0,myxbin4icz,2.086283274211546,-107.15514630066534,-46.751869467515306

2745666_20201_2_0,myy11o4icz,-1.6335290758956431,-87.1975138571905,-36.62275829275286

4600263_20201_2_0,mz485o4icz,-1.6450995532581065,-87.52477009412564,-26.070163745588587

3230929_20201_2_0,mzaz5o4icz,24.629145415920227,28.066479487046877,-75.07066729922008

1902578_20201_2_0,mzi2ro4icz,1.1423965167786068,-99.96943214588731,-52.556439939762384

1176708_20201_2_0,mzj1vo4icz,2.0160940769037348,-76.92798790007473,-49.8297144433315

2182816_20201_2_0,mzk7co4icz,-1.6247025024302584,-115.18983348448336,-42.449831980099844

1791639_20201_2_0,mzm9jo4icz,2.82816951586951,-58.56699956589085,-72.15336913563993

1287364_20201_2_0,mznlqn4icz,-4.672460526178014,-120.42014559651983,-12.294425927223713

4107436_20201_2_0,mznmpo4icz,1.2805789970120296,-84.29622617911909,-54.39418747731543

3573242_20201_2_0,mzo9wn4icz,0.927181128835636,-92.59397756814045,-60.413143533495756

4500865_20201_2_0,mzor6p4icz,-3.2873141944208824,-128.28057020767363,-6.608115387742544

2041058_20201_2_0,mzr0eo4icz,-2.2852616532312595,-131.35333923935238,-10.649725085668933

2701595_20201_2_0,mzvaqo4icz,-2.7180164418735875,-107.2359995780742,-9.77037216128403

2889090_20201_2_0,mzwujn4icz,0.512567494527871,-92.65387827589251,-38.33715093628247

3766507_20201_2_0,n09j9o4icz,-8.74213270730079,-96.3622629239263,8.629299161364685

1228313_20201_2_0,n0bscp4icz,2.9545773223256346,-106.71153552329412,-76.52088515144159

2198174_20201_2_0,n0cwro4icz,-0.03304771611330257,-64.99378318911377,-40.36841247486075

3506518_20201_2_0,n0dfeo4icz,-0.10782016602859819,-102.6518682515667,-49.43877803398561

2809223_20201_2_0,n0fjbp4icz,0.26708032695554423,-82.65727799611363,-30.531450930174017

5814704_20201_2_0,n0hvjo4icz,1.5275632538124893,-51.93700563282496,-34.84058551878471

3322375_20201_2_0,n0kkco4icz,0.1841826692746228,-74.60732897642691,-27.617494626036375

5331723_20201_2_0,n0nbgo4icz,0.5026164020523475,-116.90260159293209,-37.83135140566054

4172715_20201_2_0,n0pldp4icz,-2.243924732298084,-111.96482327397482,-37.38205622697551

3712354_20201_2_0,n0s9jp4icz,0.12036222966962802,-72.14731617887401,-33.90137287563151

2122372_20201_2_0,n0wumn4icz,0.7045194687775629,-96.51531897938645,-47.03748086658511

6012470_20201_2_0,n110wn4icz,1.8790143346584212,-57.85902860478757,-37.475765498809025

3764282_20201_2_0,n16g9p4icz,-0.0766696532181684,-127.21550951565703,-42.708816030543716

2189353_20201_2_0,n18bjn4icz,0.033390926897221854,-97.93660912135033,-57.7276910149464

3108141_20201_2_0,n18sjp4icz,-1.1902959605726027,-80.09131213315123,-43.82833051009719

2787574_20201_2_0,n19rqn4icz,1.5734131811670722,-118.79508170190422,-63.60381125497054

3436473_20201_2_0,n1f4uo4icz,-1.0067258023207641,-100.59348731014995,-18.65122250297989

5467180_20201_2_0,n1jp2p4icz,-5.124911934064121,-127.70370562542573,-19.308582250821175

3696315_20201_2_0,n1l4po4icz,2.6697997136232337,-125.1612844758078,-63.51200694972465

1766739_20201_2_0,n1m2eo4icz,-2.5097247147836086,-88.78586937196633,-18.775264662790462

3102471_20201_2_0,n1nzrn4icz,-1.225162127464404,-96.76804540179512,-18.05728578682502

3142162_20201_2_0,n1s6vo4icz,-0.01318713245824465,-75.09701597185409,-36.931696379892855

4446730_20201_2_0,n1wmtn4icz,4.935175036895463,-84.95717487947542,-56.09343090095659

5387924_20201_2_0,n22u3o4icz,0.7874701514338764,-66.24545911897957,-61.654851110636386

5573500_20201_2_0,n26w7p4icz,1.991003407652346,-105.71804334289385,-60.20320379985764

3250215_20201_2_0,n29dun4icz,1.3519557404052316,-99.90935762237353,-38.32817046004466

4108742_20201_2_0,n2c3fn4icz,-1.8481773768765053,-79.55926693845515,-22.034837686394383

4273114_20201_2_0,n2czen4icz,7.314400267446423,-100.76137177231763,-76.51198185399232

1686133_20201_2_0,n2d47o4icz,-1.5408463462484974,-139.70144523800587,-26.94854166473887

3085118_20201_2_0,n2q3jp4icz,-5.750946048534066,-106.1137742359098,6.5261348361445215

3538542_20201_2_0,n2u47p4icz,-2.2731512447099926,-79.1620652239443,-20.177795468845773

1071065_20201_2_0,n2vrlo4icz,-0.5064451253888747,-119.99064725350681,-27.335414567947325

4594705_20201_2_0,n2yfmo4icz,1.9410644686224676,-63.30800553372822,-37.617341573054205

2153002_20201_2_0,n2yuqn4icz,-1.0950126368607729,-130.04952816700109,-19.88381228351747

5885929_20201_2_0,n33cbp4icz,2.1851805006964664,-72.51094517558593,-69.57416433911041

5127463_20201_2_0,n35l9n4icz,-0.15153466591213502,-102.86480274670828,-28.876943773149875

3297267_20201_2_0,n37jio4icz,-0.5418067136670607,-65.91824716372568,-24.8728476044799

5634535_20201_2_0,n3a1bp4icz,2.6830342010016532,-105.72511026065928,-52.09950004474848

5092808_20201_2_0,n3a2en4icz,0.7845993647912376,-109.03739391760419,-57.71570074535251

1003848_20201_2_0,n3a9qo4icz,0.754748935301008,-85.11109243415163,-38.66196677616841

5558158_20201_2_0,n3b6ep4icz,-2.272218552239486,-111.13022346676124,-22.07329115142238

4123272_20201_2_0,n3ic1o4icz,2.944035628533453,-73.31974641047375,-66.50177833378895

1843500_20201_2_0,n3lbco4icz,-2.917661067257118,-113.71889722883452,-32.617511176246296

1377087_20201_2_0,n3o0mn4icz,1.1255831990592928,-67.18053600961119,-52.00344084355177

1887523_20201_2_0,n3phon4icz,0.047081322599916646,-130.17028255732097,-23.489584164434376

4308060_20201_2_0,n3t69p4icz,0.5084407143317025,-113.48177331509143,-50.314875500816655

3734531_20201_2_0,n3w7wo4icz,0.37383762378818747,-120.39318941062314,-27.024226015452726

3827200_20201_2_0,n4721p4icz,1.3238090303176004,-81.30271863340698,-54.632620585087736
 81%|████████  | 655/810 [36:19<07:23,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 656/810 [36:22<07:15,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 657/810 [36:24<07:08,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 658/810 [36:27<07:08,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████▏ | 659/810 [36:31<07:24,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████▏ | 660/810 [36:33<07:18,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 661/810 [36:36<07:16,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 662/810 [36:39<07:07,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 663/810 [36:42<07:01,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 664/810 [36:45<07:10,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 665/810 [36:48<07:16,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 666/810 [36:51<07:07,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 667/810 [36:54<06:57,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 668/810 [36:57<06:57,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 669/810 [37:00<06:55,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 670/810 [37:07<09:29,  4.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 671/810 [37:09<08:30,  3.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 672/810 [37:12<07:57,  3.46s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 673/810 [37:19<10:28,  4.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 674/810 [37:22<09:18,  4.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 675/810 [37:26<08:33,  3.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 676/810 [37:28<07:53,  3.53s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▎ | 677/810 [37:31<07:18,  3.30s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▎ | 678/810 [37:34<07:05,  3.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 679/810 [37:37<06:56,  3.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 680/810 [37:40<06:30,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 681/810 [37:43<06:19,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 682/810 [37:45<06:05,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 683/810 [37:48<06:09,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 684/810 [37:51<06:08,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▍ | 685/810 [37:55<06:18,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▍ | 686/810 [37:58<06:11,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▍ | 687/810 [38:00<06:01,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▍ | 688/810 [38:03<05:56,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▌ | 689/810 [38:06<05:54,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▌ | 690/810 [38:09<05:55,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▌ | 691/810 [38:12<05:50,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▌ | 692/810 [38:15<05:47,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 693/810 [38:18<05:39,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 694/810 [38:21<05:42,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 695/810 [38:24<05:37,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 696/810 [38:27<05:29,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 697/810 [38:30<05:32,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 698/810 [38:33<05:24,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▋ | 699/810 [38:35<05:23,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▋ | 700/810 [38:38<05:20,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 701/810 [38:42<05:26,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 702/810 [38:45<05:26,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 703/810 [38:47<05:13,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 704/810 [38:50<05:06,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 705/810 [38:53<04:56,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 706/810 [38:56<04:59,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 707/810 [38:59<04:57,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 708/810 [39:02<05:00,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 709/810 [39:05<04:57,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 710/810 [39:08<04:52,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 711/810 [39:11<04:47,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 712/810 [39:13<04:41,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 713/810 [39:16<04:38,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 714/810 [39:19<04:39,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 715/810 [39:22<04:37,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 716/810 [39:25<04:37,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▊ | 717/810 [39:28<04:40,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▊ | 718/810 [39:31<04:28,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 719/810 [39:34<04:27,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 720/810 [39:37<04:26,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 721/810 [39:40<04:17,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 722/810 [39:43<04:16,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 723/810 [39:46<04:17,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 724/810 [39:50<04:35,  3.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|████████▉ | 725/810 [39:53<04:26,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|████████▉ | 726/810 [39:55<04:13,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|████████▉ | 727/810 [39:59<04:17,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|████████▉ | 728/810 [40:02<04:11,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 729/810 [40:04<04:02,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 730/810 [40:07<04:01,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 731/810 [40:10<03:51,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 732/810 [40:13<03:46,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 733/810 [40:16<03:44,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 734/810 [40:29<07:26,  5.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 735/810 [40:32<06:19,  5.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 736/810 [40:35<05:33,  4.50s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 737/810 [40:38<05:01,  4.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 738/810 [40:41<04:31,  3.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 739/810 [40:44<04:15,  3.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████▏| 740/810 [40:48<04:02,  3.46s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████▏| 741/810 [40:51<03:50,  3.35s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 742/810 [40:53<03:35,  3.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 743/810 [40:56<03:28,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 744/810 [40:59<03:19,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 745/810 [41:02<03:14,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 746/810 [41:05<03:13,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 747/810 [41:08<03:08,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 748/810 [41:11<03:04,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 749/810 [41:14<02:59,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 750/810 [41:17<03:00,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 751/810 [41:22<03:37,  3.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 752/810 [41:25<03:18,  3.43s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 753/810 [41:28<03:06,  3.27s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 754/810 [41:31<03:02,  3.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 755/810 [41:35<03:04,  3.36s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 756/810 [41:38<03:00,  3.35s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 757/810 [41:41<02:51,  3.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▎| 758/810 [41:44<02:43,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▎| 759/810 [41:47<02:35,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 760/810 [41:50<02:34,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 761/810 [41:53<02:31,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 762/810 [41:56<02:27,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 763/810 [41:59<02:22,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 764/810 [42:02<02:15,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 765/810 [42:05<02:14,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▍| 766/810 [42:08<02:10,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▍| 767/810 [42:11<02:06,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▍| 768/810 [42:14<02:01,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▍| 769/810 [42:17<02:03,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▌| 770/810 [42:20<01:57,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▌| 771/810 [42:22<01:52,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▌| 772/810 [42:25<01:49,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▌| 773/810 [42:28<01:48,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 774/810 [42:31<01:44,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 775/810 [42:36<02:00,  3.44s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 776/810 [42:39<01:49,  3.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 777/810 [42:42<01:43,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 778/810 [42:45<01:38,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 779/810 [42:47<01:33,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▋| 780/810 [42:51<01:32,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▋| 781/810 [42:53<01:25,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 782/810 [42:56<01:22,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 783/810 [42:59<01:16,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 784/810 [43:02<01:16,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 785/810 [43:05<01:12,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 786/810 [43:08<01:09,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 787/810 [43:11<01:10,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 788/810 [43:14<01:06,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 789/810 [43:17<01:03,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 790/810 [43:20<01:00,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 791/810 [43:23<00:55,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 792/810 [43:26<00:54,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 793/810 [43:29<00:51,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 794/810 [43:34<00:56,  3.50s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 795/810 [43:38<00:56,  3.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 796/810 [43:42<00:51,  3.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 797/810 [43:45<00:45,  3.53s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▊| 798/810 [43:48<00:40,  3.35s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▊| 799/810 [43:53<00:44,  4.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 800/810 [43:56<00:37,  3.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 801/810 [43:59<00:31,  3.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 802/810 [44:02<00:26,  3.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 803/810 [44:05<00:22,  3.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 804/810 [44:08<00:18,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 805/810 [44:11<00:14,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|█████████▉| 806/810 [44:14<00:11,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|█████████▉| 807/810 [44:17<00:08,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|█████████▉| 808/810 [44:20<00:05,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|█████████▉| 809/810 [44:22<00:02,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|██████████| 810/810 [44:26<00:00,  3.02s/it]100%|██████████| 810/810 [44:26<00:00,  3.29s/it]

3759042_20201_2_0,n4jvao4icz,-0.6560904513722811,-113.19171078333699,-41.469394776301215

2154940_20201_2_0,n4kizo4icz,8.291364041401321,-65.42275994282198,-68.77563569317908

2090156_20201_2_0,n4lh4o4icz,-0.44690254001054686,-79.90033947219766,-35.69968347004104

1937901_20201_2_0,n4nkjp4icz,0.9581046064771315,-135.4453993541065,206.37994321902988

1746641_20201_2_0,n4p9jp4icz,3.3387661297407445,-100.43541430323668,-43.837728241805905

5579806_20201_2_0,n4qf7o4icz,-0.6814531379593753,-114.84791264331113,-36.29044723834596

2269335_20201_2_0,n4rsfn4icz,-6.345967811607654,-86.09147374714755,5.8799185815135075

1843448_20201_2_0,n4uxlo4icz,2.589011819624715,-82.26378021326644,-38.92641222632318

1620356_20201_2_0,n4ypzo4icz,-0.07169906963561373,-75.49526352557342,-28.65946146471694

1753263_20201_2_0,n51edo4icz,1.7071580975436136,-52.565914638141834,-47.43261842218996

1201483_20201_2_0,n5307n4icz,3.8308591686219766,-116.12321567890908,-51.10867852845061

3876066_20201_2_0,n56ldn4icz,-0.9565954419320275,-129.49196789296394,-25.79122222847913

2115224_20201_2_0,n5b7mo4icz,0.8081104491051847,-65.88154858585548,-52.33204083723018

5854513_20201_2_0,n5c3dp4icz,1.225263875853104,-85.66770073779182,-41.084893328764096

5752217_20201_2_0,n5e6in4icz,-1.120604499305706,-91.08117081176843,-48.40864045262292

4917880_20201_2_0,n5ew2p4icz,0.6201142138869263,-106.49924121107333,-38.555597107661185

3570726_20201_2_0,n5g7jo4icz,2.580935642079959,-99.04418913095537,-43.59487584928924

5877544_20201_2_0,n5h3fp4icz,-2.4083280507543594,-90.81969860964946,-38.40301540482483

1603061_20201_2_0,n5jh2o4icz,-0.9953214538470188,-106.80792404840253,-29.83843092962141

2520732_20201_2_0,n5jm3o4icz,-1.009684544139913,-118.89819560647712,-33.52704651696271

2975211_20201_2_0,n5k31o4icz,-1.1063669767922193,-89.75373866077044,-50.857967540231954

5730929_20201_2_0,n5o1kp4icz,0.6418302761907323,-130.7115904236324,-35.516577245132396

1176946_20201_2_0,n5onbp4icz,-2.1078256458224334,-102.63117378637409,-38.4311205661035

1812869_20201_2_0,n5q9nn4icz,1.8732888896661495,-126.94830552593245,-43.09392950202535

4409238_20201_2_0,n5xuho4icz,1.72351482825807,-17.431905742704203,-44.32667144985055

3969252_20201_2_0,n5xyun4icz,-0.3783427043335952,-117.63753574469251,-32.983547252061754

1977507_20201_2_0,n63cmo4icz,2.884351519903285,-63.542365262802065,-55.28741664530776

1286154_20201_2_0,n63weo4icz,0.562816871605754,-100.60828134938063,-30.980088018721105

2878511_20201_2_0,n6fuin4icz,-2.3623729238560505,-93.6515690269377,-22.701713814662185

4709672_20201_2_0,n6g9lo4icz,0.5947651745366268,-93.53293031311131,-57.56567769717249

5663859_20201_2_0,n6thvo4icz,1.3089626978964544,-93.34909927221145,-64.25854404726402

3290767_20201_2_0,n6vvwo4icz,-2.0813088101504174,-58.68661472218133,-19.86695134391796

1493444_20201_2_0,n6w0po4icz,-0.16811795099487664,-46.085086165713165,-42.312040295377756

5186703_20201_2_0,n6xdro4icz,4.648476442982561,-32.47850690119958,-71.40515619469453

3336733_20201_2_0,bgfhbo4icz,-1.5901799548716733,-98.75801229647413,-11.36501772570864

4634822_20201_2_0,n71vmo4icz,-1.1768872258944894,-112.17758138989831,-39.551972335960215

1423144_20201_2_0,n723do4icz,-3.9001648556688413,-90.194240351655,-17.986672857799476

3984635_20201_2_0,n726wn4icz,0.046611516595077125,-98.3515384028284,-34.718059490322275

3480729_20201_2_0,n72gfo4icz,-0.44319353875433054,-108.09610433674447,-18.553495313931222

5118049_20201_2_0,n73qwn4icz,-1.0339005364454608,-92.4623685511472,-37.16206732980419

5246558_20201_2_0,n75q5o4icz,-0.43416511107858935,-56.71831452697376,-45.830890941663455

1526098_20201_2_0,n76y9p4icz,-4.218649040451319,-92.58219568507198,-17.68750748238722

3631552_20201_2_0,n77too4icz,-1.9107946281584502,-50.83246219512273,-3.674757878160733

5181214_20201_2_0,n78f5p4icz,-2.022993000535917,-67.24233063674228,-28.58967955886105

4455301_20201_2_0,n78w4o4icz,-1.863904153587231,-99.03641540280262,-18.932599689340492

4990214_20201_2_0,n7apgp4icz,-147.12723017428985,605.0667717943101,201.69372175325122

1625914_20201_2_0,n7frho4icz,-3.1424482731748453,-87.95746596807322,-23.70806452860178

1503705_20201_2_0,n7g2uo4icz,0.4438634734271737,-99.85715948913398,-45.742286766228816

1444096_20201_2_0,n7gvqo4icz,1.0222988352431732,-40.62812714966981,-43.38136524146728

3518275_20201_2_0,n7hu6n4icz,-4.397908656065265,-115.86438446587536,-6.9713676236702895

3524815_20201_2_0,n7nokn4icz,-0.8929197279731862,-102.13259491524187,-21.754227800890007

5551703_20201_2_0,n7q3lo4icz,-0.13067408012716206,-75.59590047217426,-39.626641926999525

3552267_20201_2_0,n7rwdp4icz,-0.9883495485963487,-127.00165155126419,-35.307778221128075

4697383_20201_2_0,0k7r8o4icz,-0.059334008020819666,-125.08687635134007,-30.306764427653988

5933905_20201_2_0,n7vguo4icz,0.4438758704575214,-49.486419293257995,-34.03011065402032

5422325_20201_2_0,n7wvpo4icz,-1.418982593907328,-84.56594455560128,-19.820511315181577

2982904_20201_2_0,n7xh2o4icz,-0.053637020375823755,-93.3456585460423,-36.32299933364871

1979119_20201_2_0,n841do4icz,0.9258646335166562,-136.68700254625702,-46.397414903249086

2323368_20201_2_0,n857ip4icz,2.0947455451041543,-112.71299003291028,-45.15942278662919

3648714_20201_2_0,du1dpn4icz,-4.293112282431794,-90.07941943925067,-19.975292591009477

1148872_20201_2_0,n8j7ap4icz,1.8099995859746274,-98.04398067578256,-32.13149683994969

2372250_20201_2_0,n8kqgo4icz,7.094401334650873,-87.7408777893869,-65.08509354235528

5757221_20201_2_0,n8ncqn4icz,-0.3003738210232784,-79.42928593269903,-31.26947544984033

3123254_20201_2_0,n8psep4icz,0.06389862566332376,-63.28339864184346,-26.578816766271544

4358858_20201_2_0,n8tlqo4icz,2.071709337193594,-111.71945500437906,-44.437673990755485

3005572_20201_2_0,n8v0gp4icz,-1.6680128485786618,-108.52240719756816,-26.848170423355484

1975933_20201_2_0,n8x1eo4icz,0.6170726091032093,-119.53243409155812,-38.0771977589626

3705974_20201_2_0,n8yipo4icz,1.9084903745515318,-92.77409738511267,-50.59239151079714

4443011_20201_2_0,n8zgen4icz,1.2517412337089153,-96.92111976090476,-40.578502277325654

2339105_20201_2_0,n93e9p4icz,1.3363857464505815,-93.21461272784575,-51.19926143499268

5991090_20201_2_0,n94rdp4icz,-0.6597537593849486,-120.98771173311425,-32.001873137830216

4628883_20201_2_0,n9bhpn4icz,-4.531811752666008,-152.8057620627417,-22.69631367671991

3885963_20201_2_0,n9bzjo4icz,1.3366025822256717,-101.27176167702623,-30.12415522926301

5575825_20201_2_0,n9qcjo4icz,-0.2602923720011934,-74.87549996261185,-23.05799411458952

4575621_20201_2_0,n9scao4icz,-1.52001861958626,-146.57113389849994,-14.376520697545885

1793796_20201_2_0,n9v4bp4icz,-1.058016387484338,-63.89567550910232,-41.69160593169701

2617663_20201_2_0,n9w59o4icz,-4.829482329068437,-110.83777122851492,-23.2161379718452

4329803_20201_2_0,n9wobo4icz,0.014597578064963113,-125.09381183661733,-50.6075710856816

4805316_20201_2_0,na1fwo4icz,-2.5616741431479926,-109.62928066491816,-15.54508394582922

4513378_20201_2_0,na8l7p4icz,0.8634189215152519,-78.38081462370454,-60.62303743292574

2024547_20201_2_0,naahyn4icz,2.108875643097273,-107.36932351536046,-38.19368265413344

1824666_20201_2_0,nalaon4icz,-2.8312280688664773,-116.80951647686919,-15.829543466937494

3200387_20201_2_0,nap88o4icz,2.4446316691028867,-114.44743888388552,-43.19996855415582

1806709_20201_2_0,naxndp4icz,1.223314637906286,-74.13946803895703,-47.924569886473705

6015234_20201_2_0,nazc6p4icz,-0.4777727599157518,-83.0312661390135,-23.203524896396303

3351898_20201_2_0,nb1oso4icz,-0.6667150391157489,-82.97963370931203,-34.18356380033201

5516249_20201_2_0,nb4d5o4icz,-1.952130132698345,-90.21215244425014,-31.737505880751257

3103864_20201_2_0,nbb0go4icz,-1.2008602281104268,-75.25349583483984,-36.12607403136957

4234279_20201_2_0,nbdtun4icz,-20.161257153895843,-164.39956594659563,79.94615470521296

2558957_20201_2_0,nbf69p4icz,1.6465302252888934,-77.69644269977994,-40.83422875158466

1784115_20201_2_0,nbgy8n4icz,-1.2207453752399458,-139.84130180051886,-46.54889700981167

4952684_20201_2_0,nbgyyo4icz,0.296222215861662,-77.10553501952026,-42.242497230751084

2206648_20201_2_0,nbhsjp4icz,1.1930250905402418,-68.27672136564084,-59.92417604763982

5801060_20201_2_0,nbkzhp4icz,4.433454048200098,-99.46038555329096,-56.074150773706606

1104026_20201_2_0,nblmpn4icz,-1.38197769944659,-75.93108493703826,-29.567417432731943

5472837_20201_2_0,nbp7ep4icz,1.8097876672275508,-108.03254025187215,-48.67175011537542

3371290_20201_2_0,nbr7ln4icz,-3.876981626143121,-95.64345845600349,-10.174299455987835

2052336_20201_2_0,nbthdp4icz,0.7464951119452139,-77.46336773132981,-46.65540735274715

4518617_20201_2_0,nbwfxn4icz,0.4072656991046799,-127.807714152447,-39.79954430639059

2628121_20201_2_0,nc73vo4icz,1.0614315413539401,-83.99792837172888,-53.8383502240213

4900846_20201_2_0,nc9sin4icz,-1.7035053242086997,-80.49481211007014,-28.65270883365639

2715469_20201_2_0,ncbkhp4icz,2.7310654043798865,-82.6527714610163,-52.58001198121286

4707596_20201_2_0,ncc6go4icz,-0.4833741588755715,-59.530079084858755,-21.021852630930013

3490021_20201_2_0,ncd8wo4icz,4.000287046240265,-55.13656564307615,-45.63533395364401

2439721_20201_2_0,nchato4icz,-1.7272310965649538,-132.48010145374874,-21.679755820190707

4865003_20201_2_0,ncjipn4icz,2.1149096152736497,-61.32669352635844,-44.23862636249561

3541843_20201_2_0,nck09o4icz,-1.8285322714952168,-107.33049526012906,-21.604216984272654

3535095_20201_2_0,ncp03p4icz,2.391898539444531,-130.4704930712182,-58.652291519557636

3256386_20201_2_0,ncr1un4icz,0.27817943231841696,-93.26450774063252,-27.236083337779732

1406751_20201_2_0,nctbgp4icz,1.9037307607378613,-115.28650521929802,-40.41083014198469

5426004_20201_2_0,ncz4bp4icz,-0.5770481211121004,-101.94339056961101,-34.733801922076

5191829_20201_2_0,nde2bn4icz,0.908833710596591,-122.15648138413366,-34.27817670833225

5285032_20201_2_0,ndk5eo4icz,1.3048721764609994,-70.54017123266419,-49.43671195335658

3645413_20201_2_0,ndn9nn4icz,-3.105904779707708,-115.28332509066345,-11.243834794693711

3736274_20201_2_0,ndq2ip4icz,0.7211756821010064,-100.02159875879434,-28.700221444008164

5984677_20201_2_0,ndx09p4icz,-0.876984640668061,-75.63556042607445,-25.936687978898405

2080682_20201_2_0,ndy2ro4icz,-1.8762604335251476,-81.99553718978896,-28.14361084137054

5061575_20201_2_0,ndywvo4icz,3.377788577817045,-78.8785573789745,-62.075592863904504

3643541_20201_2_0,ndzcgn4icz,0.7866477734067455,-127.36503308837331,-39.95498973980776

2230017_20201_2_0,ndznjn4icz,0.08027604484206854,-92.56196589724138,-30.009417769894867

1256541_20201_2_0,ndzsmo4icz,6.375189032960174,-74.93892934290184,-64.40965428643386

4323080_20201_2_0,ne3bln4icz,-0.6491549706513959,-146.84174014436564,-37.53662424423797

5140188_20201_2_0,ne654o4icz,-0.5889944719104881,-117.34939135962085,-32.316545107061756

3402126_20201_2_0,nek80p4icz,-0.7218078992666671,-103.56929455382036,-28.643903554018138

2653674_20201_2_0,nekcon4icz,3.6758529558520965,-97.75446232459905,-82.02153102355501

4709732_20201_2_0,neny6n4icz,-4.525004987814197,-145.30105809906988,-26.743279541325307

1025725_20201_2_0,neo68n4icz,-0.29749883561736423,-119.39622202819172,-36.39796860672146

4293502_20201_2_0,neq4gp4icz,-1.1416682128966558,-77.3653116955289,-24.256680072639924

1247355_20201_2_0,nersvo4icz,0.8598952619410486,-87.62223241083674,-46.527147978256366

3158147_20201_2_0,net7no4icz,-0.12418183635710087,-140.64380781130984,-34.303504846421205

1240241_20201_2_0,neu3cn4icz,3.349725151306717,-54.31667795344279,-45.38152563095335

1754615_20201_2_0,nezkmn4icz,-0.524298118153878,-139.30820257294133,-28.481172246210235

2920467_20201_2_0,nf0idp4icz,19.25121008130561,44.04035459747169,-137.221432608161

4973077_20201_2_0,nf0jen4icz,-0.4801515352734746,-113.651120245642,-19.308069717597945

5450753_20201_2_0,nf316o4icz,-0.8700027325337709,-66.36215324905899,-44.7866633363049

3804118_20201_2_0,nf47ln4icz,2.7189481785484575,-74.8133639174734,-36.05834910272466

5895150_20201_2_0,nfa1mn4icz,-1.0132499454243846,-143.43928005242202,-36.54620705742562

1787991_20201_2_0,nfbklo4icz,1.3287700511846912,-83.31985317352522,-53.206677852488866

5069840_20201_2_0,nfe85p4icz,1.9864905351346434,-59.16006698803605,-52.78641915611422

4096697_20201_2_0,nfffbn4icz,2.3399938040709563,-108.47670535065043,-39.65832521735271

2038728_20201_2_0,nfgu7o4icz,0.41744034148079195,-80.99675932923824,-34.95630262673315

2398963_20201_2_0,nfjzso4icz,-0.9689834379564217,-83.97607499850409,-44.21944633709127

2237742_20201_2_0,nfk59n4icz,1.615415226236005,-122.14252080292502,-40.63548118307568

5272817_20201_2_0,nfu9io4icz,0.11833162559653959,-49.208932830746136,-56.966910425799426

5544827_20201_2_0,nfwmno4icz,1.072853584100326,-104.05479241836221,-51.07597378798472

1349497_20201_2_0,nfyo0p4icz,1.262690182901176,-72.27512285632724,-35.087550214645944

2645257_20201_2_0,nfzjfp4icz,-0.44372285584710797,-126.97626151723316,-51.10399623476357

5907049_20201_2_0,ng5rvo4icz,-0.6593214801987045,-68.75057380599327,-59.22328792460726

1986930_20201_2_0,ng7qao4icz,-1.4139476320371724,-96.16718312445667,-18.906977175852404

4210049_20201_2_0,ngeurn4icz,-3.341016676672523,-92.35495180360394,-11.294751125194523

5461507_20201_2_0,ngj5sn4icz,0.3785533720153267,-65.71284702299161,-39.29997998579756

2062768_20201_2_0,ngkd7o4icz,-1.9609466068209445,-114.05076473290586,-11.236860465565385

4610479_20201_2_0,ngptcn4icz,1.4252055537739097,-95.98643621276534,-45.50333553103073

4328214_20201_2_0,ngqteo4icz,1.1190081232822071,-61.822940187306415,-33.01055921170492

2192158_20201_2_0,ngraqn4icz,3.152023134665553,-146.22565160954514,-50.227671166697235

3795897_20201_2_0,ngwejn4icz,-1.3118805857872986,-121.2934162225636,-30.76236161098248

1726420_20201_2_0,ngwlao4icz,-0.5525688131520015,-97.54594032715772,-22.96205178973449

5317986_20201_2_0,nh2rmn4icz,-2.260604692436552,-110.75574284613145,-23.701742219534168

4857071_20201_2_0,nh3dco4icz,-0.002618765277464443,-141.78520043621444,-50.98481864172213

5092146_20201_2_0,nh55qn4icz,3.7675345778022336,-90.37125448088705,-46.02820871821112

4699792_20201_2_0,nh75vo4icz,2.310747804411463,-91.93808508783675,-49.262010689906376

4106316_20201_2_0,nhdspo4icz,-0.6349487752325882,-105.47019468224812,-17.754009984749487

1175616_20201_2_0,ba37bp4icz,-0.854440943725121,-92.17254708758281,-36.328210440169286

1724026_20201_2_0,nhfzpn4icz,0.24628001716046044,-128.0996814405549,-40.96458806608307

6003336_20201_2_0,nhgqen4icz,0.8158063527705022,-92.16086015820932,-44.73544132662407

1678699_20201_2_0,nhhvqo4icz,0.4074791171753345,-40.22040642763204,-21.960055734161216

3794916_20201_2_0,nhl6ro4icz,-1.4127579696964576,-110.52658928640344,-33.62621107838788

1066903_20201_2_0,nho2io4icz,1.2101681465420928,-74.40557621734627,-35.11530448610654

5795215_20201_2_0,nhqcoo4icz,0.6295630970821382,-115.34037604581042,-33.49044313560309

5941206_20201_2_0,nhslfn4icz,-1.0435313551643348,-125.59209468740946,-21.240806568621792

1599462_20201_2_0,nhu7yo4icz,-1.2715049025268343,-79.05631262418535,-36.222482225105594

4379185_20201_2_0,nhvy6p4icz,1.66841992995528,-114.64041177564619,-62.67810612292446

3539600_20201_2_0,nhy3so4icz,-0.4399147639562119,-85.60204373632126,-31.32933005173419

2013496_20201_2_0,nibpko4icz,3.1281555200112967,-64.54578677948047,-40.82528767029777

2334096_20201_2_0,nicolo4icz,2.7263298938564415,-105.94082353023632,-46.115620611704784

3468631_20201_2_0,nijbhp4icz,-1.1517795460004412,-134.00070644619353,-10.080589393637368

3142949_20201_2_0,nilnxn4icz,-0.024816962088534508,-84.35118922729896,-46.185666761990745

1591429_20201_2_0,nimkao4icz,2.034913344311773,-85.80600318013717,-35.06900497091506

5930331_20201_2_0,nioaao4icz,-0.08298514233624386,-125.8425425255219,-32.02071077710342

3175511_20201_2_0,niqd9o4icz,-1.7301957526946308,-101.15700555536012,-38.051049607901035

4076219_20201_2_0,nj3i2p4icz,-2.6520115932253567,-94.67309837786385,-36.2130444486323

4072601_20201_2_0,nj3von4icz,0.3250369593977195,-77.91279360475323,-44.096881901405

5560258_20201_2_0,nj4lgp4icz,-2.331414997285843,-92.77733785570908,-22.48282654664895

4083346_20201_2_0,nj6g6o4icz,0.5866670970867396,-66.29398679041799,-42.87877186478558

2286587_20201_2_0,nj7wep4icz,3.5271760817349063,-121.37628500336635,-64.77921728506546

4823384_20201_2_0,njbwrn4icz,4.3191293871180365,-123.195980019849,-62.83087287165603

1111847_20201_2_0,njgfcp4icz,0.7228014629150811,-63.42137422726924,-40.11431332810763

4703826_20201_2_0,njhiwn4icz,2.7300828036687093,-94.9601729947164,-37.922532119840895

4478610_20201_2_0,njkj9o4icz,0.4839503529865537,-95.60038865110167,-25.66411384780885

4649200_20201_2_0,njks7o4icz,2.542572256526545,-128.08314512845726,-54.01497910437264

4516703_20201_2_0,njliho4icz,4.708538703629051,-68.01141420659582,-51.0663963099484

1877420_20201_2_0,njxlzn4icz,0.6098940131961061,-59.330744381325644,-46.18454885971579

1696219_20201_2_0,njynoo4icz,-0.21798127951470916,-72.95456062152587,-42.27508044235097

5476237_20201_2_0,nk2bfo4icz,0.4464659256346057,-64.99717792530771,-33.438992959935135

2180947_20201_2_0,nk2olo4icz,2.1150120493497995,-96.21650061595534,-45.449014356618946

2106388_20201_2_0,nk7can4icz,0.01406131008201605,-92.79200078477243,-41.40106038070316

3462050_20201_2_0,nk83ao4icz,-1.846685761649908,-99.83097236414366,-9.632962689619433

4714917_20201_2_0,nk8zso4icz,-2.5145427804356815,-114.51642480176713,-10.645875460347966

3789679_20201_2_0,nkc58p4icz,20.280322897553486,-54.06202002824335,-147.3974661567585

2757486_20201_2_0,nkctfp4icz,0.4269777699141572,-134.77853496886377,-51.903612724555316

5695154_20201_2_0,nkej9p4icz,-3.9809237346409843,-155.1577312315823,11.391518444983248

3133700_20201_2_0,nkj8bp4icz,-2.295414412959479,-107.24787493227691,-21.37215230780521

2507910_20201_2_0,nkkl2o4icz,0.5373640610452199,-92.9372050495582,-40.7666767912455

5859906_20201_2_0,nkkogn4icz,-0.31646687956473074,-118.7257545112559,-54.72294031348173

1338961_20201_2_0,nkm5pn4icz,0.0621932626820389,-100.2662380328787,-36.195723674171234

2154321_20201_2_0,nkmjon4icz,-2.055546429393681,-131.46456228937234,-19.785042236596638

4398193_20201_2_0,nkmjto4icz,-0.24632193151028148,-71.61549108200484,-26.559012356923745

5916899_20201_2_0,nko4tn4icz,0.4257737243435127,-55.72576458327376,-48.82285211738311

5177911_20201_2_0,nkq1co4icz,0.56085845714189,-128.52139026419954,-37.04988740190569

1074752_20201_2_0,nkr71o4icz,-1.218111269880499,-127.44225632596417,-12.078729218730587

3158855_20201_2_0,nkucap4icz,-1.0314209852995935,-65.69761083309771,-44.778888564674304

4166719_20201_2_0,nkyelo4icz,-2.8825138387075206,-118.98987369359907,-7.2944220105001705

4902483_20201_2_0,nl2kcn4icz,0.6132145142757106,-125.2097113264287,-32.133683647940074

1427240_20201_2_0,nl5htn4icz,-0.27367591783034667,-51.558496552584046,-38.267386218539784

2981718_20201_2_0,nl6rhn4icz,-0.8486222678788805,-92.60398976466567,-43.11605405758627

4659610_20201_2_0,nl9ozo4icz,-0.74047700379861,-94.05905682791231,-45.41879614332038

5513953_20201_2_0,nlby9p4icz,0.8556696696914579,-80.33391675601496,-40.8953142839424

1495809_20201_2_0,nlhndp4icz,-0.2693442637830685,-127.4337355864302,-30.82189493537294

2488115_20201_2_0,nlktun4icz,0.8654149129688398,-93.2763838680091,-44.702965814083086

2876847_20201_2_0,nllocp4icz,-0.28507944020376,-105.09734522780084,-30.80670787220768

2356235_20201_2_0,nlogln4icz,6.5008611338876925,-37.16700650849805,-78.27193233368442

2081243_20201_2_0,nlqdgp4icz,0.25674912662795707,-96.46849621341642,-46.64929105376589

5602844_20201_2_0,nlxceo4icz,-0.19050137885649943,-45.17390361803908,-58.46681498136172

5032730_20201_2_0,nlyn5o4icz,0.943608279783839,-91.2197642131928,-32.30100737774535

3903058_20201_2_0,nm3d8p4icz,0.3341509913302405,-112.12718998436185,-44.01154401678575

1681859_20201_2_0,nm3ljp4icz,3.6150695539200792,-71.78117246083906,-69.8640300816884

3161740_20201_2_0,nm7thn4icz,-0.20826954500220024,-150.0874944531611,-76.79864092229512

4813348_20201_2_0,nmc2nn4icz,-2.2478310570028204,-97.37687106302405,-32.05139692414235

5179885_20201_2_0,nmdi4p4icz,-1.5796685937498425,-102.3566632725283,-41.47952866956578

3833734_20201_2_0,nmdxco4icz,-6.835537538790281,-89.54636849302969,8.46816686222877

3618065_20201_2_0,nmg9so4icz,3.2374586551648967,-79.31331883630182,-52.14822724699307

4760406_20201_2_0,nmgjip4icz,-1.8594815534819251,-115.09378149477672,-19.405745355710096

5122622_20201_2_0,nmhutn4icz,-1.5450837420923254,-73.92679798328913,-37.89750906639307

3772450_20201_2_0,nmlj0o4icz,-0.9321518257657317,-94.31581603137619,-42.58868661425815

2713970_20201_2_0,nmmmep4icz,-0.11970251587297619,-68.70528793548075,-39.67631385347316

2895857_20201_2_0,nmrw4o4icz,-11.01392731355778,-28.903811503004363,13.770409641030682

5847224_20201_2_0,nms7jp4icz,-0.14694909553456523,-114.57687372643699,-44.07960919574421

1116531_20201_2_0,nmsq2o4icz,1.2879663448334846,-103.13803787325895,-40.45671827579156

3916023_20201_2_0,nmuy4o4icz,-2.843662110852609,-76.7420593945591,-14.849072717887623

1127058_20201_2_0,nmwzno4icz,-8.870723481919402,-111.3938638476736,5.871806421280056

5208894_20201_2_0,nmxd2o4icz,0.1851392308129943,-114.46557973836008,-48.132557245407114

2713539_20201_2_0,nn7pfn4icz,-0.2437211106505522,-96.95281652519921,-36.26769301728483

3229776_20201_2_0,nn834p4icz,-4.511019377831263,-111.24825040217303,-0.9719167783971159

2903736_20201_2_0,nnbjon4icz,-1.5835344764350456,-104.89381263053403,-14.559221580396041

5522385_20201_2_0,nndn4p4icz,0.2798202590839861,-101.91463705527542,-49.6182135560787

2498494_20201_2_0,nng7cp4icz,-2.692244897762381,-115.73370495563842,-32.31433229845385

4297610_20201_2_0,nnhp6p4icz,0.3446192696290675,-91.85263568721686,-50.37080420517472

1844350_20201_2_0,nnilio4icz,0.01695027997889332,-70.74804759884788,-35.0399202143153

2797606_20201_2_0,9d7fyo4icz,1.0438732272946694,-69.08776449993076,-22.08216071943211

/users/rhydian/anaconda3/envs/torch_env/lib/python3.7/site-packages/torch/cuda/__init__.py:52: UserWarning: CUDA initialization: Found no NVIDIA driver on your system. Please check that you have an NVIDIA GPU and installed a driver from http://www.nvidia.com/Download/index.aspx (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729006826/work/c10/cuda/CUDAFunctions.cpp:100.)
  return torch._C._cuda_getDeviceCount() > 0
  0%|          | 0/101 [00:00<?, ?it/s]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 1/101 [00:03<05:25,  3.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 2/101 [00:16<10:12,  6.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 3/101 [00:19<08:42,  5.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/101 [00:22<07:26,  4.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▍         | 5/101 [00:25<06:31,  4.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 6/101 [00:28<06:00,  3.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 7/101 [00:31<05:31,  3.53s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 8/101 [00:34<05:10,  3.34s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 9/101 [00:38<05:18,  3.47s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|▉         | 10/101 [00:41<05:02,  3.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 11/101 [00:44<04:53,  3.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 12/101 [00:47<04:42,  3.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 13/101 [00:51<04:59,  3.40s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 14/101 [00:53<04:40,  3.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▍        | 15/101 [00:56<04:31,  3.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 16/101 [00:59<04:25,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 17/101 [01:03<04:22,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 18/101 [01:06<04:38,  3.36s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 19/101 [01:10<04:36,  3.37s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|█▉        | 20/101 [01:13<04:21,  3.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 21/101 [01:16<04:11,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 22/101 [01:18<03:58,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 23/101 [01:21<03:51,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 24/101 [01:24<03:46,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▍       | 25/101 [01:27<03:40,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 26/101 [01:30<03:45,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 27/101 [01:43<07:25,  6.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 28/101 [02:06<13:31, 11.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▊       | 29/101 [02:09<10:22,  8.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|██▉       | 30/101 [02:12<08:14,  6.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 31/101 [02:15<06:39,  5.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 32/101 [02:18<05:33,  4.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 33/101 [02:20<04:45,  4.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▎      | 34/101 [02:24<04:32,  4.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▍      | 35/101 [02:27<04:12,  3.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 36/101 [02:30<03:51,  3.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 37/101 [02:45<07:23,  6.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 38/101 [02:48<06:00,  5.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▊      | 39/101 [02:51<05:00,  4.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|███▉      | 40/101 [02:54<04:17,  4.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 41/101 [02:57<03:49,  3.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 42/101 [03:00<03:32,  3.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 43/101 [03:03<03:22,  3.49s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▎     | 44/101 [03:06<03:08,  3.31s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▍     | 45/101 [03:09<02:57,  3.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 46/101 [03:11<02:49,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 47/101 [03:14<02:44,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 48/101 [03:17<02:39,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▊     | 49/101 [03:26<03:58,  4.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|████▉     | 50/101 [03:29<03:28,  4.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 51/101 [03:31<03:04,  3.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████▏    | 52/101 [03:34<02:52,  3.52s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 53/101 [03:37<02:39,  3.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 54/101 [03:40<02:30,  3.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 55/101 [03:43<02:21,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▌    | 56/101 [03:46<02:16,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▋    | 57/101 [03:49<02:11,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 58/101 [03:52<02:05,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 59/101 [03:54<02:00,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 60/101 [03:58<02:00,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|██████    | 61/101 [04:01<02:01,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████▏   | 62/101 [04:04<01:56,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 63/101 [04:07<01:54,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 64/101 [04:09<01:47,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 65/101 [04:12<01:44,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▌   | 66/101 [04:15<01:42,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▋   | 67/101 [04:18<01:39,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 68/101 [04:21<01:36,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 69/101 [04:24<01:32,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 70/101 [04:27<01:31,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|███████   | 71/101 [04:30<01:27,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████▏  | 72/101 [04:33<01:22,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 73/101 [04:36<01:21,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 74/101 [04:38<01:18,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 75/101 [04:42<01:17,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▌  | 76/101 [04:45<01:15,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 77/101 [04:48<01:10,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 78/101 [04:51<01:08,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 79/101 [04:55<01:12,  3.29s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 80/101 [04:57<01:06,  3.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 81/101 [05:00<01:01,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 82/101 [05:03<00:57,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 83/101 [05:08<01:01,  3.41s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 84/101 [05:10<00:54,  3.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 85/101 [05:13<00:49,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▌ | 86/101 [05:16<00:45,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 87/101 [05:19<00:42,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 88/101 [05:22<00:38,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 89/101 [05:25<00:35,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 90/101 [05:28<00:31,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 91/101 [05:31<00:29,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 92/101 [05:34<00:26,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 93/101 [05:36<00:22,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 94/101 [05:40<00:22,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 95/101 [05:43<00:18,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▌| 96/101 [05:46<00:15,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 97/101 [05:49<00:12,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 98/101 [05:52<00:09,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 99/101 [05:55<00:05,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 100/101 [05:58<00:02,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|██████████| 101/101 [06:02<00:00,  3.13s/it]100%|██████████| 101/101 [06:02<00:00,  3.59s/it]
Trying to load from /users/rhydian/self-supervised-project/model_weights/SSECEncodersBothBoth
==> Resuming model trained for 106 epochs...
Trying to load from ../model_weights/angle_regressor4
==> Resuming model trained for 7 epochs...
5927133_20201_2_0,lddqep4icz,-9.041169288032526,-159.27567565233585,32.26121075375099

3303932_20201_2_0,ldkj7p4icz,0.1052103632653686,-68.24570843282595,-38.113506874445264

4161591_20201_2_0,le8c6o4icz,2.9526717475783233,-83.06279828816062,-44.439409947013345

5164815_20201_2_0,led3do4icz,1.5553605050318395,-82.67199379764185,-30.546708070121113

2953219_20201_2_0,lehbhp4icz,-2.1222159326003536,-113.145813619064,-25.342004549461308

2560227_20201_2_0,lggbcp4icz,-2.244757592158486,-153.58350472840016,-7.608155089851508

4725734_20201_2_0,lgjgln4icz,2.862016686645611,-62.059869112644776,-62.699960382134485

3537385_20201_2_0,lgq95o4icz,2.8380374232525694,-77.19362777573471,-43.967034962027185

5952236_20201_2_0,lhjejo4icz,0.6994957187524766,-97.14924153711425,-27.08899871966156

4501146_20201_2_0,li5mlo4icz,0.18101319545566913,-74.04436451534536,-43.06771256223372

5786288_20201_2_0,ljagvn4icz,-0.8722275538125457,-81.9148716121181,-34.311881085905654

1319117_20201_2_0,ljcxoo4icz,0.0030059291736309734,-88.81055830545543,-29.92538296745606

2425201_20201_2_0,lju9ro4icz,0.3194696094534785,-96.42554376760893,-28.18053856025469

5300228_20201_2_0,llobgo4icz,-4.513280989999518,-123.01302843839179,-13.24640782020218

1529011_20201_2_0,llyz6n4icz,2.556019287892458,-70.5127294543704,-53.50421715219113

5324330_20201_2_0,lnc6rn4icz,-0.24967940232981048,-97.4133354861554,-26.193965407564505

2628222_20201_2_0,lnlrho4icz,-0.8712025618502912,-62.556063343683775,-31.832041837195163

2726920_20201_2_0,lo5rro4icz,1.9709902877046892,-88.92793601489248,-56.55349526348303

1796211_20201_2_0,loanfn4icz,-2.338195948903375,-117.41258714751302,-13.39224286990678

5106092_20201_2_0,loc78p4icz,2.888262034442622,-106.22817124204977,-38.44385886609592

1623111_20201_2_0,locmpn4icz,1.478179233864243,-61.87568313961995,-55.009804618797844

1473599_20201_2_0,lotewn4icz,2.6688134537027337,-89.83249872901558,-47.111117250136786

3680240_20201_2_0,lp9f3p4icz,-1.9559270369835633,-105.97701898258876,-12.907927377617241

4517886_20201_2_0,lpgutn4icz,-0.607129774270135,-155.2875344411404,-38.313700060652934

2960717_20201_2_0,lpwqon4icz,-0.2680555450653945,-126.2732545397987,-26.449783823370907

2358939_20201_2_0,lquirn4icz,1.2615095719173937,-106.24144167826393,-40.988263370436584

2198627_20201_2_0,lqvgzo4icz,-10.170233528999164,-155.71413082860548,8.760398272343792

1927786_20201_2_0,ls7q3p4icz,0.41786754170540075,-60.099512199204696,-13.699371845939396

1402497_20201_2_0,lsblko4icz,-0.15156214743075502,-110.7177988491855,-17.311298292554866

5379993_20201_2_0,lskr4p4icz,-3.2572204227030452,-75.53631706686491,-6.49597219289322

1060042_20201_2_0,lt6bso4icz,-0.2738626892550168,-100.62841618472149,-38.46359482558063

2409246_20201_2_0,ltfx1o4icz,-2.0002985280699392,-106.06696200881817,-39.04109769058803

4530058_20201_2_0,lw1cfn4icz,-0.4931657913197421,-124.14386670384602,-21.662323111302513

3550284_20201_2_0,lwl4to4icz,-0.8765464787497016,-82.1847362865077,-23.464669745679302

2419846_20201_2_0,lwm0io4icz,-1.1120481018892494,-111.76034854416173,-26.213832374062747

1325972_20201_2_0,lwrdpo4icz,1.6471729147073122,-75.74897288176808,-66.4833611841351

1799932_20201_2_0,lwtipo4icz,1.2627672259443292,-83.23327715407672,-37.76170223359273

3423976_20201_2_0,hh9ifp4icz,-6.475058452457972,-117.5499703719797,-7.3701980632651924

1428959_20201_2_0,lxv8fp4icz,2.063481784992895,-111.51297781324686,-50.03978081312988

5033893_20201_2_0,lz8yon4icz,-0.894435058524628,-134.68640557066047,-23.087138104224536

4730085_20201_2_0,m0a89p4icz,-0.8478934250053983,-63.507134532048326,-36.95060169588484

3131763_20201_2_0,m0aznn4icz,0.471395244698405,-95.43918935202558,-14.272901743811502

1835223_20201_2_0,m0iyxo4icz,2.3125891209260803,-59.753709802029135,-34.329600764194055

1809961_20201_2_0,m11jwo4icz,0.6636251480718067,-75.06850449221162,-49.071725600030604

4026690_20201_2_0,m1eyvn4icz,1.7847584416029352,-80.16648269725243,-39.10240045211273

3223312_20201_2_0,m206ap4icz,2.90197119998665,-71.44418571065933,-56.596573172316496

3376442_20201_2_0,m3vadp4icz,1.01206573564164,-119.53094656342125,-30.345954918585747

2473012_20201_2_0,m40f5o4icz,-0.8488239260369594,-76.01049943822895,-32.78782294117582

5198626_20201_2_0,m44vmo4icz,0.286695555711208,-109.96392993568662,-39.909458584632304

5575775_20201_2_0,m45bco4icz,0.6082158596416137,-95.90675840969993,-42.49748122415183

2747518_20201_2_0,m4p58p4icz,3.1075419095088486,-81.18400942563855,-40.77252793679865

1371874_20201_2_0,m5hj9o4icz,-1.5724208671340263,-70.26114964297813,-26.282457181843796

5519343_20201_2_0,m5vthp4icz,2.742012572862896,-111.40695105931934,-26.81274340054253

2192718_20201_2_0,m5yybp4icz,0.06914058626894232,-125.31818534467075,-21.90826920010636

5250140_20201_2_0,m6flqn4icz,-3.229172140398206,-114.08887516177703,-22.183585853352724

4874307_20201_2_0,m6r00p4icz,3.5888936225393597,-15.140728113702494,-57.869492257408666

1332066_20201_2_0,m7g18p4icz,-36.858541652196244,-155.60975269573362,215.92699390684805

4577579_20201_2_0,m8hqap4icz,-1.4248708917347652,-126.88641292481216,-35.56533180643051

5075827_20201_2_0,m8izap4icz,2.0773144043591723,-58.23792763998355,-44.44325885196707

5697042_20201_2_0,mabh0o4icz,0.913442332205217,-91.807931937115,-16.042294876128523

2352392_20201_2_0,mbjy0p4icz,-2.0587348844706,-74.93120787432031,-9.99288570618404

3446796_20201_2_0,mbvzvn4icz,1.2634995681350643,-72.92805719877592,-40.55911709619808

2759263_20201_2_0,mc980p4icz,1.7180697453101197,-71.77170530017912,-35.897803828626294

5308650_20201_2_0,mcanon4icz,0.4746750169833235,-93.59336758677028,-38.41241605473425

2546058_20201_2_0,mciaxo4icz,-0.11637953806683964,-64.69766155225761,-31.133194324512544

2864287_20201_2_0,mclrjo4icz,1.5961285120239415,-76.16603642668056,-40.7296377717242

3920773_20201_2_0,mdedcp4icz,2.853977031330316,-46.99761565832287,-86.22848078408116

4753508_20201_2_0,mev8ko4icz,-2.8379462639758315,-88.29374341600422,-10.288240930149968

5870730_20201_2_0,mfj55o4icz,1.4270025311571235,-76.65269443695175,-62.787251778198396

2132560_20201_2_0,mg2nvn4icz,4.468972913687127,-117.75329161042035,-51.75483149806104

3278319_20201_2_0,mgaw3p4icz,-1.3078147523369499,-123.91479430385738,-19.220823500237017

3520466_20201_2_0,mgmkgn4icz,0.34335974243335327,-89.46654592682205,-58.53232544192622

3303615_20201_2_0,mhhs3p4icz,-0.18050074314659212,-86.58716696441604,-24.494164552978845

3612612_20201_2_0,mi6pmo4icz,-0.517147625874791,-100.6810937778898,-31.090945174841778

4546441_20201_2_0,misdep4icz,-4.616200180215317,-130.41263284575348,-36.10262838663979

3991627_20201_2_0,mknfmn4icz,-1.2379608179378094,-108.07776238790998,-16.972078329035

3273236_20201_2_0,ml46no4icz,2.172673419255781,-73.28375932341257,-39.48801079802729

2443586_20201_2_0,mltqvn4icz,0.684451004692761,-86.42561142352199,-33.704461072512856

5524083_20201_2_0,u82ebp4icz,1.2297058502264882,-98.0703796682468,-45.71975001641361

1081831_20201_2_0,mn378p4icz,0.4843329731103206,-100.64328917849028,-55.95716233584017

2645784_20201_2_0,mn8tdo4icz,0.5608050127013764,-75.30451940985944,-37.629663334365006

2821261_20201_2_0,mnm8on4icz,4.27118208563309,-97.38235037296778,-50.51332672355038

4549884_20201_2_0,monoep4icz,0.5426828237972258,-84.53017279070806,-57.28209561858199

1907683_20201_2_0,mpttjo4icz,0.01936906161812218,-101.91560070790626,-35.95427633186341

1121246_20201_2_0,mq2kxn4icz,-1.1770934937457957,-118.47406628991928,-26.48997109839118

1576202_20201_2_0,mq3ppo4icz,1.9347301111791204,-92.64738945922292,-32.53268152482701

3257432_20201_2_0,mqdubo4icz,2.1292336532275793,-75.35971821104698,-39.78054884000183

2613515_20201_2_0,mqfvuo4icz,-0.6677680765080386,-100.83697825050322,-45.75433977470654

4059710_20201_2_0,mqmhxn4icz,0.28965193366986275,-62.86182779675539,-42.115816138159786

1095711_20201_2_0,mqr49p4icz,-3.828874341721507,-130.01929394043378,-21.23880083934229

4036091_20201_2_0,mrdadp4icz,-0.47833237014647795,-54.93735309163981,-39.335627079763746

5800674_20201_2_0,mrhvxo4icz,-5.428837393281393,-90.83512535430418,10.364899833212348

3343053_20201_2_0,msaubn4icz,-1.0236478321278786,-139.46470886424632,-34.17166987297267

4545669_20201_2_0,mshdgp4icz,1.4883088036920098,-98.7452710837627,-34.335448623378056

3371013_20201_2_0,mt6kbp4icz,0.4825596159823864,-125.2572468742973,-46.73775171444319

3675329_20201_2_0,munfbn4icz,1.9100842061522163,-87.19221969845549,-33.20545547902705

2192718_20201_2_0,m5yybp4icz,0.06914058626894232,-125.31818534467075,-21.90826920010636

4815953_20201_2_0,mvq6to4icz,2.6168570927960757,-70.286905956726,-43.70856819116982

2787012_20201_2_0,mx312p4icz,-2.382257754357878,-108.13995040550063,-11.613867990821333

3008088_20201_2_0,mx5f1p4icz,1.842187746384073,-47.1874231003662,-47.23858411007666

4917412_20201_2_0,f35fzo4icz,-0.8076659277793068,-116.83027298970379,-12.682683102350722

/users/rhydian/anaconda3/envs/torch_env/lib/python3.7/site-packages/torch/cuda/__init__.py:52: UserWarning: CUDA initialization: Found no NVIDIA driver on your system. Please check that you have an NVIDIA GPU and installed a driver from http://www.nvidia.com/Download/index.aspx (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729006826/work/c10/cuda/CUDAFunctions.cpp:100.)
  return torch._C._cuda_getDeviceCount() > 0
  0%|          | 0/101 [00:00<?, ?it/s]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 1/101 [00:02<04:44,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 2/101 [00:05<04:43,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 3/101 [00:09<05:04,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/101 [00:12<04:52,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▍         | 5/101 [00:15<04:47,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 6/101 [00:19<05:26,  3.44s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 7/101 [00:22<05:09,  3.29s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 8/101 [00:25<04:54,  3.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 9/101 [00:29<05:06,  3.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|▉         | 10/101 [00:31<04:48,  3.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 11/101 [00:35<04:49,  3.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 12/101 [00:38<04:47,  3.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 13/101 [00:41<04:38,  3.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 14/101 [00:45<05:02,  3.48s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▍        | 15/101 [00:48<04:45,  3.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 16/101 [00:52<04:51,  3.43s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 17/101 [00:55<04:38,  3.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 18/101 [00:59<04:53,  3.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 19/101 [01:02<04:31,  3.31s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|█▉        | 20/101 [01:05<04:17,  3.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 21/101 [01:12<05:48,  4.35s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 22/101 [01:16<05:36,  4.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 23/101 [01:19<04:59,  3.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 24/101 [01:22<04:50,  3.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▍       | 25/101 [01:26<04:43,  3.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 26/101 [01:29<04:18,  3.45s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 27/101 [01:32<04:04,  3.30s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 28/101 [01:35<03:51,  3.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▊       | 29/101 [01:37<03:42,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|██▉       | 30/101 [01:40<03:32,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 31/101 [01:43<03:30,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 32/101 [01:47<03:35,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 33/101 [01:49<03:22,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▎      | 34/101 [01:52<03:20,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▍      | 35/101 [01:55<03:14,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 36/101 [01:58<03:09,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 37/101 [02:01<03:05,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 38/101 [02:04<03:08,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▊      | 39/101 [02:07<03:01,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|███▉      | 40/101 [02:10<02:56,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 41/101 [02:13<02:53,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 42/101 [02:16<02:53,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 43/101 [02:18<02:49,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▎     | 44/101 [02:21<02:43,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▍     | 45/101 [02:24<02:40,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 46/101 [02:27<02:35,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 47/101 [02:30<02:39,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 48/101 [02:33<02:35,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▊     | 49/101 [02:36<02:35,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|████▉     | 50/101 [02:39<02:32,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 51/101 [02:43<02:39,  3.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████▏    | 52/101 [02:46<02:34,  3.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 53/101 [02:48<02:24,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 54/101 [02:51<02:20,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 55/101 [02:54<02:08,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▌    | 56/101 [02:57<02:11,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▋    | 57/101 [03:01<02:17,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 58/101 [03:05<02:24,  3.37s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 59/101 [03:12<03:13,  4.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 60/101 [03:15<02:47,  4.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|██████    | 61/101 [03:18<02:29,  3.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████▏   | 62/101 [03:21<02:17,  3.52s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 63/101 [03:24<02:05,  3.30s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 64/101 [03:26<01:56,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 65/101 [03:29<01:49,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▌   | 66/101 [03:35<02:19,  3.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▋   | 67/101 [03:38<02:01,  3.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 68/101 [03:41<01:50,  3.35s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 69/101 [03:44<01:42,  3.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 70/101 [03:47<01:39,  3.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|███████   | 71/101 [03:50<01:33,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████▏  | 72/101 [03:53<01:29,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 73/101 [03:56<01:27,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 74/101 [03:59<01:24,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 75/101 [04:02<01:19,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▌  | 76/101 [04:06<01:22,  3.30s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 77/101 [04:09<01:17,  3.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 78/101 [04:12<01:11,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 79/101 [04:15<01:09,  3.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 80/101 [04:18<01:02,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 81/101 [04:20<00:58,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 82/101 [04:23<00:54,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 83/101 [04:26<00:51,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 84/101 [04:29<00:49,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 85/101 [04:32<00:47,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▌ | 86/101 [04:35<00:44,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 87/101 [04:40<00:50,  3.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 88/101 [04:43<00:45,  3.50s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 89/101 [04:46<00:39,  3.29s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 90/101 [04:49<00:34,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 91/101 [04:52<00:30,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 92/101 [04:54<00:25,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 93/101 [04:57<00:23,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 94/101 [05:00<00:20,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 95/101 [05:05<00:20,  3.43s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▌| 96/101 [05:08<00:16,  3.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 97/101 [05:10<00:12,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 98/101 [05:14<00:09,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 99/101 [05:17<00:06,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 100/101 [05:19<00:02,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|██████████| 101/101 [05:22<00:00,  3.01s/it]100%|██████████| 101/101 [05:22<00:00,  3.20s/it]
Trying to load from /users/rhydian/self-supervised-project/model_weights/SSECEncodersBothBoth
==> Resuming model trained for 106 epochs...
Trying to load from ../model_weights/angle_regressor4
==> Resuming model trained for 7 epochs...
4288857_20201_2_0,lz3lvn4icz,-2.2955052151834825,-85.2016815976994,-23.491261670427917

4383736_20201_2_0,m1008p4icz,0.184526602170201,-108.55288816497725,-21.608560778909165

5604930_20201_2_0,m1jvlo4icz,3.0331856575506753,-127.97510560278829,-55.816960206622525

1018862_20201_2_0,m1rn8o4icz,2.504335228946263,-54.261650332027614,-34.0031331801145

3615513_20201_2_0,m1xyso4icz,1.3414500267268388,-121.98722918933387,-32.5041489019774

3786025_20201_2_0,5e52uo4icz,3.1450077606130753,-73.21751155676782,-51.30592128109413

2595311_20201_2_0,m2x44o4icz,-1.6704837846734566,-114.58296333243973,-19.739962405112763

3625074_20201_2_0,m39ejn4icz,-1.6771943180259357,-68.06987429565388,-28.000560689287667

3621501_20201_2_0,m3w4bo4icz,-3.3420492805014006,-131.16798138515395,-21.717537825404435

3849363_20201_2_0,m4emzo4icz,20.982144093557608,50.5472899644416,-142.25409968372685

2202598_20201_2_0,r8t7wn4icz,0.25991821213909977,-98.87404349165587,-28.905867774987087

1508867_20201_2_0,m5ttun4icz,-0.8946004844123407,-100.22477469977107,-25.88798006965375

1126041_20201_2_0,m64kln4icz,-1.4175797225060074,-91.37884061279763,-40.302171488517956

5442570_20201_2_0,m6bpro4icz,1.5471274224914962,-97.93944038096856,-51.813405871234835

3596012_20201_2_0,m6ktjn4icz,-0.5081377315191938,-72.63976540852164,-38.460105711228124

3400508_20201_2_0,m6qu4p4icz,-3.8862542443790167,-56.26977619591153,-10.725855787468475

5214633_20201_2_0,m7ifbn4icz,-12.323081687600853,-157.35057577949433,-17.370198865269032

1659430_20201_2_0,m7r18o4icz,-2.7867438695266427,-146.69784323112015,-33.12017342814721

3095392_20201_2_0,m7spao4icz,-4.169698536842934,-109.86144990006315,-17.889227870815247

2548153_20201_2_0,m7uiln4icz,-1.3712670104219693,-69.4163690670652,-48.82665606037338

3446692_20201_2_0,m7zkcp4icz,0.4899766043065557,-92.73113935857842,-44.78487032494843

5887378_20201_2_0,m90c9p4icz,0.8528223782591975,-120.46206346748184,-53.079079794624874

4388158_20201_2_0,maw6bp4icz,-4.224365518829668,-77.1761458165345,-18.790327720851394

5464083_20201_2_0,xwy22p4icz,-3.825762767940723,-116.63083506343065,-9.775452915941173

4319721_20201_2_0,poii7n4icz,-0.8059274538666379,-111.56309935940672,-31.55254582871555

5510732_20201_2_0,mcp5uo4icz,0.07320321326419106,-153.06254871600316,-24.934276923847534

2299724_20201_2_0,mcswip4icz,-1.668521014636844,-105.13783835374758,-23.47550146961126

2129210_20201_2_0,mdadap4icz,-3.8392398667260466,-83.36335299645674,-19.56062942675878

2617607_20201_2_0,mdpudp4icz,-0.665709796690315,-96.08221845889679,-46.05572602227572

2550849_20201_2_0,me0ryo4icz,3.846508795937938,-92.4188029720406,-63.08165686355433

2212842_20201_2_0,me608p4icz,0.1750325749809677,-84.76329389259715,-33.95814660165175

3883254_20201_2_0,mfo9wo4icz,3.1350689616720016,-98.44939300993255,-45.23236119234416

2949044_20201_2_0,mfuh2p4icz,0.3382418816100142,-159.98323889411685,-27.117108211555745

4418900_20201_2_0,mg3swn4icz,1.3860609894028961,-103.47354945298315,-35.67492785458933

2661601_20201_2_0,mg68ep4icz,0.918799861071276,-111.9866176127799,-59.443891908135924

1120988_20201_2_0,mgcgbp4icz,0.5206426498932938,-74.84781765334327,-36.886128827061086

2986396_20201_2_0,mh2djn4icz,1.6695781252644384,-138.079771219884,-27.16928695883604

1795368_20201_2_0,mhe69n4icz,-0.8987567612499875,-70.8199578508841,-31.438188935850064

2492710_20201_2_0,mhsyko4icz,-0.7135488329045748,-93.59324891523227,-34.58861062218347

1284718_20201_2_0,mih5oo4icz,-2.891620474906579,-78.47009711380596,-7.900799360751208

1614136_20201_2_0,mkfpfo4icz,-1.547158197389922,-84.3986207689569,-38.82790197881015

4659072_20201_2_0,mlv33o4icz,-0.03564142875338982,-79.97454410379902,-34.45086426214917

3638245_20201_2_0,mlzk0o4icz,-1.7620829885347633,-103.07438490412255,-22.19901696953832

2206582_20201_2_0,mm7lon4icz,-1.1741896681527026,-91.07139961446882,-30.515923709426247

5959241_20201_2_0,mmk62o4icz,-1.579475706045492,-118.96356622193136,-32.176548756723165

3019129_20201_2_0,mn7rfo4icz,2.467218541789206,-101.92932043236041,-63.26794178528844

4356242_20201_2_0,mo9w0p4icz,1.1813436325462423,-81.68739213600162,-41.72275766141901

3780361_20201_2_0,moe6io4icz,1.6745791458246249,-56.00227805910444,-42.398367632147796

1045555_20201_2_0,movg7o4icz,0.45678434792555894,-85.52463502232516,-37.79816531974451

3611421_20201_2_0,mp5ymn4icz,1.3855843996293733,-75.21725844256733,-42.21178371142297

1284718_20201_2_0,mih5oo4icz,-2.891620474906579,-78.47009711380596,-7.900799360751208

4045358_20201_2_0,mqcgcn4icz,3.4958540183377482,-90.3151656952378,-48.90469010824597

2776412_20201_2_0,mqfwgo4icz,-7.571213347846774,-101.00416839621008,-5.9484508356068915

5750721_20201_2_0,msv5uo4icz,3.1952213809977326,-115.12206441195096,-42.54956281837737

5264640_20201_2_0,mt9xao4icz,8.752342034347242,-102.16962963937823,-83.78341596577465

3694377_20201_2_0,mtil7p4icz,4.304622944201486,-76.21758340016117,-48.332302635763284

1679575_20201_2_0,mtl51o4icz,0.6327738888033024,-56.861823682161116,-37.12359276740659

1035937_20201_2_0,mug0wn4icz,-2.197561051389484,-78.14993854558517,-26.82541152613598

5245620_20201_2_0,mvtm7p4icz,-2.763202270681831,-83.75156446372827,-10.021326025856439

1040790_20201_2_0,mw89pn4icz,-2.9064434691357635,-77.73478957586627,-19.370032008834883

1712936_20201_2_0,mw8iao4icz,2.7367048466119,-69.13706828437293,-59.61864932022395

2001700_20201_2_0,mx2ukn4icz,-0.012170316365296436,-101.68086902566603,-36.116870364593424

1390825_20201_2_0,mxf6to4icz,0.5601343993763486,-126.08349103727139,-34.64903198397083

1464762_20201_2_0,mxnvjn4icz,-2.6497503873445027,-91.17477402574994,-4.536457063259192

5143087_20201_2_0,mz07on4icz,2.037612190212585,-90.31362141386822,-63.30179250843334

3143342_20201_2_0,mz5jyo4icz,2.9635452251875325,-119.46458886749011,-41.26279189714275

3575380_20201_2_0,mzh49o4icz,-3.5873644294703975,-114.37680922581478,-14.90422363939362

3321357_20201_2_0,n06yfn4icz,-0.045945596209836216,-91.1594055625697,-40.140161265611

5376642_20201_2_0,n0g3xn4icz,-1.8537931264664573,-85.34321089857556,-28.686156990190838

5577070_20201_2_0,n0hwtn4icz,-3.646705078939777,-84.18868292104594,-16.528018949037545

2682697_20201_2_0,n0j71p4icz,-1.9311714413789485,-129.56287199390115,-32.891675168938534

1595174_20201_2_0,n0vn8o4icz,-1.4707962188108126,-104.68896690149381,-32.33374799149145

1262711_20201_2_0,n1xeap4icz,-0.6713494779396257,-88.73993140779004,-52.30717992783768

4543100_20201_2_0,n2izep4icz,0.822920823473285,-83.10541727947862,-38.943853809122274

1401140_20201_2_0,n39xwn4icz,-0.4120078104398593,-85.22281463792649,-46.16214323353569

3198974_20201_2_0,n3aexo4icz,1.6888551667513352,-68.9374311821353,-37.84506062854031

2868769_20201_2_0,n4hrfp4icz,-0.7583871271213194,-102.52514664727681,-33.79264002992278

4083932_20201_2_0,n5ktfp4icz,-1.0157549741586902,-76.67424088380668,-44.58478602505966

1794533_20201_2_0,n5whon4icz,2.4157069548969674,-121.27870513235177,-48.00412866541214

3498048_20201_2_0,n63l9p4icz,-1.1159877711424524,-68.87532258230405,-32.124706742217

4675744_20201_2_0,n6ugfp4icz,2.557669508700789,-94.40271658507578,-50.39634393610791

2064665_20201_2_0,n7639p4icz,0.09306365426639375,-95.20594723688592,-14.360400334379506

2131933_20201_2_0,n7iq5o4icz,1.4488826934771375,-68.64307070713198,-30.482762592062713

5368041_20201_2_0,n7k16p4icz,4.015238609075826,-116.38143961737987,-63.46438534465983

1415212_20201_2_0,n86vao4icz,-2.007596327779292,-122.54554715884291,-45.57495683854961

2957527_20201_2_0,n8qqwo4icz,-3.0395232695423857,-56.24160009427135,-24.38066110694119

3123196_20201_2_0,n8sm7o4icz,-0.6074438477730668,-100.53466798006292,-31.2050027914038

3987098_20201_2_0,n8vu6p4icz,-0.840175175701766,-49.791027353944855,-12.17977607989522

5326744_20201_2_0,n90rvo4icz,-0.3589542302266485,-96.1681046805254,-42.441655035830195

5328464_20201_2_0,n9m84p4icz,-0.9102585507098148,-71.61118886003473,-36.160351212480606

5183096_20201_2_0,n9n9wo4icz,1.4255413331351885,-125.9764031800346,-34.15088850208926

5978768_20201_2_0,n9w6sn4icz,-1.8109157344560904,-105.32833369984982,-21.019730079795124

5895537_20201_2_0,na1u7n4icz,2.4392853832537145,-83.32887596824162,-40.55755739779103

2760450_20201_2_0,nab0jp4icz,0.39684236674619416,-79.14644774170696,-38.52024933065918

2237719_20201_2_0,d1ggfo4icz,-1.1448997111691193,-105.25299887989243,-29.756207198537524

1437135_20201_2_0,nafj9o4icz,0.10697758276611997,-107.26774551858637,-33.99860535713438

2000194_20201_2_0,nb97sn4icz,1.492272165593286,-114.4356080403426,-37.379433306059724

3828378_20201_2_0,nbo2go4icz,-0.6987696231573527,-79.8081344021536,-28.138184016106663

1124458_20201_2_0,nchdgo4icz,3.2140716153343045,-95.46878459945174,-55.508889107034506

3679851_20201_2_0,nchojo4icz,10.92599454602283,-61.246516760830986,-57.286858808881306

6004527_20201_2_0,9tyjzn4icz,3.198581222485519,-93.70215303034445,-43.00399142346744

