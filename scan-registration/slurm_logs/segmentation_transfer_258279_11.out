11 th decile
.55
.60
/users/rhydian/anaconda3/envs/torch_env/lib/python3.7/site-packages/torch/cuda/__init__.py:52: UserWarning: CUDA initialization: Found no NVIDIA driver on your system. Please check that you have an NVIDIA GPU and installed a driver from http://www.nvidia.com/Download/index.aspx (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729006826/work/c10/cuda/CUDAFunctions.cpp:100.)
  return torch._C._cuda_getDeviceCount() > 0
  0%|          | 0/811 [00:00<?, ?it/s]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  0%|          | 1/811 [00:22<5:06:01, 22.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  0%|          | 2/811 [00:25<3:45:00, 16.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  0%|          | 3/811 [00:28<2:48:10, 12.49s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  0%|          | 4/811 [00:30<2:08:05,  9.52s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 5/811 [00:33<1:40:37,  7.49s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 6/811 [00:36<1:20:45,  6.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 7/811 [00:38<1:07:08,  5.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 8/811 [00:41<56:58,  4.26s/it]  Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 9/811 [00:43<50:03,  3.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 10/811 [00:46<45:09,  3.38s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|▏         | 11/811 [00:48<42:14,  3.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|▏         | 12/811 [00:51<39:54,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 13/811 [00:55<42:52,  3.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 14/811 [01:00<50:17,  3.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 15/811 [01:03<46:17,  3.49s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 16/811 [01:05<42:40,  3.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 17/811 [01:08<42:21,  3.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 18/811 [01:11<40:41,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 19/811 [01:14<40:05,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 20/811 [01:17<39:11,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 21/811 [01:20<37:32,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 22/811 [01:22<37:15,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 23/811 [01:26<40:40,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 24/811 [01:29<39:06,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 25/811 [01:32<38:58,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 26/811 [01:34<37:33,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 27/811 [01:37<37:01,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 28/811 [01:40<35:42,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▎         | 29/811 [01:42<35:56,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▎         | 30/811 [01:45<35:46,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 31/811 [01:48<35:48,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 32/811 [01:51<35:21,  2.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 33/811 [01:53<35:09,  2.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 34/811 [01:57<39:23,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 35/811 [02:00<37:27,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 36/811 [02:02<37:00,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▍         | 37/811 [02:05<36:42,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▍         | 38/811 [02:08<36:09,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▍         | 39/811 [02:11<35:49,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▍         | 40/811 [02:13<34:54,  2.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▌         | 41/811 [02:16<36:48,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▌         | 42/811 [02:20<38:20,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▌         | 43/811 [02:22<36:35,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▌         | 44/811 [02:25<37:48,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 45/811 [02:28<37:03,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 46/811 [02:31<35:30,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 47/811 [02:34<37:52,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 48/811 [02:37<37:19,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 49/811 [02:40<36:02,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 50/811 [02:42<34:46,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▋         | 51/811 [02:45<34:06,  2.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▋         | 52/811 [02:49<38:19,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 53/811 [02:51<37:27,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 54/811 [02:54<36:32,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 55/811 [02:57<35:48,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 56/811 [03:00<35:24,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 57/811 [03:02<34:58,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 58/811 [03:05<34:26,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 59/811 [03:08<34:45,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 60/811 [03:10<33:59,  2.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 61/811 [03:13<33:28,  2.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 62/811 [03:16<33:56,  2.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 63/811 [03:18<33:27,  2.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 64/811 [03:21<33:56,  2.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 65/811 [03:24<34:01,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 66/811 [03:27<33:48,  2.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 67/811 [03:29<33:28,  2.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 68/811 [03:32<34:46,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▊         | 69/811 [03:35<34:19,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▊         | 70/811 [03:38<34:03,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 71/811 [03:40<33:47,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 72/811 [03:43<33:04,  2.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 73/811 [03:46<32:49,  2.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 74/811 [03:48<33:20,  2.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 75/811 [03:51<34:24,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 76/811 [03:54<34:55,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 77/811 [03:57<35:09,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|▉         | 78/811 [04:00<35:01,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|▉         | 79/811 [04:03<34:59,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|▉         | 80/811 [04:06<34:17,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|▉         | 81/811 [04:09<35:06,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|█         | 82/811 [04:12<34:36,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|█         | 83/811 [04:15<35:29,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|█         | 84/811 [04:17<35:04,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|█         | 85/811 [04:21<37:32,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 86/811 [04:24<36:19,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 87/811 [04:27<36:33,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 88/811 [04:30<36:07,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 89/811 [04:33<35:57,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 90/811 [04:36<35:47,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 91/811 [04:39<36:13,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█▏        | 92/811 [04:42<36:07,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█▏        | 93/811 [04:45<35:17,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 94/811 [04:48<36:18,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 95/811 [04:51<35:58,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 96/811 [04:54<36:30,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 97/811 [04:57<35:34,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 98/811 [05:00<35:17,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 99/811 [05:03<35:54,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 100/811 [05:06<35:07,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 101/811 [05:09<34:14,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 102/811 [05:12<35:10,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 103/811 [05:15<37:03,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 104/811 [05:18<37:15,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 105/811 [05:21<36:42,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 106/811 [05:26<41:02,  3.49s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 107/811 [05:29<39:01,  3.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 108/811 [05:32<39:38,  3.38s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 109/811 [05:35<37:45,  3.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▎        | 110/811 [05:39<40:03,  3.43s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▎        | 111/811 [05:42<40:03,  3.43s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 112/811 [05:45<37:30,  3.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 113/811 [05:49<39:31,  3.40s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 114/811 [05:52<37:47,  3.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 115/811 [05:55<36:58,  3.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 116/811 [05:58<35:55,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 117/811 [06:01<35:45,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▍        | 118/811 [06:04<35:04,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▍        | 119/811 [06:07<34:01,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▍        | 120/811 [06:10<34:53,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▍        | 121/811 [06:12<33:29,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▌        | 122/811 [06:15<32:54,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▌        | 123/811 [06:18<32:48,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▌        | 124/811 [06:21<32:48,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▌        | 125/811 [06:24<32:52,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 126/811 [06:27<32:30,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 127/811 [06:29<31:54,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 128/811 [06:32<31:49,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 129/811 [06:35<31:52,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 130/811 [06:38<31:58,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 131/811 [06:41<32:10,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▋        | 132/811 [06:43<31:33,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▋        | 133/811 [06:46<31:38,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 134/811 [06:49<31:57,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 135/811 [06:52<32:01,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 136/811 [06:55<32:10,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 137/811 [06:58<32:51,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 138/811 [07:06<51:30,  4.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 139/811 [07:09<45:39,  4.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 140/811 [07:12<41:56,  3.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 141/811 [07:15<38:48,  3.47s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 142/811 [07:19<40:18,  3.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 143/811 [07:22<37:35,  3.38s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 144/811 [07:25<36:09,  3.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 145/811 [07:28<34:42,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 146/811 [07:31<34:05,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 147/811 [07:33<32:54,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 148/811 [07:37<33:33,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 149/811 [07:39<33:12,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 150/811 [07:42<32:27,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▊        | 151/811 [07:45<32:15,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▊        | 152/811 [07:48<32:07,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 153/811 [07:51<32:41,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 154/811 [07:54<33:06,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 155/811 [07:57<32:42,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 156/811 [08:00<32:05,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 157/811 [08:03<31:33,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 158/811 [08:06<32:42,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|█▉        | 159/811 [08:09<32:55,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|█▉        | 160/811 [08:13<35:06,  3.24s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|█▉        | 161/811 [08:16<33:31,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|█▉        | 162/811 [08:19<33:24,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|██        | 163/811 [08:22<33:12,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|██        | 164/811 [08:25<33:42,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|██        | 165/811 [08:28<32:28,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|██        | 166/811 [08:31<31:58,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 167/811 [08:34<31:46,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 168/811 [08:37<32:43,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 169/811 [08:40<31:43,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 170/811 [08:42<31:22,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 171/811 [08:47<35:32,  3.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 172/811 [08:50<33:57,  3.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██▏       | 173/811 [08:53<33:13,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██▏       | 174/811 [08:56<32:54,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 175/811 [08:59<32:38,  3.08s/it] 22%|██▏       | 176/811 [09:02<32:01,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 177/811 [09:04<30:59,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 178/811 [09:07<30:52,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 179/811 [09:10<30:05,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 180/811 [09:13<32:05,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 181/811 [09:16<31:02,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 182/811 [09:24<47:02,  4.49s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 183/811 [09:27<42:13,  4.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 184/811 [09:30<38:52,  3.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 185/811 [09:33<35:24,  3.39s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 186/811 [09:36<34:19,  3.30s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 187/811 [09:39<34:19,  3.30s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 188/811 [09:42<33:30,  3.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 189/811 [09:45<33:08,  3.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 190/811 [09:48<32:04,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▎       | 191/811 [09:51<31:41,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▎       | 192/811 [09:54<31:26,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 193/811 [09:57<31:06,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 194/811 [10:01<33:25,  3.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 195/811 [10:06<39:35,  3.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 196/811 [10:09<36:41,  3.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 197/811 [10:13<38:53,  3.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 198/811 [10:17<36:54,  3.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▍       | 199/811 [10:20<35:02,  3.44s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▍       | 200/811 [10:22<32:49,  3.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▍       | 201/811 [10:25<31:50,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▍       | 202/811 [10:28<30:33,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▌       | 203/811 [10:31<30:31,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▌       | 204/811 [10:34<30:44,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▌       | 205/811 [10:37<29:51,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▌       | 206/811 [10:50<1:00:23,  5.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 207/811 [10:53<50:37,  5.03s/it]  Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 208/811 [10:56<44:17,  4.41s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 209/811 [11:09<1:09:47,  6.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 210/811 [11:12<57:28,  5.74s/it]  Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 211/811 [11:14<48:38,  4.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 212/811 [11:17<43:12,  4.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▋       | 213/811 [11:20<38:27,  3.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▋       | 214/811 [11:23<36:18,  3.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 215/811 [11:26<34:26,  3.47s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 216/811 [11:29<32:42,  3.30s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 217/811 [11:32<31:54,  3.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 218/811 [11:36<32:07,  3.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 219/811 [11:39<31:17,  3.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 220/811 [11:42<31:05,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 221/811 [11:45<29:51,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 222/811 [11:47<28:54,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 223/811 [11:50<28:49,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 224/811 [11:54<30:31,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 225/811 [12:00<41:10,  4.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 226/811 [12:03<37:31,  3.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 227/811 [12:07<35:37,  3.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 228/811 [12:10<33:28,  3.44s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 229/811 [12:13<32:41,  3.37s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 230/811 [12:16<31:09,  3.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 231/811 [12:19<30:46,  3.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▊       | 232/811 [12:22<29:56,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▊       | 233/811 [12:25<29:03,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 234/811 [12:27<28:11,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 235/811 [12:30<27:55,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 236/811 [12:33<27:51,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 237/811 [12:36<28:18,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 238/811 [12:38<26:37,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 239/811 [12:42<27:46,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|██▉       | 240/811 [12:45<27:42,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|██▉       | 241/811 [12:48<27:43,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|██▉       | 242/811 [12:50<27:00,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|██▉       | 243/811 [12:53<27:05,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|███       | 244/811 [12:56<26:36,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|███       | 245/811 [13:00<31:02,  3.29s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|███       | 246/811 [13:03<30:13,  3.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|███       | 247/811 [13:07<31:39,  3.37s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 248/811 [13:10<29:55,  3.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 249/811 [13:13<29:30,  3.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 250/811 [13:16<29:10,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 251/811 [13:19<28:58,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 252/811 [13:22<28:08,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 253/811 [13:25<29:17,  3.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███▏      | 254/811 [13:28<28:34,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███▏      | 255/811 [13:31<29:04,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 256/811 [13:34<28:23,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 257/811 [13:37<27:51,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 258/811 [13:40<27:45,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 259/811 [13:46<36:29,  3.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 260/811 [13:49<32:48,  3.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 261/811 [13:52<31:19,  3.42s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 262/811 [13:55<29:22,  3.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 263/811 [13:58<28:41,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 264/811 [14:01<27:30,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 265/811 [14:03<27:10,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 266/811 [14:07<28:53,  3.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 267/811 [14:11<30:07,  3.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 268/811 [14:14<28:51,  3.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 269/811 [14:17<28:37,  3.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 270/811 [14:20<29:09,  3.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 271/811 [14:23<28:09,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▎      | 272/811 [14:27<30:50,  3.43s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▎      | 273/811 [14:30<29:43,  3.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 274/811 [14:33<29:23,  3.28s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 275/811 [14:36<28:41,  3.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 276/811 [14:40<30:46,  3.45s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 277/811 [14:43<29:11,  3.28s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 278/811 [14:46<27:58,  3.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 279/811 [14:49<27:23,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▍      | 280/811 [14:53<28:19,  3.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▍      | 281/811 [14:55<27:12,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▍      | 282/811 [14:58<26:34,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▍      | 283/811 [15:01<26:25,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▌      | 284/811 [15:04<26:34,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▌      | 285/811 [15:07<26:08,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▌      | 286/811 [15:10<25:52,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▌      | 287/811 [15:13<25:50,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 288/811 [15:18<31:16,  3.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 289/811 [15:21<29:20,  3.37s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 290/811 [15:44<1:20:03,  9.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 291/811 [15:48<1:05:36,  7.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 292/811 [15:52<58:30,  6.76s/it]  Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 293/811 [15:57<52:30,  6.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▋      | 294/811 [16:01<46:59,  5.45s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▋      | 295/811 [16:04<39:41,  4.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▋      | 296/811 [16:06<34:41,  4.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 297/811 [16:09<31:09,  3.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 298/811 [16:12<28:55,  3.38s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 299/811 [16:15<28:46,  3.37s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 300/811 [16:18<27:57,  3.28s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 301/811 [16:21<27:17,  3.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 302/811 [16:24<25:50,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 303/811 [16:29<30:14,  3.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 304/811 [16:32<28:36,  3.39s/it] 38%|███▊      | 305/811 [16:35<29:13,  3.47s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 306/811 [16:38<27:53,  3.31s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 307/811 [16:42<27:41,  3.30s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 308/811 [16:45<28:40,  3.42s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 309/811 [16:48<27:11,  3.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 310/811 [16:51<26:12,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 311/811 [16:54<26:18,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 312/811 [16:58<29:07,  3.50s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▊      | 313/811 [17:01<27:33,  3.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▊      | 314/811 [17:06<30:29,  3.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 315/811 [17:09<28:19,  3.43s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 316/811 [17:12<26:47,  3.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 317/811 [17:14<25:58,  3.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 318/811 [17:19<28:32,  3.47s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 319/811 [17:22<27:31,  3.36s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 320/811 [17:26<28:53,  3.53s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|███▉      | 321/811 [17:29<27:06,  3.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|███▉      | 322/811 [17:31<25:52,  3.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|███▉      | 323/811 [17:34<24:38,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|███▉      | 324/811 [17:37<24:17,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|████      | 325/811 [17:41<25:37,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|████      | 326/811 [17:44<25:33,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|████      | 327/811 [17:47<25:05,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|████      | 328/811 [17:49<24:08,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 329/811 [17:52<23:58,  2.98s/it] 41%|████      | 330/811 [17:55<23:19,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 331/811 [18:01<30:23,  3.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 332/811 [18:04<28:05,  3.52s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 333/811 [18:07<26:33,  3.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 334/811 [18:10<25:19,  3.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████▏     | 335/811 [18:13<25:40,  3.24s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████▏     | 336/811 [18:17<28:13,  3.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 337/811 [18:20<26:16,  3.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 338/811 [18:24<26:29,  3.36s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 339/811 [18:27<25:42,  3.27s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 340/811 [18:29<24:45,  3.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 341/811 [18:32<24:05,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 342/811 [18:37<27:22,  3.50s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 343/811 [18:39<25:19,  3.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 344/811 [18:43<25:03,  3.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 345/811 [18:46<25:03,  3.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 346/811 [18:49<24:03,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 347/811 [18:52<23:28,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 348/811 [18:55<23:26,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 349/811 [18:57<22:47,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 350/811 [19:02<26:01,  3.39s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 351/811 [19:04<24:25,  3.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 352/811 [19:08<24:51,  3.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▎     | 353/811 [19:11<23:57,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▎     | 354/811 [19:14<23:22,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 355/811 [19:17<22:53,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 356/811 [19:20<22:41,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 357/811 [19:22<22:17,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 358/811 [19:25<21:36,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 359/811 [19:28<21:39,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 360/811 [19:31<21:25,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▍     | 361/811 [19:34<21:18,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▍     | 362/811 [19:38<24:20,  3.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▍     | 363/811 [19:40<23:05,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▍     | 364/811 [19:43<22:28,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▌     | 365/811 [19:46<21:36,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▌     | 366/811 [19:51<26:58,  3.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▌     | 367/811 [19:54<24:58,  3.38s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▌     | 368/811 [19:57<23:50,  3.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▌     | 369/811 [20:00<22:58,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 370/811 [20:03<24:06,  3.28s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 371/811 [20:06<22:53,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 372/811 [20:09<22:35,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Trying to load from /users/rhydian/self-supervised-project/model_weights/SSECEncodersBothBoth
==> Resuming model trained for 106 epochs...
Trying to load from ../model_weights/angle_regressor4
==> Resuming model trained for 7 epochs...
1467305_20201_2_0,k4awko4icz,2.379959576696968,-87.66484133437902,-45.18214585589246

5229567_20201_2_0,k4bc9p4icz,-3.745043790797465,-68.89601341070022,-16.026677722537528

1808278_20201_2_0,k4bwfn4icz,0.36148878028386583,-84.18260003697208,-65.38630638496349

4265852_20201_2_0,k4cpmo4icz,-1.6740493476519185,-58.50366706702329,-12.108614707972109

3635437_20201_2_0,k4cvln4icz,-0.18636011485934179,-118.6528317839134,-39.25572188836375

4120449_20201_2_0,k4efnn4icz,-0.3086105818340742,-101.24710757301744,-23.61594839373042

4917707_20201_2_0,k4flio4icz,-0.3124761320031242,-111.82802704667805,-34.07676498565006

5458159_20201_2_0,k4fron4icz,1.6179622804047298,-97.7639904584108,-21.62201860473934

1030066_20201_2_0,k4mgwn4icz,-0.3735592660914385,-91.42714287916311,-38.6940314794915

5259210_20201_2_0,k4u37n4icz,-12.59578280340027,-85.8513841792722,44.93981039597698

1356588_20201_2_0,k51yjp4icz,0.24339787361269266,-60.1687135781317,-22.255770938174322

1189984_20201_2_0,k53ado4icz,0.47111621539079934,-71.67686380397868,-25.586452913060214

3653207_20201_2_0,k573fo4icz,0.8190042492771747,-92.74689526549486,-32.74604557655857

2334666_20201_2_0,k5anep4icz,1.4744584935452896,-45.36352902413009,-48.70739438304591

3766475_20201_2_0,k5d3oo4icz,-22.010286078272145,-153.5932354548356,106.73823191218257

4645145_20201_2_0,k5evhn4icz,2.8695348949183694,-80.25096314086085,-53.06826184448127

5147235_20201_2_0,k5gqno4icz,3.7807274484277484,-76.99124365569293,-49.47506788684265

1319218_20201_2_0,k5ibuo4icz,2.135066110114158,-94.80881223522869,-59.04987727525476

1642050_20201_2_0,k5r51p4icz,2.062624431792889,-84.02848656775467,-30.767041045946343

3981857_20201_2_0,k5rtcn4icz,-0.05610070875564795,-88.06055564425503,-40.68537503793192

5906192_20201_2_0,k5uzeo4icz,1.229301593243808,-75.62143668825891,-52.30378422358767

2416169_20201_2_0,k5v40p4icz,-0.4583418070819328,-63.08326486587555,-39.62473474492752

4349969_20201_2_0,k5vz5o4icz,3.0070297308895997,-80.16552287635244,-67.8259869608555

4146019_20201_2_0,k613ko4icz,-0.013363432032357727,-103.40495904024974,-27.37595544296741

1145891_20201_2_0,k61xun4icz,2.143540131475902,-101.86951074928044,-47.98426747816745

5875473_20201_2_0,k63emo4icz,4.290692696616728,-83.36963721552459,-53.93221646713489

2569178_20201_2_0,k65o9n4icz,0.03404939118884316,-92.29418151407407,-48.00131828830422

5728400_20201_2_0,k6bjin4icz,-2.136568084641267,-84.49047123346065,-22.783586523720942

5224638_20201_2_0,k6f6wo4icz,0.5528818252266877,-75.25051827447334,-45.53298037261244

4449557_20201_2_0,k6jedo4icz,-3.394907912870241,-129.86746900297632,-8.312565348007212

3705499_20201_2_0,k6lsgp4icz,-0.6700381616550741,-88.5827989297506,-25.02286038292104

3484966_20201_2_0,k6nc8o4icz,1.2228270937429038,-82.06894853128983,-76.60425254234292

1719118_20201_2_0,k6p2wo4icz,2.2645470087457893,-89.26973404066956,-41.012620531833264

4225298_20201_2_0,k6s5jp4icz,2.7964990371627425,-97.2304472575928,-57.02839614601578

4174037_20201_2_0,k6tfbp4icz,-3.787460032424818,-171.13355290833982,-9.463997177418364

1171405_20201_2_0,k6tinn4icz,0.04256875985537313,-118.5878266826837,-30.449801654131065

4057242_20201_2_0,k6z6ao4icz,1.0454632347064894,-82.09195550138784,-42.10358244225371

1119653_20201_2_0,k6zqbo4icz,-3.8426915378535464,-86.51993965666273,-13.8232124085105

2352683_20201_2_0,k6zrwn4icz,1.4969539175727498,-90.65873290361537,-50.087537056569474

3736398_20201_2_0,k71xjn4icz,2.268124566247253,-80.18244268828295,-32.605092712472256

3873275_20201_2_0,k72t6n4icz,-1.1996708042246376,-106.32315526712785,-41.00504845529889

2225346_20201_2_0,k72znn4icz,1.7254159210379592,-43.77299656588397,-47.17510189415583

2175476_20201_2_0,k74ozo4icz,0.2510562434732414,-68.7209468603543,-41.30519008269137

4689980_20201_2_0,k78ero4icz,-1.4002071925029012,-123.2825849557365,-32.98178064044673

5619952_20201_2_0,k78sso4icz,-3.4663753612618424,-88.95619669411761,-14.157617945469013

3943385_20201_2_0,k7a78o4icz,1.6830855432270362,-76.2309812486582,-41.01955829943472

4384960_20201_2_0,6vt4on4icz,-1.5251837120810847,-91.72543910044038,-17.824527101116672

3377201_20201_2_0,k7fquo4icz,1.744427714056392,-103.08003204140945,-31.43642956456347

5426814_20201_2_0,k7mlbp4icz,2.3318489930210258,-68.60653842507588,-27.5467082205365

2611364_20201_2_0,k7ycco4icz,-1.4821774785153894,-59.09976045947988,-35.195055397441976

2609255_20201_2_0,k81cko4icz,0.9491235862105203,-78.86445893283843,-38.08179576055093

5051499_20201_2_0,3jtjmo4icz,-2.1553743408444217,-71.94071358425515,-18.10125506475157

5474205_20201_2_0,k84iqn4icz,-5.7854656442271875,-121.84952082302945,0.03360636834774766

3528376_20201_2_0,k85pvo4icz,1.6267220980903003,-88.00755593667475,-42.21342356798479

2242000_20201_2_0,k89oso4icz,-3.438479115749464,-132.03132433406614,-13.659937018835777

4439815_20201_2_0,k8havn4icz,0.09382785864201573,-53.59102731655702,-22.877296443167864

1268001_20201_2_0,k8j4on4icz,13.82766255783268,34.323046478850586,-119.46025010576902

5221895_20201_2_0,k8jp6o4icz,-0.14093810647295482,-118.21975308003806,-32.164272820467176

3357975_20201_2_0,k8l8do4icz,-1.8864766577308836,-96.53479110982886,-29.287004972631678

3442135_20201_2_0,k8pdvn4icz,-2.0553213455322488,-106.53418616129773,-28.493978403977493

3968894_20201_2_0,k8qm7p4icz,0.23319150608108785,-82.90275226522871,-37.158885346043675

1282605_20201_2_0,k8uskn4icz,-1.6726440292318114,-114.4012889112565,-24.132875253369505

1794559_20201_2_0,k8x49p4icz,-0.2841208721719206,-124.75212060701568,-34.88821688429617

4309587_20201_2_0,k9467p4icz,-2.2391738388967206,-107.54931982227643,-23.858068031446052

2404535_20201_2_0,k99vfp4icz,3.6435675657339233,-98.7765847768085,-58.76370749877421

2452445_20201_2_0,k9e5ap4icz,-0.9209451462545307,-56.67300280261151,-32.9348806263275

5078997_20201_2_0,k9ej9o4icz,-1.8871929498494184,-121.83504685685261,-31.599981811078635

3051484_20201_2_0,k9kvsn4icz,1.517719209540463,-108.87415728453882,-36.75181740839153

1112471_20201_2_0,k9t59n4icz,-1.3307424304256243,-99.83165612225875,-36.115046531298404

3970117_20201_2_0,ka2fcp4icz,3.60980809283132,-71.23415555745069,-52.595102689333515

1820150_20201_2_0,ka6pyo4icz,0.23884073224443703,-90.2198969768215,-40.316262400184044

3783733_20201_2_0,ka8f5o4icz,-1.5900436633859991,-134.85748027519324,-34.84841105638624

1877550_20201_2_0,kabrvn4icz,0.7603377681856568,-83.95579963263555,-37.22069022883588

3622515_20201_2_0,kabtqn4icz,-3.717928180953126,-88.81868000461466,-13.490165086574493

4224853_20201_2_0,kak6do4icz,-1.5514496969365477,-80.4710183536053,-41.79915991278121

4101332_20201_2_0,kao8ip4icz,-1.7100241986024909,-79.65558646314858,-40.451769212114144

1753312_20201_2_0,kardrn4icz,4.981699535766827,-50.690127214018105,-46.9186754364552

2037706_20201_2_0,kasbkn4icz,-0.16142819136718345,-103.93402463444326,-39.644708889987186

2700312_20201_2_0,kate1p4icz,-0.47099507730200185,-101.02933097694216,-34.240967496089695

3460625_20201_2_0,kau15o4icz,44.8798282146647,170.65920612225028,-136.9281181441475

3558915_20201_2_0,kb6gvn4icz,-1.5388161329395411,-103.35578624524254,-34.46932588391722

4558748_20201_2_0,kbi9wn4icz,2.7151683254538312,-96.29031282003197,-44.38910322293215

2603106_20201_2_0,kbp36p4icz,-4.550715213423707,-105.3002322795599,-40.99311369020245

5858288_20201_2_0,kbqkpo4icz,1.4289079365298716,-56.00882763287245,-49.520501726731595

4715391_20201_2_0,tii40p4icz,-2.3258729781815206,-55.855285472044244,-30.27692874646857

1776920_20201_2_0,kbvqtn4icz,4.095280484538077,-107.50804189974855,-47.59407157321125

5892140_20201_2_0,kbzi8p4icz,0.41798987097336593,-90.83026498988704,-40.04227136368819

1837912_20201_2_0,kbzr7o4icz,-0.5729852486257403,-77.74858249572796,-20.45784197241443

4693727_20201_2_0,kc1urn4icz,1.8356332734427545,-69.59475065767685,-30.993367385460076

4807605_20201_2_0,kc49hp4icz,2.695628554212425,-57.46628676255526,-51.16339941276429

5214051_20201_2_0,kc5ypo4icz,0.919588723364269,-146.88773201443098,-48.96059297572492

2051046_20201_2_0,kc9d3p4icz,11.820195244859134,-36.08274391775299,-89.24336745113487

1482992_20201_2_0,kcb6gp4icz,-3.9804310690252658,-105.13088703104927,-7.463098187191193

4503223_20201_2_0,kcclyo4icz,-9.8895214232076,-84.33413273573203,37.50612557008705

3260092_20201_2_0,kccumn4icz,-0.4976395691935978,-110.2956058024269,-45.396655251059954

1841445_20201_2_0,kcg2eo4icz,-4.937347772961776,-70.50842174304307,-3.959956878573138

1033027_20201_2_0,kchygp4icz,0.3363740966196323,-72.18812302743629,-50.49541828314477

1261372_20201_2_0,kci7uo4icz,2.050342511736537,-85.83054158539844,-51.56255378376733

5102401_20201_2_0,kcid7o4icz,-5.615390781314633,-97.88471809610996,-22.941645102338924

3728780_20201_2_0,kclnto4icz,-7.646978943664773,-97.6766717731829,3.739303383720099

2108179_20201_2_0,kclu0p4icz,0.44192394203846636,-49.37690515671662,-44.08606919936183

2502464_20201_2_0,kcp2rn4icz,-0.16780515260543102,-104.39094444446351,-26.54762064541535

2640495_20201_2_0,kcruyo4icz,0.5750730050058697,-114.85321845852576,-52.14530254547503

4140259_20201_2_0,kcx6bo4icz,-1.0130892908353235,-94.83477987647959,-18.758987166708962

4229290_20201_2_0,kd3dfp4icz,-2.378495729130253,-90.57373264736907,-5.656437199682529

3375990_20201_2_0,kd7a6n4icz,1.978102267169396,-59.587025252617195,-51.88514419506343

2850077_20201_2_0,kd8a9p4icz,-1.771494737994606,-76.52806940783631,-32.192876092582665

1432838_20201_2_0,kd93fo4icz,-5.414126887714365,-87.80049645787932,-7.674057744394474

1359615_20201_2_0,kd9ayo4icz,0.5783377117756195,-98.5474876076951,-42.385905980662

4823246_20201_2_0,kdc2uo4icz,0.6474826795043785,-98.7528302675259,-29.825143838492778

2532491_20201_2_0,kdd3cn4icz,-1.779411418702326,-117.21145944350502,-27.37050961328943

5261920_20201_2_0,kdevao4icz,2.5868068067253667,-57.71556602470537,-42.97895973813978

3555996_20201_2_0,kdh9eo4icz,-0.3248402733541705,-110.20603524328811,-46.92061228699558

4176463_20201_2_0,kdj93o4icz,0.1861298387060876,-61.46099092340245,-35.006462233867595

5631772_20201_2_0,kdlmen4icz,0.45520129577573204,-133.9401263712634,-48.7145551691973

5049383_20201_2_0,kdrkwn4icz,6.624152279232268,-78.41153665851294,-57.32989190788106

1835265_20201_2_0,kdrq5p4icz,2.000533366755821,-75.67713109335125,-56.5566219291854

4226552_20201_2_0,kdsc8o4icz,-1.039512877876884,-98.47158293838498,-25.228609089883804

5794094_20201_2_0,kdv6on4icz,0.7617248278930607,-75.15742290600704,-38.50746803727252

4622173_20201_2_0,kdv77p4icz,-0.5109749415191585,-94.34581030341826,-35.446621151503905

2278620_20201_2_0,kdvzlo4icz,-1.7063014107360415,-62.768635576078225,-16.143538354309243

4487798_20201_2_0,kdw2go4icz,-3.9636864950973054,-117.72600023437934,-10.17002225719898

2097501_20201_2_0,ke40hp4icz,3.5817584357621706,-61.506721893119504,-75.11918418664479

5158264_20201_2_0,ke72ap4icz,4.286713352711359,-108.48066416840823,-63.381854562940845

5337113_20201_2_0,ke81sn4icz,-0.6132033729934789,-96.81638398956898,-49.6265929906383

5809550_20201_2_0,keb36p4icz,-1.162779042827691,-80.18496853601226,-28.75077835559196

5071632_20201_2_0,keb5nn4icz,-4.475371684200231,-101.98870860821853,-0.2741244763043653

5267398_20201_2_0,kedxwn4icz,3.283140349497417,-75.0331998438891,-59.56824426236021

2526079_20201_2_0,kentqo4icz,-1.541330265569066,-90.30549730755106,-15.345039174557641

1035447_20201_2_0,keo2bo4icz,2.7761635983323516,-111.92633335056203,-40.17275091706141

3322702_20201_2_0,keq0no4icz,1.9381685714345562,-21.675411581006585,-42.30042157126756

5175676_20201_2_0,ketjdp4icz,-1.1930705477184007,-95.92733118138091,-48.12355621276346

1519142_20201_2_0,keunso4icz,3.346072269756927,-66.34844389882895,-51.66172125729955

4450488_20201_2_0,kewxuo4icz,-1.2320071771903598,-110.24862261737508,-35.488709867545566

3904770_20201_2_0,kf2lep4icz,-0.8746204473445748,-88.26468884924952,-29.849148319709485

2733301_20201_2_0,kf95ip4icz,1.8129188821964066,-45.90664235426206,-56.60852273278179

3998449_20201_2_0,kfdc4p4icz,0.8789679281744541,-74.17013621354565,-48.05706597753509

1175458_20201_2_0,kff5vo4icz,-1.2643301222507766,-89.5882293328753,-27.464003632312057

3456815_20201_2_0,kffumn4icz,-0.11500706348758342,-92.65560227929106,-39.98274881902432

3940451_20201_2_0,kfik7n4icz,6.575992263658379,-59.30734038655439,-75.53706969363046

1812656_20201_2_0,kfjjvo4icz,-2.394922690846116,-139.00262675233597,-27.09338766470664

1693961_20201_2_0,kfl5uo4icz,0.557882956914019,-93.15098322463703,-32.762674320364255

1496810_20201_2_0,kfoeso4icz,1.216704123928871,-59.622060672905036,-63.36512186398258

2728114_20201_2_0,kfpbrn4icz,-1.9083222828115491,-101.06485149165769,-29.8506288097623

2482188_20201_2_0,kfpkrn4icz,-0.13543729759441203,-126.65755178861392,-44.67774129764952

4732466_20201_2_0,kfvwbp4icz,-0.8446290285338014,-71.48214289600892,-12.92524306034447

1339951_20201_2_0,kfyhxo4icz,-3.144668303313793,-90.21688824594634,-19.464308123538757

3669916_20201_2_0,kfz8fp4icz,2.0097596506473696,-106.52695146060785,-55.43909479785633

5219811_20201_2_0,kfzdyo4icz,-0.05793982649865385,-110.95093522135329,-42.18155526974357

5578074_20201_2_0,kg8d1p4icz,0.035884857167428466,-97.86546367854487,-42.88399679245251

2075568_20201_2_0,kg8qco4icz,0.44085460664155673,-121.4367433494595,-32.1310595477086

5918527_20201_2_0,kgbiho4icz,-11.232935096722745,-151.010035691909,34.27281211970609

4799310_20201_2_0,kgc0en4icz,1.7633601373407357,-122.74377048446874,-44.30102094980879

3119922_20201_2_0,kgf5xo4icz,1.211583019080096,-73.93144428665545,-60.25407047424994

3526422_20201_2_0,kggwvo4icz,0.6151905711918499,-37.378181028006,-50.46821054307131

1971823_20201_2_0,kgm2rn4icz,-0.16025913354496388,-112.44794760916582,-35.395406612548356

4419406_20201_2_0,kgo6bo4icz,-0.9030365427945038,-86.58335231977827,-31.992767426254034

4463337_20201_2_0,kgq84p4icz,14.656022505289654,-23.693423465965793,-110.65992698359648

4535268_20201_2_0,kgqklo4icz,1.593603469543407,-56.17948971449513,-38.325244576640614

2011431_20201_2_0,kgrbrn4icz,1.3369610400518332,-118.07236719657573,-46.9270086661776

2383022_20201_2_0,kgs5co4icz,-0.9880073927407029,-105.93093123221388,-38.86285793758995

4169317_20201_2_0,kgsdno4icz,1.8445769350760057,-73.50549770968405,-51.777073056709725

3567712_20201_2_0,kgt09p4icz,-1.435804025711619,-99.65137451951497,-22.05058774137872

1323707_20201_2_0,kgwg5o4icz,-0.8396728101943444,-86.11176183640492,-30.47619393866225

3037325_20201_2_0,kgz1jp4icz,5.252504807844555,-84.49090673485003,-74.52787945434274

1963379_20201_2_0,kgz8vo4icz,2.6186625739851355,-104.53063885818042,-64.42879953773549

3215120_20201_2_0,kh05mo4icz,1.0157722346310931,-74.82379786456715,-42.066135673101

3723743_20201_2_0,khb3ao4icz,-0.6480593656975535,-132.04747244249685,-44.14921778629619

3197297_20201_2_0,khddnn4icz,0.2052371057841355,-95.47737888185284,-38.671068071678036

3640323_20201_2_0,khfxco4icz,0.11981183485572737,-144.43408686903925,-35.40903374108038

4168767_20201_2_0,khmwro4icz,-2.4340763768505744,-60.042161522233016,9.704830741309408

2709586_20201_2_0,khnqto4icz,0.16442395813792957,-83.3350325219509,-32.75438796282319

5586687_20201_2_0,khpizo4icz,1.0300184503212697,-85.38221980250304,-39.57116856143293

3682725_20201_2_0,khty1o4icz,-1.155444664728882,-62.41570372199908,-14.603219532835908

5052209_20201_2_0,khwfgp4icz,-5.204199727272462,-107.8870497773054,-18.69331181574306

5166534_20201_2_0,khxwxo4icz,172.58502560804214,480.7957148030866,-79.53008793257641

4844588_20201_2_0,ki0ibp4icz,-0.9375310816123409,-112.07458898887711,-72.90602752808613

3888740_20201_2_0,ki4qcp4icz,0.16871953395935435,-71.91122651219024,-35.09499364039644

4792842_20201_2_0,ki4vjn4icz,-1.140111994960573,-86.78922280479645,-23.298365780187297

2131861_20201_2_0,ki95ln4icz,-0.7437678155325357,-106.05949628825684,-51.30006524954469

1803538_20201_2_0,kias7n4icz,-0.7371213062577642,-68.97445334588613,-45.983806069619774

1387054_20201_2_0,kicd5p4icz,1.2447408701405502,-124.04823658363779,-49.39094242412193

5132717_20201_2_0,kicfio4icz,-0.9798206658408992,-49.50709764339538,-23.283654087435465

2856854_20201_2_0,kih75o4icz,-0.5695329776330614,-134.40508716736525,-30.020759388172053

1867657_20201_2_0,kipf7p4icz,0.21028498832164072,-89.47513495862475,-43.283449586332054

2940038_20201_2_0,kitiso4icz,-3.7868548308123193,-82.70767633952298,-66.98543506911483

1576629_20201_2_0,kixdto4icz,1.2582758245892913,-100.41299832978996,-27.86389631451118

3549841_20201_2_0,kj0ypo4icz,-0.7373754687546393,-105.3972724965036,-37.84121828619293

3777623_20201_2_0,kj22jp4icz,-4.666847023352993,-101.70247153967895,-20.261025614229084

1666411_20201_2_0,kj2v8o4icz,0.5005222975949744,-86.97824979516636,-60.18955553438887

5282350_20201_2_0,kj903o4icz,3.0345399252869836,-72.04924114796853,-65.23712341897058

5903935_20201_2_0,kjbntn4icz,-0.3179048968738635,-82.7201242965792,-26.40163025821363

3374190_20201_2_0,kjf54p4icz,-0.40162564506100634,-77.51675351373271,-35.96103363122364

4532605_20201_2_0,kjl53p4icz,1.1013869060135606,-89.87043848845238,-46.378433033736954

4182144_20201_2_0,kjmavo4icz,-1.493970904045078,-109.79659364060834,-34.33588839343395

3347065_20201_2_0,kjrbbo4icz,3.341173318726063,-79.40490571634123,-47.95340550572689

3268184_20201_2_0,kk00zo4icz,-0.4277351914828934,-47.63300432001819,-27.10298478975386

1003622_20201_2_0,kk47fn4icz,-1.251924625789003,-84.58400886290016,-20.318485600036254

1867002_20201_2_0,kkfico4icz,-1.237143697409664,-28.238799379385853,-34.757340235890524

5873597_20201_2_0,kkglvn4icz,4.726428726826569,-82.77261722043389,-60.35928560526759

3441988_20201_2_0,kkkopn4icz,4.148811310352393,-75.76431426185437,-60.8401498088007

4537793_20201_2_0,kkn71p4icz,4.018013418455284,-112.4873265762254,-57.5224274510078

3268069_20201_2_0,kkr07o4icz,-1.1227714939743845,-71.79115265569592,-32.81055054195792

4585990_20201_2_0,kkrdgo4icz,2.0077310685661187,-77.15141750339936,-50.36920311128013

3334403_20201_2_0,kkvb7p4icz,-26.635855422550083,-147.58479987089842,101.33925781869527

1745956_20201_2_0,kl0scp4icz,-23.807711822804336,-79.417540549081,92.22394782902113

1068073_20201_2_0,kl3dpn4icz,-1.098476538399408,-96.86814489427212,-31.814004148864072

4588243_20201_2_0,klaogn4icz,-1.4896308473670532,-130.8346392439846,-35.39497212648865

5110609_20201_2_0,klce1o4icz,3.7587104944679823,-60.635909808535985,-60.6043715094963

4096137_20201_2_0,klcgao4icz,-2.3622607184137876,-140.93183377815964,-22.42448582530845

3795585_20201_2_0,klhcon4icz,-0.8896506237415973,-136.68109950991544,-20.478465770798834

3053874_20201_2_0,kln8vn4icz,1.5157342500941202,-85.27388386310105,-44.330511960619276

5031492_20201_2_0,klu2ko4icz,3.7245537722228397,-102.31293299974988,-50.789789302155455

3346388_20201_2_0,klu9ep4icz,-1.373818241952801,-117.46452690439756,-34.425555565105284

2104508_20201_2_0,klvesn4icz,1.7373021750011637,-92.98955547046381,-53.712323266073

5798647_20201_2_0,km53vo4icz,0.08112340191911786,-100.52506982602736,-42.62880356897472

2426395_20201_2_0,kmal2p4icz,2.716046376038548,-77.72307336932485,-64.10872291236822

4103425_20201_2_0,kmbzwn4icz,1.9000381056110989,-95.4840396090394,-46.314021340182336

2610652_20201_2_0,kmdrqn4icz,-1.983638688817183,-127.3895739531963,-18.001944390258757

4079936_20201_2_0,kmdumn4icz,1.2612710795768902,-99.20908410563322,-50.34632990914636

2092329_20201_2_0,kmgf5p4icz,2.2064930134737626,-54.30629387922579,-50.10307280963352

5116361_20201_2_0,kmq93p4icz,2.876734402908836,-74.88564094990113,-57.62384375183012

3409173_20201_2_0,kmzj4p4icz,1.3614272104260514,-96.81251369170104,-32.38408827380367

1674822_20201_2_0,rq98ro4icz,0.502559299915872,-82.4090079906212,-12.485812819837918

3788518_20201_2_0,kn6ctn4icz,0.7147947529057636,-62.66826957813046,-33.46465767239148

1017933_20201_2_0,knaj7p4icz,12.165299288260032,-99.26915863466027,-114.72945991078652

2108937_20201_2_0,knaz1p4icz,0.39790189931127623,-94.32312164988784,-47.42760525737029

5894201_20201_2_0,knc6bn4icz,-1.388310165028568,-89.89123954179502,-30.811087886210032

3746452_20201_2_0,knfoep4icz,1.1800781900780486,-114.89657019390833,-53.367832770110084

4459173_20201_2_0,knhgzn4icz,-0.2717138941416144,-119.2152686287478,-39.75519931986953

1578602_20201_2_0,knigxo4icz,-1.5617184104147894,-85.72494589156173,-30.41232533581092

2508566_20201_2_0,knkg8o4icz,-1.0417291795126395,-111.76975846674779,-19.714395673649264

1752401_20201_2_0,knnuvn4icz,-0.4210062963169831,-110.39217566378821,-35.809025973428604

5150370_20201_2_0,knpnbp4icz,-2.8419968021693824,-95.55019744623635,-23.914397628466645

1966387_20201_2_0,knq6bo4icz,-1.5711023133217308,-133.47546684844048,-37.53686503436782

4700693_20201_2_0,knt0po4icz,0.519173181403204,-97.15532651464684,-34.52797150951852

2156848_20201_2_0,knutso4icz,0.10808922453871442,-113.28133814365913,-47.26767586687558

3057466_20201_2_0,knwg7o4icz,-0.2679543229802217,-92.8179020560699,-41.6428910971747

1382989_20201_2_0,knygeo4icz,0.2032090158740737,-109.14072765374465,-43.12148713230633

5253451_20201_2_0,ko14ep4icz,-1.0642745834780953,-96.10647305748893,-39.32459550844372

4259436_20201_2_0,ko8dln4icz,-1.1313837230093695,-135.04408742565414,-71.29755801034604

5193240_20201_2_0,ko8ixo4icz,-0.8209952508417719,-93.89807936147969,-30.09645847774719

1001105_20201_2_0,koet6p4icz,-0.14407235220209216,-114.20022344577825,-34.52343304690396

3078185_20201_2_0,kogsbo4icz,0.7252785562685462,-116.51843067418122,-45.820938021879584

2640550_20201_2_0,kolj4p4icz,1.0891368417917338,-64.7238602629464,-66.97739510884352

5523478_20201_2_0,kop3ao4icz,2.062892310006312,-72.57971965686153,-31.62337903819582

2696645_20201_2_0,kow1sn4icz,1.878549960137455,-72.27506341908838,-59.688301903685556

3056814_20201_2_0,koxudp4icz,2.0886114910285705,-102.63422914216639,-58.6379115990424

2645138_20201_2_0,kp09ip4icz,1.365274498206566,-106.77968202213316,-32.7751371060948

4391596_20201_2_0,kp1kxo4icz,-1.8984314163184492,-74.470429237688,-37.80825183720479

3024789_20201_2_0,kp1vto4icz,-2.580235769615051,-73.82250052498051,-26.73216478070394

3358465_20201_2_0,kp3cyo4icz,1.5267285972214588,-88.98034943229166,-50.534417800334566

1218104_20201_2_0,kp5wgp4icz,0.3934009300000536,-119.40612817580944,-46.3610797846688

5249607_20201_2_0,kp8rgp4icz,-0.5262493180904391,-90.79909146352858,-33.34930810784142

1360467_20201_2_0,kp9rko4icz,-0.10736759752818834,-83.30580547677286,-33.3623372139174

2740370_20201_2_0,kpcwpo4icz,-0.3861662138080236,-59.4548905434998,-15.871729988915902

1139600_20201_2_0,kpghep4icz,-0.5576719891136029,-55.273321391302545,-29.315516662033588

2705980_20201_2_0,kpgtfp4icz,5.377760439283126,-72.12426566548203,-39.978410717424055

1627472_20201_2_0,kpi9jp4icz,0.9669039691238468,-42.457656861120284,-42.11318585535098

3416641_20201_2_0,kpinan4icz,-0.042274499773104116,-158.90785725014322,-45.56371694087484

1569145_20201_2_0,kpkxco4icz,0.6013370375223853,-91.13043777769545,-51.876001682363935

2824659_20201_2_0,kpkygp4icz,1.334729702469163,-92.87966141510759,-50.60297087861821

4587988_20201_2_0,kpm29o4icz,1.1330432333808942,-121.06425995577746,-41.829044195243014

6020624_20201_2_0,kpnson4icz,1.9114046050595521,-104.65140435349514,-36.84601760180037

1391756_20201_2_0,kps3fp4icz,2.1932526028599466,-61.50580308411659,-53.423152030087124

5676720_20201_2_0,kpsrln4icz,-0.08850756362212744,-102.58308690485322,-49.959446019944465

1255280_20201_2_0,kpw39n4icz,-1.3099660245949916,-114.14279965101784,-18.96579371298256

3155797_20201_2_0,kpz92o4icz,-1.6746584625915553,-92.35240999334471,-26.235711385430406

4759405_20201_2_0,kq06en4icz,11.04964804251838,-74.03685838010603,-89.86060572940625

1369119_20201_2_0,kq2bun4icz,-0.3976241792841392,-66.67461031709564,-40.19475877562482

5707247_20201_2_0,kq2n9o4icz,-1.165010182028476,-91.38970217562792,-18.976004559723336

2711032_20201_2_0,kq45dp4icz,-1.6268307114966931,-117.55115980317657,-16.379008276029282

2768837_20201_2_0,kqd0yo4icz,0.1382246839029918,-108.78331839037318,-31.00625687582358

4138704_20201_2_0,kqfhjp4icz,-1.5330720184581978,-87.02107965520239,-46.32603348298386

3405671_20201_2_0,kqhmwn4icz,-0.17919176235021222,-63.0447048081063,-49.59704712641957

3016169_20201_2_0,kqhpxo4icz,-0.10955012617729006,-63.50115281978594,-41.21043830770718

5106820_20201_2_0,kqk42o4icz,-1.210541427898702,-92.73980360695376,-42.33624603154408

4777567_20201_2_0,kqki4p4icz,-2.0591208694380763,-70.58895974283342,-24.273169333409612

2181290_20201_2_0,kqm4bn4icz,1.1655687103846197,-104.81618683175779,-36.7116484197404
 46%|████▌     | 373/811 [20:12<22:11,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 374/811 [20:15<21:19,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 375/811 [20:19<24:01,  3.31s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▋     | 376/811 [20:26<32:21,  4.46s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▋     | 377/811 [20:29<28:52,  3.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 378/811 [20:33<29:17,  4.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 379/811 [20:36<26:52,  3.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 380/811 [20:40<26:40,  3.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 381/811 [20:43<24:36,  3.43s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 382/811 [20:46<23:18,  3.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 383/811 [20:48<22:04,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 384/811 [20:51<21:31,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 385/811 [20:54<21:06,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 386/811 [20:58<23:12,  3.28s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 387/811 [21:01<22:08,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 388/811 [21:04<21:26,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 389/811 [21:06<21:07,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 390/811 [21:10<21:25,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 391/811 [21:12<20:33,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 392/811 [21:15<20:25,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 393/811 [21:19<21:21,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▊     | 394/811 [21:21<20:24,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▊     | 395/811 [21:24<20:15,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 396/811 [21:27<20:24,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 397/811 [21:30<20:43,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 398/811 [21:33<20:21,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 399/811 [21:37<22:20,  3.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 400/811 [21:40<21:23,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 401/811 [21:43<21:26,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|████▉     | 402/811 [21:49<27:36,  4.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|████▉     | 403/811 [21:52<25:12,  3.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|████▉     | 404/811 [21:55<24:08,  3.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|████▉     | 405/811 [21:58<22:52,  3.38s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 406/811 [22:01<21:51,  3.24s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 407/811 [22:04<21:20,  3.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 408/811 [22:07<21:00,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 409/811 [22:10<20:52,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 410/811 [22:14<20:54,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 411/811 [22:19<26:24,  3.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 412/811 [22:22<24:06,  3.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 413/811 [22:25<22:08,  3.34s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 414/811 [22:28<21:15,  3.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 415/811 [22:31<20:42,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████▏    | 416/811 [22:34<20:05,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████▏    | 417/811 [22:37<19:40,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 418/811 [22:40<19:33,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 419/811 [22:42<19:02,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 420/811 [22:45<19:35,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 421/811 [22:48<19:29,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 422/811 [22:51<19:27,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 423/811 [22:55<20:11,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 424/811 [22:58<19:31,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 425/811 [23:02<22:42,  3.53s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 426/811 [23:05<21:18,  3.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 427/811 [23:08<20:28,  3.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 428/811 [23:11<20:01,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 429/811 [23:14<19:42,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 430/811 [23:17<19:04,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 431/811 [23:20<19:00,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 432/811 [23:23<18:22,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 433/811 [23:26<18:49,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▎    | 434/811 [23:28<18:16,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▎    | 435/811 [23:31<18:00,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 436/811 [23:34<18:13,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 437/811 [23:37<17:41,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 438/811 [23:40<17:48,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 439/811 [23:43<17:31,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 440/811 [23:45<17:29,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 441/811 [23:48<17:21,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▍    | 442/811 [23:51<17:18,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▍    | 443/811 [23:54<17:52,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▍    | 444/811 [23:57<17:19,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▍    | 445/811 [24:00<17:18,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▍    | 446/811 [24:03<17:13,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▌    | 447/811 [24:05<17:02,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▌    | 448/811 [24:08<16:44,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▌    | 449/811 [24:11<16:45,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▌    | 450/811 [24:14<16:51,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 451/811 [24:17<17:05,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 452/811 [24:20<17:19,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 453/811 [24:23<17:45,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 454/811 [24:25<17:16,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 455/811 [24:29<17:46,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 456/811 [24:32<17:36,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▋    | 457/811 [24:35<17:57,  3.04s/it] 56%|█████▋    | 458/811 [24:38<17:44,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 459/811 [24:41<17:40,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 460/811 [24:44<17:21,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 461/811 [24:46<16:59,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 462/811 [24:51<19:18,  3.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 463/811 [24:54<18:39,  3.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 464/811 [24:57<18:09,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 465/811 [25:00<19:04,  3.31s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 466/811 [25:03<18:22,  3.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 467/811 [25:07<19:40,  3.43s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 468/811 [25:13<24:00,  4.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 469/811 [25:16<21:25,  3.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 470/811 [25:19<20:08,  3.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 471/811 [25:22<19:11,  3.39s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 472/811 [25:25<18:07,  3.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 473/811 [25:28<17:40,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 474/811 [25:31<17:05,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▊    | 475/811 [25:33<16:45,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▊    | 476/811 [25:37<16:50,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 477/811 [25:39<16:26,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 478/811 [25:42<16:16,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 479/811 [25:49<22:38,  4.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 480/811 [25:52<20:39,  3.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 481/811 [25:55<19:14,  3.50s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 482/811 [25:58<18:35,  3.39s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|█████▉    | 483/811 [26:01<17:35,  3.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|█████▉    | 484/811 [26:04<16:47,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|█████▉    | 485/811 [26:07<16:52,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|█████▉    | 486/811 [26:10<17:11,  3.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|██████    | 487/811 [26:13<17:26,  3.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|██████    | 488/811 [26:16<16:51,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|██████    | 489/811 [26:19<16:32,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|██████    | 490/811 [26:22<16:04,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 491/811 [26:25<15:48,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 492/811 [26:28<15:48,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 493/811 [26:41<31:30,  5.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 494/811 [26:44<26:26,  5.00s/it] 61%|██████    | 495/811 [26:47<24:13,  4.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 496/811 [26:50<21:33,  4.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████▏   | 497/811 [26:53<20:00,  3.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████▏   | 498/811 [26:57<18:53,  3.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 499/811 [26:59<17:33,  3.38s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 500/811 [27:03<18:14,  3.52s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 501/811 [27:07<18:46,  3.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 502/811 [27:10<17:37,  3.42s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 503/811 [27:16<21:44,  4.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 504/811 [27:20<21:15,  4.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 505/811 [27:23<19:24,  3.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 506/811 [27:26<18:11,  3.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 507/811 [27:29<17:03,  3.37s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 508/811 [27:32<16:42,  3.31s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 509/811 [27:35<16:04,  3.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 510/811 [27:38<15:47,  3.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 511/811 [27:41<15:17,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 512/811 [27:44<15:01,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 513/811 [27:49<18:23,  3.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 514/811 [27:53<18:02,  3.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▎   | 515/811 [27:56<17:00,  3.45s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▎   | 516/811 [27:59<16:45,  3.41s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▎   | 517/811 [28:02<16:02,  3.27s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 518/811 [28:05<15:31,  3.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 519/811 [28:08<15:18,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 520/811 [28:13<17:50,  3.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 521/811 [28:16<16:42,  3.46s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 522/811 [28:19<15:48,  3.28s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 523/811 [28:22<15:41,  3.27s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▍   | 524/811 [28:25<15:09,  3.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▍   | 525/811 [28:28<14:37,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▍   | 526/811 [28:31<14:32,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▍   | 527/811 [28:34<14:11,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▌   | 528/811 [28:37<13:53,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▌   | 529/811 [28:40<13:51,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▌   | 530/811 [28:43<13:50,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▌   | 531/811 [28:45<13:33,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 532/811 [28:49<14:06,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 533/811 [28:52<14:19,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 534/811 [28:56<15:04,  3.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 535/811 [28:59<14:36,  3.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 536/811 [29:02<14:32,  3.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 537/811 [29:05<14:03,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▋   | 538/811 [29:07<13:39,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▋   | 539/811 [29:20<27:09,  5.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 540/811 [29:24<23:14,  5.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 541/811 [29:26<20:01,  4.45s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 542/811 [29:30<18:20,  4.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 543/811 [29:35<20:27,  4.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 544/811 [29:38<18:07,  4.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 545/811 [29:41<16:51,  3.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 546/811 [29:44<15:21,  3.48s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 547/811 [29:47<14:32,  3.31s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 548/811 [29:50<14:03,  3.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 549/811 [29:53<13:41,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 550/811 [29:56<13:16,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 551/811 [29:59<13:04,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 552/811 [30:02<12:48,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 553/811 [30:04<12:35,  2.93s/it] 68%|██████▊   | 554/811 [30:07<12:35,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 555/811 [30:10<12:37,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▊   | 556/811 [30:13<12:23,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▊   | 557/811 [30:16<12:30,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 558/811 [30:19<12:36,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 559/811 [30:23<13:37,  3.24s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 560/811 [30:36<25:56,  6.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 561/811 [30:39<21:30,  5.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 562/811 [30:42<18:33,  4.47s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 563/811 [30:55<28:40,  6.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|██████▉   | 564/811 [30:57<23:35,  5.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|██████▉   | 565/811 [31:01<20:24,  4.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|██████▉   | 566/811 [31:24<42:18, 10.36s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|██████▉   | 567/811 [31:29<36:05,  8.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|███████   | 568/811 [31:32<28:54,  7.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|███████   | 569/811 [31:35<23:35,  5.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|███████   | 570/811 [31:38<20:25,  5.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|███████   | 571/811 [31:41<17:40,  4.42s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 572/811 [31:44<15:36,  3.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 573/811 [31:47<14:31,  3.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 574/811 [31:50<13:31,  3.42s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 575/811 [31:53<13:00,  3.31s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 576/811 [31:56<12:43,  3.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 577/811 [31:59<12:23,  3.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████▏  | 578/811 [32:02<12:00,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████▏  | 579/811 [32:05<11:38,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 580/811 [32:08<11:54,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 581/811 [32:11<11:37,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 582/811 [32:14<11:26,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 583/811 [32:17<11:44,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 584/811 [32:20<12:03,  3.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 585/811 [32:23<11:43,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 586/811 [32:29<14:37,  3.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 587/811 [32:33<14:41,  3.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 588/811 [32:36<13:33,  3.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 589/811 [32:40<13:47,  3.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 590/811 [32:43<12:44,  3.46s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 591/811 [32:46<12:46,  3.49s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 592/811 [32:54<17:12,  4.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 593/811 [32:57<15:10,  4.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 594/811 [33:00<13:43,  3.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 595/811 [33:03<12:43,  3.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 596/811 [33:06<12:07,  3.38s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▎  | 597/811 [33:09<11:21,  3.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▎  | 598/811 [33:12<11:51,  3.34s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 599/811 [33:15<11:22,  3.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 600/811 [33:18<11:18,  3.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 601/811 [33:21<11:07,  3.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 602/811 [33:24<10:52,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 603/811 [33:27<10:38,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 604/811 [33:30<10:15,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▍  | 605/811 [33:34<11:14,  3.28s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▍  | 606/811 [33:37<10:46,  3.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▍  | 607/811 [33:41<11:12,  3.30s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▍  | 608/811 [33:44<10:45,  3.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▌  | 609/811 [33:46<10:09,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▌  | 610/811 [33:49<09:57,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▌  | 611/811 [33:52<09:42,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▌  | 612/811 [33:56<11:12,  3.38s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 613/811 [34:00<11:09,  3.38s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 614/811 [34:03<10:46,  3.28s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 615/811 [34:06<10:51,  3.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 616/811 [34:09<10:19,  3.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 617/811 [34:12<10:07,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 618/811 [34:17<11:28,  3.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▋  | 619/811 [34:19<10:34,  3.30s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▋  | 620/811 [34:22<10:02,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 621/811 [34:25<09:56,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 622/811 [34:28<10:01,  3.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 623/811 [34:32<09:53,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 624/811 [34:38<12:34,  4.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 625/811 [34:41<11:31,  3.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 626/811 [34:44<10:51,  3.52s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 627/811 [34:47<10:10,  3.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 628/811 [34:50<10:28,  3.44s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 629/811 [34:53<09:58,  3.29s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 630/811 [34:56<09:28,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 631/811 [34:59<09:11,  3.07s/it] 78%|███████▊  | 632/811 [35:02<08:58,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 633/811 [35:05<08:54,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 634/811 [35:08<08:48,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 635/811 [35:11<08:51,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 636/811 [35:14<08:40,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▊  | 637/811 [35:16<08:22,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▊  | 638/811 [35:19<08:17,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 639/811 [35:22<08:14,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 640/811 [35:25<08:27,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 641/811 [35:28<08:19,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 642/811 [35:31<08:19,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 643/811 [35:34<08:24,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 644/811 [35:37<08:21,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|███████▉  | 645/811 [35:40<08:09,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|███████▉  | 646/811 [35:43<07:54,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|███████▉  | 647/811 [35:46<07:47,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|███████▉  | 648/811 [35:48<07:35,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 649/811 [35:52<07:56,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 650/811 [35:55<07:56,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 651/811 [35:57<07:41,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 652/811 [36:00<07:48,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 653/811 [36:03<07:46,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 654/811 [36:06<07:48,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).

4500786_20201_2_0,kqngdp4icz,-3.5547337096395903,-84.22805046550744,-35.00014371830582

5820665_20201_2_0,kqs77o4icz,-0.244806502828707,-65.07376711289243,-49.59072998507459

4709196_20201_2_0,kqup5o4icz,-0.38775387746289247,-76.68126777527198,-40.231473585450956

5826897_20201_2_0,kqx7go4icz,-2.599817036018976,-82.4378521319129,-36.57787511978624

1352700_20201_2_0,kr1tbo4icz,-2.1175004612468324,-102.84828439456723,-27.940959677525214

3764144_20201_2_0,kr2t0p4icz,-1.0504779409425167,-101.78104630047682,-36.21678999027962

1344314_20201_2_0,kr341p4icz,8.79997375591215,-80.26726719152722,-84.04620937863034

1902743_20201_2_0,kr667o4icz,-0.25488148943826255,-87.29904409651448,-23.030670532975265

3989375_20201_2_0,kraato4icz,0.8534431592083869,-85.63365907498039,-47.35241143703679

4129655_20201_2_0,krfe8o4icz,0.7483634909526437,-85.11735128106505,-40.351124762919255

3531131_20201_2_0,krkd7p4icz,1.9265748662027335,-112.3395144972599,-45.079132484576746

5902289_20201_2_0,krnfgo4icz,2.4088085943635735,-135.2603975223219,-48.43118659300069

4232868_20201_2_0,krnumo4icz,-0.30884891260965913,-115.23431522237573,-48.50681995376313

5426548_20201_2_0,krsoro4icz,4.00889602279714,-62.978588862921185,-52.85161152795027

4166353_20201_2_0,krstco4icz,1.016199970348956,-82.65353714045216,-39.479690608841196

2843389_20201_2_0,kru31o4icz,1.4979068947157697,-68.20293755714272,-58.134205427925096

4476258_20201_2_0,kruwfo4icz,0.3528379128260529,-71.7518120993897,-27.646130354393932

3216166_20201_2_0,krvxpo4icz,-2.0981039285153993,-104.83358228462899,-19.20385743687217

6009057_20201_2_0,ks09xo4icz,0.5740979002707571,-80.2906094393733,-26.818350063415863

4694373_20201_2_0,ks2q9n4icz,0.7369891151907203,-109.8204937373726,-42.08351868108696

2808453_20201_2_0,ks3jnn4icz,-5.861613237139976,-72.69304648099671,-3.518894812959445

3420612_20201_2_0,ks68vn4icz,0.32402044223135207,-113.68691647565237,-42.69418865460291

4050693_20201_2_0,ksbseo4icz,-3.443403039411168,-107.94506455425909,-14.843143813382397

2262055_20201_2_0,kshi4p4icz,-0.6274321403701781,-84.3559918618723,-32.301940632276725

2413899_20201_2_0,ksiw9o4icz,0.08378352958910662,-129.11476291042564,-29.88710170951856

6000240_20201_2_0,ksj8on4icz,129.915255449447,306.59885938685613,-228.98457375438318

5623252_20201_2_0,ksjxwo4icz,-2.305552922259201,-134.58918824079834,-39.99650124952424

5453536_20201_2_0,kso53o4icz,-5.373321693861545,-123.99882254323688,-8.620253095981724

1395574_20201_2_0,ksp71o4icz,-2.4358977447705854,-139.60707176619258,-7.809597075758376

2624443_20201_2_0,kstbyo4icz,-0.27295618318677844,-41.95951576870792,-36.891095973017514

3248959_20201_2_0,ksuhdn4icz,-11.990419728527163,-98.27401672338456,25.6864504849

4882967_20201_2_0,ksvnqn4icz,-2.39043014651056,-192.6889338083383,-20.273124542231074

4892615_20201_2_0,ksxloo4icz,-5.912933754815238,-119.39409345306157,-12.678632328571084

2291992_20201_2_0,kta0un4icz,5.104307028133918,-83.12881228802084,-49.472512075545495

3471295_20201_2_0,ydvv5o4icz,0.7497432127979974,-116.08439716469826,-44.81496415052976

5257529_20201_2_0,ktf2in4icz,1.7558075227256562,-95.1010347277666,-53.25561198901737

3286771_20201_2_0,ktgfjp4icz,2.8614709999978687,-98.12528945751129,-40.14942460419243

4886723_20201_2_0,ktiu9p4icz,-0.6128408932244649,-87.00998750030217,-33.318346905789326

5602198_20201_2_0,ktkzwn4icz,-0.7711673756561873,-103.37430352295871,-21.43946879279231

2231150_20201_2_0,ktlf2o4icz,-2.9738521803161415,-114.50073571932103,-29.921916694925045

4567221_20201_2_0,ktopmo4icz,-2.472514434278321,-95.17896650274687,-4.580160372768347

3715900_20201_2_0,ktss0o4icz,0.276174719578532,-70.33789752895797,-43.76880672941029

3206280_20201_2_0,ktwqgp4icz,0.7708681039660868,-111.46034606278491,-26.285291811080057

3207474_20201_2_0,ktxaap4icz,-0.27315225130148163,-91.23132537174538,-41.64920551432674

4355042_20201_2_0,ktyiyo4icz,-1.1712545841141038,-123.40661014096742,-22.80561822837217

5232570_20201_2_0,ktz5nn4icz,-0.34672698877290414,-88.36917869345265,-33.127299111902175

5057425_20201_2_0,ku1oqo4icz,0.5480412109697824,-91.920945937234,-16.743377737170036

2723053_20201_2_0,ku1ugo4icz,3.0984812416211067,-86.20417499479544,-53.765328586147064

5166795_20201_2_0,ku2hun4icz,-0.8890423894045342,-119.26114726874232,-33.73979299090311

3544114_20201_2_0,ku3lrn4icz,-0.707886566043622,-105.04405399510173,-18.826833200713665

1571024_20201_2_0,kuaujp4icz,12.846779890719938,-47.63845322316388,266.74759848492056

2553569_20201_2_0,kubcan4icz,-0.9974598353498115,-82.25366598793335,-29.299538574503288

1339648_20201_2_0,kuexwn4icz,-5.8410564207722215,-119.02898939348077,14.391093916846984

4068270_20201_2_0,kuf3fo4icz,1.3990103028650154,-63.32487367762826,-28.939414725920813

4484418_20201_2_0,kugubn4icz,2.672478962332194,-148.1380606770994,-55.63493845110267

2690361_20201_2_0,kugveo4icz,-0.632250992893132,-104.97691070350965,-28.913073473187495

5976847_20201_2_0,kukx7o4icz,-0.29315621574590794,-103.75715835261653,-33.335703292409335

2654110_20201_2_0,kurteo4icz,-1.9599722190930968,-111.046180540129,-17.485564995292336

3941141_20201_2_0,kuwuyo4icz,-0.9967876601796908,-101.0882656854119,-30.984137644110007

1266652_20201_2_0,kv1v2p4icz,-0.8905263805414686,-100.9397622857102,-27.109071753637323

3845626_20201_2_0,kv2zwn4icz,2.0809584254294364,-99.85068397469723,-34.65511729117078

2205625_20201_2_0,kvc5fo4icz,-0.20204260298390428,-109.47036462241576,-46.107457685855465

4627558_20201_2_0,kvf2ap4icz,-0.23985696452949967,-101.97995722217368,-27.883565211063228

4797135_20201_2_0,kvhs5p4icz,0.8316777097983602,-108.78243984338198,-46.095787766657224

5952711_20201_2_0,kvhuro4icz,-0.8110047171929939,-98.93346962957165,-56.197014707678065

2748040_20201_2_0,kvj4rn4icz,2.644687431560592,-67.78000228880956,-34.49636415620324

1633720_20201_2_0,kvj5fp4icz,0.7312062567473813,-124.54733228056008,-42.06396490075804

5106307_20201_2_0,kvk9in4icz,-3.2711420924276133,-105.25256617291365,-19.808954525510288

2668352_20201_2_0,kvmmpo4icz,3.169856048909966,-79.94798871464283,-68.12467519347175

2461451_20201_2_0,kvo1vo4icz,1.223190087569126,-83.41452349248559,-57.927503630020695

4994496_20201_2_0,eyljdo4icz,-0.3928285033904489,-108.14634899759105,-31.012043108248193

3883293_20201_2_0,kw0eko4icz,0.32947721565315014,-101.99351238548056,-38.26833521211573

1819229_20201_2_0,kw68io4icz,3.1674634280298717,-97.06923907703015,-54.53204158731482

2374650_20201_2_0,kwcf0o4icz,-3.857423571940531,-83.92128066153455,-8.8225862876792

2569519_20201_2_0,kwfhgp4icz,0.43817805341453986,-70.96981992697741,-39.29992264720576

1263326_20201_2_0,kwg16o4icz,-1.8694495906194322,-83.1681871389637,-12.627905174085996

3797183_20201_2_0,kwlaxo4icz,-1.346820917467064,-63.12909994491292,-24.081988061673343

4601299_20201_2_0,kwlcqo4icz,0.656648177251727,-87.82669890327116,-29.146451455232466

3012983_20201_2_0,kwm38o4icz,0.7747939712851073,-130.65684753596776,-67.61047060200792

4543983_20201_2_0,kwnpfp4icz,0.32962509242657534,-75.80849573512921,-50.0130623281712

1865832_20201_2_0,kwo7zo4icz,0.873067745067901,-54.19998943281206,-61.63811791786584

2314971_20201_2_0,kwqono4icz,3.3097715008483126,-72.92016706530893,-53.71926540724613

4519841_20201_2_0,kx33ip4icz,-2.2558031575582866,-116.84423437333555,-23.08657972978922

1167806_20201_2_0,kx6dln4icz,2.9139103805752784,-77.56938509011945,-47.75732390175452

3452265_20201_2_0,kx75jn4icz,-6.416834729984722,-107.78224930140124,-25.412870653170174

2710034_20201_2_0,kx769p4icz,4.2311102130881135,-41.42918592493197,-74.61204878074658

4911570_20201_2_0,kxcoso4icz,17.445873222633615,-33.00003719799929,-121.06572331675093

1806494_20201_2_0,kxdlqn4icz,-2.351803383103971,-83.93740599296879,-42.795120799934494

1198390_20201_2_0,kxew0p4icz,0.8174802869107983,-89.63816182891918,-42.04546731884635

4067867_20201_2_0,kxfbco4icz,-1.6193713418684228,-113.89730955083681,-46.768300310191464

5977697_20201_2_0,kxlo5p4icz,-1.0099943916006329,-139.24395736809262,-26.893941896642957

4265242_20201_2_0,kxp5gn4icz,0.6689617526742244,-91.21828220897473,-33.26410630638995

1367574_20201_2_0,kxp9uo4icz,-0.6949071722838003,-88.21610905327915,-29.836301923884236

2537316_20201_2_0,kxpnan4icz,1.3744784609342824,-86.76970266401474,-51.72058774463102

4354245_20201_2_0,kxt5ep4icz,0.09133292722984333,-119.125260383518,-36.39360354225951

4936504_20201_2_0,kxuf0o4icz,-1.7001964369330755,-62.6857535685846,-27.829802442245168

5150337_20201_2_0,kxvw4o4icz,-0.9071669245117545,-76.51715167467898,-36.142030947845896

1553221_20201_2_0,kxw9tn4icz,-3.3998471160742407,-81.0885857128298,-8.638356130622071

3572785_20201_2_0,ky1a7o4icz,1.797656944155944,-102.56873154551738,-59.54980854278753

2351716_20201_2_0,ky34in4icz,1.3441173884450062,-101.54053061279512,-51.176849449784854

2119731_20201_2_0,ky5cdn4icz,-1.7648915658140545,-120.43724682018728,-24.291341209134714

5738039_20201_2_0,ky5p4p4icz,-2.136664873954312,-50.96729205766087,-22.980150345490486

5212268_20201_2_0,kydc4o4icz,2.7996484652758222,-82.13208837231159,-43.3025645422487

1192804_20201_2_0,kygh0o4icz,3.1886671263908557,-70.42251855959842,-58.80781009895898

4232729_20201_2_0,kyi4go4icz,3.461724507814203,-107.04141067022852,-42.87260575933446

2374057_20201_2_0,kynqwo4icz,0.0404176173164597,-51.870615382541246,-47.98496625099412

5427619_20201_2_0,kynu9p4icz,-2.2286786716639497,-54.86603718112889,-37.334604608503554

5421447_20201_2_0,kypirn4icz,-1.0491238100923177,-98.66538698919379,-19.860911915224293

4949339_20201_2_0,kyscho4icz,-2.5379260712574787,-77.48248245741613,-22.093903621823486

3098965_20201_2_0,kyuxuo4icz,0.789582951884186,-108.82851335404081,-28.055694183591044

2909386_20201_2_0,kz6pdp4icz,-0.9113350824126926,-77.05695154791547,-33.57615472526648

5639842_20201_2_0,kzdd9o4icz,2.323409713711233,-96.41983264532897,-39.96605077641627

2801077_20201_2_0,kzmpjn4icz,2.7401953781482242,-110.28306318320381,-48.92453776113834

4168564_20201_2_0,kznehp4icz,-14.681292477486844,-135.50537484626523,50.640984519290086

2506318_20201_2_0,kzyyoo4icz,-1.976194447936759,-101.71237496301279,-5.644855476083066

1178885_20201_2_0,kzz86o4icz,-0.6820818451179769,-126.34269671594123,-33.808258043330326

5633619_20201_2_0,kzzefp4icz,-0.34516188783807694,-100.32310240357165,-21.335907523171272

2941165_20201_2_0,l01l5o4icz,3.6958032296361787,-72.6536567501862,-57.484732561621726

4628238_20201_2_0,l027qn4icz,-2.6181785189395184,-79.30213062416962,-17.872090737292396

5033357_20201_2_0,l05b5o4icz,0.7259947450000114,-92.36425986758911,-22.045072816733963

3436026_20201_2_0,l07uep4icz,-2.3402500977963685,-117.8646608261212,-36.31145997846288

3968960_20201_2_0,l07zho4icz,-0.6760822336880282,-86.21003941286517,-38.23504392327084

5705140_20201_2_0,l088rn4icz,-1.0324942538538475,-122.14558630011064,-22.116552859697563

3744247_20201_2_0,l09c0p4icz,-1.6358841911493773,-87.15988778791225,-31.526143299882676

3537568_20201_2_0,l09sen4icz,-2.2753342259957976,-73.48384600202078,-33.04268093156746

2171143_20201_2_0,l0gb8p4icz,2.3116696974082345,-78.20140038480503,-54.89377768045212

2940340_20201_2_0,l0gqco4icz,1.2070744769690964,-96.26281057862903,-29.527890189179445

1050046_20201_2_0,l0hnbp4icz,2.8744645463533143,-125.56188805503268,-41.934180433763686

2636366_20201_2_0,l0hw8n4icz,2.519788150118709,-90.66510930439082,-50.04183447724125

2238796_20201_2_0,l0lmjo4icz,-1.2401477796075884,-86.82591559107018,-24.20209777708827

4955885_20201_2_0,l0pijp4icz,-1.507125840357638,-95.79265276525373,-36.13390359087751

5419212_20201_2_0,l0pzap4icz,3.701695734402328,-51.89738116334331,-57.2356220929274

3749105_20201_2_0,l0ujmn4icz,-2.2303405356819295,-115.8740839569412,-17.653582516506475

4390609_20201_2_0,l0vo7o4icz,-1.6404697759520632,-79.64132974002106,-37.12866048071085

2886401_20201_2_0,l0wnso4icz,0.7001341608196104,-75.29748503850493,-64.75126463988084

5139572_20201_2_0,l0xbtn4icz,2.241962388232791,-98.5799674122041,-48.99960876525479

2374092_20201_2_0,l0yplo4icz,0.4807422443529833,-96.08584444685096,-45.90334307101668

4065325_20201_2_0,l15a4o4icz,-1.0733897202830056,-92.17448495459155,-22.50760049840831

3269976_20201_2_0,l17snn4icz,1.2311457152459488,-77.7268390634303,-47.68278959120843

5262967_20201_2_0,l1blio4icz,-0.6433917151193322,-85.5478475198322,-25.239653489872836

2505402_20201_2_0,l1lhdo4icz,6.086961859188251,-56.42341816291386,-74.68927631750353

4274694_20201_2_0,l1vico4icz,-0.6136093982284252,-122.86916745387737,-24.797970173786354

1406637_20201_2_0,l22whp4icz,-1.4819250217286002,-70.10887996042413,-30.957073878789487

3113487_20201_2_0,l273to4icz,-0.8239756079199329,-76.17320918685937,-31.033036904904733

4098603_20201_2_0,l27iso4icz,2.0485583362536035,-121.34496378359992,-39.463916657991774

1817155_20201_2_0,l2abho4icz,0.35413518771576924,-115.87893705855964,-44.19073531047616

5275752_20201_2_0,l2dthn4icz,2.466803180190556,-96.81551317268077,-48.03557668103335

1266530_20201_2_0,l2dwip4icz,-1.0991741179156471,-97.54226538554815,-28.639015902092467

4556315_20201_2_0,l2irqn4icz,4.344671579980559,-79.80206113564262,-56.08052786128465

4807936_20201_2_0,l2iuon4icz,-2.2156254635662154,-73.59105219710588,-45.5936459798845

1135688_20201_2_0,l2r9uo4icz,-0.13930189345291727,-118.11742727778318,-21.696278530301967

2460655_20201_2_0,l2symo4icz,-0.7517204926476116,-90.55207609999621,-21.03942358323259

4027513_20201_2_0,l2v1en4icz,0.8647167774527804,-111.96767130550771,-46.62232298355684

1181940_20201_2_0,l2vs9o4icz,1.133813864686337,-88.30049189237377,-47.77633882240309

2208514_20201_2_0,l35djn4icz,2.378135459959862,-66.79198701448433,-49.057308346680315

5792510_20201_2_0,l35dpn4icz,0.9645963485989206,-133.82044527028515,-35.10712652941318

4379515_20201_2_0,l38fuo4icz,0.23022985741364652,-56.02260933454551,-44.19427659328704

1068239_20201_2_0,l390cp4icz,2.5912875987931545,-131.97650841675562,-33.918887080911276

3124583_20201_2_0,l3bmso4icz,-1.7947515645752585,-79.00840135255982,-28.196531871826338

3283683_20201_2_0,l3c4gp4icz,-0.8789579204119433,-79.18776834542703,-14.334663605120099

5857115_20201_2_0,l3ep6o4icz,-1.4653524106297942,-100.51625680300674,-21.50690458795384

1783277_20201_2_0,l3fvwn4icz,2.132847631737929,-103.04449563138357,-58.480776742252516

4218933_20201_2_0,l3hdgn4icz,1.9583810217779205,-96.61883790214046,-53.537679305790476

5105117_20201_2_0,l3ixnn4icz,-10.562922887159727,-43.88601006053915,47.15799351951875

1519292_20201_2_0,l3npso4icz,1.3426742848005822,-59.256411239712975,-41.35690764813363

1115457_20201_2_0,l3q9ap4icz,-2.9680258622659226,-123.03741888182324,5.423775747450549

5956485_20201_2_0,l3qqfn4icz,-3.679477100567607,-101.7882303648162,-1.4172702923744538

1175086_20201_2_0,l3qren4icz,-2.661145378733676,-91.38039639396226,-9.423658893516361

5870004_20201_2_0,l3u1ap4icz,0.5764793414879337,-118.34719654603654,-41.362123472923315

1132696_20201_2_0,l3z4sn4icz,-0.4303155963720504,-85.12042932550133,-29.571018384350793

3366678_20201_2_0,l40r4p4icz,-1.3364490387998658,-112.36022303628113,-20.57572857482458

3836262_20201_2_0,l46xln4icz,-0.3742849151882078,-117.11798399897316,-30.592210098966433

2083391_20201_2_0,l49dso4icz,-8.091266887570836,-114.16012720737686,5.573146250607948

5159488_20201_2_0,l4ae4o4icz,2.0599015554112206,-142.425829544657,-61.472602069369344

5594811_20201_2_0,l4ndcp4icz,-1.7673767425788278,-111.96506892462784,-20.243566107371265

5998497_20201_2_0,l4nvzo4icz,0.24196728729331757,-100.80693400250374,-35.47094840794931

2743213_20201_2_0,l4psko4icz,3.5621797002099367,-114.18398588296674,-70.70275911002258

3511101_20201_2_0,l4s29p4icz,2.9871730606550297,-70.20556834038564,-39.09793265699207

5701309_20201_2_0,l4x57o4icz,174.6196579072836,521.870750800291,-72.07359689274337

5034178_20201_2_0,l4yc8p4icz,-1.7638651449409564,-73.96375074013051,-24.235871021052773

2383709_20201_2_0,l4zp5o4icz,-4.477310179624617,-124.87150743821192,-18.689647705059556

5393510_20201_2_0,l4zwmo4icz,-0.7981382037184711,-86.33314725138445,-29.924163799061674

2563322_20201_2_0,l51fno4icz,0.9294334699300986,-79.27254075951578,-48.51163262040487

1093393_20201_2_0,l5muip4icz,0.41712709142752363,-83.70076881875494,-53.296747879133875

5962228_20201_2_0,l5p4go4icz,-0.22682933760312507,-68.52241637996337,-44.674979254787914

1494056_20201_2_0,l5pd5p4icz,-1.7081674387606243,-106.86330310160125,-49.40546379715826

2459147_20201_2_0,l5r89p4icz,-4.8714175025556905,-101.68394051090476,-3.022860938202058

4991311_20201_2_0,l60egp4icz,1.029364060550799,-62.70267625655333,-35.55364230323988

2520034_20201_2_0,l622cp4icz,1.286871911744638,-70.09370813394207,-61.40624553609156

3619347_20201_2_0,l6bf3o4icz,0.5103793146929609,-92.5186741415286,-42.839710471780734

1273026_20201_2_0,l6eeto4icz,-0.6296899973118497,-96.13602807122001,-31.043949341361085

4191321_20201_2_0,l6kklo4icz,1.0199857645790766,-73.51721835899414,-30.922413803306043

6004418_20201_2_0,l6lzeo4icz,-4.052668555989888,-69.64593561482494,-6.038185641949525

4664310_20201_2_0,l6mcho4icz,-0.1492811187582356,-82.73908415506449,-38.75803107296359

4977455_20201_2_0,l6mhip4icz,-0.17268802085457235,-107.57065121643112,-29.346782933922427

5112782_20201_2_0,l6sb7o4icz,11.619011056823156,-118.49539257876239,-109.57969426117064

4624537_20201_2_0,l6ubvn4icz,0.5507269744608441,-104.19376755793178,-48.08682126756912

2148964_20201_2_0,l6y1cp4icz,-1.8788004746520284,-95.58407009818015,-21.90891214018191

5564156_20201_2_0,l6y4ko4icz,9.62495898613841,-48.2014399347442,-72.1014112504165

4848810_20201_2_0,l6y4qn4icz,0.49218727297186937,-119.18946465720387,-34.3123291813462

4760185_20201_2_0,l6zm7p4icz,1.7813245608386674,-108.88853880285365,-42.83010011175685

2454375_20201_2_0,l705cn4icz,-1.3588451356867266,-82.07537994569282,-21.807391123133044

1380269_20201_2_0,l7063p4icz,0.8393071378488784,-97.40632705685508,-32.16039816311607

5543957_20201_2_0,l76gqn4icz,-1.1738111677193144,-109.7474575885607,-29.86374102462031

4510587_20201_2_0,l76rko4icz,0.27350013995626615,-89.57618366351434,-38.88223193862737

1118799_20201_2_0,l79abo4icz,0.9495870829094016,-88.08843275669676,-34.498791752648

1333957_20201_2_0,l7b2gn4icz,3.7570649331405437,-85.18658633184765,-76.17549740493472

4271133_20201_2_0,l7bkdp4icz,-2.08763856130724,-89.67246235396101,-22.570497164357448

5766791_20201_2_0,l7c16o4icz,-0.33213670857273087,-94.12032015442531,-41.2989055808458

5501674_20201_2_0,l7conn4icz,2.9857625527214835,-76.66029581805265,-50.9305676355802

4909353_20201_2_0,l7fnto4icz,0.7102260463962847,-81.02988946204141,-31.04472395073195

2096826_20201_2_0,l7fspo4icz,-5.908141921133073,-75.76320950565139,6.451380755158823

5716652_20201_2_0,l7jono4icz,-1.1713403688912924,-81.53670685853453,-26.8950696619102

5689738_20201_2_0,l7l0bo4icz,2.6497949703795887,-87.6858256363061,-63.36783244661356

5753227_20201_2_0,l7nbwn4icz,-1.4732835307729173,-76.09911336180974,-42.13992657170955

1247444_20201_2_0,l7ouin4icz,-5.377404220045464,-110.99910456155716,336.0726351078812

1512139_20201_2_0,l7qejo4icz,-0.37772329177461295,-117.84852517150873,-40.010583721238504

2371466_20201_2_0,l7yudo4icz,-0.14509179253351576,-107.70241654521172,-39.89744268378004

2689122_20201_2_0,l82acp4icz,0.2910659746332589,-94.1565299896821,-42.62396397134836

1740388_20201_2_0,l8baon4icz,0.2500221983591175,-137.87729558005333,-39.02588652723023

4807651_20201_2_0,l8evqo4icz,0.9675711204144403,-48.421819941399775,-43.06925252321875

2225247_20201_2_0,l8j4gp4icz,-1.3761314790639232,-70.44334703962915,-30.085712564184718

2702911_20201_2_0,l8koro4icz,1.1420406019739164,-89.49431974966944,-47.184738030982956

5169055_20201_2_0,l8qg7n4icz,0.5751491027051718,-92.34850842550114,-35.90906383897881

4409941_20201_2_0,l8vknn4icz,-3.37704194666733,-145.33392690692364,-6.291541921164608

3575960_20201_2_0,l8vuhn4icz,-0.922880218743821,-113.2261152787353,-29.941745729007692

3092097_20201_2_0,l8w4xn4icz,-2.1136703615557413,-78.04150098831758,-9.738154539212971

4542742_20201_2_0,l91gsn4icz,1.543997897943102,-119.13787830237013,-21.44929910968861

3694201_20201_2_0,l9223o4icz,-3.28433477035585,-121.62471582601802,-22.22997666269758

4576265_20201_2_0,l94jjp4icz,0.6254328013320013,-82.82468593116488,-26.099374117645922

5495249_20201_2_0,l9627o4icz,-1.6229812778519197,-112.51590348676763,-23.703529133526985

4469916_20201_2_0,l98pkn4icz,0.17208935880815135,-89.47501910049291,-45.54418182726087

2724842_20201_2_0,l9dn8o4icz,3.6266785698079693,-85.68920946633358,-54.2644507855083

3741689_20201_2_0,l9fogo4icz,0.9820658206556895,-107.66679643185489,-47.15168933433162

4787231_20201_2_0,l9guwo4icz,-1.40042399348652,-99.35964137431662,-35.52350204754033

4440137_20201_2_0,l9hpmo4icz,-3.0242569930813765,-92.28534533204234,-8.76048949188349

2257295_20201_2_0,l9l8xn4icz,1.7686308227090333,-68.08231923696565,-43.31118408251908

3175936_20201_2_0,l9mbso4icz,0.24568142320126057,-93.15074313541268,-28.157924361459308

1753778_20201_2_0,l9rcqn4icz,-3.15111792368424,-73.60918039435629,-21.93766997798734

1968229_20201_2_0,l9s16p4icz,-2.837558203628705,-85.72752818125156,-5.836492682143756

2082093_20201_2_0,l9wn3o4icz,-0.9649597029160051,-103.28899814485797,-31.574011904005488

5966267_20201_2_0,l9xoto4icz,1.00556932480478,-102.10337515614964,-39.51395881282109

6009148_20201_2_0,l9zpuo4icz,-2.270161101008693,-83.52092014290767,-21.143581947042037

2748961_20201_2_0,la27ip4icz,-3.3540116400053264,-77.40348956519475,-20.660377127251934

5413432_20201_2_0,la2mxo4icz,-0.8934322125058355,-37.746240999505005,-35.55439521797361

3941182_20201_2_0,la5xxo4icz,-3.581560852567635,-79.06278616923359,-31.349193006862407

2543282_20201_2_0,la8qrn4icz,1.1799581388323999,-112.10425051808974,-53.174006795477794

2127905_20201_2_0,laah3p4icz,0.9659821746156143,-97.39469032862235,-44.052508654207145

2590056_20201_2_0,lab09n4icz,-1.4351761741647908,-145.1744430886946,-35.1097240862007

3158506_20201_2_0,laj75o4icz,0.22108145247948616,-86.48779512698616,-28.08713814373762

4265373_20201_2_0,laj7xo4icz,0.09992398815392523,-56.21101034221752,-49.20203879197085

2447872_20201_2_0,lanrxo4icz,1.383415041118656,-65.41545451241129,-53.530673944301896

1201023_20201_2_0,latorn4icz,-0.8722584659725942,-124.35962813708693,-43.925122061816765

4705629_20201_2_0,lawxwo4icz,-1.2786572253920383,-90.47881958393671,-27.61411156849826

3805531_20201_2_0,laxhmo4icz,-0.9433027161075568,-67.71159236492977,-28.8211442804253

2694624_20201_2_0,lb8wtn4icz,0.16700842978918898,-89.54006566773623,-28.942144495743648

2046587_20201_2_0,lbedpn4icz,-0.9492929218121832,-99.08061974394141,-29.47606760879256

4177089_20201_2_0,lbeg8p4icz,-2.2697441611599185,-77.95080527222001,-41.92537966566539

4905963_20201_2_0,lbf9ln4icz,-1.7474082767865189,-65.83710179251688,-37.469390603534265

4732520_20201_2_0,lbkpqn4icz,1.0602668509626318,-122.2640265559624,-41.44271284643547

2866571_20201_2_0,lbljon4icz,-1.9129500729655677,-149.8716803484779,-42.72999682539846

4369098_20201_2_0,lbnuyo4icz,-1.1346514774722078,-64.13206132030709,-53.21228006320072

4374047_20201_2_0,lbpcco4icz,-3.1002682365629286,-120.94985916479095,-20.389777746273097

2660339_20201_2_0,lbrfgo4icz,2.2185027246841087,-92.42697308750888,-35.22800312890061

1657130_20201_2_0,lbsy8p4icz,1.420441659589668,-74.48790523693305,-35.268091460590554

2152504_20201_2_0,lbuoto4icz,-0.9812748156428599,-94.3170496547757,-23.07901574519107

4834764_20201_2_0,lbwipn4icz,1.8901583049494186,-98.13949874222862,-52.1764048937884

5529132_20201_2_0,lc0zln4icz,0.20696424493597745,-112.8245637333224,-36.84801826310047

4078520_20201_2_0,lc1ajp4icz,-2.552221143292295,-31.086714564182444,-25.488600081791418

2963315_20201_2_0,lc323p4icz,-2.0116894579599287,-106.57752058048672,-31.282253436382632

2780777_20201_2_0,lc8o9n4icz,-1.9103426252128914,-89.29974648062358,-38.80271038339875

1706733_20201_2_0,lca0nn4icz,0.3417321952017436,-100.14711208356422,-35.8362029832449

2194730_20201_2_0,lcaedp4icz,2.036620135056147,-95.7446168794383,-52.405946243275224

5733719_20201_2_0,lceado4icz,0.023632142692363387,-96.15125376247141,-13.21594065302854

2287505_20201_2_0,lco5ao4icz,-115.97211973335189,417.8842524472776,721.3980679240351

5745076_20201_2_0,lcq1jn4icz,-0.35177859803109573,-103.34242946525086,-42.13260940755674

2396686_20201_2_0,lcq6ro4icz,0.39833724900713435,-110.63706590817861,-51.06960274525859

2283644_20201_2_0,lcux7p4icz,-2.544396615947749,-115.87530293280304,-24.113594517155605

4484724_20201_2_0,lcwc8p4icz,-2.423261860530052,-103.6036286766948,-37.42178605819868

2831281_20201_2_0,lczeco4icz,-1.1159796462687537,-88.02167007243028,-27.692334040001285

4398491_20201_2_0,ld14wn4icz,0.417111392271504,-134.14840312983395,-34.05007049473261

2778920_20201_2_0,ld34wn4icz,-2.3085628724215512,-92.39919565818684,-30.720978982604407
 81%|████████  | 655/811 [36:09<07:34,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 656/811 [36:12<07:33,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 657/811 [36:15<07:25,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 658/811 [36:18<07:15,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████▏ | 659/811 [36:20<07:15,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████▏ | 660/811 [36:23<07:06,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 661/811 [36:26<07:02,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 662/811 [36:29<07:01,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 663/811 [36:32<07:01,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 664/811 [36:35<07:02,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 665/811 [36:38<07:09,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 666/811 [36:41<07:17,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 667/811 [36:44<07:09,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 668/811 [36:47<07:11,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 669/811 [36:50<07:01,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 670/811 [36:53<06:50,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 671/811 [36:55<06:45,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 672/811 [36:59<07:22,  3.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 673/811 [37:06<09:25,  4.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 674/811 [37:08<08:26,  3.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 675/811 [37:11<07:49,  3.45s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 676/811 [37:19<10:50,  4.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 677/811 [37:22<09:20,  4.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▎ | 678/811 [37:25<08:22,  3.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▎ | 679/811 [37:28<07:54,  3.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 680/811 [37:31<07:33,  3.46s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 681/811 [37:34<07:01,  3.24s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 682/811 [37:37<06:45,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 683/811 [37:40<06:30,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 684/811 [37:43<06:30,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 685/811 [37:46<06:36,  3.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▍ | 686/811 [37:49<06:32,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▍ | 687/811 [37:52<06:12,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▍ | 688/811 [37:55<06:00,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▍ | 689/811 [37:58<06:10,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▌ | 690/811 [38:01<06:05,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▌ | 691/811 [38:04<06:00,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▌ | 692/811 [38:07<05:59,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▌ | 693/811 [38:10<05:49,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 694/811 [38:13<05:44,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 695/811 [38:16<05:46,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 696/811 [38:19<05:41,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 697/811 [38:22<05:52,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 698/811 [38:25<05:57,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 699/811 [38:28<05:40,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▋ | 700/811 [38:31<05:41,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▋ | 701/811 [38:34<05:34,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 702/811 [38:37<05:22,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 703/811 [38:40<05:14,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 704/811 [38:43<05:07,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 705/811 [38:46<05:07,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 706/811 [38:48<04:59,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 707/811 [38:51<05:00,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 708/811 [38:54<05:02,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 709/811 [38:57<05:04,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 710/811 [39:00<05:00,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 711/811 [39:03<04:52,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 712/811 [39:06<04:48,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 713/811 [39:09<04:46,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 714/811 [39:12<04:40,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 715/811 [39:15<04:34,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 716/811 [39:18<04:35,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 717/811 [39:20<04:34,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▊ | 718/811 [39:23<04:22,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▊ | 719/811 [39:27<04:51,  3.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 720/811 [39:30<04:37,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 721/811 [39:33<04:29,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 722/811 [39:36<04:22,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 723/811 [39:38<04:15,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 724/811 [39:41<04:13,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 725/811 [39:44<04:13,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|████████▉ | 726/811 [39:47<04:03,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|████████▉ | 727/811 [39:50<03:56,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|████████▉ | 728/811 [39:52<03:52,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|████████▉ | 729/811 [39:56<03:55,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 730/811 [39:59<03:56,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 731/811 [40:01<03:53,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 732/811 [40:05<03:55,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 733/811 [40:08<04:02,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 734/811 [40:11<03:51,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 735/811 [40:14<03:47,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 736/811 [40:17<03:44,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 737/811 [40:24<05:07,  4.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 738/811 [40:29<05:25,  4.45s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 739/811 [40:32<04:51,  4.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 740/811 [40:35<04:27,  3.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████▏| 741/811 [40:38<04:10,  3.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████▏| 742/811 [40:42<04:05,  3.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 743/811 [40:44<03:46,  3.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 744/811 [40:48<03:38,  3.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 745/811 [40:50<03:26,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 746/811 [40:53<03:20,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 747/811 [40:56<03:17,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 748/811 [41:00<03:17,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 749/811 [41:02<03:07,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 750/811 [41:05<03:00,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 751/811 [41:08<02:57,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 752/811 [41:11<02:51,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 753/811 [41:14<02:46,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 754/811 [41:17<02:45,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 755/811 [41:22<03:29,  3.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 756/811 [41:25<03:07,  3.41s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 757/811 [41:28<02:55,  3.24s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 758/811 [41:31<02:45,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▎| 759/811 [41:34<02:36,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▎| 760/811 [41:36<02:31,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 761/811 [41:39<02:27,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 762/811 [41:42<02:26,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 763/811 [41:45<02:21,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 764/811 [41:48<02:16,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 765/811 [41:51<02:14,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 766/811 [41:54<02:08,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▍| 767/811 [41:57<02:07,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▍| 768/811 [42:00<02:05,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▍| 769/811 [42:03<02:03,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▍| 770/811 [42:05<01:59,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▌| 771/811 [42:08<01:55,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▌| 772/811 [42:11<01:54,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▌| 773/811 [42:14<01:49,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▌| 774/811 [42:27<03:37,  5.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 775/811 [42:30<03:01,  5.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 776/811 [42:36<03:02,  5.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 777/811 [42:38<02:31,  4.44s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 778/811 [42:42<02:16,  4.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 779/811 [42:45<02:00,  3.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 780/811 [42:48<01:51,  3.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▋| 781/811 [42:51<01:43,  3.44s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▋| 782/811 [42:54<01:37,  3.35s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 783/811 [42:57<01:30,  3.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 784/811 [43:00<01:24,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 785/811 [43:03<01:20,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 786/811 [43:06<01:16,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 787/811 [43:09<01:12,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 788/811 [43:12<01:08,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 789/811 [43:15<01:06,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 790/811 [43:18<01:01,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 791/811 [43:21<00:59,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 792/811 [43:23<00:55,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 793/811 [43:26<00:53,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 794/811 [43:29<00:49,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 795/811 [43:34<00:54,  3.42s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 796/811 [43:38<00:55,  3.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 797/811 [43:41<00:49,  3.53s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 798/811 [43:44<00:43,  3.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▊| 799/811 [43:47<00:38,  3.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▊| 800/811 [43:50<00:34,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 801/811 [43:56<00:41,  4.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 802/811 [43:59<00:33,  3.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 803/811 [44:02<00:28,  3.52s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 804/811 [44:05<00:23,  3.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 805/811 [44:08<00:19,  3.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 806/811 [44:12<00:16,  3.28s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|█████████▉| 807/811 [44:15<00:12,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|█████████▉| 808/811 [44:18<00:09,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|█████████▉| 809/811 [44:21<00:06,  3.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|█████████▉| 810/811 [44:24<00:03,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|██████████| 811/811 [44:28<00:00,  3.29s/it]100%|██████████| 811/811 [44:28<00:00,  3.29s/it]

4571457_20201_2_0,ld3u7p4icz,2.999128620646749,-85.99262072586438,-54.03040900427129

5969452_20201_2_0,ld5bgn4icz,1.7970375492946458,-118.15787229905149,-37.28499222756557

2114761_20201_2_0,ld6zoo4icz,-1.8246879553184496,-67.72856885786746,-23.30044320128505

3213664_20201_2_0,ld8a9o4icz,1.5639537759920088,-55.05343267882225,-31.79324537749082

2725565_20201_2_0,lda4bn4icz,-0.3737487049035373,-101.1711155259637,-38.78788490815404

1971407_20201_2_0,ldaz3p4icz,-0.7619234103471227,-90.30627302909656,-24.75465879553775

5503245_20201_2_0,lddyqn4icz,1.4733351750097894,-64.8521078351506,-49.437797060540404

2674353_20201_2_0,ldgydp4icz,-5.893212223412968,-101.30029936863843,2.2874136832391514

5102535_20201_2_0,ldlmap4icz,-11.003335470328357,-67.57478251531813,21.21381494749636

4263841_20201_2_0,ldmvqo4icz,0.6970426589683434,-57.44701874035218,-28.14781278605345

2129443_20201_2_0,lds8vo4icz,1.4926814305323244,-81.33912279619409,-52.411220384495586

1508523_20201_2_0,ldx5ln4icz,0.06395290499096479,-115.00613464114551,-30.93683552735422

4510868_20201_2_0,le5jep4icz,0.5474710976686175,-90.20797623572722,-52.53024714173675

4508447_20201_2_0,le5zdp4icz,2.301293805434452,-91.0560905612885,-43.3214746291185

2405751_20201_2_0,le6p7p4icz,0.5750222437729022,-60.18762471261215,-41.52282220474309

4688093_20201_2_0,le9jno4icz,1.8355296029446393,-64.7677025304294,-37.2272460726943

2061822_20201_2_0,lehc6o4icz,4.261689989954547,-117.42655430216553,-37.889772927681484

2648798_20201_2_0,lehe1o4icz,-1.4633184861616135,-95.54980331420867,-39.83595953768173

4015631_20201_2_0,plethp4icz,1.264076067740138,-88.44784762893156,-34.12420417937146

5031222_20201_2_0,lek7hp4icz,-3.8770196291136756,-128.3774810920477,-30.200636601036763

2325455_20201_2_0,lemxzo4icz,-1.3161189818496444,-122.37863298552236,-35.500939078027784

2402142_20201_2_0,lequ6o4icz,0.6988538852635408,-57.78974753373461,-40.62573921659413

4768082_20201_2_0,ler6ro4icz,-3.5989388692259894,-123.554136334676,-20.394428739863173

1676408_20201_2_0,lervwn4icz,-0.540490841816982,-126.71549857984346,-45.99694487593146

5664523_20201_2_0,lety8p4icz,1.1114055307342001,-127.18316233384746,-35.34022995137144

2752183_20201_2_0,leu0to4icz,-14.722748682189348,-172.74020791798557,61.88129640861976

4491820_20201_2_0,lew4vn4icz,0.6842981203541254,-61.19665471466999,-47.41861427611754

3018043_20201_2_0,lex73p4icz,-0.4612348045765018,-51.10883878676111,-37.11277469252212

4903672_20201_2_0,lf04lo4icz,1.0873903928228903,-115.17701536982938,-60.262271717373025

4400607_20201_2_0,uzj8xo4icz,-0.15822527734546207,-122.28106046339866,-24.065935049035446

1427843_20201_2_0,lf2tvo4icz,-0.25410845265635185,-70.46750117963691,-39.247944960080716

1935624_20201_2_0,lf6jgn4icz,-3.7189429366706257,-107.62343501355826,-7.068502389897915

5463125_20201_2_0,lf8dpn4icz,-0.232672781996345,-114.68893840522827,-24.184627510628516

2000846_20201_2_0,lf982o4icz,-0.5405438169174402,-67.76639342032436,-31.03304917535651

5119693_20201_2_0,lfgebp4icz,0.9617821488674237,-61.97187788758666,-36.68813957298512

3449586_20201_2_0,lfhhon4icz,1.754897238170146,-105.82768570520571,-41.58184382031007

4352537_20201_2_0,lfjnmn4icz,-4.260528774642698,-100.03309020207067,0.1688557142898901

3387019_20201_2_0,lfmjbo4icz,-0.09409478179478054,-70.33880320095255,-42.02182727784336

3240882_20201_2_0,lfrv5o4icz,0.40118486909894513,-84.93583911357285,-31.037804662654523

1103558_20201_2_0,lfspco4icz,1.8257937134202598,-77.61946631224265,-49.72595126010667

2450019_20201_2_0,lg3ibp4icz,-1.9271662390404969,-83.46090918970697,-42.01536700573817

3502097_20201_2_0,lg4lkn4icz,-0.49720336442175567,-105.32869689047706,-25.103556332929912

3434734_20201_2_0,lg89fo4icz,-1.0066091622881588,-157.79689344004868,-30.71447942093087

1061290_20201_2_0,lgch7o4icz,0.32527718334541106,-96.37371784167766,-42.68866692931124

5682820_20201_2_0,lgecqn4icz,0.8876216204306058,-93.43512781909487,-39.29124535112027

5355974_20201_2_0,lgedwo4icz,-1.9278200184808247,-102.33051397105774,-30.639154290629676

2139703_20201_2_0,lgeq9o4icz,-0.7040161658630623,-109.98680770375952,-8.927235535293633

4402599_20201_2_0,lghquo4icz,-0.7628792756498514,-102.97462318710711,-32.98562573304537

5015331_20201_2_0,lgirho4icz,2.831974040904798,-68.18462560488314,-43.154861528436356

3246977_20201_2_0,lgj42o4icz,-0.351649308765411,-95.75231642200453,-30.3368439648102

4692153_20201_2_0,je0q8p4icz,1.5967330527592087,-68.78641500613702,-86.1495422131088

4889479_20201_2_0,lgofko4icz,1.9973535898615953,-70.43884279137419,-48.686063123830905

5625214_20201_2_0,lgupln4icz,4.561293892362943,-81.36344743783425,-69.90166158924646

3644358_20201_2_0,lgy5rn4icz,1.2879180957117373,-97.65784440978717,-50.85207146454725

1944411_20201_2_0,lgz2ko4icz,-1.2670166910072216,-102.55043121456933,-46.926520472244505

2587790_20201_2_0,lgzkgn4icz,-0.9449447270450073,-103.27188124994791,-37.294545578100696

5516569_20201_2_0,lh2jin4icz,-0.06568467439251893,-104.25561158539875,-23.85860724936748

2193828_20201_2_0,lh4isn4icz,0.06869900438434859,-118.03458148026567,-42.65646011344995

3973593_20201_2_0,lh4shp4icz,1.39830746743318,-104.48507332299448,-44.33505928563693

2779004_20201_2_0,lh9xfo4icz,-3.6149745301462333,-87.83389757931116,-15.688708795331706

5708553_20201_2_0,lhakso4icz,-0.6896837435044856,-109.83260311917692,-15.299294135030195

4891703_20201_2_0,lhdmun4icz,-5.240531339943113,-91.65196625542262,-10.109549248478459

5657041_20201_2_0,lhdrfp4icz,0.6440315975261856,-74.54928240243325,-38.43823603481876

4361545_20201_2_0,lheowo4icz,3.596794432858728,-87.2506680740295,-72.82213975569894

5866401_20201_2_0,lhf0rn4icz,-1.603607256431686,-122.75118629187642,-18.502096208412524

4255026_20201_2_0,lhinbp4icz,8.226069032445075,-63.99186277253733,-52.06252941713187

4810698_20201_2_0,oh8vho4icz,-1.4052924476082391,-24.1105625386611,-36.74939503593613

5376198_20201_2_0,lhmopn4icz,7.760948925234706,-90.89524629339061,-78.35425580480016

5463630_20201_2_0,lhofip4icz,0.4772110111175654,-98.7670617529406,-36.861141918431855

3055158_20201_2_0,lhqjbo4icz,0.42155283697911683,-78.380739274051,-37.678920540277915

3042653_20201_2_0,lhtqgo4icz,-50.78584152150141,-147.85738160278913,308.57045933118525

3654259_20201_2_0,lhvggn4icz,0.8708519612824579,-95.22312436620638,-62.20523864052353

3339330_20201_2_0,lhwskn4icz,1.0474867066399394,-87.7398549368121,-43.418413170288005

1305171_20201_2_0,lhxk7o4icz,0.17714194678815823,-108.97921069047163,-25.10904104641888

4421233_20201_2_0,li1dfp4icz,-13.65474587046384,-139.5636107999297,51.322025171738716

4185525_20201_2_0,li3dln4icz,-1.7833683340006643,-113.26061389815686,-35.050149971980545

4634902_20201_2_0,li3e0p4icz,-3.218743524530811,-81.67375213424015,-19.753609965032837

3745324_20201_2_0,li3fnn4icz,0.5019529088655065,-62.680857677451684,-28.60980660649186

3129260_20201_2_0,li5yro4icz,4.235942220082021,-96.78990433376117,-83.43746653192854

4520140_20201_2_0,liaw5p4icz,0.7915425455928489,-95.25298308803877,-42.391633191698915

2132303_20201_2_0,licz3p4icz,0.9921662967736833,-90.03088943582739,-32.28904401555177

2861830_20201_2_0,lifiao4icz,4.032056348472628,-44.52487792035521,-48.21066576171722

2992883_20201_2_0,lii9en4icz,-2.9768788652116682,-155.45951003311066,-10.003292123346597

2722470_20201_2_0,lilwko4icz,-0.7601487238864539,-111.06835443384955,-38.05225230276538

3882587_20201_2_0,lin7ln4icz,0.26658582825080346,-120.27775531146227,-46.199913037730894

5763271_20201_2_0,lisiin4icz,-1.120427879239356,-127.91715057166931,-21.2360061319487

3340463_20201_2_0,lizf2p4icz,3.9339378891794547,-95.17800856616867,-48.82580652107961

1541620_20201_2_0,1ngbno4icz,-0.09158847200168979,-115.54089543589726,-21.8359678440236

1127159_20201_2_0,lj6ubn4icz,-0.5963301953447714,-79.53641430806027,-31.596738883537597

2372348_20201_2_0,lj72pn4icz,-0.2788959139643403,-105.19639180835225,-32.7507436739007

4060607_20201_2_0,lj8cdn4icz,-1.5703577124702,-69.72860875042409,-33.14353280119967

3414972_20201_2_0,lj8lwo4icz,2.892707725458107,-108.54472180104861,-58.1743764612886

3062376_20201_2_0,ljbnmo4icz,3.6839583459480223,-119.13933278937148,-50.16324121685068

4543928_20201_2_0,ljj4bo4icz,1.958335346689659,-115.06572131678402,-27.125345384189444

1252418_20201_2_0,ljkftn4icz,-2.180433861305628,-102.53467299926251,-17.03117853053932

3373278_20201_2_0,ljnfyn4icz,1.4113883550714585,-122.20571335554723,-24.771033511716155

1348744_20201_2_0,ljtgcn4icz,2.0526584616433268,-119.73750216840838,-31.591610775242614

1438441_20201_2_0,ljwp8o4icz,0.03652200186209519,-104.24967831641865,-24.365149643385877

3708574_20201_2_0,ljwruo4icz,4.368447825562455,-86.67643983209939,-59.27036590321357

1965604_20201_2_0,lk3ben4icz,1.6637738397020145,-120.02845054550889,-62.81958990786575

2682418_20201_2_0,lk3gbp4icz,-0.760777299091076,-64.1175426958153,-36.46842419994039

6008890_20201_2_0,lk3u3p4icz,-0.8015269416647375,-74.31292208381262,-32.589761661520825

3167065_20201_2_0,lk52ap4icz,-0.8018425319949717,-82.95915957110768,-36.121069366473094

1142331_20201_2_0,lk58yo4icz,0.7201328917972142,-57.104345408154416,-51.420028063034465

2165269_20201_2_0,lk5e2o4icz,-1.0045820070124591,-113.59216954507627,-38.3761477684877

1784038_20201_2_0,lk8mdp4icz,-0.7866884156159466,-132.793913015691,-39.09435688585609

1076245_20201_2_0,lkc32p4icz,2.272613998245358,-85.0453642839355,-54.177799256090154

2410080_20201_2_0,lkczjp4icz,-0.48240770461097465,-101.12394600380685,-36.29656327892303

2628423_20201_2_0,lkds7o4icz,-1.181766562498943,-87.08773927562271,-31.901656527375806

3743809_20201_2_0,lkdy2p4icz,-0.17426044464294674,-88.3681850165039,-54.24808365235529

5785737_20201_2_0,lkk12p4icz,1.3176924279059512,-63.65744202876999,-46.772477202412944

4441123_20201_2_0,lkl7sn4icz,-1.5729018280710383,-73.8879829498303,-41.83555587411742

2196342_20201_2_0,lkomjo4icz,-0.00476020270130541,-148.0985795202875,-44.92892384559562

5503719_20201_2_0,lkpeln4icz,-0.2275502202932091,-54.08465821453041,-36.447815455518196

5668054_20201_2_0,lks4tn4icz,0.3759436365509689,-66.53867942226185,-21.428095154172382

2785323_20201_2_0,lksf8n4icz,-8.743710959310306,-99.87946129369402,10.737966488738948

1462784_20201_2_0,lktugp4icz,3.8299238265096043,-69.89272963393867,-51.09300801412458

3924333_20201_2_0,lkuxyo4icz,-0.803910173965856,-57.30021138810355,-10.571596860450171

5481340_20201_2_0,lkw4kp4icz,4.059928806909208,-169.2905159228579,-57.84249321714144

5295327_20201_2_0,ll2f1p4icz,1.9455187281869886,-49.155776068041604,-49.860880459453455

1704487_20201_2_0,ll7bnn4icz,-3.4462935630594305,-72.18089542771611,-21.159010324799425

2770135_20201_2_0,llc3ln4icz,1.2604245781415726,-127.70415116201136,-49.62250706337743

1559900_20201_2_0,llfa6n4icz,-0.8562047755282157,-101.66033588497638,-25.892312341136048

4067506_20201_2_0,llowkn4icz,-4.439970132828665,-123.248269162045,-28.776604154651068

1024316_20201_2_0,llpu9o4icz,-0.5725326384790498,-62.162028164793156,-39.28131787536637

5676303_20201_2_0,llv0ep4icz,-0.0627663775631905,-104.4811261979296,-35.55634576229134

2814711_20201_2_0,llyruo4icz,1.628062668441603,-69.1083557426698,-33.4884302277472

1519720_20201_2_0,lm0y9n4icz,4.170458438782644,-67.45794047828423,-65.21915284208508

5630366_20201_2_0,lm3m5n4icz,-1.805031529294219,-106.34941812034273,-19.304069682985016

4574049_20201_2_0,lm6iao4icz,-3.066481440285507,-113.62734500093657,-17.08921971068318

1665030_20201_2_0,lm7tvo4icz,2.1644298562206967,-69.14071694749424,-54.866709618988054

2553766_20201_2_0,lmc7nn4icz,-0.08373463783659044,-94.3701405381,-43.62021357041323

2101122_20201_2_0,lmh8dp4icz,2.548407450289168,-93.20288777682799,-37.995877565484975

3684306_20201_2_0,lmhado4icz,-1.3297181428196267,-87.89241310915261,-60.65988035277692

1335857_20201_2_0,lmiesn4icz,-2.10634724783158,-130.5028906385736,-22.701933650062358

5993272_20201_2_0,lmkiap4icz,1.0720416291518677,-127.04135526803111,-37.56277262584567

1630346_20201_2_0,lml88n4icz,-4.7878145405332875,-141.04950690321283,-27.982181638918092

2983189_20201_2_0,lmnaon4icz,0.7394212148214334,-106.75363166314864,-46.62940206893386

4081999_20201_2_0,lmndkn4icz,-2.1888910272777338,-117.81337191734806,-50.23785182028254

5489200_20201_2_0,lmqbgp4icz,0.6098482692508843,-72.10355029795267,-33.47620343951935

3173540_20201_2_0,lmu4mn4icz,0.7644961250181546,-114.4717959217829,-29.37469598691625

3568465_20201_2_0,ln406p4icz,1.529856740459056,-84.61922935523654,-35.11572610830824

3878981_20201_2_0,ln56no4icz,-2.6512055463393356,-131.78804456720354,-27.244280480393442

3461529_20201_2_0,ln5j3p4icz,-0.32547347295433415,-65.48819694228456,-35.09308989460004

4687073_20201_2_0,ln70lo4icz,0.5586387707497181,-67.19602625156796,-27.098054701660658

5751705_20201_2_0,lna4gp4icz,-1.9315632884588207,-61.02588646900318,-49.749968285660216

1108000_20201_2_0,lnahrn4icz,0.5803675428581252,-111.31090142196825,-34.72604826017002

2726129_20201_2_0,lndisn4icz,1.9564682836157987,-114.54442595950891,-56.18433512919884

4146056_20201_2_0,lnfk9n4icz,1.2244671576098833,-91.01861078414302,-40.3832904627906

3694267_20201_2_0,lnnx3o4icz,-0.4191150909652986,-69.63446878769611,-31.789956640817636

4449531_20201_2_0,lnr7gn4icz,2.247388753381646,-105.22659791638074,-51.801419714881206

3743327_20201_2_0,lnsxno4icz,0.0920807520112216,-91.92816262040972,-28.3399937835094

4093257_20201_2_0,lnx3pn4icz,-4.289107572723955,-122.9474432060344,-13.738789935591

2838410_20201_2_0,lny40p4icz,1.9959408815854154,-62.35206353584189,-39.18041402089166

4080249_20201_2_0,lnzj2p4icz,-0.6735411116978404,-93.1542351039522,-24.650998739430904

3403225_20201_2_0,lo5cro4icz,2.43302778579005,-99.40134294698726,-44.90255812424225

5980398_20201_2_0,loba0p4icz,-0.725591574309925,-94.11923049389927,-33.33372397708297

4082462_20201_2_0,loc49n4icz,1.0545176159203113,-85.45735895080944,-77.2948192943665

4924914_20201_2_0,lol8ip4icz,1.8339422285029847,-66.85920180519898,-34.14968652555554

3233719_20201_2_0,lolilo4icz,2.8953079618895043,-59.43358664816941,-59.79477033212265

1763678_20201_2_0,lontjn4icz,-1.3028963296338083,-55.35916348499893,-37.92744537068897

2235342_20201_2_0,lowg3p4icz,0.0521342918719355,-64.63532443903506,-36.776689874507895

4676120_20201_2_0,lowqvn4icz,3.734545709742823,-68.73313854682436,-62.57001949260689

4411418_20201_2_0,lp0q9n4icz,1.1369705663706338,-113.51680567438402,-42.980263112841655

2007318_20201_2_0,lp0rko4icz,2.8101322976035443,-98.21705635241935,-33.66062781111461

1737679_20201_2_0,lp1hpn4icz,1.4885242793865774,-81.7955961494238,-21.484348922729836

2347668_20201_2_0,lp53fo4icz,-0.9176080930103272,-85.79477441654657,-34.8635175887904

2192561_20201_2_0,lp73cn4icz,9.574526695572953,-116.33034510630748,-109.74025809973261

4834354_20201_2_0,lpffno4icz,11.315300714976468,-68.15431554250941,-85.98050047669649

5049424_20201_2_0,lpfgco4icz,1.996448192619528,-113.832455171953,-40.38316585611017

3371610_20201_2_0,lpfjon4icz,-0.8238655039628461,-78.40536590706654,-22.352207945608185

3405491_20201_2_0,9si4no4icz,0.23304027426081336,-98.89530169380802,-30.05275733740858

1311733_20201_2_0,lpka6p4icz,0.048270211471378,-87.94985651731787,-41.3775722544317

3126823_20201_2_0,lpnydp4icz,-0.426832328253382,-113.4221659624101,-39.71686848410836

2729849_20201_2_0,lpplqo4icz,-0.14489678480364102,-59.336380591172286,-42.99233626149838

5323567_20201_2_0,lpr8ko4icz,-0.8822227730832847,-92.58294949245459,-28.496691680512782

1448605_20201_2_0,lpvbno4icz,-3.6133104544427104,-94.28023852726164,-26.587880322489696

5434202_20201_2_0,lpvqro4icz,-0.983216607915961,-123.78509765253472,-32.84173778313669

3747817_20201_2_0,lpx59o4icz,-1.5724404310459918,-97.21693706994321,-16.16531800212283

3368194_20201_2_0,lpxfxn4icz,2.1234020631571746,-94.9297528176026,-42.57453999396911

4356504_20201_2_0,lpza6o4icz,-1.0514568187307303,-95.4505728985342,-26.816283988980473

1248869_20201_2_0,lpzoin4icz,3.257502174315464,-70.30257654498692,-43.574167200234925

4332706_20201_2_0,lq0acp4icz,-0.36743760203457854,-85.80844025048975,-37.488772663989394

4931524_20201_2_0,lq1dco4icz,2.641061401942116,-60.699472946188735,-48.574698806073314

5404377_20201_2_0,lq24lo4icz,-0.1666757436695496,-117.69405040240784,-48.71720662565676

2117938_20201_2_0,lq3huo4icz,0.8760631493254759,-90.07532895729622,-52.06564714959431

5030339_20201_2_0,lq4b6p4icz,1.8830811029725938,-110.80103173825398,-54.57388775405492

5002736_20201_2_0,lq5x6p4icz,6.892699033425631,-127.65254683790297,-73.74184885463157

1201342_20201_2_0,lq86vn4icz,0.45590189090068295,-99.0538625387131,-45.70116046976071

3463153_20201_2_0,lq9wjp4icz,-1.8844571703738733,-92.45407001386585,-36.833616834682346

1495447_20201_2_0,lqb5dp4icz,-3.685740837494084,-92.54655627959855,-10.641992680735882

3728081_20201_2_0,lqe2lo4icz,0.8090413011807595,-68.13803696785294,-63.80141260086542

1362541_20201_2_0,lqgnio4icz,0.12989831093034873,-124.8536013944055,-32.09598496046695

3735736_20201_2_0,lqi0nn4icz,-1.1478027487792575,-113.30828892016314,-40.29764610108195

4798224_20201_2_0,lqimao4icz,-0.5904169812671072,-121.46749655705634,-11.861981567008968

2540870_20201_2_0,lqo9lo4icz,-2.487306734796605,-117.8251653584891,-31.707514745365557

2387420_20201_2_0,lqqmjp4icz,-2.801264843313542,-86.01904232319393,-35.90216062208626

1068563_20201_2_0,lqtfto4icz,-4.890309514717355,-88.45934845638027,-20.645796716569265

4739282_20201_2_0,lqtr7n4icz,-0.2620742064490822,-104.00842514729206,-32.20291236013094

1648376_20201_2_0,lqvj2p4icz,0.08920891182213023,-138.63110211303868,-37.51941368332315

1352495_20201_2_0,lqykap4icz,-2.0611951997943567,-63.499794585494755,-18.938683539885773

1092210_20201_2_0,lr3zlo4icz,0.46984160221117055,-77.07436194101567,-36.959051144981146

1226021_20201_2_0,lr6ygo4icz,2.6522955287181373,-76.13505359886517,-44.08758043857456

2417104_20201_2_0,lr8bwo4icz,-1.0764201088122825,-36.07333513783806,-25.78722742360685

1594325_20201_2_0,lr8vfn4icz,0.2985278284827139,-92.40799883600332,-84.7757911732671

2220756_20201_2_0,lrc1fn4icz,5.354845625942228,-110.14231421758586,-74.61852271994294

3307589_20201_2_0,lrebjo4icz,-1.3847878966462646,-131.54553691099323,-17.32170053822547

3388597_20201_2_0,lrhymn4icz,0.2961892255388288,-93.3983659946839,-48.99193261624055

4872027_20201_2_0,lrl95o4icz,-3.0500857164954622,-123.4850362707991,-23.604972655896475

1670174_20201_2_0,lrmnsn4icz,0.13103267806865754,-81.68922514064658,-40.35432132202146

3526310_20201_2_0,lroa4p4icz,6.426780928451555,-98.69645061460858,-73.35562334130069

4778143_20201_2_0,lrpm5p4icz,1.2119329952454714,-84.62753999627813,-41.38291246538441

4425755_20201_2_0,lrv9rn4icz,-1.0456786458458474,-61.95042992315453,-12.802452324213846

2145754_20201_2_0,lrvfmo4icz,12.510156818255446,-83.53294730099043,-88.44159214188912

2777375_20201_2_0,lrvlon4icz,2.3087743345515754,-93.04599950870238,-47.07180011016399

2146656_20201_2_0,lrwvwn4icz,-0.29579379234525754,-93.281307846542,-61.967365758872916

5188260_20201_2_0,ls359p4icz,1.7489389239206317,-119.75195281696622,-53.50897665620138

5818993_20201_2_0,ls7w0o4icz,0.8309281959462158,-82.02957377779111,-46.86032186286165

5651917_20201_2_0,ls9men4icz,0.11404624463092915,-91.47529215022362,-26.549123073316082

4371846_20201_2_0,lsbcon4icz,-0.8857538047163881,-73.49233554418379,-28.37954549479136

2598659_20201_2_0,lsebwo4icz,0.00398817932261932,-74.73902167152468,-36.06311679871986

5818737_20201_2_0,lsgqwo4icz,-4.612314265574264,-118.63892605380067,-8.556108848716292

3492441_20201_2_0,lsrkso4icz,-2.1898429482680273,-105.17376622015644,-20.496087113095683

5676107_20201_2_0,lszfan4icz,1.0600102460268528,-73.0519884207315,-26.667193475406037

5473498_20201_2_0,lt1i0p4icz,5.6566662183118535,-63.4273484495333,-74.06028457832207

2542416_20201_2_0,ltg4vn4icz,-3.8723064551271005,-113.90536478006089,-30.002228293464754

3992340_20201_2_0,ltgg3o4icz,1.2497656538321456,-105.69850494668765,-44.484994194064114

2299038_20201_2_0,ltjupo4icz,2.270430333072961,-96.64059228992727,-59.26755120304068

4024854_20201_2_0,ltor8p4icz,1.0414166564791052,-80.61767760715583,-38.3116762869046

1832221_20201_2_0,ltqwko4icz,-1.457270104121208,-89.42486866648665,-37.23328926013285

2289377_20201_2_0,ltsd7o4icz,-2.175694665012154,-104.03708207095332,0.9098630310368776

4993161_20201_2_0,ltwdmo4icz,2.7910670909287454,-89.3156368191801,-49.383546849887495

5954703_20201_2_0,lu06go4icz,-5.416353880509571,-148.84889276908828,-7.006937384164047

1350146_20201_2_0,lu15kp4icz,-0.3717251925375998,-123.43593428220694,-23.65967144215901

1774508_20201_2_0,lu3x8n4icz,-0.09383973879329266,-118.19752816630006,-26.566784667389598

5504917_20201_2_0,lua1gp4icz,0.5936742019578444,-72.4602889593501,-34.98312562117121

2410433_20201_2_0,lubtfo4icz,-4.020098215898243,-117.53026255915071,-15.263016474123532

3710112_20201_2_0,lugtcn4icz,-0.07716930332364653,-104.8932526641322,-28.677530212026838

1288199_20201_2_0,luk33o4icz,2.7446698129052933,-100.49814331329924,-27.559350179495866

4320744_20201_2_0,luke4p4icz,-0.15431745549389653,-81.30368853716757,-47.547941433411694

4935244_20201_2_0,lukpun4icz,-2.855990396202044,-90.17586657616863,-9.323390196044642

2939204_20201_2_0,lul55o4icz,1.026182742806742,-84.12771339940267,-37.47354658260866

5739166_20201_2_0,lunudn4icz,-1.7561775567971867,-100.55309368259998,-28.678050989375663

2863976_20201_2_0,lunvnn4icz,-1.9027589817140296,-100.63970108730342,-26.035392083653136

1084147_20201_2_0,lus7po4icz,0.911568560685921,-79.74038967852022,-43.22389148570518

4351548_20201_2_0,luusmo4icz,0.5235928570557407,-36.72726721199922,-30.247659566530928

5957014_20201_2_0,luw9go4icz,7.2160369198374905,-63.38801880694447,-75.38591560338486

3241558_20201_2_0,luwann4icz,-2.9350368215887612,-140.63888332661978,-16.048239158734646

1119021_20201_2_0,luwiin4icz,2.9357787137782725,-95.74090036469033,-44.893188901750136

5624604_20201_2_0,svbeko4icz,0.4016111384208911,-78.52138259236204,-27.320266247992706

/users/rhydian/anaconda3/envs/torch_env/lib/python3.7/site-packages/torch/cuda/__init__.py:52: UserWarning: CUDA initialization: Found no NVIDIA driver on your system. Please check that you have an NVIDIA GPU and installed a driver from http://www.nvidia.com/Download/index.aspx (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729006826/work/c10/cuda/CUDAFunctions.cpp:100.)
  return torch._C._cuda_getDeviceCount() > 0
  0%|          | 0/101 [00:00<?, ?it/s]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 1/101 [00:13<22:11, 13.32s/it]  2%|▏         | 2/101 [00:16<16:43, 10.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 3/101 [00:18<12:56,  7.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/101 [00:21<10:29,  6.49s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▍         | 5/101 [00:24<08:38,  5.41s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 6/101 [00:27<07:25,  4.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 7/101 [00:30<06:32,  4.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 8/101 [00:33<05:53,  3.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 9/101 [00:38<06:02,  3.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|▉         | 10/101 [00:40<05:25,  3.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 11/101 [00:43<05:05,  3.40s/it] 12%|█▏        | 12/101 [00:46<04:52,  3.29s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 13/101 [00:50<05:05,  3.48s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 14/101 [00:53<04:43,  3.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▍        | 15/101 [00:56<04:27,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 16/101 [00:59<04:29,  3.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 17/101 [01:02<04:20,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 18/101 [01:06<04:33,  3.30s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 19/101 [01:09<04:22,  3.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|█▉        | 20/101 [01:12<04:11,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 21/101 [01:15<04:13,  3.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 22/101 [01:18<04:03,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 23/101 [01:21<03:53,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 24/101 [01:24<03:54,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▍       | 25/101 [01:27<03:52,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 26/101 [01:40<07:32,  6.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 27/101 [02:03<13:44, 11.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 28/101 [02:06<10:35,  8.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▊       | 29/101 [02:09<08:20,  6.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|██▉       | 30/101 [02:12<06:45,  5.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 31/101 [02:15<05:42,  4.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 32/101 [02:17<04:51,  4.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 33/101 [02:20<04:22,  3.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▎      | 34/101 [02:24<04:12,  3.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▍      | 35/101 [02:26<03:48,  3.46s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 36/101 [02:29<03:31,  3.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 37/101 [02:43<06:52,  6.45s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 38/101 [02:47<06:05,  5.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▊      | 39/101 [03:00<08:11,  7.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|███▉      | 40/101 [03:03<06:30,  6.40s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 41/101 [03:06<05:21,  5.35s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 42/101 [03:09<04:28,  4.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 43/101 [03:11<03:51,  3.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▎     | 44/101 [03:14<03:27,  3.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▍     | 45/101 [03:17<03:12,  3.44s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 46/101 [03:25<04:22,  4.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 47/101 [03:28<03:46,  4.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 48/101 [03:31<03:24,  3.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▊     | 49/101 [03:35<03:19,  3.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|████▉     | 50/101 [03:38<03:01,  3.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 51/101 [03:41<02:52,  3.44s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████▏    | 52/101 [03:44<02:41,  3.29s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 53/101 [03:47<02:31,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 54/101 [03:50<02:27,  3.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 55/101 [03:53<02:26,  3.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▌    | 56/101 [03:56<02:16,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▋    | 57/101 [03:59<02:13,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 58/101 [04:02<02:10,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 59/101 [04:05<02:05,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 60/101 [04:07<01:59,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|██████    | 61/101 [04:11<01:59,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████▏   | 62/101 [04:14<01:55,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 63/101 [04:17<01:57,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 64/101 [04:20<01:57,  3.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 65/101 [04:23<01:49,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▌   | 66/101 [04:26<01:47,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▋   | 67/101 [04:29<01:44,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 68/101 [04:32<01:38,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 69/101 [04:35<01:36,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 70/101 [04:38<01:32,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|███████   | 71/101 [04:41<01:28,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████▏  | 72/101 [04:44<01:27,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 73/101 [04:48<01:29,  3.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 74/101 [04:51<01:25,  3.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 75/101 [04:54<01:19,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▌  | 76/101 [04:56<01:14,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 77/101 [04:59<01:11,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 78/101 [05:02<01:06,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 79/101 [05:05<01:03,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 80/101 [05:08<01:01,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 81/101 [05:11<00:57,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 82/101 [05:14<00:54,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 83/101 [05:17<00:53,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 84/101 [05:20<00:52,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 85/101 [05:23<00:48,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▌ | 86/101 [05:26<00:44,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 87/101 [05:29<00:40,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 88/101 [05:32<00:39,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 89/101 [05:36<00:38,  3.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 90/101 [05:38<00:34,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 91/101 [05:41<00:30,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 92/101 [05:45<00:29,  3.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 93/101 [05:48<00:25,  3.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 94/101 [05:51<00:21,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 95/101 [05:54<00:18,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▌| 96/101 [05:57<00:14,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 97/101 [06:00<00:11,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 98/101 [06:03<00:09,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 99/101 [06:06<00:06,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 100/101 [06:09<00:02,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|██████████| 101/101 [06:12<00:00,  2.99s/it]100%|██████████| 101/101 [06:12<00:00,  3.69s/it]
Trying to load from /users/rhydian/self-supervised-project/model_weights/SSECEncodersBothBoth
==> Resuming model trained for 106 epochs...
Trying to load from ../model_weights/angle_regressor4
==> Resuming model trained for 7 epochs...
2988177_20201_2_0,jsjykn4icz,-3.2064857849394004,-97.00617260314971,-21.847188802293672

3941854_20201_2_0,jskwgp4icz,113.82354708417563,617.2418368816573,-45.08370182826707

4388907_20201_2_0,jtwzyo4icz,-1.9090931273956295,-61.50038801813537,-38.64298266552048

5303992_20201_2_0,juepbp4icz,0.1894728341321742,-109.81722050234265,-33.740092937750205

2542263_20201_2_0,jukspo4icz,0.7090859025066696,-118.07108498098285,-42.35542313562664

5260473_20201_2_0,jul88o4icz,1.0617015025637206,-106.47885869256126,-45.61787098217319

4709293_20201_2_0,jwd8yo4icz,-1.4398618206061893,-99.76175063824712,-39.44771415538136

5140577_20201_2_0,jwhako4icz,0.3891544625307825,-91.72658661902872,-34.33049623855452

3485734_20201_2_0,jwholo4icz,1.124741114252514,-68.34701365736149,-44.68680308213533

5692873_20201_2_0,jwth2o4icz,0.31851040686894166,-54.299937132859355,-45.89667986976414

2337439_20201_2_0,jwtl8p4icz,-0.9561633272575353,-91.27621606872367,-37.40725142625769

1301380_20201_2_0,jxw36p4icz,85.29061498205131,0.1009965634455341,-185.03329130197142

1928825_20201_2_0,jyslto4icz,2.013837708865601,-93.39932930054661,-53.42886668329915

4142385_20201_2_0,jyxczo4icz,1.0032967229044132,-63.93883923915757,-47.51387622998797

2086713_20201_2_0,jz5kqn4icz,-0.21222316332189398,-177.10503099538911,-24.476564940793764

1633980_20201_2_0,k0ai6o4icz,7.552372377593904,-76.20949144594903,-77.45759549701646

1476825_20201_2_0,k2jtmo4icz,0.5075051809336553,-51.03384449669585,-43.02332180067239

2665199_20201_2_0,k2z6oo4icz,0.39952952371763406,-83.93433006449544,-38.80476818587594

1951947_20201_2_0,k6jkjn4icz,-0.34837166297007355,-82.02429863090953,-24.5107365286175

4855607_20201_2_0,k7nb1p4icz,0.05465885703588067,-71.38550489736775,-43.2110495442645

5234790_20201_2_0,k8txnn4icz,1.5147868227336072,-146.4152517124718,-56.92727954357861

1757551_20201_2_0,kb116n4icz,2.977736455660309,-77.68002794184366,-64.87245533448548

3111020_20201_2_0,kbiuep4icz,1.3994349178030718,-64.15194940578769,-51.6137548308797

2442085_20201_2_0,kbxmgo4icz,-1.1918801357639326,-52.46133988078674,-29.70866269462499

5445038_20201_2_0,kc06cp4icz,-0.5103278130833059,-120.43407577073387,-38.02111893790314

4176197_20201_2_0,kcfhkn4icz,-4.118035362054979,-124.5314295668584,-27.28431896395128

4573971_20201_2_0,ke76io4icz,-0.08244258932127764,-105.76770069458362,-39.50404519079805

3680862_20201_2_0,kejifp4icz,8.021794893796267,-42.98628164263408,-78.20856421657615

1188615_20201_2_0,kek6io4icz,0.9537056920725155,-111.46965172099857,-35.05882376657736

1300730_20201_2_0,kfadcp4icz,-4.458200078306286,-126.1768212971512,-13.124428193559766

4660799_20201_2_0,kfkybo4icz,3.5373645233420157,-120.46454087795169,-54.50088732801038

4806315_20201_2_0,kga6uo4icz,-0.22103660806300093,-89.47704697932733,-41.802075322851394

4747353_20201_2_0,kh9m9n4icz,-2.5135844827847738,-136.10602982478392,-16.815720759439586

4110002_20201_2_0,kidpcn4icz,0.21450479569137618,-65.46504041318445,-37.866134926425204

5294287_20201_2_0,kitqgp4icz,2.957095445233917,-89.20024998672105,-38.50547402648637

4888503_20201_2_0,kj0nrn4icz,2.3728946135429614,-92.40113272536453,-43.45353169606804

1243895_20201_2_0,kj0oho4icz,0.5523345749473616,-100.65531957463878,-28.22553407169167

1306477_20201_2_0,kj36gn4icz,-0.19745215390770157,-110.70373263736266,-18.90812750776972

2969153_20201_2_0,kjmwko4icz,1.4878414244321498,-78.74622642112709,-48.05211633672003

4531340_20201_2_0,kjqmep4icz,-4.329405868407483,-65.41281202080646,-27.481453281051984

2811155_20201_2_0,kjs75o4icz,-3.2791255866144824,-133.5134195069494,-9.208259444089634

3679144_20201_2_0,kjx84p4icz,-2.213194393385707,-74.75688958538015,-71.72019887369487

1136958_20201_2_0,kkddyn4icz,-0.23965216961706987,-116.55457081691696,-24.004990595067483

1779589_20201_2_0,kkh84o4icz,1.2842044722102246,-90.61284646210802,-40.40089834698219

2617940_20201_2_0,kksrjo4icz,2.830716444708106,-94.72524032617525,-55.94278124460658

1845185_20201_2_0,kkxa4p4icz,1.3144749412749506,-94.0609619642546,-48.747560190704036

1281893_20201_2_0,klvn2p4icz,4.823820279666543,-71.30258938274253,-68.66135528328533

5830411_20201_2_0,kmpugp4icz,4.776813600155409,-70.30538675223389,-60.22224663114889

2998042_20201_2_0,knijbp4icz,-1.4277312654446155,-92.86220035652002,-37.19042087472468

4609443_20201_2_0,knjvpn4icz,-0.4984719658015395,-80.5423058446049,-26.256027596596226

1645729_20201_2_0,kntd9o4icz,0.232179856219628,-81.20991300659028,-46.015083618452195

2458239_20201_2_0,knv6vo4icz,4.895981078161177,-84.6499311175985,-42.29334654515401

1363978_20201_2_0,ko6yyo4icz,0.8781502182382454,-68.25778042823242,-37.2300612664861

4433425_20201_2_0,koofbo4icz,0.0068541334114057715,-101.61355063180005,-35.776733548554176

5593152_20201_2_0,kp0quo4icz,0.9354676354181443,-112.69163968910729,-29.861952061516178

2961377_20201_2_0,krce8n4icz,-0.831642196956596,-92.20646602326931,-32.34873900312931

1870341_20201_2_0,krv73p4icz,-1.557549656883459,-87.38111812546603,-20.421183503612127

5874371_20201_2_0,kt403o4icz,-2.142067002205016,-119.15336241117654,-29.974292934166527

3613236_20201_2_0,kt5osn4icz,-0.46331536693930203,-109.71181294282223,-35.12454951259669

2708407_20201_2_0,ktk07p4icz,-6.644034568579246,-85.66871492199209,3.8308535729257898

4602117_20201_2_0,ktxwdo4icz,-2.1910174654763175,-98.73157884953062,-27.16962552523013

1161805_20201_2_0,ku5wtn4icz,0.15876584511164468,-69.17921750119208,-40.66940859679781

3989511_20201_2_0,ku669p4icz,4.599483508288696,-117.83196203078398,-63.940576215511115

4711914_20201_2_0,kv82wn4icz,1.0528373931058772,-72.75605955299199,-52.102062982605105

3649654_20201_2_0,kvau6n4icz,0.4465679622417118,-81.69330136320639,-58.441627459473324

3522727_20201_2_0,kvcdcp4icz,0.3066680907773398,-129.07713615148063,-51.711470631056955

1074017_20201_2_0,kvhd1p4icz,-0.07099680811654659,-121.68109128282535,-37.954873986264204

5446793_20201_2_0,kw1eko4icz,-1.782942168382178,-78.67740077890949,-27.574244675525165

1006938_20201_2_0,kwb3kp4icz,-0.3366236768317919,-94.49568036336024,-39.02751625633388

4446197_20201_2_0,kwpc4p4icz,1.8726581969661955,-95.86087941260513,-43.38671122093599

1848799_20201_2_0,kx01ep4icz,1.312419499659238,-84.67662151626874,-56.63829742714388

5970423_20201_2_0,kx4lin4icz,-0.10757670643799623,-61.50132441879077,-45.38799785075774

1633344_20201_2_0,qqhj8n4icz,-1.4465258578375573,-105.69763530906573,-26.32436104518328

5805381_20201_2_0,kxo44o4icz,-1.7088290634744774,-89.74632712162065,-38.3482006671523

5398940_20201_2_0,kygvwn4icz,1.5543814419429902,-89.46092222121683,-56.055308411431554

4200376_20201_2_0,kyv8do4icz,-1.8992546999383564,-100.94059463330447,-27.344193303852165

5569899_20201_2_0,kyz7ap4icz,-3.0679666275094837,-144.36529710767076,-27.595929411036366

3629528_20201_2_0,kzfmjp4icz,2.3750226116469886,-113.12137346986933,-48.83128017308577

2413451_20201_2_0,kzve8p4icz,1.4622788471782397,-88.23843326731469,-57.34211543284462

3706705_20201_2_0,l1blvo4icz,0.7531990651813729,-58.881503845964176,-37.28656790423116

2522158_20201_2_0,l1eh5p4icz,1.6098276635743185,-90.94002580396275,-41.880948268157

2515635_20201_2_0,l2hc4o4icz,0.533897303488401,-87.75720364456888,-28.38652121111693

4261068_20201_2_0,l302ap4icz,0.7622516327110554,-106.13690022914011,-35.867473735986565

3965974_20201_2_0,6kvnmo4icz,-1.9290053004458616,-118.18932218489243,-40.60299547041146

1046189_20201_2_0,l3gmlo4icz,-2.0630960234111595,-62.7947923318454,-26.691167651396228

3907758_20201_2_0,l3x59n4icz,0.2970651995090456,-94.14764995521688,-35.72506513483688

4149851_20201_2_0,l4arip4icz,4.485844445609132,-98.37893556736518,-40.67524070145035

4866314_20201_2_0,l55iao4icz,-1.927108139905702,-77.60216519300016,-24.38574690148134

5734895_20201_2_0,l66fhp4icz,1.3361434702134911,-116.09789306091469,-38.55255070623339

4651121_20201_2_0,l6nlxo4icz,0.6520624032769298,-72.60466935923651,-39.13148974687961

2820709_20201_2_0,l7ddgn4icz,-2.180531119338339,-93.53024583746571,-43.08430381161682

4552351_20201_2_0,l7tson4icz,1.0895173634084176,-134.65205878696455,-45.936632026349116

2817446_20201_2_0,l84xco4icz,-0.6031743687589606,-116.30797492608434,-45.041149194179525

1248832_20201_2_0,l8g7sn4icz,1.515513123865773,-119.41446754513069,-34.01732804669375

4177887_20201_2_0,l9gzjo4icz,2.775263576372917,-95.47847054986207,-41.240080628859374

3782965_20201_2_0,l9qlon4icz,-1.2270024183417025,-98.10549221594326,-37.4482006020699

1713931_20201_2_0,l9wnsn4icz,-0.2559902286431329,-62.1122915550674,-27.684804945025036

1562845_20201_2_0,lawnap4icz,-7.724486727959071,-121.74643964430888,23.868897716768096

2101458_20201_2_0,lbmgho4icz,-1.402754211725136,-114.745148996826,-26.9877268729264

4472186_20201_2_0,lcjrfn4icz,1.8287085639977823,-117.1689349412369,-44.02399760553149

5692873_20201_2_0,jwth2o4icz,0.31851040686894166,-54.299937132859355,-45.89667986976414

/users/rhydian/anaconda3/envs/torch_env/lib/python3.7/site-packages/torch/cuda/__init__.py:52: UserWarning: CUDA initialization: Found no NVIDIA driver on your system. Please check that you have an NVIDIA GPU and installed a driver from http://www.nvidia.com/Download/index.aspx (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729006826/work/c10/cuda/CUDAFunctions.cpp:100.)
  return torch._C._cuda_getDeviceCount() > 0
  0%|          | 0/102 [00:00<?, ?it/s]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 1/102 [00:02<04:45,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 2/102 [00:05<04:48,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 3/102 [00:09<05:23,  3.27s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/102 [00:14<05:43,  3.51s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▍         | 5/102 [00:17<05:29,  3.39s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 6/102 [00:19<05:07,  3.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 7/102 [00:24<05:28,  3.46s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 8/102 [00:27<05:13,  3.34s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 9/102 [00:30<05:26,  3.51s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|▉         | 10/102 [00:33<05:04,  3.31s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 11/102 [00:37<05:04,  3.34s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 12/102 [00:40<04:53,  3.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 13/102 [00:43<04:57,  3.35s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▎        | 14/102 [00:47<05:07,  3.49s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▍        | 15/102 [00:50<04:45,  3.29s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 16/102 [00:53<04:32,  3.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 17/102 [00:56<04:22,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 18/102 [01:02<05:49,  4.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▊        | 19/102 [01:06<05:26,  3.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|█▉        | 20/102 [01:09<04:58,  3.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 21/102 [01:12<04:37,  3.43s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 22/102 [01:14<04:17,  3.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 23/102 [01:17<04:04,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▎       | 24/102 [01:20<03:54,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▍       | 25/102 [01:23<03:50,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▌       | 26/102 [01:26<03:40,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▋       | 27/102 [01:28<03:34,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 28/102 [01:31<03:32,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 29/102 [01:34<03:29,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 30/102 [01:37<03:25,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|███       | 31/102 [01:40<03:25,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███▏      | 32/102 [01:43<03:22,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 33/102 [01:46<03:19,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 34/102 [01:49<03:15,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 35/102 [01:52<03:22,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▌      | 36/102 [01:55<03:20,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▋      | 37/102 [01:58<03:19,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 38/102 [02:01<03:14,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 39/102 [02:04<03:05,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 40/102 [02:07<03:00,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|████      | 41/102 [02:10<02:55,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 42/102 [02:12<02:52,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 43/102 [02:15<02:48,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 44/102 [02:18<02:49,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 45/102 [02:21<02:44,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▌     | 46/102 [02:24<02:40,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 47/102 [02:27<02:35,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 48/102 [02:30<02:35,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 49/102 [02:34<02:54,  3.28s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 50/102 [02:37<02:44,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 51/102 [02:40<02:36,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 52/102 [02:43<02:33,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 53/102 [02:46<02:30,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 54/102 [02:49<02:26,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 55/102 [02:52<02:21,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▍    | 56/102 [02:56<02:33,  3.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 57/102 [03:03<03:18,  4.41s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 58/102 [03:06<02:53,  3.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 59/102 [03:09<02:45,  3.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 60/102 [03:12<02:29,  3.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|█████▉    | 61/102 [03:15<02:14,  3.29s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 62/102 [03:18<02:04,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 63/102 [03:20<01:57,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 64/102 [03:26<02:23,  3.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▎   | 65/102 [03:29<02:09,  3.51s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▍   | 66/102 [03:31<01:57,  3.27s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 67/102 [03:34<01:49,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 68/102 [03:37<01:44,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 69/102 [03:40<01:41,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▊   | 70/102 [03:43<01:37,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|██████▉   | 71/102 [03:47<01:37,  3.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 72/102 [03:49<01:30,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 73/102 [03:52<01:25,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 74/102 [03:57<01:36,  3.44s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▎  | 75/102 [04:00<01:28,  3.29s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▍  | 76/102 [04:03<01:21,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▌  | 77/102 [04:06<01:18,  3.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▋  | 78/102 [04:09<01:13,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 79/102 [04:11<01:09,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 80/102 [04:14<01:06,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 81/102 [04:17<01:02,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 82/102 [04:20<00:57,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████▏ | 83/102 [04:23<00:55,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 84/102 [04:36<01:45,  5.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 85/102 [04:39<01:25,  5.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 86/102 [04:42<01:10,  4.39s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▌ | 87/102 [04:45<01:00,  4.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▋ | 88/102 [04:48<00:53,  3.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 89/102 [04:51<00:44,  3.43s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 90/102 [04:55<00:44,  3.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 91/102 [04:58<00:37,  3.45s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 92/102 [05:01<00:32,  3.29s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 93/102 [05:04<00:28,  3.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 94/102 [05:07<00:24,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 95/102 [05:10<00:23,  3.29s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 96/102 [05:13<00:19,  3.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▌| 97/102 [05:17<00:15,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 98/102 [05:19<00:12,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 99/102 [05:22<00:08,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 100/102 [05:25<00:05,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 101/102 [05:28<00:03,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|██████████| 102/102 [05:31<00:00,  3.01s/it]100%|██████████| 102/102 [05:31<00:00,  3.25s/it]
Trying to load from /users/rhydian/self-supervised-project/model_weights/SSECEncodersBothBoth
==> Resuming model trained for 106 epochs...
Trying to load from ../model_weights/angle_regressor4
==> Resuming model trained for 7 epochs...
1362648_20201_2_0,k000gn4icz,2.1857167814332112,-87.10719553477671,-37.62591352618958

3646831_20201_2_0,k03wgo4icz,1.7091160610814429,-104.59801767352934,-57.21538768788628

2007656_20201_2_0,k05jgn4icz,-0.10499793966049839,-116.00016780551817,-45.51722091369402

1735255_20201_2_0,jjca6o4icz,-0.034696834474582314,-95.74385982130659,-49.77244605566075

4944378_20201_2_0,k0b0ep4icz,-0.08130179174258466,-72.08515448133218,-39.51832869311053

1669272_20201_2_0,k1byro4icz,-0.42052450491713445,-79.7308804241984,-37.629304608137474

4080978_20201_2_0,hsagjn4icz,2.1166091362663124,-108.82338877375699,-42.09739741470639

5554012_20201_2_0,k2x42p4icz,-0.8081570328318636,-102.77958164929174,-31.10483488131179

3532251_20201_2_0,ovtjfp4icz,2.5655428325139593,-63.88015862189948,-59.093171512196136

5398826_20201_2_0,k3g3ip4icz,-1.6380270695683243,-114.08763886048862,-29.3314636799757

1785504_20201_2_0,k536po4icz,2.902300424877033,-132.98860312951618,-50.706269426495865

4199379_20201_2_0,k58pmo4icz,1.6652932278823325,-70.82078080005002,-34.132540238754544

4030853_20201_2_0,k5zcao4icz,0.1830124411583067,-82.68443818558868,-34.57402009212883

1130527_20201_2_0,k60bmo4icz,1.0690784412406988,-87.10938176330058,-38.80005201481438

4782845_20201_2_0,k6a0jp4icz,0.18272610773001452,-129.82563263158352,-33.848300533998724

2646397_20201_2_0,k6vqbp4icz,-1.7500163299563936,-59.45355787723136,-33.28415372785193

2583129_20201_2_0,k85aep4icz,-1.561445325700247,-64.6586273008021,-18.87754160709656

2624141_20201_2_0,k8tklo4icz,9.201407140558896,-46.690030098617484,-79.57266026241979

2291533_20201_2_0,kbkpip4icz,1.0366719257877692,-54.18270391780629,-45.63951342472518

1061596_20201_2_0,kcc0cp4icz,-0.5555936103293393,-89.74352987931422,-34.86977323465301

3670749_20201_2_0,kd9mzo4icz,0.016219170775565468,-63.53888205498049,-29.84185842651908

3515185_20201_2_0,kdlj0p4icz,-0.5666456670630036,-109.1444802312007,-29.3652558439249

3319597_20201_2_0,ke5qcn4icz,-3.041505925385624,-115.57066736609983,-9.89378017439023

5274165_20201_2_0,kfiten4icz,-2.157148573527454,-124.52620586043389,-18.553497475329507

1103212_20201_2_0,kfz2bo4icz,-0.30260376724086263,-71.23076326028308,-36.30752793593439

4970741_20201_2_0,khl7nn4icz,0.6150649284212842,-125.10715977618423,-40.24379850315799

2864598_20201_2_0,khwbio4icz,3.4736039691127805,-55.842274186200825,-56.20480754162632

4338160_20201_2_0,ki0c7o4icz,0.3923905235091016,-121.1834011873629,-41.000735664850424

1546090_20201_2_0,kj367o4icz,-2.0053888113479337,-86.84414356863164,-21.39088849389711

3931830_20201_2_0,kja69n4icz,-0.0011375600790514463,-121.05798928570172,-22.577284405739846

1716313_20201_2_0,kk0ain4icz,-3.4393876173771716,-79.22896067496814,-76.03234314976162

5886408_20201_2_0,kklvwo4icz,4.255044668388485,-84.63774165919119,-72.48716676742946

1882220_20201_2_0,kkorao4icz,-0.8609251918007097,-82.19081420043324,-37.029168346620295

5673767_20201_2_0,kkwpgn4icz,-3.258903946694071,-124.8376561416272,-47.23384957769136

2614862_20201_2_0,f5pm9n4icz,-1.2414605127183855,-120.69648719106078,-37.97575752056781

3323638_20201_2_0,kmdlbo4icz,-0.430104801579072,-127.60768681722561,-36.67890897603401

3420901_20201_2_0,kms3pn4icz,3.9658885114753404,-107.91562731917182,-37.25838035271414

2788017_20201_2_0,koiaip4icz,12.502568116411194,-80.06560447982918,-91.94064783522671

5310632_20201_2_0,koseho4icz,0.41282445494139675,-117.77919844004003,-33.31739217910247

5164064_20201_2_0,kpcucp4icz,0.6790012995813018,-112.66089930410033,-54.79538206075951

3857265_20201_2_0,kpuxep4icz,0.005966020018342668,-94.1723258606726,-32.25307390610172

5944305_20201_2_0,kqij2p4icz,0.7359490881056492,-84.06236839415192,-55.31461650077287

3583531_20201_2_0,kqjs9o4icz,0.4111257233816924,-99.40562756186833,-44.04620502194312

2486366_20201_2_0,kskeip4icz,-5.291905609371742,-80.98025225442154,-33.44393085809884

1767951_20201_2_0,ktk7jp4icz,1.0901912343971896,-90.94464889363093,-51.52297401467341

4984744_20201_2_0,ku5w5p4icz,0.14197252442332714,-103.97913856160693,-26.817595015433938

4616741_20201_2_0,kv7pan4icz,0.10538623733066184,-75.1535077176751,-28.461436670097697

5653704_20201_2_0,kv8eko4icz,5.823315349171242,-38.10305809973809,-79.68819181469384

4464338_20201_2_0,kvf9no4icz,-1.3919473997685619,-81.02140422118703,-24.426856648828732

2103257_20201_2_0,kx30pn4icz,2.616239198288605,-104.15903739585625,-43.166999918060895

3697528_20201_2_0,kxatoo4icz,-3.7208632244566178,-127.3680403105478,15.796745567849896

4979178_20201_2_0,kxk8io4icz,-1.3054241993439022,-81.87943035950474,-21.27566515636849

3657258_20201_2_0,kzxpso4icz,1.7043853234986628,-69.93666911962012,-48.470754225945214

5764080_20201_2_0,l13a9o4icz,1.821194988848076,-68.90787927539529,-37.37520966396151

2838348_20201_2_0,l1689o4icz,-0.3385685630224452,-122.30028848326407,-31.383574591816256

2583527_20201_2_0,l194nn4icz,2.9149333521075103,-78.93000665498698,-54.999603654657506

4767846_20201_2_0,l1didp4icz,-3.3952788655727053,-115.01243596647856,-32.607967584650225

1090023_20201_2_0,l1oown4icz,-2.1602879855621824,-102.42017885111315,-28.80857804631802

2924486_20201_2_0,zfx9yo4icz,2.7939985624302235,-81.59213101925556,-34.82341028780952

5174962_20201_2_0,l38ujp4icz,0.42095427959839904,-98.02547097145617,-23.533675156501246

2889573_20201_2_0,l4bebo4icz,0.6330207790366705,-115.6809733079688,-15.882531860626216

5970624_20201_2_0,l4n5qo4icz,-4.067322617063817,-102.9896919752614,-7.372675456760646

3230036_20201_2_0,l8rvho4icz,-2.8318126682625495,-89.05449863252159,-24.915049719794723

4412163_20201_2_0,l9kv5o4icz,-0.43958665139235953,-101.37635830466971,-26.98453739676492

1205083_20201_2_0,la1p6o4icz,-2.764605445501803,-88.1280957088048,-31.87731319133168

5898628_20201_2_0,la3d8o4icz,-1.099176024996008,-108.8432405099631,-25.808863653183153

2716363_20201_2_0,lajz8p4icz,-0.4094025107087923,-149.03468225605366,-26.733951478075795

5371561_20201_2_0,lau1uo4icz,4.434785783386429,-91.22088210640678,-37.54735343709051

1299610_20201_2_0,laypfp4icz,-3.386992277285022,-74.60704980928682,-17.394635121817927

4478131_20201_2_0,lb29en4icz,3.7739712940897774,-28.504105513633306,-55.85973238199054

1692217_20201_2_0,lch9no4icz,1.425049175165438,-94.75185557639426,-34.22121187587193

2113160_20201_2_0,ld3e7p4icz,-3.402219071585381,-119.4965520655825,-29.394173408000057

5118491_20201_2_0,le0vto4icz,0.37431650291169244,-69.41025453802567,-44.358554012998084

1646391_20201_2_0,leqn4p4icz,1.9353067975846119,-63.1229469229022,-53.89411849563079

3981555_20201_2_0,lf078p4icz,-2.1723279576170236,-117.12735446234154,-13.112240015254883

2893571_20201_2_0,lf2mqo4icz,3.084694346827494,-73.4710549653615,-61.74462968892537

4426281_20201_2_0,lfj7un4icz,-0.8517601729397525,-125.09769903870767,-24.33828663645224

5617665_20201_2_0,lfptjp4icz,-0.5469004986303685,-53.86019976448665,-26.72608810819068

1804153_20201_2_0,lg8fhp4icz,6.727313379947333,-3.2865762321823127,-136.1354862928936

4951466_20201_2_0,lhzbcp4icz,-0.03711743672809367,-98.09543784484438,-36.55907768363578

2887235_20201_2_0,lirftn4icz,-1.9860598064068244,-129.30892484650798,-24.85123416156597

5858391_20201_2_0,liyx7p4icz,-0.94914954420188,-106.02751032970383,-33.77161922108924

2516291_20201_2_0,lkhfep4icz,-6.339520249779166,-76.02524239339988,8.004650460883056

1631348_20201_2_0,lmvean4icz,0.614956972905637,-125.12741640982105,-54.5893308357188

5441463_20201_2_0,lnfhdn4icz,-2.637700372377728,-102.42046590156153,-24.996045670808968

3392399_20201_2_0,lnl60p4icz,2.815102941766585,-93.26193342456588,-60.49089813824061

4299775_20201_2_0,lnuw4o4icz,0.03189941941705952,-78.38950421761277,-25.71744193277189

5886408_20201_2_0,kklvwo4icz,4.255044668388485,-84.63774165919119,-72.48716676742946

1187624_20201_2_0,losaho4icz,-1.821210065599688,-99.24551040249167,-26.728739573201594

2318118_20201_2_0,lqes0o4icz,0.5976950226291436,-94.75317375969215,-56.45422265810909

2728080_20201_2_0,lrdn6o4icz,-1.3302799064418223,-99.89545170353819,-26.029661870930568

3665174_20201_2_0,lsmi7o4icz,0.8578461911563762,-92.11327513430183,-44.99581743035506

5093473_20201_2_0,ltq3fp4icz,4.129986327351119,-90.58421790001242,-57.10188268704013

1587038_20201_2_0,luu5hp4icz,-5.785584767957126,-69.7028475697341,-31.383756665930846

1659430_20201_2_0,m7r18o4icz,-2.7867438695266427,-146.69784323112015,-33.12017342814721

4521046_20201_2_0,lw0nip4icz,2.5012623485736603,-65.68886336935634,-46.20918530676272

2279451_20201_2_0,lwismn4icz,-4.522089856027807,-118.39747656807126,-18.469675511948637

3131366_20201_2_0,lx8wwo4icz,0.9166835238073505,-72.6421099250424,-50.37196262341354

2284354_20201_2_0,ly5w7o4icz,-8.925972446726895,-133.97769658725025,10.411701149197171

1559409_20201_2_0,lyim5p4icz,-5.792227508247544,-103.03587286111184,15.187672556323562

4360014_20201_2_0,lykp8o4icz,2.680245727591001,-117.38743825338406,-43.50832629403783

1726970_20201_2_0,5a0p2o4icz,1.8158972662871755,-108.70188575019031,-28.430886788962198

