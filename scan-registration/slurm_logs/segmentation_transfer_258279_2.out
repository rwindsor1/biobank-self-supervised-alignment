2 th decile
.10
.15
/users/rhydian/anaconda3/envs/torch_env/lib/python3.7/site-packages/torch/cuda/__init__.py:52: UserWarning: CUDA initialization: Found no NVIDIA driver on your system. Please check that you have an NVIDIA GPU and installed a driver from http://www.nvidia.com/Download/index.aspx (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729006826/work/c10/cuda/CUDAFunctions.cpp:100.)
  return torch._C._cuda_getDeviceCount() > 0
  0%|          | 0/810 [00:00<?, ?it/s]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  0%|          | 1/810 [00:33<7:25:52, 33.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  0%|          | 2/810 [00:35<5:23:20, 24.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  0%|          | 3/810 [00:38<3:56:57, 17.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  0%|          | 4/810 [00:42<3:01:58, 13.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 5/810 [00:45<2:16:35, 10.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 6/810 [00:47<1:47:12,  8.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 7/810 [00:50<1:24:48,  6.34s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 8/810 [00:53<1:10:11,  5.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 9/810 [00:56<1:01:29,  4.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 10/810 [01:00<1:00:11,  4.51s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|▏         | 11/810 [01:03<53:04,  3.99s/it]  Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|▏         | 12/810 [01:05<47:20,  3.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 13/810 [01:08<43:27,  3.27s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 14/810 [01:11<40:55,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 15/810 [01:13<39:11,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 16/810 [01:17<43:46,  3.31s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 17/810 [01:20<41:37,  3.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 18/810 [01:23<39:18,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 19/810 [01:26<40:36,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 20/810 [01:29<39:27,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 21/810 [01:32<38:33,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 22/810 [01:34<36:59,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 23/810 [01:37<36:51,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 24/810 [01:40<35:46,  2.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 25/810 [01:42<35:28,  2.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 26/810 [01:45<35:20,  2.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 27/810 [01:48<35:36,  2.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 28/810 [01:51<36:17,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▎         | 29/810 [01:53<35:51,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▎         | 30/810 [01:57<40:06,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 31/810 [02:00<38:36,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 32/810 [02:02<37:07,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 33/810 [02:05<36:02,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 34/810 [02:08<35:29,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 35/810 [02:10<35:12,  2.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 36/810 [02:13<35:49,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▍         | 37/810 [02:17<37:46,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▍         | 38/810 [02:20<39:11,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▍         | 39/810 [02:22<37:35,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▍         | 40/810 [02:25<36:48,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▌         | 41/810 [02:28<35:55,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▌         | 42/810 [02:31<35:52,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▌         | 43/810 [02:33<35:09,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▌         | 44/810 [02:36<34:44,  2.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 45/810 [02:39<35:07,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 46/810 [02:41<34:32,  2.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 47/810 [02:44<34:30,  2.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 48/810 [02:47<34:14,  2.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 49/810 [02:49<33:47,  2.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 50/810 [02:52<34:17,  2.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▋         | 51/810 [02:55<34:26,  2.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▋         | 52/810 [02:58<34:42,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 53/810 [03:01<35:11,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 54/810 [03:03<34:18,  2.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 55/810 [03:06<34:36,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 56/810 [03:09<34:01,  2.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 57/810 [03:12<37:37,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 58/810 [03:25<1:14:36,  5.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 59/810 [03:28<1:02:37,  5.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 60/810 [03:31<56:19,  4.51s/it]  Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 61/810 [03:34<49:36,  3.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 62/810 [03:37<45:04,  3.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 63/810 [03:40<41:54,  3.37s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 64/810 [03:42<40:06,  3.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 65/810 [03:45<37:45,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 66/810 [03:48<36:12,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 67/810 [03:50<34:37,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 68/810 [03:53<34:03,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▊         | 69/810 [03:56<36:35,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▊         | 70/810 [03:59<36:02,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 71/810 [04:02<35:57,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 72/810 [04:05<35:26,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 73/810 [04:08<34:51,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 74/810 [04:10<34:17,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 75/810 [04:13<34:19,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 76/810 [04:16<33:48,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|▉         | 77/810 [04:18<33:19,  2.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|▉         | 78/810 [04:22<35:27,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|▉         | 79/810 [04:25<35:03,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|▉         | 80/810 [04:27<34:26,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|█         | 81/810 [04:30<35:27,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|█         | 82/810 [04:33<35:26,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|█         | 83/810 [04:36<34:42,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|█         | 84/810 [04:39<34:40,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|█         | 85/810 [04:42<35:08,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 86/810 [04:45<35:49,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 87/810 [04:49<37:41,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 88/810 [04:51<36:46,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 89/810 [04:54<35:55,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 90/810 [04:57<35:02,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 91/810 [05:00<34:54,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█▏        | 92/810 [05:03<34:01,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█▏        | 93/810 [05:06<34:14,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 94/810 [05:08<34:06,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 95/810 [05:11<34:01,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 96/810 [05:14<33:20,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 97/810 [05:17<33:44,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 98/810 [05:20<34:44,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 99/810 [05:25<42:56,  3.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 100/810 [05:28<40:08,  3.39s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 101/810 [05:31<38:30,  3.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 102/810 [05:34<37:25,  3.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 103/810 [05:37<36:06,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 104/810 [05:40<35:33,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 105/810 [05:43<35:11,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 106/810 [05:46<35:22,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 107/810 [05:49<36:02,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 108/810 [05:52<35:57,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 109/810 [05:55<36:29,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▎        | 110/810 [05:58<35:45,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▎        | 111/810 [06:01<35:22,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 112/810 [06:04<35:30,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 113/810 [06:08<36:19,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 114/810 [06:11<36:11,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 115/810 [06:13<35:00,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 116/810 [06:18<39:43,  3.43s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 117/810 [06:21<37:37,  3.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▍        | 118/810 [06:24<37:18,  3.24s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▍        | 119/810 [06:27<35:55,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▍        | 120/810 [06:30<35:32,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▍        | 121/810 [06:33<34:46,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▌        | 122/810 [06:36<34:29,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▌        | 123/810 [06:38<33:39,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▌        | 124/810 [06:41<33:11,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▌        | 125/810 [06:44<33:29,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 126/810 [06:47<33:04,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 127/810 [06:50<33:34,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 128/810 [06:53<32:40,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 129/810 [06:56<32:29,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 130/810 [07:06<58:31,  5.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 131/810 [07:09<50:19,  4.45s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▋        | 132/810 [07:12<45:52,  4.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▋        | 133/810 [07:15<41:53,  3.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 134/810 [07:18<38:24,  3.41s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 135/810 [07:21<36:37,  3.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 136/810 [07:23<34:53,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 137/810 [07:26<34:07,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 138/810 [07:29<33:12,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 139/810 [07:32<33:07,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 140/810 [07:35<33:09,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 141/810 [07:38<33:22,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 142/810 [07:41<33:36,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 143/810 [07:44<33:08,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 144/810 [07:47<33:21,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 145/810 [07:50<32:33,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 146/810 [07:53<32:30,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 147/810 [07:56<32:42,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 148/810 [07:59<32:17,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 149/810 [08:01<32:04,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▊        | 150/810 [08:04<32:00,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▊        | 151/810 [08:07<31:32,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 152/810 [08:10<31:40,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 153/810 [08:14<33:33,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 154/810 [08:17<35:35,  3.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 155/810 [08:20<34:21,  3.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 156/810 [08:23<32:45,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 157/810 [08:26<32:29,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|█▉        | 158/810 [08:29<32:32,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|█▉        | 159/810 [08:32<31:55,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|█▉        | 160/810 [08:34<31:17,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|█▉        | 161/810 [08:37<30:48,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|██        | 162/810 [08:40<30:10,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|██        | 163/810 [08:43<30:06,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|██        | 164/810 [08:46<32:39,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|██        | 165/810 [08:49<31:38,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|██        | 166/810 [08:52<32:44,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 167/810 [08:55<32:12,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 168/810 [08:58<31:49,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 169/810 [09:01<31:16,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 170/810 [09:04<32:40,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 171/810 [09:07<32:08,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 172/810 [09:10<31:45,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██▏       | 173/810 [09:14<33:15,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██▏       | 174/810 [09:17<32:50,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 175/810 [09:24<46:56,  4.44s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 176/810 [09:27<41:21,  3.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 177/810 [09:30<38:16,  3.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 178/810 [09:33<36:37,  3.48s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 179/810 [09:36<36:15,  3.45s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 180/810 [09:39<35:02,  3.34s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 181/810 [09:42<33:37,  3.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 182/810 [09:45<33:16,  3.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 183/810 [09:49<33:29,  3.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 184/810 [09:52<32:43,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 185/810 [09:54<31:47,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 186/810 [09:57<30:42,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 187/810 [10:01<32:07,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 188/810 [10:13<1:01:51,  5.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 189/810 [10:16<51:55,  5.02s/it]  Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 190/810 [10:19<45:35,  4.41s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▎       | 191/810 [10:22<40:16,  3.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▎       | 192/810 [10:25<36:56,  3.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 193/810 [10:28<34:45,  3.38s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 194/810 [10:31<33:32,  3.27s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 195/810 [10:33<31:36,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 196/810 [10:36<30:45,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 197/810 [10:39<30:20,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 198/810 [10:42<30:24,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▍       | 199/810 [10:45<29:43,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▍       | 200/810 [10:48<30:07,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▍       | 201/810 [10:51<29:37,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▍       | 202/810 [10:54<29:47,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▌       | 203/810 [10:56<29:34,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▌       | 204/810 [11:00<30:12,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▌       | 205/810 [11:03<30:25,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▌       | 206/810 [11:05<29:41,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 207/810 [11:08<28:41,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 208/810 [11:11<28:28,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 209/810 [11:14<28:34,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 210/810 [11:17<28:17,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 211/810 [11:19<28:20,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 212/810 [11:23<29:26,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▋       | 213/810 [11:26<30:46,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▋       | 214/810 [11:29<29:43,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 215/810 [11:32<30:03,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 216/810 [11:36<32:18,  3.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 217/810 [11:38<30:48,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 218/810 [11:42<31:13,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 219/810 [11:45<32:01,  3.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 220/810 [11:48<31:54,  3.24s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 221/810 [11:51<30:36,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 222/810 [11:54<30:21,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 223/810 [11:59<35:54,  3.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 224/810 [12:02<33:35,  3.44s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 225/810 [12:05<32:56,  3.38s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 226/810 [12:08<31:09,  3.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 227/810 [12:11<28:48,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 228/810 [12:14<29:25,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 229/810 [12:17<28:54,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 230/810 [12:20<29:27,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▊       | 231/810 [12:23<29:02,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▊       | 232/810 [12:26<28:01,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 233/810 [12:28<28:02,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 234/810 [12:31<27:39,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 235/810 [12:34<27:14,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 236/810 [12:37<27:36,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 237/810 [12:40<27:06,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 238/810 [12:43<27:12,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|██▉       | 239/810 [12:46<27:29,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|██▉       | 240/810 [12:49<28:09,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|██▉       | 241/810 [12:52<29:00,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|██▉       | 242/810 [12:56<30:23,  3.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|███       | 243/810 [12:59<31:17,  3.31s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|███       | 244/810 [13:02<30:53,  3.27s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|███       | 245/810 [13:05<30:17,  3.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|███       | 246/810 [13:08<29:49,  3.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|███       | 247/810 [13:11<28:34,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 248/810 [13:14<27:41,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 249/810 [13:17<27:39,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 250/810 [13:20<27:25,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 251/810 [13:23<27:12,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 252/810 [13:26<27:19,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 253/810 [13:29<27:09,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███▏      | 254/810 [13:32<27:33,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███▏      | 255/810 [13:34<26:45,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 256/810 [13:37<26:24,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 257/810 [13:40<26:25,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 258/810 [13:46<34:40,  3.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 259/810 [13:49<32:00,  3.49s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 260/810 [13:52<30:27,  3.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 261/810 [13:55<29:08,  3.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 262/810 [13:57<28:15,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 263/810 [14:00<27:17,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 264/810 [14:03<26:45,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 265/810 [14:06<26:31,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 266/810 [14:09<26:23,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 267/810 [14:12<26:23,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 268/810 [14:15<28:20,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 269/810 [14:18<27:55,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 270/810 [14:21<27:19,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 271/810 [14:24<27:29,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▎      | 272/810 [14:28<27:46,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▎      | 273/810 [14:30<27:00,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 274/810 [14:33<26:52,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 275/810 [14:36<26:19,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 276/810 [14:40<29:40,  3.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 277/810 [14:44<29:05,  3.27s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 278/810 [14:46<27:46,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 279/810 [14:49<27:11,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▍      | 280/810 [14:53<27:56,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▍      | 281/810 [14:55<26:27,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▍      | 282/810 [14:58<26:18,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▍      | 283/810 [15:01<26:12,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▌      | 284/810 [15:04<25:57,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▌      | 285/810 [15:07<25:35,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▌      | 286/810 [15:10<25:49,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▌      | 287/810 [15:13<25:49,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 288/810 [15:16<25:53,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 289/810 [15:19<25:27,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 290/810 [15:43<1:21:39,  9.42s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 291/810 [15:57<1:32:21, 10.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 292/810 [16:01<1:14:25,  8.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 293/810 [16:04<59:07,  6.86s/it]  Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▋      | 294/810 [16:07<50:03,  5.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▋      | 295/810 [16:10<43:01,  5.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 296/810 [16:13<37:57,  4.43s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 297/810 [16:16<33:44,  3.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 298/810 [16:19<31:09,  3.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 299/810 [16:22<29:02,  3.41s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 300/810 [16:25<29:29,  3.47s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 301/810 [16:29<29:23,  3.46s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 302/810 [16:32<28:30,  3.37s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 303/810 [16:36<29:08,  3.45s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 304/810 [16:38<27:39,  3.28s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 305/810 [16:41<26:31,  3.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 306/810 [16:44<25:59,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 307/810 [16:47<24:55,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 308/810 [16:50<25:23,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 309/810 [16:53<25:18,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 310/810 [16:58<29:30,  3.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 311/810 [17:01<27:37,  3.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▊      | 312/810 [17:04<27:20,  3.29s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▊      | 313/810 [17:07<26:44,  3.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 314/810 [17:10<25:55,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 315/810 [17:13<25:15,  3.06s/it] 39%|███▉      | 316/810 [17:28<55:40,  6.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 317/810 [17:31<46:12,  5.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 318/810 [17:34<40:09,  4.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 319/810 [17:37<35:29,  4.34s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|███▉      | 320/810 [17:41<32:51,  4.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|███▉      | 321/810 [17:44<29:59,  3.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|███▉      | 322/810 [17:47<28:05,  3.45s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|███▉      | 323/810 [17:49<26:34,  3.27s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|████      | 324/810 [17:52<25:31,  3.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|████      | 325/810 [17:55<25:05,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|████      | 326/810 [18:01<32:18,  4.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|████      | 327/810 [18:04<29:12,  3.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|████      | 328/810 [18:07<28:00,  3.49s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 329/810 [18:10<25:48,  3.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 330/810 [18:13<24:59,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 331/810 [18:17<27:07,  3.40s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 332/810 [18:20<25:32,  3.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 333/810 [18:24<27:24,  3.45s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 334/810 [18:26<25:37,  3.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████▏     | 335/810 [18:29<25:14,  3.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████▏     | 336/810 [18:33<25:26,  3.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 337/810 [18:37<28:24,  3.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 338/810 [18:40<26:25,  3.36s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 339/810 [18:43<25:56,  3.30s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 340/810 [18:46<25:18,  3.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 341/810 [18:49<25:12,  3.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 342/810 [18:52<24:02,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 343/810 [18:55<24:10,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 344/810 [18:58<23:26,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 345/810 [19:02<25:05,  3.24s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 346/810 [19:05<23:46,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 347/810 [19:08<23:26,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 348/810 [19:10<22:51,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 349/810 [19:13<22:24,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 350/810 [19:16<22:08,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 351/810 [19:19<21:51,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 352/810 [19:21<21:25,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▎     | 353/810 [19:24<21:23,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▎     | 354/810 [19:27<21:08,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 355/810 [19:30<21:01,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 356/810 [19:34<23:29,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 357/810 [19:38<26:59,  3.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 358/810 [19:41<25:12,  3.35s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 359/810 [19:44<24:22,  3.24s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 360/810 [19:51<31:56,  4.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▍     | 361/810 [19:54<28:47,  3.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▍     | 362/810 [19:57<26:56,  3.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▍     | 363/810 [20:00<25:29,  3.42s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▍     | 364/810 [20:03<26:27,  3.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▌     | 365/810 [20:06<24:45,  3.34s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▌     | 366/810 [20:09<23:27,  3.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▌     | 367/810 [20:12<22:55,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▌     | 368/810 [20:26<47:00,  6.38s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 369/810 [20:29<40:17,  5.48s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 370/810 [20:44<59:12,  8.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 371/810 [20:47<47:49,  6.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Trying to load from /users/rhydian/self-supervised-project/model_weights/SSECEncodersBothBoth
==> Resuming model trained for 106 epochs...
Trying to load from ../model_weights/angle_regressor4
==> Resuming model trained for 7 epochs...
2529559_20201_2_0,3kkkfp4icz,1.6056964975890422,-96.91558874345904,-64.1022324235724

2194806_20201_2_0,3kn2mn4icz,2.2487035474969304,-114.02400400240296,-38.87231484270234

2333915_20201_2_0,3kqt9n4icz,-1.5134735574332412,-95.69951074761087,-33.37089753951575

1486477_20201_2_0,3krd7o4icz,-0.6616521016792678,-87.49574609499345,-19.734851175447588

2810475_20201_2_0,3kvreo4icz,-0.2902757303868197,-126.71031450250689,-16.055868863639105

5269825_20201_2_0,3kwxeo4icz,-2.500744437592467,-91.42769591038487,-22.796057709212036

4609527_20201_2_0,3kyuip4icz,0.10804559141826343,-116.63963039439034,-36.86215968888915

5975695_20201_2_0,3l0d8p4icz,0.4577948102827049,-84.30227095261418,-44.78035228160937

6003285_20201_2_0,3l1kfn4icz,6.7837972265842135,-62.21687483641547,-45.038932029153926

4954298_20201_2_0,3l7ohp4icz,1.0455198160910626,-122.72138306591773,-39.490984872723715

1052247_20201_2_0,3lcjdo4icz,0.2075934353852508,-93.55322921689347,-21.133249934212316

4241391_20201_2_0,3lcq8p4icz,-0.34206852010588107,-111.1824684623922,-37.88428973008398

4680309_20201_2_0,3lddep4icz,0.006995999294405211,-97.27429014692024,-32.995166744531176

4401856_20201_2_0,3ldg8o4icz,-0.653715583185108,-68.74875764127677,-43.04641375184163

4003123_20201_2_0,3lehuo4icz,-0.6839401782479746,-145.47039944721172,-26.868656041613207

5478295_20201_2_0,3lf4no4icz,-3.160456518462173,-87.60659688021434,-6.26112775563152

5327059_20201_2_0,3lfwko4icz,-4.619512277920872,-105.66253386564244,-20.056245436163394

5566346_20201_2_0,3lit8o4icz,-2.302304443014297,-83.72974950602662,-45.19060315403118

4345566_20201_2_0,3llxpo4icz,-1.7359508793516158,-80.70394690612059,-38.514387344114965

3682337_20201_2_0,3lqoeo4icz,3.36076132967182,-58.68072839588842,-49.069846581425665

4333880_20201_2_0,3ltyln4icz,-0.19794587280862005,-86.9515344646044,-26.050226093805833

2658172_20201_2_0,3lz0bp4icz,1.4918138576532238,-63.76746678454256,-49.92510704988156

1503773_20201_2_0,3lz36p4icz,-3.3303465702571007,-111.55998405280494,-46.60988717364535

3486726_20201_2_0,3lzjfn4icz,0.6332664059359607,-117.53787267804739,-58.249383475421496

3557935_20201_2_0,3m3lgn4icz,-1.1865069703895421,-86.23731046433565,-59.87384079666593

5735612_20201_2_0,3m3qho4icz,-1.6823755476283075,-76.66812115714606,-7.885953890341753

4266642_20201_2_0,3m5k8p4icz,0.997858554318403,-82.45503368693588,-57.98782850625797

2550397_20201_2_0,3m5mco4icz,2.1304999541488288,-98.77165305127778,-41.863405272606784

3469915_20201_2_0,3m77mo4icz,3.0956775616348375,-60.116273706796676,-48.882557684122816

2196737_20201_2_0,3m82co4icz,0.7558231940623692,-108.82236389485618,-41.7626614248306

2576740_20201_2_0,3m8y5p4icz,0.17330986496146555,-96.42241885917167,-19.121114242113322

3516617_20201_2_0,3mctvo4icz,0.48129241290260666,-102.76465186065798,-47.991698220099636

3700323_20201_2_0,3me2bo4icz,3.045223431866138,-40.53204289795113,-44.88899528195695

3392146_20201_2_0,3mfl9o4icz,-0.14055886054932254,-94.44709185122673,-49.81589277869068

1124154_20201_2_0,3mroyn4icz,4.686935961318419,-49.61203859864514,-62.92316301732873

3963465_20201_2_0,3mt2ip4icz,-0.4998301214354679,-63.355703242965575,-20.23870988709524

2802636_20201_2_0,3n006p4icz,1.091121239706159,-90.77879345954358,-28.447360795361362

4652438_20201_2_0,3n44zo4icz,2.2714264366682433,-134.480327377894,-50.14766109607484

1754580_20201_2_0,3n4sso4icz,-0.5320463270253165,-89.62921162953339,-29.19483379027598

4336578_20201_2_0,3n56wo4icz,-1.1081707879222054,-89.77602401075777,-33.51632410878365

2471606_20201_2_0,3nbz6p4icz,1.7496166113087264,-73.65787744894737,-50.342859170268724

2559528_20201_2_0,3nglmo4icz,1.3602977367756803,-76.20308265518912,-56.722280020557335

3505984_20201_2_0,3njoen4icz,1.085789105070186,-127.67603032641205,-50.46196600229439

2895109_20201_2_0,3nmjio4icz,-1.6690179021700535,-84.82519787567358,-23.291852738860484

5787337_20201_2_0,3nrtho4icz,-3.2781087291995124,-91.27353129870465,-41.02982764721841

3872730_20201_2_0,3nrx9n4icz,0.36576610494407047,-84.56123503979708,-47.313979428295525

3727948_20201_2_0,3nsnso4icz,0.07549742015049149,-97.73199863716368,-41.55059759849635

3743416_20201_2_0,3ntc1p4icz,0.356676651947367,-94.38008934826996,-21.67207276658081

4297860_20201_2_0,3o91kp4icz,-0.8395169907405178,-92.48019280437319,-37.501322445723616

2683991_20201_2_0,3ob2hp4icz,1.0997322257158566,-101.15732285335227,-34.84473719752283

5253498_20201_2_0,3og5wn4icz,0.9085478912539794,-99.26380564304296,-58.31479368438363

5010071_20201_2_0,3ogyvn4icz,0.4454365898477389,-76.32397178930844,-44.98999024449715

2071231_20201_2_0,3oha6o4icz,0.3783967846875576,-77.95907452971358,-38.44319587116486

5046893_20201_2_0,3ohmzo4icz,0.11388268925294143,-68.17742183361457,-56.224117973117146

2977737_20201_2_0,3ollvn4icz,-2.1988894296844768,-107.18657603746735,-13.272112142816695

3165622_20201_2_0,3oo95o4icz,0.8584289376596584,-111.0096497622174,-54.53412015992663

3985971_20201_2_0,3ooo7p4icz,0.9746389481678494,-107.65847733980334,-40.231855729839396

4116114_20201_2_0,3oqxwo4icz,-0.008781534262578241,-99.56573431078618,-41.32485737768644

1697239_20201_2_0,3osf7p4icz,-0.4334992026915179,-58.34702959938994,-40.69593016486846

1705124_20201_2_0,3otzep4icz,-2.555957292793787,-102.66580888477759,-11.250007449026299

4747026_20201_2_0,3p0zsn4icz,-1.2082831426896279,-86.11483658767926,-40.97498846471544

1681737_20201_2_0,3p1t4p4icz,0.9224158333225175,-61.38900002150666,-26.500282869423543

5490625_20201_2_0,3p1tip4icz,-3.58843135506131,-126.35410190460652,-18.468178580982013

1431050_20201_2_0,3p3e6o4icz,1.934941931859532,-101.00800492549132,-52.93513934533648

1961196_20201_2_0,3p4ixo4icz,-1.7397223002571873,-81.47405734369491,-24.16692867264635

4918270_20201_2_0,3p84uo4icz,-1.8148911904313323,-92.89918454088917,-31.445815652590994

2031021_20201_2_0,3pbzlo4icz,-0.10092758422442578,-102.15393554634588,-25.550940168124484

1742356_20201_2_0,3pf8ro4icz,4.361157906507485,-101.68464712563537,-35.65551218210467

2603080_20201_2_0,ivq86o4icz,0.597971513637182,-81.7008437989827,-28.103984558426703

4835792_20201_2_0,3pq9wn4icz,4.580187049351043,-92.37182063745405,-49.09396846026118

2029128_20201_2_0,nyxfko4icz,-1.480898492745598,-98.49491169966919,-32.186941793165445

1136317_20201_2_0,3pwlmo4icz,-2.3987277885557425,-114.46456400001304,-25.901723824125796

2121783_20201_2_0,3pycjn4icz,4.3854833503913735,-80.11501988812623,-79.49412991589045

5584341_20201_2_0,3q8swo4icz,-1.4005182014739443,-96.47802462978862,-17.583168118556188

5192149_20201_2_0,3qgn6p4icz,2.03588908947163,-67.9088955861584,-43.53451135039434

2636283_20201_2_0,3qgwgo4icz,-3.01542398490034,-103.77162864623898,-2.89728474945467

5349860_20201_2_0,3qj82o4icz,-0.13139780024457154,-108.41877989424458,-36.126972027207884

5936346_20201_2_0,3qmy0p4icz,-2.307742985096452,-157.73235483983177,-32.66797566417321

1059312_20201_2_0,3qqsbp4icz,0.28623312786679384,-78.54215614173793,-34.93829381295207

2974177_20201_2_0,3qur5o4icz,-1.2373326912186544,-60.96725498556478,-29.4005512695433

2125747_20201_2_0,3qv7uo4icz,-2.173363207123423,-99.93698112428925,-47.29731106777041

3124231_20201_2_0,3qw7io4icz,-6.027778063781933,-109.35498595824455,-1.94967011466602

1166035_20201_2_0,3r0lwo4icz,0.42867672648330374,-102.15346322288988,-54.99847876806304

2520680_20201_2_0,3r5r8o4icz,0.338747873749846,-64.35207997627296,-41.85746919848543

1182792_20201_2_0,3r6l9p4icz,6.757740440043692,-39.067939983368234,-81.85517465114185

3612041_20201_2_0,3r8kmo4icz,-1.3788980239795159,-125.90700162682501,-15.357124200720676

2414273_20201_2_0,3rbiao4icz,1.4218133129859647,-118.04156077554137,-26.80161302173306

4237470_20201_2_0,3rc3fo4icz,4.32629020877246,-65.66314192142343,-55.313076799402694

4321506_20201_2_0,3rh2no4icz,-0.8140622752520668,-125.83951653962743,-36.31546406751448

1613370_20201_2_0,3rhiqn4icz,-0.16193754692296228,-86.94610231622562,-37.46282786670808

1347831_20201_2_0,3rkjyo4icz,-0.5433543985616848,-87.94984367582458,-17.484656099687044

5037588_20201_2_0,3rnwro4icz,-4.765458307779064,-111.4301555578798,0.7230753746564318

3571689_20201_2_0,3rotao4icz,-0.9402379328535196,-104.06300879852216,-16.662523743653992

3077111_20201_2_0,3rv49o4icz,1.0397513396671443,-125.34482778748924,-38.736148816948344

2233573_20201_2_0,3s2kao4icz,0.4324679162097148,-83.64555369968195,-32.643749223393755

5589190_20201_2_0,3s4fap4icz,0.5681728524059253,-109.2857534616104,-39.59258235899462

3124720_20201_2_0,3s4z5o4icz,2.453209605134592,-143.83587620114557,-61.27785661041405

6002026_20201_2_0,3s94eo4icz,-0.3230152721688278,-63.40772619355948,-37.56317744453426

3438878_20201_2_0,3si1xo4icz,3.5608578882633664,-50.59156059011491,-55.97055428989863

5128222_20201_2_0,3sjijp4icz,-4.31888427975334,-104.580191561156,-25.833924911169504

2016896_20201_2_0,3skiun4icz,5.373727032420513,-123.86894248122707,-75.64120758576078

4800458_20201_2_0,3smopo4icz,2.565599912570662,-88.64024405857847,-56.80234576156661

2060337_20201_2_0,3sqskn4icz,1.106682258301815,-83.03779836249765,-27.055732856225575

1193923_20201_2_0,3ss3xo4icz,2.0136746888078423,-100.76802967035866,-60.197196754101455

2790381_20201_2_0,3svfbo4icz,-1.2966682701572647,-88.39326796958181,-18.418958577203696

2116515_20201_2_0,3syu4p4icz,-2.875361969139273,-120.45549599565771,-6.920021245191606

4900081_20201_2_0,3t2mho4icz,2.4316584939141883,-67.50249194744785,-41.892029893184

1832262_20201_2_0,3t4w7p4icz,-1.3494583472418067,-97.89170119518963,-28.364947632997456

1407914_20201_2_0,3t7cto4icz,-5.169589490623772,-101.46602450727278,1.353882632948924

2797631_20201_2_0,3t8icn4icz,1.247756995810779,-119.69208171744071,-44.06734828231198

3070862_20201_2_0,3ta1fo4icz,0.8569465657420372,-88.97272485053898,-32.58375088953461

2641482_20201_2_0,3tgkjn4icz,0.1522520026630866,-102.16721548808758,-50.464661035514126

5137125_20201_2_0,3tinxo4icz,-1.4216456078079232,-87.91522541987686,-19.68494435671164

2217525_20201_2_0,3tis7o4icz,2.131033676722077,-109.85680460174294,-49.88035655498361

5259549_20201_2_0,3tjydp4icz,-0.20572371610536266,-53.830596403136525,-55.65346957089406

1801328_20201_2_0,3tk9en4icz,-3.0233088421136336,-129.68814433546697,-23.599375826786655

1609905_20201_2_0,3tktoo4icz,-0.13767430879645,-101.17249613678749,-9.686843033740018

1703210_20201_2_0,3tomep4icz,-5.381650593150369,-105.55606078570636,-20.016988713211333

5278962_20201_2_0,3ts9kn4icz,1.5101344572147073,-98.35053128109814,-34.83490968898725

5526340_20201_2_0,3u13fo4icz,0.13341775767217814,-67.38503432779177,-39.99703193105637

4758277_20201_2_0,3u1vvo4icz,-2.566753720652441,-109.76442399964438,-18.044734484074723

2982996_20201_2_0,3u9l9o4icz,-3.402823966047566,-83.2501359392615,-25.834254371323567

1351286_20201_2_0,3uaoho4icz,1.873712036073869,-87.7352448424536,-34.038319431390036

3228400_20201_2_0,3ucoen4icz,-0.8931659645581599,-44.647750597374255,-48.95729367099031

3435465_20201_2_0,3ud8to4icz,-2.1877210112931693,-54.81500282232986,-46.89239565316913

2007089_20201_2_0,3udrvn4icz,-2.084660266159331,-107.7020022941426,-16.381902658598364

1677335_20201_2_0,3uhxln4icz,1.3257022498392492,-101.41844554578014,-45.329884138988476

5286835_20201_2_0,3ukkjp4icz,0.36770442428913624,-129.8930782566586,-32.33792788032659

1785834_20201_2_0,3ukoep4icz,-8.041809729817482,-133.44259607568736,5.609455364963935

3059171_20201_2_0,3unh0o4icz,1.4909565706416528,-79.2048188081358,-43.64753762051552

5339864_20201_2_0,3upx7o4icz,0.20353827949581865,-115.64302142847234,-37.507981599219065

4638457_20201_2_0,3usy4o4icz,-0.8976254167710466,-80.67294494986751,-24.78689273667068

2419141_20201_2_0,3utw0p4icz,-0.013658481520815526,-95.37842222526939,-34.95484156552651

5560306_20201_2_0,3v0ygo4icz,0.39862685863538827,-111.5603751080252,-22.207965633453398

3061075_20201_2_0,3v4i4p4icz,0.016908613983278132,-100.56502962978072,-36.94808973237376

3345026_20201_2_0,3v4yfn4icz,0.02741004906886624,-134.46169990857632,-59.96929642955723

3031348_20201_2_0,3v5n9o4icz,-1.994948553808623,-98.21173656240617,-38.59078642597024

3196630_20201_2_0,3v6t6n4icz,-4.257116396461068,-86.80159357704446,-33.032820482145866

4416815_20201_2_0,3v7fwo4icz,-6.683194773768362,-63.88613598585306,-2.7972111304100054

3394428_20201_2_0,3v7xen4icz,-1.4581802355581,-93.58527414401587,-26.7030647874995

5553968_20201_2_0,3v82ep4icz,-1.472156394495516,-72.10445390880321,-51.489768146969354

2635667_20201_2_0,3v8n2p4icz,1.2043211375241394,-55.51922331103117,-55.559803762209185

4986505_20201_2_0,3v95so4icz,-1.5679616757330848,-103.51897037243657,-41.024768840780496

1676619_20201_2_0,3vew7p4icz,-2.423770341774742,-134.97952904472245,-29.168769249373796

3474133_20201_2_0,3vjw9o4icz,-2.0923948235403405,-62.77622098031401,-26.776252406499964

4966671_20201_2_0,3vrwqn4icz,-0.566860703005875,-94.25081593693068,-28.98619851711905

1561708_20201_2_0,3vs97o4icz,0.050334401416290864,-93.34323484448146,-29.597340437634884

5627655_20201_2_0,3vt4bo4icz,-3.4225518980177263,-69.96053314634577,-13.696328674979938

5721209_20201_2_0,3vwz9n4icz,-15.016144531427903,-162.06064963311033,58.1887947166165

3072430_20201_2_0,3vx1en4icz,-1.2969626266527727,-122.38805284893849,-28.877857436550585

5560861_20201_2_0,3w747p4icz,1.463282684552503,-117.39972600866756,-40.285760918092876

4393732_20201_2_0,3wavun4icz,-2.0303371068903173,-101.39738174904707,-30.180171202784948

3568672_20201_2_0,5ckiuo4icz,2.356724507902541,-42.556911878187435,-38.411591826384566

2410207_20201_2_0,3wfltn4icz,0.2402780503833953,-81.88708794962821,-35.711120767153574

3962794_20201_2_0,3wgyro4icz,2.1706077530662875,-70.65807956388522,-60.69573726724364

5264919_20201_2_0,3whg8p4icz,-1.8120287417273464,-117.57159725358014,-31.862346659784663

3203945_20201_2_0,3wnt8p4icz,-0.26545274853483336,-83.18730715602038,-28.740904741184806

4243202_20201_2_0,3ws39n4icz,-2.651373397134818,-155.21707146526185,-8.294094144823603

5743309_20201_2_0,3wu2to4icz,1.2397861478734216,-76.05178180081492,-42.679980917283956

5727365_20201_2_0,3wwvgo4icz,-1.706316567262872,-102.24072396540146,-25.44988423226667

2790307_20201_2_0,3x0ygp4icz,0.11759847154702555,-100.64032032965144,-49.411189512136076

4181120_20201_2_0,3x0zjn4icz,-4.100961541635844,-85.42024230970856,-35.354023829617915

4153324_20201_2_0,3x1p9p4icz,-0.22547205611823712,-84.73048823820264,-32.87697645059589

2326548_20201_2_0,3x6y3p4icz,-0.9662885585611288,-117.8110327732443,-24.434926231373225

5631081_20201_2_0,3x9l5p4icz,-1.6649874621630556,-94.45679349493838,-37.534130517507606

3029706_20201_2_0,3xdako4icz,-2.2764433738797365,-130.8803507068325,-15.558184375442323

4333032_20201_2_0,3xj4in4icz,1.5940450753229913,-94.35983245825204,-55.94673780478094

5067896_20201_2_0,3xmiho4icz,1.1920865759129105,-84.55067355219768,-37.36019476979065

4300686_20201_2_0,3xxx3p4icz,-1.0665207103498502,-88.67351832004852,-39.03097089801611

1201677_20201_2_0,3y0zjo4icz,1.484802105110992,-89.26408756295459,-49.92328671047693

5880454_20201_2_0,3y1bdp4icz,-10.755341933819022,-111.45858825703056,12.590579846867186

3063327_20201_2_0,3y8ygp4icz,-0.6206248869698359,-73.0616557099271,-45.4267478628086

1035420_20201_2_0,3y9rfp4icz,-0.494358486847387,-76.54860785427203,-40.96326653938348

3397060_20201_2_0,3ye6gp4icz,-1.8462990123333949,-130.92187262085426,-28.39844234919707

2401477_20201_2_0,3yfd5p4icz,-3.083889329289829,-93.44869194539504,-36.09568963534382

4954532_20201_2_0,3yizhp4icz,-1.4075815627956967,-109.49296967538831,-31.80859786542726

2001420_20201_2_0,3ym38p4icz,-0.45887853177012566,-64.1133747479762,-29.26392841214738

4758740_20201_2_0,3yn0go4icz,0.010082204331549022,-120.33077466980046,-50.23252986481418

2683705_20201_2_0,3yn12p4icz,2.0907998405556794,-83.7755244641697,-61.4109070030198

1689247_20201_2_0,3yorap4icz,-3.392435260326082,-92.59965884081606,-20.07325233372555

1607539_20201_2_0,3yqtsn4icz,-12.475941264175631,-200.36539808330122,49.220558838962106

4262707_20201_2_0,3yv8ao4icz,0.9066153643943022,-121.86533749801328,-39.051479406193536

1105194_20201_2_0,3yvgun4icz,1.0490534815343187,-92.19914971393035,-18.932957819421375

1714215_20201_2_0,3yw0io4icz,1.4024841010772369,-87.5687899750288,-33.32292860117984

1483240_20201_2_0,3ywz4o4icz,2.6974369301193932,-56.09386746742507,-48.7687189679845

2962757_20201_2_0,3yzpeo4icz,1.8015954653803659,-119.3082009603215,-27.99104011109091

2976108_20201_2_0,3z2bdp4icz,-1.2918830997665696,-72.37256861024869,-33.83096993897239

2931877_20201_2_0,3z5lcp4icz,47.38993259173734,56.19912578108472,-278.38253269488456

3462555_20201_2_0,3z5lrn4icz,-1.1659427464870968,-159.68718474699372,-12.902088650838849

3163082_20201_2_0,3z783p4icz,2.1091567332983048,-47.964866608646446,-65.3359347421735

1356763_20201_2_0,3zd6cp4icz,-1.3527181751211517,-105.31611589496333,-38.56177049972182

2662096_20201_2_0,3ze27o4icz,0.7453117624584917,-100.67164853795614,-51.767328448301456

5844053_20201_2_0,3zfiwn4icz,-1.2376372235064688,-92.42890821898916,-22.614142794837832

5600322_20201_2_0,3zicon4icz,-6.2402680238164026,-79.6310206375909,-4.7607837119278145

2658895_20201_2_0,3ziduo4icz,-0.2258337161171937,-68.54736608124614,-26.36439767106242

2732464_20201_2_0,3zir4p4icz,-4.697256784554378,-113.52750729729499,1.108046485103472

2475219_20201_2_0,3zkgao4icz,-2.3408080243817526,-110.09088270480854,-25.918546997763812

1708110_20201_2_0,3zopqn4icz,-2.0688002286172935,-118.37450311971872,-25.900087908270564

4105105_20201_2_0,3zpeuo4icz,0.6591818233927309,-96.3784818231546,-23.02143205026036

2300815_20201_2_0,3zwlho4icz,0.2073126076074881,-67.52308430519952,-29.843159028403903

5946479_20201_2_0,407ixn4icz,-2.0778654052158454,-93.71751743116809,-15.715415346921844

2891269_20201_2_0,40a9zo4icz,1.0471379816107447,-60.732030416028095,-53.18467214646719

4762593_20201_2_0,40bj0p4icz,-4.831837771499895,-70.1782234832211,-4.909832968449095

1521551_20201_2_0,40co3o4icz,0.9643710260082115,-122.78746624985354,-27.88242755721093

2002662_20201_2_0,40cubn4icz,-0.9266515271980468,-139.14337955536004,-37.29877383923598

3461874_20201_2_0,40d6ko4icz,1.9138239606740481,-91.4146360061645,-52.82973968661415

2460465_20201_2_0,40eldn4icz,-1.5603071039971774,-116.96457502164563,-47.07615703028624

3514377_20201_2_0,40fcqo4icz,7.347149451019631,-103.79209165944079,-46.25001962614812

2074048_20201_2_0,40lpfp4icz,-2.2534147376275313,-105.50803095307677,-26.057734059871137

4900724_20201_2_0,40msep4icz,-0.35200064026338646,-90.7610277051127,-47.70841903493944

1341692_20201_2_0,40p3jp4icz,-0.3037140097341161,-85.50367022053715,-34.40142805005431

5139268_20201_2_0,40pdin4icz,-1.1161816755957903,-96.71006025604129,-26.540380420478684

1252226_20201_2_0,40qxjo4icz,-1.7287956561856686,-78.42447901044696,-20.870254646941362

4481688_20201_2_0,40ydbo4icz,-2.7090693471557366,-55.8314379686891,-22.86210762936318

4834145_20201_2_0,414rko4icz,-0.1638107704214379,-81.17118410676397,-16.18830002831406

1807077_20201_2_0,4155ko4icz,0.7284195676900901,-71.3559099899073,-34.802217657662666

2438024_20201_2_0,416t9p4icz,0.2301841010800251,-60.15441490370199,-57.456535336008415

2701656_20201_2_0,416upo4icz,0.4169718334408602,-73.94226145382555,-31.910907108611354

2510879_20201_2_0,83927n4icz,-4.681754393708648,-98.2424069316767,-17.629325557153123

5810689_20201_2_0,41ap2p4icz,0.42264159071367935,-104.35207750953165,-53.92791641825056

1304636_20201_2_0,41b7fp4icz,-3.7083292665228558,-83.53353088156254,-26.348516230818987

2596694_20201_2_0,41guip4icz,-0.7226679218175465,-78.77809122268329,-24.336642299216024

4746344_20201_2_0,41ld5p4icz,-3.030917660492902,-117.37768391415659,-26.963221256258535

5940650_20201_2_0,41lquo4icz,-0.33036229487609636,-144.87010907361443,-44.92182189219142

5947805_20201_2_0,41mjko4icz,0.16873170897242362,-88.66691107040054,-34.91471941384219

5815004_20201_2_0,41ouro4icz,-0.8591138845527089,-108.23741957810992,-44.43403648431887

5304688_20201_2_0,41poyo4icz,-0.17077878447994416,-70.40951029040201,-34.0746141040472

3085368_20201_2_0,41sdip4icz,-1.2898044015780195,-65.1796525212331,-25.217005810465324

3243309_20201_2_0,41ucoo4icz,1.6558672566420771,-81.34692909583248,-39.84106582618081

3761232_20201_2_0,41uphp4icz,-1.6953144019666233,-74.18830011233581,-16.953940653510017

5986383_20201_2_0,41usep4icz,-0.1757188546841106,-67.9683577322428,-39.15254034028098

2164774_20201_2_0,41v4ip4icz,1.1942978513197677,-97.3685821123697,-49.593545230143576

5103539_20201_2_0,41yppn4icz,-1.3181816703065754,-68.6118659862895,-12.309743001765526

1052419_20201_2_0,4243dp4icz,-1.0552820255497328,-61.79031072907833,-33.48907294681081

4754400_20201_2_0,425vzo4icz,2.8872212013804264,-118.32494752744299,-47.47888231351436

4267670_20201_2_0,42a4mn4icz,-0.2472585000046858,-69.11102006947715,-28.983372347561357

4996272_20201_2_0,42b3vo4icz,1.7607168456511286,-50.09492375483066,-38.98825637966236

1966924_20201_2_0,42dy0o4icz,-3.1702248327850624,-178.78491728151414,-36.60439742395229

5213042_20201_2_0,42gb3p4icz,-0.16801213907577317,-115.23383994384704,-25.405740456578542

1727380_20201_2_0,42hznn4icz,-2.3976170882663497,-96.63020105876546,-19.210902625494967

1308521_20201_2_0,42s06n4icz,-0.818434567440257,-88.85429841076763,-21.24731970299905

5093531_20201_2_0,42t5pn4icz,2.376320887116375,-82.98207300201409,-37.415172157436174

2982430_20201_2_0,42xv3p4icz,0.9933933074375896,-121.22839104277611,-40.264164008037994

1232499_20201_2_0,4311ip4icz,-2.2548879618868907,-134.7679434984861,-27.532815976152705

3762240_20201_2_0,435q6p4icz,0.8695561392840016,-91.31193182272978,-48.79599519872838

1425185_20201_2_0,436f5o4icz,0.3411750144714035,-73.00442878536063,-31.180181361278727

2311886_20201_2_0,436ifo4icz,-2.889701123978883,-75.22455045942999,-22.470977677307516

1841356_20201_2_0,438bno4icz,-2.635640531225658,-63.123150339103375,-20.49570325989427

2158291_20201_2_0,438hjp4icz,0.017686331108896947,-99.55954565516001,-31.58786054225662

1798736_20201_2_0,439pvn4icz,-0.5778082207415428,-97.14035718825406,-39.549401902462535

1836068_20201_2_0,43b0ln4icz,-2.076019900868085,-114.56892175998152,-25.464378063141382

5127806_20201_2_0,43c5bp4icz,0.10714273195894049,-69.04014849476931,-53.779801720041874

2077535_20201_2_0,43d4jp4icz,0.7847119506819141,-107.05147636361409,-62.68920252882194

5510787_20201_2_0,43dc2p4icz,-2.3514838779112863,-117.63541520251025,-25.417154158625337

5608256_20201_2_0,43f9wo4icz,-2.646593657456909,-81.20756876325896,-18.86559100140859

1074494_20201_2_0,43ga0p4icz,-0.4396991058034745,-79.12745709299472,-30.630214914401364

5889374_20201_2_0,43hkzo4icz,2.6458128617362275,-66.97347804872945,-56.69747544710668

1314754_20201_2_0,43jmhp4icz,-0.39183283598302815,-61.460609134882674,-20.25824121774997

1628353_20201_2_0,43oqep4icz,-0.21867959906900317,-102.71510918705229,-17.07501088381146

5881132_20201_2_0,43t8vn4icz,-1.4086343108347954,-106.25821380861834,-31.186358196467395

4887192_20201_2_0,43y5wn4icz,-2.182470370028651,-81.35742261767362,-22.342600498624194

4521224_20201_2_0,4409nn4icz,3.636795077353078,-80.03146631067207,-71.5908293491939

4996656_20201_2_0,443dzo4icz,-1.5713915893371113,-81.23965940860171,-27.288153533266282

5771314_20201_2_0,443txo4icz,-2.450530640271543,-96.98575435888813,-16.56719743945021

5214027_20201_2_0,445mln4icz,-1.9923651782040759,-78.56735811884525,-26.32382745926489

1256758_20201_2_0,446eto4icz,1.5346715585712107,-70.78386912077667,-36.00987848421882

3652938_20201_2_0,446jjp4icz,0.306971238419578,-69.67380217361978,-36.439860942725744

5590409_20201_2_0,448a7p4icz,-0.006451736395646359,-78.5696247062121,-36.66130814601979

2560251_20201_2_0,44a38o4icz,4.897376266519199,-57.666279571620464,-54.37076996385761

2467505_20201_2_0,44d2kn4icz,1.1549224012118202,-92.55870286641232,-31.853801269195003

3074323_20201_2_0,44nafn4icz,-1.979462898487776,-119.47825237326072,-28.27766983139429

2773376_20201_2_0,44p22o4icz,-3.854260546787066,-118.50203324111007,-7.931542937631917

3714012_20201_2_0,44u6vo4icz,-0.3986076856134199,-74.10427512780879,-20.657467272315273

2929138_20201_2_0,44vhfo4icz,1.6391588306614895,-60.433684225767706,-43.34544897256154

1203016_20201_2_0,44wtjo4icz,0.07899004454650486,-59.177431893321454,-50.86201199554769

3230351_20201_2_0,451s5o4icz,-0.01922385064259549,-114.49263704293381,-38.889076094660055

2053412_20201_2_0,458dun4icz,0.3624133281398717,-73.0450635968194,-34.263717621639586

3685106_20201_2_0,458ozo4icz,-1.7373003833652965,-102.80817442362218,-31.867528405376362
 46%|████▌     | 372/810 [20:50<39:59,  5.48s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 373/810 [20:52<33:45,  4.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 374/810 [20:55<30:28,  4.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▋     | 375/810 [20:58<27:26,  3.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▋     | 376/810 [21:01<25:45,  3.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 377/810 [21:04<23:46,  3.29s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 378/810 [21:07<22:18,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 379/810 [21:10<22:20,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 380/810 [21:13<21:46,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 381/810 [21:15<21:14,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 382/810 [21:18<21:27,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 383/810 [21:21<20:58,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 384/810 [21:24<20:42,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 385/810 [21:27<20:21,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 386/810 [21:30<20:13,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 387/810 [21:33<20:16,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 388/810 [21:35<19:54,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 389/810 [21:38<20:29,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 390/810 [21:41<20:07,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 391/810 [21:44<20:12,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 392/810 [21:49<24:39,  3.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▊     | 393/810 [21:52<23:05,  3.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▊     | 394/810 [21:55<22:21,  3.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 395/810 [21:57<20:35,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 396/810 [22:00<20:14,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 397/810 [22:03<20:04,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 398/810 [22:06<20:16,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 399/810 [22:10<21:15,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 400/810 [22:13<21:07,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|████▉     | 401/810 [22:19<27:54,  4.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|████▉     | 402/810 [22:22<25:20,  3.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|████▉     | 403/810 [22:25<23:41,  3.49s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|████▉     | 404/810 [22:28<22:19,  3.30s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 405/810 [22:31<21:07,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 406/810 [22:33<20:24,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 407/810 [22:36<20:10,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 408/810 [22:39<20:03,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 409/810 [22:42<19:43,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 410/810 [22:45<19:20,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 411/810 [22:48<19:28,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 412/810 [22:51<19:02,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 413/810 [22:54<19:12,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 414/810 [22:56<19:02,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 415/810 [23:00<19:32,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████▏    | 416/810 [23:03<19:47,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████▏    | 417/810 [23:06<19:40,  3.00s/it] 52%|█████▏    | 418/810 [23:08<19:05,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 419/810 [23:12<19:33,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 420/810 [23:15<19:39,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 421/810 [23:18<19:27,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 422/810 [23:20<19:01,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 423/810 [23:23<18:28,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 424/810 [23:26<18:41,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 425/810 [23:29<18:26,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 426/810 [23:32<18:13,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 427/810 [23:35<18:04,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 428/810 [23:37<18:05,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 429/810 [23:40<18:11,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 430/810 [23:43<18:18,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 431/810 [23:46<18:11,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 432/810 [23:49<18:27,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 433/810 [23:52<18:57,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▎    | 434/810 [23:55<18:41,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▎    | 435/810 [23:58<18:00,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 436/810 [24:01<18:01,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 437/810 [24:04<17:59,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 438/810 [24:07<17:56,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 439/810 [24:09<17:45,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 440/810 [24:13<18:05,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 441/810 [24:15<17:57,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▍    | 442/810 [24:18<17:15,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▍    | 443/810 [24:21<17:10,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▍    | 444/810 [24:23<16:56,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▍    | 445/810 [24:27<17:22,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▌    | 446/810 [24:29<17:12,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▌    | 447/810 [24:32<17:24,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▌    | 448/810 [24:35<17:54,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▌    | 449/810 [24:38<17:26,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 450/810 [24:41<17:13,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 451/810 [24:44<17:04,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 452/810 [24:47<17:07,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 453/810 [24:50<17:06,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 454/810 [24:52<17:02,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 455/810 [24:56<17:25,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▋    | 456/810 [24:59<17:30,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▋    | 457/810 [25:02<17:45,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 458/810 [25:05<17:41,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 459/810 [25:08<17:40,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 460/810 [25:12<20:24,  3.50s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 461/810 [25:20<28:15,  4.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 462/810 [25:23<24:25,  4.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 463/810 [25:26<21:43,  3.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 464/810 [25:29<20:25,  3.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 465/810 [25:32<19:35,  3.41s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 466/810 [25:35<18:18,  3.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 467/810 [25:38<17:54,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 468/810 [25:40<17:14,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 469/810 [25:43<17:08,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 470/810 [25:49<21:39,  3.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 471/810 [25:52<20:25,  3.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 472/810 [25:56<19:55,  3.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 473/810 [25:59<19:06,  3.40s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▊    | 474/810 [26:03<19:54,  3.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▊    | 475/810 [26:06<18:43,  3.35s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 476/810 [26:08<17:37,  3.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 477/810 [26:11<17:41,  3.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 478/810 [26:14<17:09,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 479/810 [26:17<16:38,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 480/810 [26:20<16:25,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 481/810 [26:23<16:10,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|█████▉    | 482/810 [26:26<15:39,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|█████▉    | 483/810 [26:29<16:01,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|█████▉    | 484/810 [26:32<16:36,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|█████▉    | 485/810 [26:35<16:36,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|██████    | 486/810 [26:40<18:51,  3.49s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|██████    | 487/810 [26:43<18:40,  3.47s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|██████    | 488/810 [26:46<17:48,  3.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|██████    | 489/810 [26:49<17:26,  3.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|██████    | 490/810 [26:53<17:34,  3.30s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 491/810 [26:55<16:46,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 492/810 [26:59<16:43,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 493/810 [27:03<18:31,  3.51s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 494/810 [27:06<17:35,  3.34s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 495/810 [27:10<18:26,  3.51s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 496/810 [27:16<22:52,  4.37s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████▏   | 497/810 [27:20<22:34,  4.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████▏   | 498/810 [27:24<21:27,  4.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 499/810 [27:27<20:20,  3.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 500/810 [27:30<18:35,  3.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 501/810 [27:33<17:34,  3.41s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 502/810 [27:36<17:02,  3.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 503/810 [27:39<16:18,  3.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 504/810 [27:42<15:56,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 505/810 [27:49<22:09,  4.36s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 506/810 [27:52<19:56,  3.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 507/810 [27:55<18:27,  3.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 508/810 [27:59<17:51,  3.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 509/810 [28:01<16:37,  3.31s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 510/810 [28:05<16:42,  3.34s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 511/810 [28:08<15:58,  3.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 512/810 [28:13<19:20,  3.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 513/810 [28:16<17:44,  3.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 514/810 [28:19<17:02,  3.45s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▎   | 515/810 [28:22<16:08,  3.28s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▎   | 516/810 [28:25<15:46,  3.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 517/810 [28:28<14:57,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 518/810 [28:31<14:39,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 519/810 [28:34<14:34,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 520/810 [28:37<14:15,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 521/810 [28:40<14:09,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 522/810 [28:42<13:59,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▍   | 523/810 [28:45<13:57,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▍   | 524/810 [28:48<13:56,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▍   | 525/810 [28:51<14:09,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▍   | 526/810 [28:54<13:39,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▌   | 527/810 [28:57<13:36,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▌   | 528/810 [29:00<13:41,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▌   | 529/810 [29:03<13:53,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▌   | 530/810 [29:06<13:55,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 531/810 [29:09<13:50,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 532/810 [29:12<13:57,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 533/810 [29:15<14:02,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 534/810 [29:19<14:29,  3.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 535/810 [29:21<14:03,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 536/810 [29:24<13:54,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▋   | 537/810 [29:27<13:42,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▋   | 538/810 [29:30<13:26,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 539/810 [29:35<16:01,  3.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 540/810 [29:38<14:55,  3.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 541/810 [29:41<14:00,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 542/810 [29:44<13:58,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 543/810 [29:47<13:29,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 544/810 [29:49<13:14,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 545/810 [29:52<12:54,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 546/810 [29:55<12:56,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 547/810 [29:58<12:55,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 548/810 [30:01<12:49,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 549/810 [30:04<12:50,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 550/810 [30:07<12:40,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 551/810 [30:10<12:28,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 552/810 [30:13<12:23,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 553/810 [30:16<12:23,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 554/810 [30:18<12:17,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▊   | 555/810 [30:21<12:07,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▊   | 556/810 [30:24<12:40,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 557/810 [30:27<12:35,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 558/810 [30:30<12:10,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 559/810 [30:33<11:52,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 560/810 [30:37<13:04,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 561/810 [30:39<12:30,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 562/810 [30:42<12:01,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|██████▉   | 563/810 [30:45<11:50,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|██████▉   | 564/810 [30:58<23:56,  5.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|██████▉   | 565/810 [31:01<20:40,  5.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|██████▉   | 566/810 [31:04<17:45,  4.36s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|███████   | 567/810 [31:07<16:20,  4.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|███████   | 568/810 [31:10<15:04,  3.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|███████   | 569/810 [31:13<13:59,  3.48s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|███████   | 570/810 [31:16<13:03,  3.27s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|███████   | 571/810 [31:18<12:35,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 572/810 [31:21<11:57,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 573/810 [31:24<11:41,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 574/810 [31:27<11:25,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 575/810 [31:30<11:25,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 576/810 [31:33<11:15,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 577/810 [31:35<11:07,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████▏  | 578/810 [31:38<11:07,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████▏  | 579/810 [31:41<11:09,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 580/810 [31:44<11:16,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 581/810 [31:47<11:23,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 582/810 [31:50<10:59,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 583/810 [31:53<11:04,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 584/810 [31:56<10:45,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 585/810 [31:59<10:49,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 586/810 [32:02<11:05,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 587/810 [32:05<10:52,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 588/810 [32:07<10:44,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 589/810 [32:10<10:30,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 590/810 [32:13<10:29,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 591/810 [32:17<11:23,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 592/810 [32:20<11:19,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 593/810 [32:23<11:01,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 594/810 [32:32<17:39,  4.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 595/810 [32:35<15:38,  4.37s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▎  | 596/810 [32:52<28:51,  8.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▎  | 597/810 [32:55<23:05,  6.51s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 598/810 [32:57<18:54,  5.35s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 599/810 [33:00<16:11,  4.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 600/810 [33:03<14:26,  4.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 601/810 [33:06<13:06,  3.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 602/810 [33:09<11:57,  3.45s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 603/810 [33:12<11:43,  3.40s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▍  | 604/810 [33:15<11:28,  3.34s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▍  | 605/810 [33:18<11:08,  3.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▍  | 606/810 [33:21<10:38,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▍  | 607/810 [33:24<10:18,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▌  | 608/810 [33:27<10:02,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▌  | 609/810 [33:30<09:38,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▌  | 610/810 [33:35<11:39,  3.50s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▌  | 611/810 [33:38<11:09,  3.36s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 612/810 [33:41<10:56,  3.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 613/810 [33:44<10:18,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 614/810 [33:46<09:57,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 615/810 [33:49<09:53,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 616/810 [33:52<09:33,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 617/810 [33:55<09:23,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▋  | 618/810 [33:58<09:21,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▋  | 619/810 [34:01<09:28,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 620/810 [34:04<09:30,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 621/810 [34:07<09:47,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 622/810 [34:11<09:44,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 623/810 [34:16<12:07,  3.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 624/810 [34:20<11:33,  3.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 625/810 [34:22<10:40,  3.46s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 626/810 [34:26<10:16,  3.35s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 627/810 [34:29<10:03,  3.30s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 628/810 [34:32<09:41,  3.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 629/810 [34:34<09:08,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 630/810 [34:38<09:36,  3.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 631/810 [34:41<09:08,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 632/810 [34:44<09:02,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 633/810 [34:47<09:01,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 634/810 [34:50<09:14,  3.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 635/810 [34:53<09:03,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▊  | 636/810 [34:56<08:41,  3.00s/it] 79%|███████▊  | 637/810 [34:59<08:39,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 638/810 [35:02<08:37,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 639/810 [35:05<08:45,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 640/810 [35:08<08:41,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 641/810 [35:11<08:22,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 642/810 [35:14<08:25,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 643/810 [35:17<08:14,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|███████▉  | 644/810 [35:21<08:58,  3.24s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|███████▉  | 645/810 [35:24<08:46,  3.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|███████▉  | 646/810 [35:27<08:32,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|███████▉  | 647/810 [35:30<08:13,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 648/810 [35:33<08:07,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 649/810 [35:36<08:14,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 650/810 [35:39<08:00,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 651/810 [35:42<07:58,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).

4031390_20201_2_0,45byep4icz,1.6837184976216022,-68.92789164992377,-49.509916948479855

2735386_20201_2_0,45d51o4icz,4.404703995001875,-75.99804156646547,-91.09110514641381

4020630_20201_2_0,45dj9o4icz,0.7683602576899219,-83.8266810182474,-41.54076662124561

1066346_20201_2_0,45oq6n4icz,1.5407431414047095,-79.53129407108136,-58.68064867744225

1413854_20201_2_0,45qxpo4icz,4.092390123175065,-91.69644207913507,-33.74122680070499

5749572_20201_2_0,45ryfo4icz,-0.30337848693810926,-65.24850120209845,-49.76012310332797

3071002_20201_2_0,45tlsn4icz,-0.7409614312773977,-147.0267836993061,-16.569064027199033

2252010_20201_2_0,45vamo4icz,-0.7471530117477392,-55.55434306841124,-30.654344487826464

3038754_20201_2_0,45wczo4icz,-1.909668653292498,-114.81611838501257,-29.746663256535157

4644812_20201_2_0,45z18p4icz,5.128153705657292,-98.28113009678228,-52.860727352934504

2394399_20201_2_0,45zeao4icz,-2.8555175738066096,-95.60882972893157,-14.037186153085926

1577198_20201_2_0,46254p4icz,-1.3197211557719084,-121.88272905933118,-16.704133298044667

4267062_20201_2_0,468y4o4icz,2.6424955789466065,-121.88717113019922,-38.12304731216116

5515135_20201_2_0,469d5o4icz,-1.8271025910152896,-111.15128990338789,-40.57656058695724

1485159_20201_2_0,469mqo4icz,0.14038273343132593,-58.52523573995947,-27.451982387502568

5246604_20201_2_0,46bkho4icz,11.739362130496618,-47.82161814034751,-79.51691140370235

1778398_20201_2_0,46d1do4icz,2.5096486583318565,-67.16737410380347,-64.913342078265

4138187_20201_2_0,46f96p4icz,0.19452819744552707,-135.88194601920623,-42.50994647503745

1844470_20201_2_0,46hxho4icz,-2.490575737562252,-82.49413511504835,-8.508322224840754

3865573_20201_2_0,46ipfn4icz,0.3080013853810828,-76.25542950559444,-44.11538818102915

5717884_20201_2_0,46jsgo4icz,-0.565722354534864,-134.12593450001344,-28.81386775891346

4150936_20201_2_0,46m3ao4icz,1.5432878216330401,-137.24729646043647,-35.28246763685948

4815327_20201_2_0,46pveo4icz,-1.7969213355455,-113.24900388756163,-26.636256674227667

5095804_20201_2_0,46ro9p4icz,0.023969863787988533,-88.36370379000323,-39.080759252456815

4846080_20201_2_0,46tmbo4icz,1.5975157504034099,-74.81590985428008,-41.22129926664073

4342048_20201_2_0,477tsn4icz,-1.7900197365439219,-83.71314366810984,-23.850719505520985

5662529_20201_2_0,47fqgn4icz,-0.23469235687934756,-123.27158743209188,-46.9026045350231

5611094_20201_2_0,47khpo4icz,10.037648301846223,-95.31989818210369,-78.43139776864716

4691686_20201_2_0,47knto4icz,-1.9399044592255401,-79.41515420731326,-11.110068668494606

2124374_20201_2_0,47p0io4icz,-2.8525819529373138,-90.05701600734344,-5.732343763798184

4042911_20201_2_0,47qnun4icz,-0.28878147670842197,-126.39600645335639,-35.02184668296897

1607953_20201_2_0,47r3eo4icz,0.7831175460279772,-106.724146716651,-35.54272794029846

5797595_20201_2_0,47rnfp4icz,-0.615983336081106,-106.29205363310655,-50.63845491770208

4507766_20201_2_0,47s6kp4icz,3.5746165028738006,-73.3488308625711,-62.28062427659617

5462201_20201_2_0,47tdpo4icz,2.351739706563664,-81.0912635150633,-55.63751173802143

1962987_20201_2_0,47u33o4icz,-33.48589612393082,-111.65960112813121,192.39850348496793

1938379_20201_2_0,47x1nn4icz,2.4373110424200215,-109.50619129711515,-73.2778263635674

3337836_20201_2_0,47zpxo4icz,-66.18702174456057,-114.39084048370998,480.0124313546471

3660603_20201_2_0,481kan4icz,-1.298192536278358,-108.79156372202203,-34.173756609208084

1348121_20201_2_0,485r6o4icz,-1.0896917183485866,-89.42621916993056,-32.82179330338502

1143018_20201_2_0,486l9o4icz,-1.1805840055385597,-104.18341226843552,-20.639244836379703

3122374_20201_2_0,48bmao4icz,-1.642742092948395,-127.84127581997532,-25.64942421678255

5450411_20201_2_0,48dx5o4icz,-2.4533793689511736,-115.15604192880824,-31.82159540134134

2855120_20201_2_0,48f67p4icz,0.6736367865032412,-114.25631192307497,-31.19467696748245

4670100_20201_2_0,48f6bn4icz,-0.616797120778517,-120.62309007040525,-31.53515260180501

5428027_20201_2_0,48jhrn4icz,-1.3443574997921126,-122.07773313318327,-38.30872148117858

5584943_20201_2_0,48u1lo4icz,-3.037405001333651,-93.82700612996743,-45.20244908847296

4278288_20201_2_0,48zowo4icz,0.6930715479210463,-81.50483962479188,-45.527239331961454

2216242_20201_2_0,493ucp4icz,-1.1329377838744064,-133.42979003051943,-41.918109574683754

3343489_20201_2_0,495ono4icz,-3.6192062129704445,-69.09620684912687,-11.940161136751655

3892517_20201_2_0,49986n4icz,-0.9288895169991788,-131.95200230170093,-44.03222328675794

5334949_20201_2_0,49al9p4icz,-0.9304062368742158,-84.50777710538682,-31.716177155297927

4531496_20201_2_0,49fxno4icz,0.420102989460865,-100.95107604506816,-43.05069533210464

5104145_20201_2_0,49fzwn4icz,-1.8348279747098792,-107.35925902627284,-35.314669919789736

2400661_20201_2_0,49hh9p4icz,-1.0543440064671574,-69.54486285414606,-26.07458412561735

2823609_20201_2_0,49hiso4icz,0.9327649330895764,-86.03474779581538,-43.38508544876014

5668914_20201_2_0,49jgao4icz,-0.22374602944996472,-69.03531840034327,-41.8116363011941

2294587_20201_2_0,49kv6p4icz,1.2151659125829843,-63.501054351708206,-47.124372841983586

4903667_20201_2_0,49o9go4icz,0.2195251038594484,-71.41250103723266,-31.854158713649156

2602938_20201_2_0,49phtn4icz,5.849211729203851,-77.5389933506338,-69.92999149434338

2155492_20201_2_0,49yrzo4icz,-0.6806235139462138,-105.606789401881,-21.95797245101292

5875939_20201_2_0,49zvnn4icz,0.21584233009461953,-121.52617662912655,-30.77307498452241

4897725_20201_2_0,4a0v6p4icz,-0.49400775228489946,-92.0830194663713,-32.01769457322615

3351640_20201_2_0,4a28dn4icz,-0.07590332366684674,-110.9408452770497,-43.21600914433611

1127473_20201_2_0,4a53xo4icz,1.809661800236303,-67.03144258058543,-55.928953962133434

2179722_20201_2_0,4a5ain4icz,-1.6388425521617642,-127.66215663373112,-32.94857481736008

2660151_20201_2_0,4abpqn4icz,-1.4227704147003093,-144.4568114996079,-23.266054032325144

1692890_20201_2_0,4aoo9n4icz,-0.2356314242638477,-117.7093074436124,-53.864881566471695

5582710_20201_2_0,4aouhn4icz,-3.0117478029994236,-100.23655002590974,-18.456176242932244

1008481_20201_2_0,4asesn4icz,-0.759555611648175,-107.33785449826877,-34.95412535261892

5085945_20201_2_0,4ax8jn4icz,-7.689816223740201,-89.73863380910726,-8.641188674105393

3813134_20201_2_0,4axl4p4icz,1.1984844087885347,-74.45123512524398,-48.356168195423336

5042127_20201_2_0,4az2tn4icz,1.448110087314046,-107.88049058775835,-42.39432649021316

3689101_20201_2_0,4b23xn4icz,-0.5235892770380332,-107.98351035098545,-21.26895877716919

3432811_20201_2_0,4b5z1p4icz,1.502712134060889,-101.93621036394188,-56.99907263107059

1294277_20201_2_0,4benmo4icz,2.4218965734494655,-76.11428064128276,-45.18572051882124

5767499_20201_2_0,4bjoap4icz,0.8527214657456115,-96.06236001159192,-42.90421548308214

5143801_20201_2_0,4blyfn4icz,-1.0715165707500338,-87.5362227146233,-43.24161065602016

4810759_20201_2_0,4bveeo4icz,-3.6693325510215353,-96.1436136852036,-15.639598060412823

2390255_20201_2_0,4c63mo4icz,1.1813052540176432,-102.4836843530943,-48.86777756713818

1462446_20201_2_0,4c7kfp4icz,1.2988973446995957,-77.35486524900486,-57.23702175020098

2871557_20201_2_0,4camho4icz,2.3159245950282736,-50.91128233457215,-50.35429090623634

5194492_20201_2_0,4cdzwn4icz,2.441121780243866,-106.00096762696526,-40.06573047970426

5539273_20201_2_0,4cfx3p4icz,-2.2793336348266355,-87.60746346672582,-29.903964513775392

1555789_20201_2_0,4cj88n4icz,0.794144721454783,-98.9469152465841,-39.94604319739024

1919032_20201_2_0,4couto4icz,-0.7829583629351425,-109.36387408779422,-14.205465284206056

5279894_20201_2_0,4cvfbp4icz,-2.920440970360298,-105.57365281876093,-28.649828133166466

2098710_20201_2_0,4cyu6p4icz,0.5673923758636222,-116.93331819357726,-56.94454173054528

3664639_20201_2_0,4czysn4icz,0.11111310165806228,-122.34509249296966,-35.60015339284256

1005698_20201_2_0,4d828p4icz,6.398497479432673,-40.40699979334343,-87.08775156911068

2898428_20201_2_0,otaqno4icz,0.2092272847014005,-129.72803433304932,-44.54879098553518

1685672_20201_2_0,4deswn4icz,1.1923405049900209,-76.1090571566371,-36.03888056802252

2147548_20201_2_0,4deuep4icz,-0.04335623929586265,-109.88999154608592,-50.10213024054451

3441089_20201_2_0,4dh5dp4icz,1.789852076707057,-94.82444381179135,-44.60008857805262

4670542_20201_2_0,4dhdhp4icz,4.162943597643942,-83.68109693945493,-55.439284646975054

5811683_20201_2_0,4dkx3o4icz,-3.036091026686608,-72.8810724479597,-29.320258801706956

1714095_20201_2_0,4do7po4icz,1.4185849330044518,-112.97400687650497,-27.27128165187358

5727736_20201_2_0,4do86p4icz,-0.2264317582450194,-110.89991564769525,-50.21420199230393

2361444_20201_2_0,4dqdgo4icz,-0.8383976821566081,-85.88974761190903,-37.17534613450236

3030932_20201_2_0,4duo6n4icz,-2.525146382142726,-76.07664358384702,-34.22788424682604

5429565_20201_2_0,4dybtn4icz,-0.4647632668212685,-142.45321517434274,-21.886396120513865

4633410_20201_2_0,4dzlso4icz,-1.4531424647113862,-72.92797414122873,-8.172436832099436

5671479_20201_2_0,4e0i8o4icz,0.0005687892022447699,-94.4270138995135,-32.89594592629024

5262560_20201_2_0,4e576p4icz,-1.4377115698886673,-96.39361519774454,-40.94692633291527

1046313_20201_2_0,4e7kmo4icz,0.08479012584571427,-98.26736690805973,-36.16283239054232

5793196_20201_2_0,4eaemo4icz,-0.9023163982035377,-110.38942108080386,-29.210242135919216

2085921_20201_2_0,4ebmho4icz,-0.4403047251463477,-70.87531049181041,-20.743240509499586

4762679_20201_2_0,4ed47n4icz,-1.734258317108194,-120.34386161380382,-9.383282864710765

3310785_20201_2_0,4eevfo4icz,0.8249560607672433,-128.71682683832933,-25.43185271131017

3541041_20201_2_0,4ejj0p4icz,-0.5200275337394917,-132.2589653081922,-24.77676986113407

2391034_20201_2_0,4el64o4icz,1.262909469467076,-53.91640131313727,-47.92414493117006

4734368_20201_2_0,4emwyo4icz,4.569965188999387,-51.48118706682362,-64.11018387520204

2847925_20201_2_0,4eomwn4icz,-1.3776185300757031,-91.78504553563278,-32.403823447204346

3472104_20201_2_0,4ep5nn4icz,-0.9070575671835174,-94.15635997863708,-27.30371446036432

1279081_20201_2_0,4euhvo4icz,-0.2496807133172623,-98.97900344271122,-39.88698170817949

2832591_20201_2_0,4eyj8o4icz,-1.9649821190146086,-87.37015135565008,-14.272899288712509

5639601_20201_2_0,4f0uwn4icz,2.986318607877911,-83.94718998582621,-46.603266483405676

2444647_20201_2_0,4f54co4icz,-2.3863606040632823,-127.75640081293275,-23.288795059083583

1128805_20201_2_0,4f58cp4icz,-1.1158102218030586,-114.97003428135727,-24.026355815310808

2949026_20201_2_0,4f71fo4icz,1.6426006604890209,-73.72004977001333,-31.116556123526834

4702552_20201_2_0,4fecoo4icz,0.9909016216340717,-62.74646589237679,-29.51931449561573

2537775_20201_2_0,4fgk3p4icz,1.3056270528763945,-45.48269305945962,-39.61346768941485

2847963_20201_2_0,4fgoin4icz,0.12474308443255655,-93.82739030680102,-29.9658496604914

4915148_20201_2_0,4fm49o4icz,0.12675557166422083,-119.12877904741774,-46.654779460157314

2794929_20201_2_0,4fuyoo4icz,-0.046522327205763866,-114.12826033095484,-38.45097735745743

3605124_20201_2_0,4fy11p4icz,-0.8407589707556207,-123.14791503301993,-28.153503179177903

2529255_20201_2_0,4g15sn4icz,0.126678555328272,-91.21348250736116,-31.215964813984186

1377506_20201_2_0,4g1w7o4icz,-8.068468224766868,-155.41755835609823,14.167160000796443

3473954_20201_2_0,4g2opn4icz,-0.7561908623735306,-111.4476866103584,-17.03017261428414

2573923_20201_2_0,4gc84o4icz,-3.2952147287712754,-100.35374599274948,-31.796061393759956

5515221_20201_2_0,4gffgn4icz,-0.6549363812010968,-82.32789496137133,-20.587455796832288

2221477_20201_2_0,4giydp4icz,-13.073765986585284,-130.6718718432145,27.167282405126755

1560073_20201_2_0,4gkvwn4icz,-3.0295226133093927,-89.81845956860883,-26.103446414396274

1002117_20201_2_0,4gtkno4icz,2.5250012913844353,-59.55376731307584,-42.58617910366547

4754612_20201_2_0,4gwh4p4icz,0.9291259936102434,-89.14238484422131,-43.66065114269958

4808598_20201_2_0,4gx8qn4icz,-2.6895456129127475,-85.63433067722008,-20.073845916922068

3559328_20201_2_0,4h18jp4icz,-2.128158547202645,-115.38854411542775,-23.608734256831198

5604431_20201_2_0,4h3cvo4icz,3.4052533649368466,-72.60769579122532,-56.06446483744804

5260904_20201_2_0,4h5m8o4icz,-2.16806908169088,-80.25379930064906,-24.204439785027333

2863731_20201_2_0,4hb9qo4icz,29.241750947158884,-103.64522978797694,80.1215159493774

4451473_20201_2_0,4hd65p4icz,0.9946275804555932,-77.76620022044906,-42.88878160705127

2063776_20201_2_0,4hdnto4icz,2.3499582327417383,-76.5455811039273,-56.23010640640993

6017031_20201_2_0,4hevvo4icz,1.8077200743133852,-100.72927428271723,-48.52414992599786

3996775_20201_2_0,4hfecn4icz,-0.3092264376084823,-134.65167581363283,-22.691430596549182

3949529_20201_2_0,4hgtco4icz,2.1240325130602025,-66.67232015355904,-46.5614367871965

4519324_20201_2_0,4hjrsn4icz,-3.0206403499735446,-129.95621959204462,-23.323910772647636

3486874_20201_2_0,4hn99n4icz,-1.029588655944337,-88.22402059933688,-31.170946713185955

5225104_20201_2_0,4hpsvn4icz,0.29430946135558905,-83.55703405493324,-34.78852503840184

4349128_20201_2_0,4hpuvn4icz,1.7625027371911648,-137.02393788322118,-44.464094712677635

4556763_20201_2_0,4hq8on4icz,-3.534170785331947,-123.23264208019071,0.24258530389136013

2711308_20201_2_0,4hqgfp4icz,3.281478129169793,-59.84920305035314,-59.44766546636865

2764417_20201_2_0,4hrr6p4icz,-5.002752087638754,-133.3961315898631,1.0902107523488098

1349569_20201_2_0,4hwu9p4icz,-1.3730622160031163,-83.99953473677789,-35.03697698294559

3824978_20201_2_0,4hy7ep4icz,-3.965101244833138,-113.10715348709334,-23.496179316132555

4273897_20201_2_0,4i3w3p4icz,0.12075065423154817,-74.48362275159565,-49.59129949660253

2226556_20201_2_0,4i656o4icz,-1.6490825976009005,-118.43652570641694,-41.676589711555096

5616890_20201_2_0,4iafep4icz,3.4834878201351462,-67.9904143084089,-45.39492586532772

5725027_20201_2_0,4ibxqo4icz,-2.585204176642385,-155.86959828568376,-17.891316665209985

1783714_20201_2_0,4iigsn4icz,-0.423247986954851,-92.5184471868885,-47.51281636820585

1336519_20201_2_0,4ij6ko4icz,-0.319921177184766,-90.9435576040149,-20.182142828425995

2167695_20201_2_0,4ijgzo4icz,7.55159976392967,-85.1048492220068,-46.20413811481899

2172773_20201_2_0,4ijq9o4icz,-2.203116404146674,-113.94317172601012,-24.146831806032424

2380523_20201_2_0,4ill9p4icz,-1.1666173455098559,-115.57843679002602,-27.235248646884813

5951574_20201_2_0,4ioasn4icz,-0.22403961702793773,-127.39934104335168,-29.75205686360512

1566514_20201_2_0,4isino4icz,-2.755431001237948,-80.3509497385823,-21.969654400463398

5730518_20201_2_0,4ivu4p4icz,-2.5833106271027266,-112.82176200406073,-3.4547354532998753

4340633_20201_2_0,4ixn8p4icz,-0.1072009962842266,-126.96642737136443,-35.22528222784446

1696937_20201_2_0,4iyg3p4icz,-2.8166985271523357,-128.02264742832313,-18.261947566027686

2409200_20201_2_0,4j1ryo4icz,4.977478263970637,-84.02999279996175,-68.10620629874288

4020936_20201_2_0,4j6fuo4icz,0.7978335584748937,-49.12423530690688,-36.905150932219414

1953760_20201_2_0,4j7v2p4icz,0.6315266050106649,-127.18388626830824,-63.898283187337285

4851119_20201_2_0,4j8fap4icz,2.443214119794627,-43.24332804708672,-63.552480455045156

2900089_20201_2_0,4jbq9o4icz,-0.18979789342931153,-106.95648010986469,-35.670438369658555

3012684_20201_2_0,4jlqno4icz,-0.3109220532332323,-120.31701499439478,-16.786363402002095

5930306_20201_2_0,4jn4bn4icz,0.37974987053926273,-133.7919782901809,-43.86317620229329

2950863_20201_2_0,4jn6ko4icz,-0.3749186646858735,-118.34226673733642,-33.51504032166392

5046244_20201_2_0,4jnmen4icz,1.3310430007630587,-92.27150235731835,-64.29288169388397

1154034_20201_2_0,4js48n4icz,-2.71173498354716,-119.9010908190387,-10.449357846810557

5402242_20201_2_0,4jseao4icz,-0.650024411930059,-92.27988448988245,-30.313155327978407

3866876_20201_2_0,4jxaan4icz,-0.8641244985743625,-104.83610657483192,-29.65816232904787

3435333_20201_2_0,4jz06o4icz,-0.9526097441737639,-65.30249976156338,-36.051018631106245

3393297_20201_2_0,mupqmn4icz,-0.3874108960893959,-88.37773626220005,-40.3302280893333

3675412_20201_2_0,4k0cbn4icz,0.1423576334576398,-118.51956252951348,-26.325423308969775

1058237_20201_2_0,4k4uro4icz,-0.6572801235743548,-97.99054348836401,-42.77779990922896

1874750_20201_2_0,4kavqn4icz,-0.9801644722381696,-105.90092427586526,-34.02804831214655

4635013_20201_2_0,4kbhwo4icz,2.383867006120577,-81.97849449841115,-55.46860123540887

1562165_20201_2_0,4keugp4icz,0.8252330929920986,-104.72320317284888,-27.530659201193146

2984611_20201_2_0,4klmzo4icz,0.9637664336754038,-96.63277110371627,-39.677869953683086

2238938_20201_2_0,4koe8p4icz,-3.357223462404281,-106.25463009302078,-30.461358436387513

2618005_20201_2_0,4kr4gp4icz,32.92966808334873,17.536064545012266,-139.1515045733648

1224163_20201_2_0,4kt4ip4icz,-0.2581046400551463,-51.348605997809074,-31.088751206825776

5472894_20201_2_0,4kvhxn4icz,-1.4486745602082065,-95.75526579538877,-31.5454702418766

2719502_20201_2_0,4kyico4icz,0.4853863843378356,-75.59282935465953,-40.33601587670131

4548553_20201_2_0,4l2von4icz,-1.8059773133142,-110.13428210858592,-7.356896100119002

3015369_20201_2_0,4l3bsn4icz,2.5696556028163284,-110.22924870055084,-54.175352691372396

3844920_20201_2_0,4l3c9o4icz,1.6063454503175114,-106.78197402944522,-44.353126451851494

2384640_20201_2_0,4l3fap4icz,1.0307328529111157,-113.57258724595323,-26.143304581795604

1654612_20201_2_0,4l3v6p4icz,-0.6229075565551518,-89.74401360182708,-38.98226862266095

5692777_20201_2_0,4l78ip4icz,1.0494711231624099,-92.5645084590056,-48.99767250508876

3723851_20201_2_0,4l8i8o4icz,-6.515506014307368,-55.09715006218761,17.739591719996895

1437740_20201_2_0,4l9urn4icz,0.40139428445651715,-102.08787714345829,-43.29666981133411

1660881_20201_2_0,4lbd3o4icz,-1.845863247833414,-149.74319368592668,-8.124066639591021

2337817_20201_2_0,4lbhcp4icz,0.5212596922079016,-86.73013858485672,-52.728882938196875

3902659_20201_2_0,4ldujp4icz,0.6716360599745086,-60.56857992415644,-39.656093982385215

1190738_20201_2_0,4lkhbp4icz,-0.06335355975346699,-104.21893624462257,-41.990555436055104

3409797_20201_2_0,4llzwo4icz,-0.49257046909858365,-96.24470842908659,-54.570696297060934

1128397_20201_2_0,4lmwmn4icz,0.5553517308612385,-81.70718632060951,-32.91707737512343

1257103_20201_2_0,4lzipo4icz,2.3072185975559187,-46.38123978236197,-53.15674098739974

1704647_20201_2_0,4lzloo4icz,-12.295180962655952,-151.18178710976278,29.225513125862193

4146439_20201_2_0,4m7mzo4icz,-0.019659614526912533,-68.60964394923059,-27.352652940405278

3497363_20201_2_0,4mbbso4icz,-0.963105437319638,-79.41942730523624,-32.788105039320186

2654059_20201_2_0,4mbwtn4icz,-6.761105524469431,-108.36789465557123,13.467263991233139

2928533_20201_2_0,4mhgjn4icz,-2.473576921069245,-90.59476691603524,-26.08833805993561

2488755_20201_2_0,4mlzbn4icz,-1.6428244256531914,-115.61175251303081,-45.02048977109372

4137209_20201_2_0,4mpfdn4icz,2.5546547995850504,-74.99193961099871,-38.69026516831673

4335138_20201_2_0,4mvrao4icz,-0.3708894914554752,-100.73336857992041,-35.441680162445465

2659235_20201_2_0,4mwihp4icz,2.2555819831031596,-105.82682859581226,-65.44806073571374

5354552_20201_2_0,4mx9io4icz,0.2895574105455719,-99.43736648646166,-43.496822073585946

3480946_20201_2_0,4mxtln4icz,-1.2189840672692833,-101.26232368032643,-34.04397112591485

5329491_20201_2_0,11ynso4icz,-0.23782641696403575,-105.5151293681302,-39.94636343841759

1626143_20201_2_0,4n1bln4icz,-1.741401098402931,-98.49928877966639,-20.068270910583593

3127869_20201_2_0,4n22ho4icz,1.8151151502595668,-82.48780425230103,-46.611008098420456

4439952_20201_2_0,4n2c2p4icz,4.574770185663085,-84.75969509855287,-54.03667511828762

2152876_20201_2_0,4nc3xo4icz,-1.7729373813821212,-103.04686112902272,-33.84366079831058

2730037_20201_2_0,4nd8gp4icz,1.2524152801345558,-108.32943378572395,-49.19387556183304

1969828_20201_2_0,4ndd5p4icz,6.034990777153008,-77.29655949323853,-77.88664582020192

4387171_20201_2_0,4ndjyo4icz,-2.1020091586299685,-58.02970017818029,-23.322681419196243

2265508_20201_2_0,4nfg4p4icz,3.302810322634912,-53.1767863296663,-62.02531145955325

1680012_20201_2_0,4ngeqn4icz,-1.4736815484633572,-109.12543778429705,-11.25410397822742

1389329_20201_2_0,4nheko4icz,-4.5520635031026435,-111.74833304230768,-19.848976130409554

1819739_20201_2_0,4njkzo4icz,-1.5264690163643908,-105.80434550319148,-40.9793898286417

3539801_20201_2_0,4nqmyo4icz,0.33192702001174756,-62.28161026675252,-32.41253629859605

4736652_20201_2_0,4o1e0p4icz,-0.9642340651577159,-106.26463722100931,-26.86378572419106

2062391_20201_2_0,4o2ifo4icz,0.2852505943190341,-69.16261846964463,-31.11177247909417

5717307_20201_2_0,4o40cn4icz,-1.5102007740710666,-144.37616542641797,-38.047116487906735

4593055_20201_2_0,4o6win4icz,-4.889974707687825,-137.1342744449773,-8.527372262223594

4763072_20201_2_0,4o7vdp4icz,2.685821254063468,-80.85887859671647,-75.81869792447374

5271417_20201_2_0,4o82hp4icz,0.17843680231068487,-69.218261515987,-51.90537197589998

3939065_20201_2_0,4ob9fp4icz,-0.292066131207384,-93.4310328383718,-28.092607029260208

3815000_20201_2_0,4oc5fp4icz,-0.3609192865591724,-88.84668791318524,-36.2480869085979

5984662_20201_2_0,4odxuo4icz,1.980358439292965,-63.92503606654333,-43.20739851090693

1130645_20201_2_0,4ogj7p4icz,-0.7103109416779912,-95.13402802213147,-23.92910989943819

1242060_20201_2_0,4olpbp4icz,0.09155012746226032,-80.2983724424744,-32.913383486484975

1929180_20201_2_0,4opghp4icz,-1.3129699246015178,-41.79234122737813,-43.66423272932394

2424746_20201_2_0,4oq6on4icz,5.456857986370512,-63.85388258498642,-56.13802274633423

5274691_20201_2_0,4oradp4icz,0.5928808642361503,-82.34098099584702,-45.161173615238155

3902313_20201_2_0,4oukjo4icz,-0.35964697166899384,-71.39993400296629,-27.986094784941486

1477328_20201_2_0,4oupco4icz,2.2740238013443603,-69.62702301734288,-38.46931619802331

4723608_20201_2_0,4p0j0o4icz,0.04230363834281549,-78.9718288208052,-39.12532898978489

2878901_20201_2_0,4p0wyo4icz,0.45426322121921436,-86.92231373352087,-53.68199250592485

1261616_20201_2_0,4p1npo4icz,2.4640406563717514,-122.54300720231836,-64.0410954539193

3255063_20201_2_0,4p6lon4icz,1.3375814434370183,-78.15347778013026,-31.750058170577077

2427126_20201_2_0,4p85kp4icz,0.5655878798987775,-108.07852992256295,-28.77840058196236

1985619_20201_2_0,4p8kso4icz,-4.25130943481015,-90.23849054683146,-7.050582093087002

4667844_20201_2_0,4p9gcn4icz,-0.6808392485587019,-79.51630742485236,-25.020376398599097

5696031_20201_2_0,4pdx3p4icz,-0.9499459776235388,-78.90471404023634,-33.83339637558633

4382555_20201_2_0,4pnilo4icz,-0.17198009425416658,-70.92432507927273,-23.22393826832962

5474249_20201_2_0,4pssyo4icz,-2.9754677892224373,-131.98661463029683,-20.159847748029165

1787463_20201_2_0,4pveco4icz,3.5898413980497077,-86.5027220680708,-52.900780824314126

3496331_20201_2_0,4pwo9p4icz,-1.1283960885842075,-115.99860328406444,-45.75472059247036

5564877_20201_2_0,4q087o4icz,-4.824242023020199,-152.64461171440402,-36.8697179331061

1773292_20201_2_0,4q2qyn4icz,-3.459251008893854,-116.96036546576607,-7.146829906286371

1564318_20201_2_0,4qc5oo4icz,-0.6062931067600025,-129.37746033433135,-28.95814728527145

3009121_20201_2_0,4qd6mn4icz,-1.8759379950251822,-41.04085397723168,-34.14483223036254

3307376_20201_2_0,4qejdo4icz,1.9848594784256195,-156.59417806823,-40.505962692721184

2695950_20201_2_0,4qi34p4icz,0.7569439801927811,-105.99405967415507,-31.155390831840876

4482486_20201_2_0,4qi4cp4icz,-2.601925525689615,-79.26856736598447,-17.793537967447833

4947628_20201_2_0,4qlbpo4icz,1.7812837373138688,-90.65689956714871,-49.98367570580025

4203503_20201_2_0,4qqe8o4icz,-5.619338604919068,-106.95480522918646,-10.814247496846605

3191927_20201_2_0,4qr95o4icz,0.6998185098342636,-87.5893498599597,-26.972437769565502

5022223_20201_2_0,4qri1o4icz,-2.6065555276018455,-97.41315988717173,-21.058306662243666

4025433_20201_2_0,4qvyxo4icz,-0.2613082007831647,-75.62325717894964,-16.353942419232595

1268789_20201_2_0,4qz62p4icz,1.317110857440708,-60.01765611878193,-51.41749118924899

4139402_20201_2_0,4r5rmo4icz,0.7950705555224513,-80.96205966725006,-21.838148517034895

3817033_20201_2_0,4rd8mo4icz,-1.1734787938226567,-103.37630075835952,-21.274366250870628

5706105_20201_2_0,4rdwbp4icz,1.147787231626675,-72.96680722761283,-47.62294087990078

5715168_20201_2_0,4ri0pn4icz,3.5521423137656396,-118.25494803521369,-49.61184034259105

5980327_20201_2_0,4rmzin4icz,0.9195169361323883,-96.94344208960396,-45.65470373184574

4486482_20201_2_0,4rnjvn4icz,-10.794844712071836,-84.60586120959104,22.495028419596935

3584199_20201_2_0,4rpjdp4icz,1.8777061534487605,-79.29277292974618,-62.13377430733591

4550952_20201_2_0,4rq6dp4icz,0.1948514449695274,-86.4180135622527,-33.59358522178148
 80%|████████  | 652/810 [35:45<07:54,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 653/810 [35:47<07:40,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 654/810 [35:50<07:39,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 655/810 [35:53<07:30,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 656/810 [35:56<07:22,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 657/810 [35:59<07:28,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 658/810 [36:22<22:21,  8.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████▏ | 659/810 [36:25<17:48,  7.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████▏ | 660/810 [36:27<14:24,  5.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 661/810 [36:30<12:07,  4.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 662/810 [36:33<10:35,  4.30s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 663/810 [36:36<09:29,  3.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 664/810 [36:39<08:39,  3.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 665/810 [36:42<08:08,  3.37s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 666/810 [36:45<07:48,  3.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 667/810 [36:48<07:36,  3.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 668/810 [36:51<07:25,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 669/810 [36:54<07:03,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 670/810 [36:56<06:51,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 671/810 [36:59<06:55,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 672/810 [37:06<09:30,  4.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 673/810 [37:09<08:31,  3.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 674/810 [37:12<07:54,  3.49s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 675/810 [37:19<10:10,  4.52s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 676/810 [37:32<16:08,  7.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▎ | 677/810 [37:35<13:07,  5.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▎ | 678/810 [37:38<10:59,  5.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 679/810 [37:41<09:40,  4.43s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 680/810 [37:44<08:39,  3.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 681/810 [37:49<08:50,  4.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 682/810 [37:52<08:05,  3.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 683/810 [37:54<07:22,  3.49s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 684/810 [37:57<07:00,  3.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▍ | 685/810 [38:00<06:38,  3.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▍ | 686/810 [38:03<06:26,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▍ | 687/810 [38:06<06:20,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▍ | 688/810 [38:09<06:06,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▌ | 689/810 [38:12<06:09,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▌ | 690/810 [38:15<05:54,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▌ | 691/810 [38:18<05:49,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▌ | 692/810 [38:21<05:50,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 693/810 [38:24<05:45,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 694/810 [38:27<05:38,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 695/810 [38:30<05:37,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 696/810 [38:32<05:27,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 697/810 [38:35<05:28,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 698/810 [38:38<05:19,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▋ | 699/810 [38:41<05:32,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▋ | 700/810 [38:44<05:30,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 701/810 [38:47<05:24,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 702/810 [38:50<05:21,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 703/810 [38:53<05:15,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 704/810 [38:56<05:09,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 705/810 [38:59<05:04,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 706/810 [39:02<05:13,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 707/810 [39:05<05:13,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 708/810 [39:08<05:08,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 709/810 [39:11<05:02,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 710/810 [39:14<04:57,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 711/810 [39:17<05:00,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 712/810 [39:20<04:52,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 713/810 [39:23<04:46,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 714/810 [39:27<05:22,  3.36s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 715/810 [39:30<05:09,  3.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 716/810 [39:33<04:56,  3.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▊ | 717/810 [39:36<04:44,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▊ | 718/810 [39:39<04:42,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 719/810 [39:42<04:30,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 720/810 [39:45<04:32,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 721/810 [39:48<04:29,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 722/810 [39:51<04:24,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 723/810 [39:54<04:21,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 724/810 [39:57<04:14,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|████████▉ | 725/810 [40:00<04:15,  3.01s/it] 90%|████████▉ | 726/810 [40:03<04:07,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|████████▉ | 727/810 [40:06<04:11,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|████████▉ | 728/810 [40:09<03:58,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 729/810 [40:12<03:57,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 730/810 [40:15<03:53,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 731/810 [40:17<03:51,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 732/810 [40:26<05:57,  4.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 733/810 [40:29<05:14,  4.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 734/810 [40:32<04:47,  3.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 735/810 [40:35<04:29,  3.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 736/810 [40:38<04:18,  3.49s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 737/810 [40:41<04:05,  3.36s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 738/810 [40:44<03:54,  3.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 739/810 [40:48<03:48,  3.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████▏| 740/810 [40:51<03:42,  3.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████▏| 741/810 [40:54<03:36,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 742/810 [40:57<03:27,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 743/810 [41:00<03:25,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 744/810 [41:02<03:18,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 745/810 [41:05<03:11,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 746/810 [41:08<03:08,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 747/810 [41:11<03:09,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 748/810 [41:14<03:07,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 749/810 [41:22<04:26,  4.37s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 750/810 [41:25<04:02,  4.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 751/810 [41:28<03:42,  3.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 752/810 [41:33<03:56,  4.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 753/810 [41:36<03:34,  3.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 754/810 [41:39<03:16,  3.51s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 755/810 [41:42<03:03,  3.34s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 756/810 [41:45<02:55,  3.24s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 757/810 [41:48<02:50,  3.21s/it] 94%|█████████▎| 758/810 [41:51<02:41,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▎| 759/810 [41:54<02:35,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 760/810 [41:57<02:30,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 761/810 [42:00<02:25,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 762/810 [42:03<02:19,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 763/810 [42:06<02:19,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 764/810 [42:09<02:15,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 765/810 [42:12<02:12,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▍| 766/810 [42:15<02:12,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▍| 767/810 [42:18<02:07,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▍| 768/810 [42:20<02:01,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▍| 769/810 [42:23<01:59,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▌| 770/810 [42:26<01:55,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▌| 771/810 [42:29<01:53,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▌| 772/810 [42:32<01:48,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▌| 773/810 [42:36<02:02,  3.31s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 774/810 [42:39<01:55,  3.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 775/810 [42:42<01:48,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 776/810 [42:45<01:42,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 777/810 [42:48<01:40,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 778/810 [42:51<01:38,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 779/810 [42:54<01:33,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▋| 780/810 [42:57<01:29,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▋| 781/810 [43:00<01:26,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 782/810 [43:03<01:23,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 783/810 [43:06<01:19,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 784/810 [43:09<01:18,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 785/810 [43:12<01:13,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 786/810 [43:14<01:09,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 787/810 [43:17<01:05,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 788/810 [43:20<01:02,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 789/810 [43:23<01:02,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 790/810 [43:26<00:59,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 791/810 [43:29<00:55,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 792/810 [43:34<01:01,  3.41s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 793/810 [43:38<01:03,  3.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 794/810 [43:41<00:56,  3.50s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 795/810 [43:44<00:51,  3.42s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 796/810 [43:47<00:45,  3.28s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 797/810 [43:53<00:53,  4.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▊| 798/810 [43:56<00:46,  3.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▊| 799/810 [44:00<00:39,  3.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 800/810 [44:03<00:34,  3.43s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 801/810 [44:07<00:32,  3.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 802/810 [44:09<00:26,  3.37s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 803/810 [44:13<00:23,  3.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 804/810 [44:16<00:19,  3.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 805/810 [44:19<00:15,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|█████████▉| 806/810 [44:22<00:12,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|█████████▉| 807/810 [44:24<00:09,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|█████████▉| 808/810 [44:28<00:06,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|█████████▉| 809/810 [44:31<00:03,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|██████████| 810/810 [44:34<00:00,  3.21s/it]100%|██████████| 810/810 [44:34<00:00,  3.30s/it]

3216755_20201_2_0,4rtdcp4icz,10.948653162033498,-39.76848907868924,-91.47877154234061

4977448_20201_2_0,4s4edo4icz,-2.759056806315896,-86.1641351183498,-16.14631596811165

3601949_20201_2_0,4s53dp4icz,-0.12451520482319005,-53.21747558454652,-27.608147634730017

3315902_20201_2_0,4s5pmn4icz,-2.5858651417420346,-122.42390590783032,-13.350406314311812

5002090_20201_2_0,4s8dgo4icz,1.3434189938600205,-103.70853738594877,-52.09192552787991

3926822_20201_2_0,4sbefp4icz,-12.94677435110258,-129.52534376854265,37.17226479373615

5747597_20201_2_0,4sfhto4icz,1.4525372172243032,-83.82217126145216,-39.936106084037135

1772533_20201_2_0,4shk7o4icz,0.42330092855054285,-43.340894149523706,-29.060020623979767

4711957_20201_2_0,4shpfo4icz,0.7484721137836271,-52.0375439787945,-53.31652449631099

2626887_20201_2_0,4shq9n4icz,-2.4240726316884995,-99.14563009387413,-28.83463416230957

4817378_20201_2_0,4sjaqn4icz,0.6992188913582033,-97.86313789553014,-41.252345708658936

1365025_20201_2_0,4slpxo4icz,-0.273917512763946,-61.54490592125086,-47.93398135592777

4120209_20201_2_0,4t06ep4icz,0.31008551196142403,-131.45674834732063,-39.57591725399402

1807975_20201_2_0,4t2tfo4icz,1.326683198256455,-101.55635262148363,-46.65720903217911

1745812_20201_2_0,4t49jn4icz,1.0425473635531315,-96.46156660972164,-42.25167775446434

5361329_20201_2_0,4t7moo4icz,-0.8721128360849144,-85.32309177860873,-21.001851726734714

1216832_20201_2_0,4tcc6p4icz,2.0654153415017094,-52.4464870813207,-52.55402605566445

3003625_20201_2_0,4tg23p4icz,0.27294913692941436,-85.38220297045811,-34.87501093245821

2296059_20201_2_0,4tlsdo4icz,-2.5611960003471332,-64.68421923259584,-18.331585868925615

2997980_20201_2_0,4tn7hp4icz,-0.742047996364443,-122.68157550119585,-35.639358112534595

4966100_20201_2_0,4tol9p4icz,2.461856485593544,-75.27804558956865,-58.98893217824059

5270374_20201_2_0,4tpwko4icz,-2.2885572582808438,-101.54017248646542,-20.427126834319935

4299196_20201_2_0,4twdrn4icz,-0.41862078400786823,-123.63751086022478,-35.686274388257814

5347985_20201_2_0,4twtln4icz,-0.020894763692369415,-116.21268737045037,-64.61419767720305

5563139_20201_2_0,4txlmo4icz,0.17608861993313574,-122.47037838549099,-26.177834888618236

5721985_20201_2_0,4u8w5p4icz,-2.192642504659761,-78.06549550407533,-52.253949802829155

4991554_20201_2_0,4ufgln4icz,-1.2953280184147649,-110.17714195771703,-36.415721249137306

2155927_20201_2_0,4ughdn4icz,0.13400426696209491,-111.57030267564912,-44.1904128918936

4466270_20201_2_0,4uilro4icz,2.1059145243696245,-87.72479581156523,-53.49548693775577

5283999_20201_2_0,4ujohp4icz,-0.5541358785279141,-141.00914580972477,-29.034753583819295

5236373_20201_2_0,4ukado4icz,-1.809732554316413,-131.44262716626662,-27.21015461011072

4112097_20201_2_0,4ukmno4icz,1.5484466303971869,-100.38007871163495,-49.70328528452697

5808812_20201_2_0,4unf3p4icz,2.9717429516305005,-80.54971511502336,-50.012568947600926

1504099_20201_2_0,4uok9n4icz,-1.402760837385549,-83.66577460598131,-34.82630887421887

4813250_20201_2_0,4uqwdo4icz,2.209292259847872,-104.28972249842568,-31.6560447831894

5866812_20201_2_0,4usr5o4icz,-2.9550277619526497,-113.26146244211495,-25.61243542536903

3692539_20201_2_0,4uzsfo4icz,2.2606655753659854,-38.819896663070296,-35.222290286385444

3967061_20201_2_0,4v14ap4icz,0.058926541936718695,-62.291405236359424,-33.584931050619176

5993466_20201_2_0,4v47qn4icz,0.3629889070061319,-125.92575847336173,-28.976666902227194

3552255_20201_2_0,4v93ao4icz,1.2789917216204143,-91.55737907072609,-46.07107886351484

5972614_20201_2_0,4va0wn4icz,0.4529226179196017,-100.80235146959751,-37.28392675222601

4982267_20201_2_0,4val0o4icz,4.569835519944092,-92.49281336146214,-79.01520255146059

1285096_20201_2_0,4vclkn4icz,-2.339167779935439,-88.2466602594395,-32.86101334038433

3612630_20201_2_0,4vfo3o4icz,1.694131915011384,-67.62653565731162,-24.357665124582894

4581312_20201_2_0,4via6p4icz,1.024318357893965,-93.94775503075337,-25.381522402448923

4280330_20201_2_0,4vihyo4icz,-1.3751176946295889,-89.29978653660515,-6.036921504859151

3655695_20201_2_0,4vox0o4icz,2.252019614177054,-69.11228885632244,-51.6983505141434

2205299_20201_2_0,4vrobo4icz,-0.5544498967579728,-107.35954322081679,-37.822274373654935

2051321_20201_2_0,4vstqo4icz,-1.47214840502818,-85.3584966979816,-21.36390480860193

1149380_20201_2_0,4vwvso4icz,4.375248148607109,-125.38128140061525,-58.97757794976005

1391801_20201_2_0,4vzaxo4icz,-0.3306465708242495,-52.45373526643368,-44.77911976703962

1085878_20201_2_0,4w52wo4icz,-1.1825453777229349,-88.10757050206647,-34.44093503180328

3932904_20201_2_0,4w5gmn4icz,-0.03231870632063588,-118.18111517506475,-44.0719909363561

4239116_20201_2_0,4w9mso4icz,-0.32217773518576065,-49.204958170857026,-19.821170461774415

4651515_20201_2_0,4wa6bo4icz,0.6678032044714621,-98.32479505569466,-30.0445874866474

3543580_20201_2_0,4wacxo4icz,0.543826300452831,-38.60466569086486,-54.09156123679598

2404126_20201_2_0,4waldo4icz,-2.4730680580208215,-72.69807198289115,-22.38967059375115

5512762_20201_2_0,4wd27o4icz,1.4067296356286576,-116.38595047621081,-32.777608959418984

3565036_20201_2_0,4wdefo4icz,0.488565757072026,-47.8615498486335,-50.298278211067625

1123129_20201_2_0,4wi3jn4icz,-2.1302603209246906,-146.99256777105228,-28.593577694021405

2514097_20201_2_0,4witho4icz,0.1170381380724625,-157.0396292822275,-36.14971975812509

2759131_20201_2_0,4wl7ao4icz,2.655581606263643,-129.20948486903214,-55.63026903189609

4873116_20201_2_0,4wl8fn4icz,-2.5758639978725317,-113.97854228777248,-24.600845042546553

5304873_20201_2_0,4wln9p4icz,3.2281256371911913,-68.91148793558136,-47.14259007273526

3348114_20201_2_0,4wsuon4icz,-0.6886810246053022,-121.62653060191144,-31.623181392155118

4247071_20201_2_0,4wvrsn4icz,3.6531259064108554,-80.54801907588993,-68.63164519171201

2262080_20201_2_0,4wzxgo4icz,3.388935714007839,-59.46130259262594,-27.349823968000152

3970372_20201_2_0,4x4osn4icz,0.5855577955042818,-79.96142899708789,-32.801225403323826

2584815_20201_2_0,4x60cp4icz,-0.21965508002222445,-79.68346294714584,-24.700193900255925

1575016_20201_2_0,4x70ap4icz,0.9706091698726327,-115.05318197005099,-48.540246929916975

2524555_20201_2_0,4xehin4icz,-2.4151159329606493,-90.21904319257777,-29.169825805899364

5981875_20201_2_0,4xixuo4icz,-2.6454894786650742,-121.05464262631398,-15.887447945152232

1743655_20201_2_0,4xjh7p4icz,1.3082321023573504,-85.86793900125804,-49.92217804046723

5485077_20201_2_0,4xua3o4icz,-3.8432562433883937,-75.8917743318107,-25.514062147377174

1187060_20201_2_0,szutwo4icz,-0.34001998082408785,-63.46458132209506,-21.951090511793325

5754195_20201_2_0,4y6cmo4icz,-1.673187185385963,-105.5799299570628,-10.888714312374361

1332967_20201_2_0,4y7o3o4icz,1.1917799282759736,-69.91695136714162,-43.58721525087104

5016915_20201_2_0,4y8xho4icz,-149.64961932758854,653.4834008666005,184.34023750108497

3448831_20201_2_0,4ybx6p4icz,-0.29155484169315177,-125.39387526847085,-49.879988955292845

6017434_20201_2_0,4yc5sn4icz,-1.0554626181152351,-118.9360228162329,-18.940543020313243

4250220_20201_2_0,4ycxxo4icz,-0.5693819774054886,-70.70421817683459,-29.690513602984865

2412695_20201_2_0,4yfaro4icz,0.24155278894314527,-64.94837628218892,-33.90878567901137

1691361_20201_2_0,4yfldn4icz,2.4929526201654335,-135.59444921700515,-45.49887349695416

1414355_20201_2_0,4yg05o4icz,-1.2013465638990641,-111.2385232289767,-28.809977792916584

4999476_20201_2_0,4yn9so4icz,0.6217725278390231,-96.13727689693408,-54.40730293824909

5463768_20201_2_0,4ynp6o4icz,-1.4437456433887739,-86.41576983269056,-37.50077127822533

5704007_20201_2_0,4yozin4icz,0.2949191707042441,-122.84875663984391,-34.32147995430101

5564310_20201_2_0,4yphmo4icz,-1.5449327092830325,-99.74234329919486,-30.140215172378817

1520836_20201_2_0,4ysgno4icz,0.6497309980224307,-112.75014036235632,-38.21471390948703

4900226_20201_2_0,4z2mco4icz,0.9200501721649659,-72.38743122153826,-28.756650545850235

4330179_20201_2_0,4z7pto4icz,-0.21142312774712577,-80.39331987857747,-37.062005904881374

2845547_20201_2_0,4z832p4icz,-0.5670721399218254,-130.3400138658888,-22.792281980835682

1792165_20201_2_0,4zdkwn4icz,-3.6405864328332975,-79.64683261554731,-29.12511746272901

4151191_20201_2_0,4zpmrn4icz,-6.969160128578166,-137.7767439345627,0.607806453637096

2555748_20201_2_0,4zsnjo4icz,2.1659930208248506,-71.8230258674023,-51.0745102520068

5779293_20201_2_0,4ztknn4icz,-1.2327279168025116,-122.02277761355708,-30.827463088431855

1401386_20201_2_0,4ztm3p4icz,0.34909856036036147,-88.59298906526914,-55.171652630320224

4984819_20201_2_0,5006uo4icz,1.4405772993224617,-98.70619678820441,-35.07581726547566

1131290_20201_2_0,500urn4icz,-0.8085935891776376,-102.28727941300062,-27.10041476284013

5437007_20201_2_0,501win4icz,0.7240970402532058,-126.31656753803816,-53.51085420841859

1612866_20201_2_0,504dlo4icz,0.6825243203094951,-119.53249774560919,-54.90817770930386

3657609_20201_2_0,506hen4icz,1.6773117603513432,-79.2274191906246,-61.32139345977029

4218203_20201_2_0,5078yo4icz,1.1933212366796904,-86.49179369176687,-46.15084051476751

5143654_20201_2_0,50ahpo4icz,0.6236089878679597,-81.18659398001049,-26.776825360270706

1197585_20201_2_0,50c3ip4icz,0.6312996553894189,-73.95657281931696,-37.444595156913124

5293894_20201_2_0,50c3xn4icz,2.8411076440457883,-118.91600453418476,-58.488128652312724

4383244_20201_2_0,50d5fn4icz,-2.276313537886171,-118.9454260127284,-35.747022454865586

2301199_20201_2_0,50ipvo4icz,0.7509587366202957,-69.70965821903309,-42.473612239144344

1691407_20201_2_0,50j0go4icz,2.872011658917043,-115.11213014057947,-42.45518018158316

1332119_20201_2_0,50k91p4icz,-1.831668240659303,-85.19948723686383,-40.42900996330165

1027307_20201_2_0,50mgnn4icz,-1.2467940654166878,-119.10897470884345,-28.951632335635395

5461204_20201_2_0,50mw0p4icz,-0.09688070945998557,-81.89430856170429,-20.802556519681062

3728861_20201_2_0,50sogo4icz,-1.54103418819893,-64.93939376842701,-33.11068005310875

5383873_20201_2_0,50sqbn4icz,0.2929656353453996,-96.43241363919867,-46.87796123282038

5386091_20201_2_0,50tenn4icz,0.49619270050837766,-93.38473575413659,-48.75441616861234

2037372_20201_2_0,50vj9p4icz,-19.521959366193176,-134.01989244841423,86.8903780517103

4341954_20201_2_0,o1g0ep4icz,1.5241197675077738,-73.860790530901,-41.26703341625908

3420446_20201_2_0,50ymwo4icz,-13.45542151660526,-66.85642926234658,31.03431583425106

2967744_20201_2_0,50z9tn4icz,3.66080435858468,-72.85087751292099,-63.266261207066066

5868176_20201_2_0,511b6p4icz,-0.17955279725480416,-128.42427919209075,-40.8906297606253

5656635_20201_2_0,511gkn4icz,-4.9823907245921015,-82.92042456358553,-18.224608411233334

1371293_20201_2_0,514g8o4icz,-3.632625166664124,-66.73053189266292,-13.105603678758172

5080076_20201_2_0,515wbn4icz,-4.04647537580343,-121.31710180980443,-22.995340583823705

4337680_20201_2_0,51btto4icz,-0.1307074474305706,-82.64639806012556,-28.485820367433334

2602309_20201_2_0,51dbin4icz,0.03757864713035114,-109.75077112389926,-46.186497212783635

4832796_20201_2_0,51dbln4icz,-0.9122290072349307,-100.17721493530746,-27.882881615759715

2667308_20201_2_0,51e05p4icz,-3.1067385426074408,-53.81955981930534,-45.17118479834477

1232688_20201_2_0,51e89o4icz,-0.22071229325635677,-121.4362662265919,-20.530010955818042

5145759_20201_2_0,51jako4icz,4.141545844682182,-80.12942284561848,-53.80147673233532

3783422_20201_2_0,51l0yo4icz,-2.0300412245315,-100.9667350285061,-33.25052673692201

1022130_20201_2_0,51l7zo4icz,-0.7376655048095669,-101.6565764746181,-28.943684342570776

3475194_20201_2_0,51n14p4icz,-1.2658560115151525,-83.35879552865566,-27.309072284614444

5323346_20201_2_0,51tafp4icz,0.6136780416284571,-94.22512567353027,-38.626097108496396

4249221_20201_2_0,51vl8p4icz,3.7912933663941275,-109.9753826140356,-69.0359379339765

2346789_20201_2_0,51wg8p4icz,-1.3715148765337537,-110.46086893413678,-22.17477403856242

4433145_20201_2_0,5259qn4icz,-0.5818103602674644,-71.16650552642008,-42.53289406221029

3176480_20201_2_0,526c2o4icz,0.11830865395756893,-121.92877115021761,-49.434799815865006

1155855_20201_2_0,52ajko4icz,-3.3169019694997854,-72.41363616623673,-24.435080945807925

4983435_20201_2_0,52ehno4icz,-8.75136588677925,-111.69388557530172,17.283404955184047

1953992_20201_2_0,52phyo4icz,-0.20949757545310588,-96.98160739013252,-42.11155891445952

4090456_20201_2_0,52rovn4icz,-2.388672715692925,-110.22215276107244,-20.14733211669396

5736864_20201_2_0,52ylho4icz,0.6385950466066018,-88.50221124674013,-31.513318074288435

2624697_20201_2_0,5346bn4icz,0.3071918077962141,-97.88632349783944,-30.72963099841229

1228250_20201_2_0,53cdso4icz,-0.030466151619294356,-93.33680420285842,-35.815959800210095

2327255_20201_2_0,53hv8o4icz,-0.2811285631242005,-99.64272443658865,-48.26443336757387

2128806_20201_2_0,53lskn4icz,-0.5059313282923023,-108.80542347494895,-27.750200038319917

2325397_20201_2_0,53o8dp4icz,-4.833777526766879,-70.81942278338278,-26.702672267357627

3494680_20201_2_0,53t00p4icz,-2.349783473007239,-49.063528956843015,-24.60067123858552

1663327_20201_2_0,53tybp4icz,-0.7084281433998224,-122.11020365788605,-31.58083889859867

4269782_20201_2_0,53vh9p4icz,-1.2025483864089992,-69.94535228076893,-14.714451803528164

4255260_20201_2_0,53wvkn4icz,-0.4636406832625016,-128.5156968047224,-15.811871190861467

1065253_20201_2_0,53xlxo4icz,-0.10646004738769932,-85.69512781396335,-26.80526357540998

3637500_20201_2_0,53yh6o4icz,-2.9959231551169734,-100.10072065319764,-13.047729158719505

3897042_20201_2_0,53yhgp4icz,3.7628758976059338,-93.62816493559913,-64.38511659318766

3029581_20201_2_0,545ukn4icz,-1.76070614588607,-100.42014921726351,-22.8817368826069

5969961_20201_2_0,54jdhp4icz,0.3714244331442206,-126.29632321588804,-28.00919924252898

1044704_20201_2_0,54sm7p4icz,-2.5974698560563962,-74.93401039466968,-15.240214681549674

2588762_20201_2_0,54t71p4icz,-0.879930569645689,-109.44603355460907,-28.37742499495687

2456670_20201_2_0,54ujvo4icz,-2.276650887766115,-75.02347544192315,-21.690284096499923

3509545_20201_2_0,54zjip4icz,0.027879191593500652,-95.54968443111048,-29.870344980525275

4144302_20201_2_0,552ptn4icz,-1.0981827162119064,-94.88660336694687,-49.38830838358801

5240769_20201_2_0,553bco4icz,-0.3577090700154505,-80.73539120805424,-57.45683203775174

5311255_20201_2_0,554gmn4icz,-0.40154758178104355,-107.62464949586135,-41.29146006096073

3003224_20201_2_0,554r7p4icz,1.1620742027201296,-93.42564146217225,-40.55920066563796

5651460_20201_2_0,557gan4icz,5.129366596049434,-93.3848630157805,-53.47063157726595

2276393_20201_2_0,558ntn4icz,-3.0982472245154247,-124.43049464507465,4.945437333950693

5848563_20201_2_0,559g8o4icz,137.8425480204145,558.5500232691497,-68.48089717724415

2300193_20201_2_0,55c1on4icz,-0.8652981022299105,-126.69576446683502,-26.623584622216413

5215847_20201_2_0,55econ4icz,0.4508914197873584,-105.9331440128596,-24.263418604482112

5863430_20201_2_0,55iopn4icz,2.1388761817967117,-84.6652661219897,-44.88419373133806

2973015_20201_2_0,55o03p4icz,5.951879279695061,-90.04843825373683,-55.874620470444455

3137846_20201_2_0,55os9o4icz,-1.8420999501460604,-93.16306404836848,-20.80438960498222

1533959_20201_2_0,uvlgsn4icz,0.9052216049089805,-85.66634321305463,-30.02534315328961

2145106_20201_2_0,562ulo4icz,-0.7435880480993654,-124.74017377748149,-18.349728312528214

1718230_20201_2_0,563oxo4icz,0.9048546387042331,-68.76790803649166,-32.66916346647591

2468948_20201_2_0,56ajbo4icz,-0.8849226270067874,-79.66607984565817,-43.56597126383039

2349924_20201_2_0,56an9o4icz,1.1481722694637169,-44.04524386359395,-21.29781581552281

3495366_20201_2_0,56ffbo4icz,-2.158981797505144,-60.12984737356987,-5.4331473399548

2235434_20201_2_0,56k7ap4icz,0.5662907685291692,-103.86542439942633,-46.58702433394721

4835146_20201_2_0,56n7nn4icz,1.2267214943734022,-136.49807472110274,-42.930517021246516

3027397_20201_2_0,56yw6o4icz,0.6151234956091481,-146.7747940044702,-34.24183700976454

1052773_20201_2_0,571ffp4icz,0.9421818501612684,-95.37097123095984,-45.46633273242966

4044286_20201_2_0,572bnn4icz,0.5789791104009985,-59.799749821285104,-28.653568365917792

6017390_20201_2_0,5756yo4icz,0.504378677740467,-88.98398238933981,-47.21275607896547

3595705_20201_2_0,578spo4icz,0.1855595045438131,-79.74671677342488,-34.10450359833334

3103059_20201_2_0,579hmn4icz,1.3172770462573513,-83.02100126400839,-57.83320563789961

1800082_20201_2_0,57hs0o4icz,-0.4204789823772178,-105.65286640511025,-26.579589188132957

5694524_20201_2_0,57hvhp4icz,0.4839399447736397,-99.24216804882326,-31.863354262452702

5534210_20201_2_0,57i71o4icz,6.901490788830061,-130.88790485680187,-72.13204133393992

5222351_20201_2_0,57ihto4icz,-0.24071030467326746,-149.63300044151097,-25.198975920990975

5027080_20201_2_0,57qcbp4icz,2.4418857904360878,-44.4935188545021,-48.47861716454331

2556746_20201_2_0,57s7nn4icz,0.16915675204591862,-108.24788509359789,-43.6037328003825

4619607_20201_2_0,sm558p4icz,-0.9805771395306799,-48.91560418513404,-29.175781984324715

1036797_20201_2_0,582blo4icz,-0.35063978645232347,-80.73347345875916,-33.50918453066606

4745639_20201_2_0,58769o4icz,-1.0357550924690693,-112.12128151476747,-29.89152542940694

5514823_20201_2_0,588y9p4icz,7.759748856026902,-57.35108282329105,-70.53898954432266

5915758_20201_2_0,58atzo4icz,1.4281064449004517,-88.85619415661122,-43.89137725286345

5294090_20201_2_0,58c7fp4icz,-1.1218560208858304,-119.8080681233935,-29.446151185728908

5318798_20201_2_0,58dgdp4icz,105.30035550261623,208.99649717932002,-250.82257196606218

3328409_20201_2_0,58f9wn4icz,0.9709534725859569,-104.60737846173316,-37.96840528999313

5803933_20201_2_0,58fydp4icz,-1.0727079568652178,-78.34401246919248,-19.549894124413754

3371966_20201_2_0,58piwo4icz,0.36827616649793504,-68.27151467147885,-51.71831791922081

5428668_20201_2_0,58qrxo4icz,-2.5780204993702776,-76.29496024581019,-38.805550496481644

5840137_20201_2_0,58vwqn4icz,0.822592676447328,-100.77661975922675,-30.96588471542006

4541942_20201_2_0,594fcp4icz,-1.7758997791934785,-107.99496188089876,-17.155799530727364

3520674_20201_2_0,59acfn4icz,-8.060602480941972,-98.26028431732112,-7.28545895147802

4486441_20201_2_0,59gl4p4icz,0.5932900751066807,-102.37792421818338,-24.43684549716876

1080175_20201_2_0,59lzap4icz,-1.0581464828177973,-63.62692183950807,-27.910845351417976

1742338_20201_2_0,59nldp4icz,-2.7990512103089187,-101.17177415456547,-33.38909038037801

5633112_20201_2_0,59rk5p4icz,-2.5412227999294665,-90.07608601809426,-22.328900530771136

1946535_20201_2_0,59ro9o4icz,-1.2167895108262878,-72.12199477381444,-17.662683213638445

1772213_20201_2_0,59ulxo4icz,-1.4621744523212326,-66.69031718977192,-32.79517454523477

1493426_20201_2_0,59w6vn4icz,-1.04126088892391,-121.88279081007013,-27.692454362117843

1425196_20201_2_0,59xh8n4icz,0.8781312175148825,-98.0888068261664,-47.808598545666

4598391_20201_2_0,59y31o4icz,-3.152878702449847,-83.36455352704783,-18.629918036041204

5913830_20201_2_0,5a1snn4icz,-0.6739486766930052,-106.9819214936393,-42.31319426764644

3807917_20201_2_0,5a3wbo4icz,-0.31595625948510425,-85.50904048883723,-27.036382604208626

5437835_20201_2_0,5a6ujp4icz,-4.27903621665159,-85.86140682156329,-5.091225674761631

4353298_20201_2_0,5a93dp4icz,0.38098339707734274,-90.69174953121836,-35.76259130632617

2782028_20201_2_0,5abrto4icz,1.5476520824956022,-68.73652799902806,-48.23875730252216

1215140_20201_2_0,5air8o4icz,2.598581725220865,-117.33600546257611,-56.72855249957405

4422594_20201_2_0,5ansro4icz,1.8525246835179439,-110.71775893579752,-50.99733244480652

5298890_20201_2_0,5aucxo4icz,-0.036315174980067436,-66.83903671883957,-33.004038836287066

1084133_20201_2_0,5azufo4icz,0.25702230210535054,-90.07889876536694,-39.31289527266463

1517189_20201_2_0,5b18wo4icz,-0.6517443241305395,-63.49326783310045,-36.627257732290204

3027103_20201_2_0,5bge6o4icz,-0.7420447306805693,-149.10021688551697,-32.48664129836203

1723794_20201_2_0,5bhxco4icz,-1.0016014144682754,-98.36177527766537,-21.11344658945717

3650261_20201_2_0,5bnm7p4icz,0.7541253555956741,-113.5863522051057,-29.505229286082468

1640681_20201_2_0,5btf9o4icz,1.20573819111044,-107.70174697875598,-31.35644840822883

5741497_20201_2_0,5bvpnn4icz,19.19117024784796,-73.64121598820924,-125.06652542939514

3493924_20201_2_0,5by2bo4icz,1.3791403213511764,-107.04123136041983,-33.82273732325075

3407090_20201_2_0,5c1ujp4icz,-0.0072024759000501965,-66.60254885356983,-17.140828079803228

2277979_20201_2_0,5c1vbp4icz,2.1802418570986895,-117.57892996945765,-53.40151413173405

1568443_20201_2_0,5cbc2p4icz,-2.9146857318371997,-84.44665397495015,-24.03103177301034

3027750_20201_2_0,5cbcdn4icz,4.1388055677300235,-126.30471446760194,-80.9138513916233

5636410_20201_2_0,5cbtfp4icz,3.2016533564844556,-70.29472553067484,-54.027411792133194

5130590_20201_2_0,5cdejn4icz,-2.199440962882396,-70.77636120736173,-9.440182328484923

1106402_20201_2_0,5chrun4icz,-2.1013302646929657,-85.16927182389102,-26.63804102529828

3568672_20201_2_0,5ckiuo4icz,2.356724507902541,-42.556911878187435,-38.411591826384566

1592829_20201_2_0,5cpbtn4icz,3.928219447845618,-80.93570253962616,-65.45665292762283

4108801_20201_2_0,5cpk8p4icz,-2.870675931110402,-75.44460666489218,-22.159044715367685

1698149_20201_2_0,p5g03o4icz,-4.057680893747986,-117.03889035029565,4.222834884188018

5428563_20201_2_0,5cwk7p4icz,-0.7670963487247602,-129.80972375486593,-15.711782388875818

3613797_20201_2_0,5cy1wn4icz,1.7698551462941097,-110.44236003138474,-34.787213804278906

5154640_20201_2_0,5d0e2p4icz,2.186163243309818,-102.75842366652341,-38.951542956037216

1526355_20201_2_0,5d6xso4icz,-0.5783391961066819,-95.8796951441476,-16.888716660831264

2666223_20201_2_0,5d778p4icz,6.509632573754083,-89.80307841777062,-63.82240180939726

4054016_20201_2_0,5dd73o4icz,0.19766228603946626,-99.59155671357058,-37.060063606300545

2658460_20201_2_0,5ddvun4icz,-1.323170213560498,-100.06480989916324,-39.455818951394775

2295041_20201_2_0,5dfefp4icz,-1.1368413896309753,-97.0966142847391,-31.508388947113218

2611364_20201_2_0,k7ycco4icz,-1.4821774785153894,-59.09976045947988,-35.195055397441976

/users/rhydian/anaconda3/envs/torch_env/lib/python3.7/site-packages/torch/cuda/__init__.py:52: UserWarning: CUDA initialization: Found no NVIDIA driver on your system. Please check that you have an NVIDIA GPU and installed a driver from http://www.nvidia.com/Download/index.aspx (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729006826/work/c10/cuda/CUDAFunctions.cpp:100.)
  return torch._C._cuda_getDeviceCount() > 0
  0%|          | 0/101 [00:00<?, ?it/s]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 1/101 [00:03<05:09,  3.09s/it]  2%|▏         | 2/101 [00:06<05:01,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 3/101 [00:08<04:53,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/101 [00:11<04:47,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▍         | 5/101 [00:14<04:36,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 6/101 [00:17<04:35,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 7/101 [00:20<04:34,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 8/101 [00:23<04:26,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 9/101 [00:26<04:26,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|▉         | 10/101 [00:29<04:25,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 11/101 [00:32<04:22,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 12/101 [00:34<04:19,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 13/101 [00:37<04:20,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 14/101 [00:42<04:51,  3.36s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▍        | 15/101 [00:45<04:33,  3.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 16/101 [00:47<04:21,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 17/101 [00:51<04:22,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 18/101 [00:53<04:10,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 19/101 [00:57<04:27,  3.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|█▉        | 20/101 [01:00<04:13,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 21/101 [01:03<04:05,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 22/101 [01:06<04:02,  3.07s/it] 23%|██▎       | 23/101 [01:09<03:52,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 24/101 [01:12<03:53,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▍       | 25/101 [01:15<03:48,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 26/101 [01:18<03:44,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 27/101 [01:21<03:42,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 28/101 [01:24<03:38,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▊       | 29/101 [01:27<03:32,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|██▉       | 30/101 [01:30<03:27,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 31/101 [01:32<03:21,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 32/101 [01:35<03:23,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 33/101 [01:38<03:17,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▎      | 34/101 [01:41<03:15,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▍      | 35/101 [01:44<03:09,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 36/101 [01:47<03:03,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 37/101 [01:50<03:01,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 38/101 [01:53<03:06,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▊      | 39/101 [01:56<03:01,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|███▉      | 40/101 [01:59<03:07,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 41/101 [02:02<03:01,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 42/101 [02:05<02:57,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 43/101 [02:08<02:53,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▎     | 44/101 [02:11<02:49,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▍     | 45/101 [02:14<02:45,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 46/101 [02:17<02:43,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 47/101 [02:20<02:38,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 48/101 [02:23<02:37,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▊     | 49/101 [02:26<02:39,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|████▉     | 50/101 [02:29<02:36,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 51/101 [02:35<03:14,  3.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████▏    | 52/101 [02:39<03:13,  3.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 53/101 [02:42<02:55,  3.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 54/101 [02:45<02:47,  3.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 55/101 [02:48<02:36,  3.41s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▌    | 56/101 [02:51<02:27,  3.28s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▋    | 57/101 [02:54<02:20,  3.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 58/101 [02:57<02:13,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 59/101 [03:00<02:11,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 60/101 [03:03<02:04,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|██████    | 61/101 [03:06<02:01,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████▏   | 62/101 [03:09<01:56,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 63/101 [03:17<02:49,  4.46s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 64/101 [03:20<02:26,  3.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 65/101 [03:23<02:12,  3.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▌   | 66/101 [03:26<02:00,  3.44s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▋   | 67/101 [03:29<01:51,  3.29s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 68/101 [03:31<01:42,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 69/101 [03:34<01:35,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 70/101 [03:37<01:32,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|███████   | 71/101 [03:40<01:30,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████▏  | 72/101 [03:43<01:25,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 73/101 [03:46<01:23,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 74/101 [03:49<01:19,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 75/101 [03:52<01:16,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▌  | 76/101 [03:55<01:12,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 77/101 [03:57<01:10,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 78/101 [04:00<01:05,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 79/101 [04:03<01:03,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 80/101 [04:06<01:02,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 81/101 [04:09<00:59,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 82/101 [04:12<00:56,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 83/101 [04:15<00:53,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 84/101 [04:18<00:51,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 85/101 [04:21<00:48,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▌ | 86/101 [04:24<00:44,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 87/101 [04:27<00:40,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 88/101 [04:30<00:37,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 89/101 [04:33<00:34,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 90/101 [04:36<00:33,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 91/101 [04:39<00:29,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 92/101 [04:42<00:26,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 93/101 [04:45<00:23,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 94/101 [04:48<00:20,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 95/101 [04:51<00:18,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▌| 96/101 [04:54<00:14,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 97/101 [04:57<00:11,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 98/101 [05:00<00:08,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 99/101 [05:02<00:05,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 100/101 [05:06<00:02,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|██████████| 101/101 [05:09<00:00,  3.04s/it]100%|██████████| 101/101 [05:09<00:00,  3.06s/it]
Trying to load from /users/rhydian/self-supervised-project/model_weights/SSECEncodersBothBoth
==> Resuming model trained for 106 epochs...
Trying to load from ../model_weights/angle_regressor4
==> Resuming model trained for 7 epochs...
4491155_20201_2_0,3q26ro4icz,1.8451525222641734,-99.29077062284361,-58.82894051832085

3396047_20201_2_0,3qww9p4icz,157.6819282341575,541.5639908520404,-201.93792529855227

3707035_20201_2_0,3r41vo4icz,-3.180161088197423,-63.033195813162706,-20.64571014054738

5351447_20201_2_0,3ra08p4icz,-0.9288029492468077,-108.5253248579238,-46.08402481113245

5918995_20201_2_0,3s4xun4icz,-0.7140367129235948,-126.44447644934661,-31.43428601643025

4309483_20201_2_0,3shhpo4icz,4.579885097270874,-93.93290114920265,-67.13424597825924

3429411_20201_2_0,3st14p4icz,-0.08581643025795119,-82.69170011823707,-32.4984602268205

4985032_20201_2_0,3su55o4icz,1.7057358173836377,-78.36367870176562,-20.378869480060615

3059939_20201_2_0,3u29mo4icz,0.2393183855228833,-94.3397095024882,-43.053083274490945

4130663_20201_2_0,3v1qcn4icz,1.6811729169913714,-137.8933613554223,-43.14001896464906

3729840_20201_2_0,3x5tqn4icz,2.0958937484053966,-97.60722023248792,-46.616136568391596

4597861_20201_2_0,3xf5fo4icz,-2.6511839808902944,-105.97497822480656,-22.28699549471851

5489359_20201_2_0,3xh4io4icz,2.796303726123976,-87.96046620465131,-65.4597701611742

5699520_20201_2_0,3z969p4icz,-1.2082473835770096,-87.5267511764641,-53.15887563685409

5048055_20201_2_0,3zo4bp4icz,0.3332960926212762,-74.23459686997924,-43.007228581839996

3546874_20201_2_0,402h5o4icz,0.9290249155399793,-85.78237223893424,-29.15207850713307

5654625_20201_2_0,40914o4icz,5.726509486063879,-114.87299428211551,-51.535978090633364

4392092_20201_2_0,4138po4icz,2.2118176831648033,-118.23696019124364,-38.80595126639632

3037381_20201_2_0,ub2abn4icz,2.8512207068423407,-93.67647563702374,-40.899907299841516

2906759_20201_2_0,41p0bo4icz,2.6916985035471757,-99.27027039388955,-31.48440557653987

1608802_20201_2_0,45760p4icz,-1.0351569891811279,-65.75161399047761,-13.459231458985116

1129165_20201_2_0,45ldgn4icz,-3.65436446234839,-112.89109520446328,-17.63463109257421

2286428_20201_2_0,45tumo4icz,33.01575582041761,-165.43720584953923,60.490461854112965

1936195_20201_2_0,48q88n4icz,-2.105025206736927,-104.65449999687743,-26.643914721331527

5133990_20201_2_0,4965ip4icz,-2.488486085046286,-80.67209355958141,-20.428898544396418

1071794_20201_2_0,49algp4icz,-1.8954466954641416,-109.36242627485467,-26.551756499956355

1283988_20201_2_0,49m8vn4icz,0.5538072466578703,-134.12270049304593,-46.57251887948384

2100021_20201_2_0,49nr6p4icz,0.23546190076869056,-94.29143989207083,-59.64438244495598

2148838_20201_2_0,4a0jwn4icz,-1.9875445421836235,-72.56243372727516,-21.86870286767426

3873995_20201_2_0,4a2d5o4icz,-0.7314004658754037,-99.98051912935043,-27.864551892994058

1084725_20201_2_0,4a7ato4icz,-7.081334672155694,-117.08086006804115,-1.8524122845417281

2259230_20201_2_0,4b8z3o4icz,0.7658982873902113,-73.58811081026792,-31.978437084809855

2585014_20201_2_0,4b9b7o4icz,-0.27046708125654084,-87.82944512106391,-34.42861076939663

4971651_20201_2_0,4cedbn4icz,1.0701027083978178,-97.69131876769399,-44.89575065903591

3146072_20201_2_0,4ceuwo4icz,-11.728863666725214,-31.560046011292684,12.395226821684503

2846838_20201_2_0,4d48wo4icz,4.84717665535862,-56.584134546826306,-82.29483822065737

3089730_20201_2_0,4dla0p4icz,-0.049515564606387535,-64.2349117328589,-43.057988889257615

5746540_20201_2_0,4fgcfo4icz,-1.9520617248970924,-115.14852684132808,-21.71405693506037

5552268_20201_2_0,4fxz0o4icz,-0.7591504499178056,-83.47233295923718,-28.199390831287417

3768014_20201_2_0,4gfd7p4icz,-3.58704354609615,-97.81474600083098,-16.15801545920209

5794231_20201_2_0,4hbz3o4icz,-0.9925790708346026,-115.06529623218901,-30.581356973944622

3067129_20201_2_0,4ii87p4icz,0.7866661742867594,-86.41712822767713,-37.45062107384476

4768528_20201_2_0,4jm44o4icz,-0.43969590982115414,-80.5459620934482,-25.016558523001947

5860789_20201_2_0,4kds5p4icz,-0.35099569832595395,-70.21031684796381,-47.57635231792605

5112155_20201_2_0,4m2ion4icz,6.772042608270526,-103.05590246067322,-77.10964149883414

3476157_20201_2_0,4mpx8p4icz,-2.624948023938581,-109.88029660983304,-16.242947695357046

1692842_20201_2_0,4mskpn4icz,6.898128840139225,-97.92922754582611,-87.8399144956497

1600430_20201_2_0,4nkaxo4icz,-5.632519746612528,-54.824345463557364,-21.993903157991483

1274199_20201_2_0,4nl29o4icz,-18.255546740332043,-123.91259018148583,67.8411980625792

5659892_20201_2_0,4nlken4icz,-4.098116325117974,-114.05800635809968,-10.58268597283751

2827427_20201_2_0,4nohio4icz,-0.5470051292420924,-124.12424124918985,-44.74530987637391

3405285_20201_2_0,4nygln4icz,0.28448160058657923,-71.61161323958248,-36.791203010387335

2817980_20201_2_0,4o9nbp4icz,2.586745530837826,-90.92048817487634,-47.215440869294014

1951724_20201_2_0,4oucln4icz,0.296008433305182,-62.72568131841075,-28.02833409068525

2481766_20201_2_0,4pab3p4icz,-2.3911816022575847,-105.58164202954848,-28.82151965162066

5417666_20201_2_0,4qjbtn4icz,-0.5861761989606993,-102.18529257815493,-19.577226059933423

4987847_20201_2_0,4qt5cp4icz,-2.6818541866957153,-129.0849645621816,-12.53819165035523

2683910_20201_2_0,4qv95o4icz,1.1972431783937358,-92.4984652716341,-22.593911509855772

5282415_20201_2_0,4rao8p4icz,1.8455485646049437,-82.27497546240065,-56.583665120165804

3593127_20201_2_0,4rdr2p4icz,-1.592948624769702,-101.97550789641798,-31.38006009126613

2802009_20201_2_0,4ssj9p4icz,-4.208032814395483,-136.42648277385914,13.605934729154143

4233465_20201_2_0,4tz99o4icz,-4.347029482950139,-116.14960741905642,10.238548407281996

4314744_20201_2_0,4ultfp4icz,2.3005368780328914,-99.11316061910244,-67.32941807249536

1257743_20201_2_0,4v1zdp4icz,-1.6801960546712031,-95.3502881040418,-45.79606398630541

4787303_20201_2_0,4w5bwn4icz,-0.26648310030089883,-74.92396835800366,-39.914868572268915

4368600_20201_2_0,4wynun4icz,1.853691288946533,-87.06263763986689,-32.83531803733236

3383471_20201_2_0,4x3frn4icz,2.4692655800775163,-55.97332122836235,-46.05243689505174

1181595_20201_2_0,4xbtdp4icz,-2.5439847435384295,-96.99319076274094,-30.58213374845286

1401067_20201_2_0,4y149n4icz,-2.0936665708542472,-88.62577931645609,-18.45922343408165

2463860_20201_2_0,4yhfdn4icz,0.6707143580810817,-132.39098668137513,-48.46730202478386

1103662_20201_2_0,4z2xdp4icz,-0.6157798899447217,-102.21847888495799,-38.98857157459342

2574095_20201_2_0,4zc2tn4icz,-0.0826954578450143,-104.3035891950071,-17.779370666879302

2622813_20201_2_0,4zmnfp4icz,3.3696060217070416,-58.37124274128121,-41.60961310621397

3741308_20201_2_0,505l7p4icz,0.7929038978742811,-93.12838190830897,-32.46405741754265

5127109_20201_2_0,50y4to4icz,-0.9441581731982345,-60.51459830906211,-39.36564266015148

4863163_20201_2_0,51fwbn4icz,4.145940885108219,-100.877582407283,-50.92370763663018

1903811_20201_2_0,51hdin4icz,2.6724840033309807,-103.22140089023566,-55.301801794824755

4670444_20201_2_0,53nu5p4icz,2.146711300272127,-58.695422837370074,-51.47751792722714

1343432_20201_2_0,54fcho4icz,7.805225681982753,-25.97602764789184,-83.89888538805194

4237783_20201_2_0,54ua6o4icz,-1.1445126171563416,-75.73027299734758,-36.299892347900396

4872911_20201_2_0,55lx3p4icz,-0.7263864299740072,-83.5013842148715,-48.07005949840482

3927452_20201_2_0,56lp8p4icz,0.7632769849099666,-115.1272073915288,-23.634468212486794

5014308_20201_2_0,56tf0o4icz,-1.6811095029292635,-96.44394637421308,-18.14712058767634

5629846_20201_2_0,57isyo4icz,-7.553322483260455,-64.47325707749599,-2.626885285861661

2799193_20201_2_0,59zu6o4icz,2.0188264078680294,-116.82968104798925,-44.27790888891059

1844017_20201_2_0,5bilvn4icz,-3.401427336412128,-63.26508697921426,-10.835397660627663

5195382_20201_2_0,5bn8sn4icz,-0.9071666736128118,-144.8108007174425,-12.968786178524368

3864370_20201_2_0,5bu4ro4icz,-0.6256734464514692,-83.46186512017655,-27.655484729511613

4281054_20201_2_0,5c3tdo4icz,-3.2716149363576745,-96.10989181037695,-20.634013455057925

3726719_20201_2_0,5edu9p4icz,0.35793230631240697,-66.51835627912155,-45.21104269771212

2693967_20201_2_0,5f7vso4icz,-2.188995846578884,-62.08535594234024,-24.649209512233625

3727240_20201_2_0,5g6n0o4icz,-3.231484237773753,-52.63389987873771,-24.350822399655826

2205198_20201_2_0,5gilvo4icz,-4.879945111953341,-49.32179785075374,1.853555471799936

2036626_20201_2_0,5grczo4icz,-6.983212063479263,-129.90226383150065,-1.5825095664704065

4866902_20201_2_0,5he1qn4icz,-0.21641445448356172,-102.78909990902133,-39.22832189465392

2704148_20201_2_0,5iemlo4icz,-3.6646981717523412,-83.74873929463399,-18.37013512902044

5916617_20201_2_0,5ipq5p4icz,1.260560413606669,-143.77789112235317,-44.191566778406425

2322155_20201_2_0,5j8t8o4icz,-4.161561924711968,-121.22806446448894,-17.291179429289983

4356001_20201_2_0,5jf9co4icz,-5.386568254735286,-68.18094993448744,-7.084891337194989

4882240_20201_2_0,5jglyo4icz,0.914395684778293,-74.92159309291503,-32.58322926820078

1730802_20201_2_0,0b76eo4icz,-0.6266109860016723,-87.00530400843331,-40.62427074748618

/users/rhydian/anaconda3/envs/torch_env/lib/python3.7/site-packages/torch/cuda/__init__.py:52: UserWarning: CUDA initialization: Found no NVIDIA driver on your system. Please check that you have an NVIDIA GPU and installed a driver from http://www.nvidia.com/Download/index.aspx (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729006826/work/c10/cuda/CUDAFunctions.cpp:100.)
  return torch._C._cuda_getDeviceCount() > 0
  0%|          | 0/102 [00:00<?, ?it/s]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 1/102 [00:04<07:39,  4.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 2/102 [00:08<07:02,  4.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 3/102 [00:11<06:21,  3.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/102 [00:13<05:48,  3.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▍         | 5/102 [00:17<05:46,  3.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 6/102 [00:20<05:34,  3.49s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 7/102 [00:23<05:09,  3.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 8/102 [00:26<04:56,  3.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 9/102 [00:29<04:52,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|▉         | 10/102 [00:32<04:37,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 11/102 [00:35<04:38,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 12/102 [00:38<04:28,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 13/102 [00:41<04:25,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▎        | 14/102 [00:43<04:16,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▍        | 15/102 [00:47<04:24,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 16/102 [00:50<04:16,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 17/102 [00:53<04:24,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 18/102 [00:56<04:19,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▊        | 19/102 [00:59<04:05,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|█▉        | 20/102 [01:03<04:23,  3.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 21/102 [01:07<04:40,  3.47s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 22/102 [01:20<08:23,  6.30s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 23/102 [01:22<06:57,  5.28s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▎       | 24/102 [01:25<05:58,  4.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▍       | 25/102 [01:39<09:24,  7.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▌       | 26/102 [01:43<07:56,  6.27s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▋       | 27/102 [01:46<06:33,  5.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 28/102 [01:49<05:37,  4.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 29/102 [01:52<04:54,  4.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 30/102 [01:56<04:59,  4.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|███       | 31/102 [01:59<04:30,  3.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███▏      | 32/102 [02:02<04:07,  3.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 33/102 [02:05<03:53,  3.39s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 34/102 [02:08<03:37,  3.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 35/102 [02:11<03:29,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▌      | 36/102 [02:13<03:18,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▋      | 37/102 [02:16<03:14,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 38/102 [02:19<03:10,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 39/102 [02:22<03:08,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 40/102 [02:25<03:06,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|████      | 41/102 [02:29<03:08,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 42/102 [02:42<06:02,  6.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 43/102 [02:44<04:56,  5.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 44/102 [02:47<04:09,  4.31s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 45/102 [02:50<03:42,  3.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▌     | 46/102 [02:53<03:22,  3.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 47/102 [02:56<03:05,  3.37s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 48/102 [02:58<02:51,  3.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 49/102 [03:01<02:43,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 50/102 [03:04<02:36,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 51/102 [03:07<02:29,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 52/102 [03:10<02:26,  2.94s/it] 52%|█████▏    | 53/102 [03:12<02:20,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 54/102 [03:15<02:21,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 55/102 [03:18<02:17,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▍    | 56/102 [03:21<02:12,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 57/102 [03:24<02:10,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 58/102 [03:27<02:08,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 59/102 [03:30<02:08,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 60/102 [03:33<02:05,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|█████▉    | 61/102 [03:36<02:02,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 62/102 [03:39<01:56,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 63/102 [03:42<01:54,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 64/102 [03:45<01:50,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▎   | 65/102 [03:49<02:02,  3.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▍   | 66/102 [03:56<02:38,  4.41s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 67/102 [03:59<02:19,  3.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 68/102 [04:02<02:07,  3.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 69/102 [04:05<01:57,  3.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▊   | 70/102 [04:29<05:06,  9.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|██████▉   | 71/102 [04:32<03:54,  7.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 72/102 [04:35<03:04,  6.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 73/102 [04:38<02:30,  5.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 74/102 [04:41<02:12,  4.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▎  | 75/102 [04:44<01:55,  4.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▍  | 76/102 [04:48<01:43,  3.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▌  | 77/102 [04:51<01:31,  3.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▋  | 78/102 [04:53<01:21,  3.39s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 79/102 [04:56<01:14,  3.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 80/102 [04:59<01:08,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 81/102 [05:02<01:03,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 82/102 [05:05<00:59,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████▏ | 83/102 [05:08<00:55,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 84/102 [05:11<00:53,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 85/102 [05:14<00:50,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 86/102 [05:17<00:46,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▌ | 87/102 [05:19<00:43,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▋ | 88/102 [05:28<01:04,  4.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 89/102 [05:31<00:54,  4.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 90/102 [05:34<00:46,  3.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 91/102 [05:37<00:39,  3.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 92/102 [05:40<00:33,  3.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 93/102 [05:43<00:28,  3.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 94/102 [05:48<00:30,  3.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 95/102 [05:51<00:25,  3.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 96/102 [05:56<00:23,  3.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▌| 97/102 [05:59<00:17,  3.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 98/102 [06:02<00:13,  3.37s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 99/102 [06:04<00:09,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 100/102 [06:07<00:06,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 101/102 [06:10<00:02,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|██████████| 102/102 [06:13<00:00,  3.15s/it]100%|██████████| 102/102 [06:13<00:00,  3.66s/it]
Trying to load from /users/rhydian/self-supervised-project/model_weights/SSECEncodersBothBoth
==> Resuming model trained for 106 epochs...
Trying to load from ../model_weights/angle_regressor4
==> Resuming model trained for 7 epochs...
3498048_20201_2_0,n63l9p4icz,-1.1159877711424524,-68.87532258230405,-32.124706742217

5088454_20201_2_0,3h2cvo4icz,1.0121514559701161,-132.39225138589384,-44.30518836586815

4303706_20201_2_0,3i54wo4icz,-1.220038364808478,-72.37801693470644,-32.31337227447037

3972471_20201_2_0,3j69wn4icz,-1.345360186593835,-127.43862494641883,-18.806245395225446

3086855_20201_2_0,3jqiso4icz,-0.4947464875238038,-97.73767272460165,-29.72106824859398

3329553_20201_2_0,3lfr4p4icz,-2.6599278016623527,-57.354319656997916,-18.16911611645746

5871403_20201_2_0,3lqudp4icz,-0.05676125811186314,-89.83661740160744,-56.25381290826007

4736258_20201_2_0,3mi1oo4icz,1.1333899443493969,-98.07787738562726,-35.88899707850109

5892312_20201_2_0,3oxkyo4icz,0.7921352448838371,-100.2340077313637,-40.72483697040083

2672457_20201_2_0,3qc6tn4icz,1.7662810228873616,-108.13097432077953,-66.99634103506997

3925133_20201_2_0,3qtpuo4icz,-2.324622868650849,-123.0551188019434,-21.21598807731762

3140812_20201_2_0,3qwlip4icz,-11.255811344535305,-100.69703373207233,-11.191639210838431

3310864_20201_2_0,3r3nep4icz,-0.48049787799797394,-128.51738346894632,-30.325465662751043

5078731_20201_2_0,3rjthp4icz,2.3992002881818193,-79.14602644514346,-48.26690630833565

3975624_20201_2_0,renabp4icz,6.291781808007755,-52.12427117634138,-67.67817712343616

2046065_20201_2_0,3u23kn4icz,0.9689134690806638,-109.13418531616281,-47.82592697568468

2136122_20201_2_0,3u3dhp4icz,2.6115565089096817,-65.04239411497463,-39.987456804424156

4264817_20201_2_0,3uewep4icz,-3.4563393921220076,-100.7163667317387,-19.416650501316425

4776255_20201_2_0,3uurun4icz,-2.8190086367341882,-103.54493153474422,-22.86647726933279

4256421_20201_2_0,3vzsgp4icz,2.162650379629097,-94.49259985170065,-50.84069876671688

3819250_20201_2_0,3w3non4icz,0.6730138923641991,-54.716043713372926,-38.19839791580223

4080662_20201_2_0,3x1v6p4icz,0.8092219550967867,-112.33146741724454,-44.041424752171324

2651291_20201_2_0,3xvo3p4icz,1.5310768294761525,-106.13491238169695,-39.95694917073425

1890450_20201_2_0,3y0a9n4icz,3.66247096859235,-45.90397619305378,-52.845918221753394

3387780_20201_2_0,3ybsep4icz,2.6896224029246754,-116.57718847980138,-55.24154360028895

2981679_20201_2_0,3yevjn4icz,-0.6308399027030149,-92.04343547053972,-25.150648088221658

1625803_20201_2_0,3z7yip4icz,-0.15638940653292435,-103.99064382832137,-72.47461031868292

2646397_20201_2_0,k6vqbp4icz,-1.7500163299563936,-59.45355787723136,-33.28415372785193

1760852_20201_2_0,418vln4icz,0.12279121380422105,-79.23994387956665,-49.62867476347179

4515940_20201_2_0,41zoep4icz,1.536985916901401,-80.28612002559743,-48.48130787676952

1260892_20201_2_0,4217vo4icz,-0.567481579055483,-63.36238480186768,-38.99069044334814

3662380_20201_2_0,4295do4icz,-5.560637762391804,-77.1658598754245,-10.40159382824045

5429091_20201_2_0,42ts7p4icz,-0.2577899503975145,-83.60492318569294,-40.63496463166496

4807862_20201_2_0,4435dp4icz,-2.68491870605192,-123.95947152150544,-47.108421160920074

4734553_20201_2_0,44pv8p4icz,7.186330357494147,-93.62061904522983,-74.05435490758097

2682166_20201_2_0,44xs9p4icz,-1.631725426741167,-105.12690342457736,-40.07633036234196

2515366_20201_2_0,46mu0o4icz,-3.710142182382939,-140.3344747417624,-26.030426745420854

2155905_20201_2_0,47tizo4icz,-2.968174825062431,-82.58842334176498,-26.801196973532456

4116067_20201_2_0,48z1sn4icz,5.746882125427619,-88.74374336284617,-53.777524790387474

1512566_20201_2_0,49abap4icz,-2.7640323931185193,-107.57279328677677,-19.605325062659745

5057641_20201_2_0,49fjkn4icz,-2.7454113621842224,-106.86691825603202,-14.922033515362614

1400645_20201_2_0,4b9t6p4icz,-2.853600267648353,-124.73780025232278,-20.64222910241321

2489481_20201_2_0,4bjk8p4icz,5.161061942695333,-73.91422402214451,-52.710335775444875

1056422_20201_2_0,4bo9tn4icz,0.5744630610071051,-105.0950514079849,-45.92995282566777

2603754_20201_2_0,4cmt8o4icz,-0.33165827100025175,-103.46183677886782,-38.31307636476238

5984264_20201_2_0,4ejyxo4icz,0.6046549881383081,-90.82768146465895,-42.49067442585152

3103640_20201_2_0,4eku7o4icz,-0.6848922594132151,-98.7065976253136,-31.295777275045452

3121675_20201_2_0,4eoejo4icz,-5.128808562990856,-90.64106492830038,-3.199825104075245

5750266_20201_2_0,4fnvho4icz,2.2356122510667125,-87.75608383047893,-57.1058657090654

1929859_20201_2_0,4fq7lo4icz,-1.4724631145689808,-91.63212620439003,-27.89556589216363

3697417_20201_2_0,4gru0o4icz,2.525307779105825,-96.40097058412317,-38.78423021941552

1042597_20201_2_0,4h0bfo4icz,-3.1304190945585226,-96.76738261678278,-21.091328368943763

1614319_20201_2_0,4hjrln4icz,128.09408690243228,626.6455323215309,-62.65662572692912

3310413_20201_2_0,4hk1ao4icz,-0.1047336329001601,-65.11836763753249,-34.82108851557598

5953999_20201_2_0,4huh4o4icz,-2.9246938424639395,-72.81939167308266,-27.933197619673038

5400695_20201_2_0,4i9oap4icz,1.45043375392105,-111.25908858039037,-47.056197289028034

6011909_20201_2_0,4jhfmn4icz,-1.0191067689165405,-130.6565333824422,-36.00768826580061

2756446_20201_2_0,4m493o4icz,-2.826287261819704,-86.41059553757975,-19.26773431768919

5142945_20201_2_0,4mjasn4icz,-0.05582131387374252,-55.3705200787638,-26.06122145820676

2095669_20201_2_0,4n2c7p4icz,-0.9466240028800299,-124.77816505456912,-28.15675240197703

3186581_20201_2_0,4nwv9o4icz,-0.0024956761146549553,-97.033802900692,-31.229379953947188

2844048_20201_2_0,4omvwo4icz,1.7608144810119826,-60.43095592337218,-45.05706571765111

1675789_20201_2_0,4qchpo4icz,1.1002538992562831,-101.73533882935197,-56.59146917624798

5951193_20201_2_0,4t2own4icz,-0.3852251050465831,-95.98887103851342,-28.664331940607894

5262375_20201_2_0,4tq0ko4icz,0.2986655618673171,-90.08594536851928,-29.789595386804677

1679833_20201_2_0,4u078o4icz,1.7553136503194815,-72.29672086577276,-44.341672586068285

4296928_20201_2_0,4u7hrn4icz,0.18064217270347585,-112.77935421642087,-28.55702357809531

4731647_20201_2_0,4ujg1o4icz,-1.442541157763653,-100.7480982764094,-35.723038588542124

3748240_20201_2_0,jcctqn4icz,-3.1952368036042027,-119.29317039600036,-17.24423021501312

2822160_20201_2_0,4x89jo4icz,-1.099076416319423,-93.5503256382851,-33.93428962008262

5521098_20201_2_0,4xhg2p4icz,-1.2612919853256925,-76.85068190768911,-13.69471648741731

3672377_20201_2_0,4ybwbo4icz,2.188238000616266,-80.35227563422231,-27.108236714271072

2179941_20201_2_0,4yfcqn4icz,-0.6315188705270345,-65.03229739053967,-41.49014226903893

5978768_20201_2_0,n9w6sn4icz,-1.8109157344560904,-105.32833369984982,-21.019730079795124

1014197_20201_2_0,506gko4icz,0.12481438378393066,-89.98443092606126,-41.74402989762001

3523916_20201_2_0,50mybp4icz,2.770629840209688,-100.89305276032496,-34.70751757473383

3590234_20201_2_0,52g9jn4icz,2.0067323173889102,-90.43393872691149,-56.89350815816536

3946313_20201_2_0,536xqo4icz,5.098874441200912,-74.3464887807906,-54.15892243936945

1877312_20201_2_0,53rb9o4icz,-0.5378540326290724,-83.74816265469354,-13.846638033938376

2217296_20201_2_0,54e09o4icz,-2.890417196930366,-80.97364926404757,-45.44613797546047

1843215_20201_2_0,54fwkn4icz,-2.3439820871229227,-71.51582176501631,-15.982697666841602

2402967_20201_2_0,54lcbp4icz,0.37799757162778774,-89.14770256530608,-45.58347638286787

3357354_20201_2_0,55ag8n4icz,5.146888271380199,-122.47033208541794,-51.39232567722223

3860103_20201_2_0,5jzsxo4icz,1.059132965672978,-91.55356762116205,-28.928107330451837

3163070_20201_2_0,56e2tn4icz,0.4172781707723839,-96.88158215606424,-45.91290123838873

5597830_20201_2_0,56ihyn4icz,6.497736169178981,-46.8249514352479,-70.04097011330173

3109043_20201_2_0,58ea0p4icz,-0.5353382529546457,-89.79921338118015,-37.25348986698319

5788071_20201_2_0,twx47p4icz,-1.1401065565845037,-85.61898965979299,-26.631817360394024

3240765_20201_2_0,597v8n4icz,-5.045717345639859,-111.60049967785244,-7.698160660156617

2826138_20201_2_0,59bkqn4icz,-2.2881198660756312,-93.34549413577389,-27.932573663124515

1726970_20201_2_0,5a0p2o4icz,1.8158972662871755,-108.70188575019031,-28.430886788962198

2678415_20201_2_0,5a0z8p4icz,-2.897031366594817,-105.93550395059668,-15.814154844918818

3695302_20201_2_0,5ab4wo4icz,3.9551892121091208,-35.86134907481221,-70.38524519360129

3066715_20201_2_0,5axzin4icz,0.16268517088877552,-108.39168601447278,-36.18542874785999

2934577_20201_2_0,5b25xo4icz,2.0119880314779657,-114.7265974090765,-46.196348047250055

5297786_20201_2_0,5c0non4icz,-0.37983385512166556,-73.78066338636154,-32.223318595190065

4953075_20201_2_0,5coruo4icz,-0.5736121092733633,-98.60820469582461,-24.658201617550247

4944615_20201_2_0,5dmt8p4icz,0.03968909216774858,-126.88921805387903,-43.17443394342422

3786025_20201_2_0,5e52uo4icz,3.1450077606130753,-73.21751155676782,-51.30592128109413

3739265_20201_2_0,5fgzhp4icz,5.837664908296162,-89.20717507638841,-86.27977558575327

4927326_20201_2_0,5fi51p4icz,2.561741142279082,-61.73959015722451,-53.37265762226551

4194428_20201_2_0,tbtm5o4icz,-0.31191109728914856,-88.91319567838471,-27.679421736891953

