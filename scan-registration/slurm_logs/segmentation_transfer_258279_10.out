10 th decile
.50
.55
/users/rhydian/anaconda3/envs/torch_env/lib/python3.7/site-packages/torch/cuda/__init__.py:52: UserWarning: CUDA initialization: Found no NVIDIA driver on your system. Please check that you have an NVIDIA GPU and installed a driver from http://www.nvidia.com/Download/index.aspx (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729006826/work/c10/cuda/CUDAFunctions.cpp:100.)
  return torch._C._cuda_getDeviceCount() > 0
  0%|          | 0/810 [00:00<?, ?it/s]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  0%|          | 1/810 [00:33<7:35:21, 33.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  0%|          | 2/810 [00:46<6:09:16, 27.42s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  0%|          | 3/810 [01:01<5:17:29, 23.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  0%|          | 4/810 [01:03<3:52:42, 17.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 5/810 [01:06<2:52:37, 12.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 6/810 [01:08<2:10:33,  9.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 7/810 [01:11<1:41:01,  7.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 8/810 [01:13<1:20:28,  6.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 9/810 [01:18<1:15:43,  5.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 10/810 [01:20<1:03:07,  4.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|▏         | 11/810 [01:23<54:17,  4.08s/it]  Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|▏         | 12/810 [01:27<53:49,  4.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 13/810 [01:29<47:09,  3.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 14/810 [01:32<44:19,  3.34s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 15/810 [01:35<41:30,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 16/810 [01:38<40:57,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 17/810 [01:40<38:39,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 18/810 [01:43<37:25,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 19/810 [01:46<35:57,  2.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 20/810 [01:48<35:16,  2.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 21/810 [01:51<35:26,  2.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 22/810 [01:54<35:44,  2.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 23/810 [01:56<34:41,  2.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 24/810 [01:58<33:47,  2.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 25/810 [02:01<33:40,  2.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 26/810 [02:03<33:03,  2.53s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 27/810 [02:06<32:56,  2.52s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 28/810 [02:08<32:35,  2.50s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▎         | 29/810 [02:11<32:25,  2.49s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▎         | 30/810 [02:14<33:04,  2.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 31/810 [02:16<33:00,  2.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 32/810 [02:19<33:03,  2.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 33/810 [02:21<33:18,  2.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 34/810 [02:24<33:28,  2.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 35/810 [02:27<33:36,  2.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 36/810 [02:29<33:02,  2.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▍         | 37/810 [02:32<33:05,  2.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▍         | 38/810 [02:34<33:08,  2.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▍         | 39/810 [02:37<33:31,  2.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▍         | 40/810 [02:39<33:09,  2.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▌         | 41/810 [02:42<32:55,  2.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▌         | 42/810 [02:44<32:50,  2.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▌         | 43/810 [02:47<32:31,  2.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▌         | 44/810 [02:50<32:31,  2.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 45/810 [02:52<32:22,  2.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 46/810 [02:55<32:28,  2.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 47/810 [02:57<32:50,  2.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 48/810 [03:00<32:48,  2.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 49/810 [03:02<32:42,  2.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 50/810 [03:05<32:49,  2.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▋         | 51/810 [03:08<33:22,  2.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▋         | 52/810 [03:11<34:06,  2.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 53/810 [03:14<34:46,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 54/810 [03:16<33:49,  2.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 55/810 [03:19<33:40,  2.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 56/810 [03:22<34:11,  2.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 57/810 [03:24<33:40,  2.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 58/810 [03:27<33:27,  2.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 59/810 [03:29<32:31,  2.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 60/810 [03:32<33:06,  2.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 61/810 [03:34<32:09,  2.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 62/810 [03:37<32:05,  2.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 63/810 [03:40<32:48,  2.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 64/810 [03:42<32:41,  2.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 65/810 [03:45<32:59,  2.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 66/810 [03:48<33:39,  2.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 67/810 [03:51<33:23,  2.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 68/810 [03:53<32:44,  2.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▊         | 69/810 [03:56<33:45,  2.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▊         | 70/810 [03:58<32:09,  2.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 71/810 [04:01<32:03,  2.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 72/810 [04:03<31:15,  2.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 73/810 [04:06<31:52,  2.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 74/810 [04:09<31:43,  2.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 75/810 [04:11<31:06,  2.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 76/810 [04:13<30:20,  2.48s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|▉         | 77/810 [04:16<30:44,  2.52s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|▉         | 78/810 [04:19<30:57,  2.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|▉         | 79/810 [04:21<30:29,  2.50s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|▉         | 80/810 [04:23<29:47,  2.45s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|█         | 81/810 [04:26<30:01,  2.47s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|█         | 82/810 [04:28<29:53,  2.46s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|█         | 83/810 [04:31<30:32,  2.52s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|█         | 84/810 [04:34<31:23,  2.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|█         | 85/810 [04:37<32:11,  2.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 86/810 [04:39<32:20,  2.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 87/810 [04:43<34:22,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 88/810 [04:45<34:07,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 89/810 [04:48<33:46,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 90/810 [04:51<32:59,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 91/810 [04:54<33:12,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█▏        | 92/810 [04:56<33:04,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█▏        | 93/810 [04:59<33:08,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 94/810 [05:02<32:56,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 95/810 [05:05<36:00,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 96/810 [05:08<35:08,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 97/810 [05:11<34:15,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 98/810 [05:14<33:25,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 99/810 [05:16<32:35,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 100/810 [05:19<32:13,  2.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 101/810 [05:22<33:55,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 102/810 [05:26<39:17,  3.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 103/810 [05:29<37:03,  3.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 104/810 [05:32<37:33,  3.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 105/810 [05:35<36:51,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 106/810 [05:40<40:14,  3.43s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 107/810 [05:43<41:35,  3.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 108/810 [05:47<40:09,  3.43s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 109/810 [05:50<38:24,  3.29s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▎        | 110/810 [05:52<37:14,  3.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▎        | 111/810 [05:56<36:59,  3.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 112/810 [05:59<35:53,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 113/810 [06:01<35:19,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 114/810 [06:04<34:12,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 115/810 [06:07<34:49,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 116/810 [06:10<34:27,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 117/810 [06:13<33:10,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▍        | 118/810 [06:16<32:37,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▍        | 119/810 [06:19<35:00,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▍        | 120/810 [06:22<33:33,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▍        | 121/810 [06:25<33:01,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▌        | 122/810 [06:27<33:02,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▌        | 123/810 [06:30<32:45,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▌        | 124/810 [06:33<32:48,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▌        | 125/810 [06:36<32:31,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 126/810 [06:39<33:36,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 127/810 [06:42<33:04,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 128/810 [06:45<32:09,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 129/810 [06:47<32:07,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 130/810 [06:50<31:36,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 131/810 [06:53<31:54,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▋        | 132/810 [06:56<31:46,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▋        | 133/810 [06:59<32:30,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 134/810 [07:08<53:38,  4.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 135/810 [07:11<47:20,  4.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 136/810 [07:14<42:57,  3.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 137/810 [07:17<40:07,  3.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 138/810 [07:20<38:53,  3.47s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 139/810 [07:23<35:57,  3.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 140/810 [07:25<34:23,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 141/810 [07:28<33:31,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 142/810 [07:31<31:54,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 143/810 [07:34<31:28,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 144/810 [07:36<30:49,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 145/810 [07:39<30:39,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 146/810 [07:41<29:52,  2.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 147/810 [07:44<30:47,  2.79s/it] 18%|█▊        | 148/810 [07:48<32:11,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 149/810 [07:50<31:26,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▊        | 150/810 [07:53<31:06,  2.83s/it] 19%|█▊        | 151/810 [07:56<30:42,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 152/810 [07:59<30:56,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 153/810 [08:01<30:02,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 154/810 [08:04<29:37,  2.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 155/810 [08:07<30:44,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 156/810 [08:10<31:02,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 157/810 [08:14<34:27,  3.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|█▉        | 158/810 [08:17<33:35,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|█▉        | 159/810 [08:20<32:49,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|█▉        | 160/810 [08:22<32:09,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|█▉        | 161/810 [08:25<31:48,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|██        | 162/810 [08:28<30:15,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|██        | 163/810 [08:31<30:20,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|██        | 164/810 [08:33<29:45,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|██        | 165/810 [08:36<30:00,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|██        | 166/810 [08:39<29:29,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 167/810 [08:41<28:39,  2.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 168/810 [08:44<29:08,  2.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 169/810 [08:47<29:50,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 170/810 [08:50<30:13,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 171/810 [08:53<30:25,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 172/810 [08:56<29:35,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██▏       | 173/810 [08:59<31:16,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██▏       | 174/810 [09:02<31:07,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 175/810 [09:05<30:42,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 176/810 [09:08<30:42,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 177/810 [09:10<30:10,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 178/810 [09:14<33:06,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 179/810 [09:17<32:02,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 180/810 [09:25<48:30,  4.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 181/810 [09:28<42:46,  4.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 182/810 [09:31<38:52,  3.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 183/810 [09:34<35:45,  3.42s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 184/810 [09:36<33:36,  3.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 185/810 [09:39<31:54,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 186/810 [09:42<32:45,  3.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 187/810 [09:46<32:32,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 188/810 [09:48<31:17,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 189/810 [09:51<30:11,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 190/810 [09:54<29:46,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▎       | 191/810 [09:56<29:09,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▎       | 192/810 [09:59<28:57,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 193/810 [10:02<28:51,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 194/810 [10:07<35:40,  3.47s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 195/810 [10:10<33:22,  3.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 196/810 [10:14<37:00,  3.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 197/810 [10:17<34:19,  3.36s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 198/810 [10:20<32:26,  3.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▍       | 199/810 [10:22<30:28,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▍       | 200/810 [10:25<30:02,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▍       | 201/810 [10:28<29:15,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▍       | 202/810 [10:31<29:09,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▌       | 203/810 [10:34<28:44,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▌       | 204/810 [10:36<28:00,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▌       | 205/810 [10:39<28:38,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▌       | 206/810 [10:42<28:35,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 207/810 [10:45<28:13,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 208/810 [10:48<28:18,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 209/810 [10:51<28:54,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 210/810 [10:53<28:22,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 211/810 [10:56<28:21,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 212/810 [10:59<27:54,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▋       | 213/810 [11:07<43:47,  4.40s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▋       | 214/810 [11:10<39:03,  3.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 215/810 [11:13<35:15,  3.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 216/810 [11:16<33:28,  3.38s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 217/810 [11:18<31:01,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 218/810 [11:21<29:53,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 219/810 [11:24<28:58,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 220/810 [11:27<28:58,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 221/810 [11:29<27:54,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 222/810 [11:32<28:10,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 223/810 [11:35<28:01,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 224/810 [11:38<27:53,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 225/810 [11:41<29:24,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 226/810 [11:44<28:55,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 227/810 [11:47<28:58,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 228/810 [11:50<28:29,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 229/810 [11:53<27:38,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 230/810 [11:56<28:50,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▊       | 231/810 [12:00<33:17,  3.45s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▊       | 232/810 [12:03<32:04,  3.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 233/810 [12:07<31:51,  3.31s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 234/810 [12:09<29:32,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 235/810 [12:12<27:59,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 236/810 [12:15<28:36,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 237/810 [12:18<27:51,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 238/810 [12:20<26:55,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|██▉       | 239/810 [12:23<26:20,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|██▉       | 240/810 [12:26<25:55,  2.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|██▉       | 241/810 [12:29<26:39,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|██▉       | 242/810 [12:31<26:24,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|███       | 243/810 [12:34<26:01,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|███       | 244/810 [12:37<25:48,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|███       | 245/810 [12:39<25:41,  2.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|███       | 246/810 [12:42<25:55,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|███       | 247/810 [12:45<25:31,  2.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 248/810 [12:48<25:38,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 249/810 [12:51<26:45,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 250/810 [12:54<26:46,  2.87s/it] 31%|███       | 251/810 [12:57<27:37,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 252/810 [13:01<31:39,  3.40s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 253/810 [13:04<30:36,  3.30s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███▏      | 254/810 [13:08<31:18,  3.38s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███▏      | 255/810 [13:11<29:27,  3.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 256/810 [13:14<28:51,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 257/810 [13:16<27:56,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 258/810 [13:19<27:13,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 259/810 [13:22<26:57,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 260/810 [13:25<26:31,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 261/810 [13:27<25:30,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 262/810 [13:30<25:27,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 263/810 [13:33<25:27,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 264/810 [13:36<25:03,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 265/810 [13:38<24:38,  2.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 266/810 [13:41<24:21,  2.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 267/810 [13:47<33:23,  3.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 268/810 [13:50<30:59,  3.43s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 269/810 [13:53<30:51,  3.42s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 270/810 [13:57<32:18,  3.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 271/810 [14:00<29:43,  3.31s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▎      | 272/810 [14:03<30:16,  3.38s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▎      | 273/810 [14:06<28:04,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 274/810 [14:09<26:37,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 275/810 [14:12<26:45,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 276/810 [14:14<25:42,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 277/810 [14:17<25:57,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 278/810 [14:21<27:26,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 279/810 [14:24<26:41,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▍      | 280/810 [14:26<25:57,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▍      | 281/810 [14:29<25:21,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▍      | 282/810 [14:33<28:45,  3.27s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▍      | 283/810 [14:37<29:20,  3.34s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▌      | 284/810 [14:39<27:46,  3.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▌      | 285/810 [14:43<27:28,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▌      | 286/810 [14:45<26:11,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▌      | 287/810 [14:48<25:49,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 288/810 [14:51<25:41,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 289/810 [14:54<24:57,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 290/810 [14:56<24:13,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 291/810 [14:59<24:27,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 292/810 [15:02<24:25,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 293/810 [15:05<24:13,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▋      | 294/810 [15:08<24:54,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▋      | 295/810 [15:11<24:53,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 296/810 [15:14<24:22,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 297/810 [15:16<23:58,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 298/810 [15:19<24:56,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 299/810 [15:24<28:31,  3.35s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 300/810 [15:27<27:46,  3.27s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 301/810 [15:50<1:17:15,  9.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 302/810 [15:58<1:15:33,  8.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 303/810 [16:22<1:53:43, 13.46s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 304/810 [16:25<1:26:57, 10.31s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 305/810 [16:30<1:12:38,  8.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 306/810 [16:33<57:59,  6.90s/it]  Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 307/810 [16:36<49:36,  5.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 308/810 [16:40<43:12,  5.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 309/810 [16:42<36:36,  4.38s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 310/810 [16:45<32:26,  3.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 311/810 [16:48<30:17,  3.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▊      | 312/810 [16:51<28:35,  3.44s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▊      | 313/810 [16:54<27:01,  3.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 314/810 [16:57<25:38,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 315/810 [17:09<48:46,  5.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 316/810 [17:13<43:02,  5.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 317/810 [17:16<36:56,  4.50s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 318/810 [17:20<35:47,  4.36s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 319/810 [17:23<32:33,  3.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|███▉      | 320/810 [17:26<31:51,  3.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|███▉      | 321/810 [17:29<28:42,  3.52s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|███▉      | 322/810 [17:32<26:04,  3.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|███▉      | 323/810 [17:34<24:43,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|████      | 324/810 [17:37<24:15,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|████      | 325/810 [17:40<24:07,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|████      | 326/810 [17:43<24:12,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|████      | 327/810 [17:46<24:28,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|████      | 328/810 [17:49<24:07,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 329/810 [17:52<23:31,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 330/810 [17:54<22:23,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 331/810 [18:02<33:48,  4.24s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 332/810 [18:05<30:09,  3.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 333/810 [18:08<28:17,  3.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 334/810 [18:11<28:00,  3.53s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████▏     | 335/810 [18:14<26:03,  3.29s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████▏     | 336/810 [18:18<27:00,  3.42s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 337/810 [18:21<25:41,  3.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 338/810 [18:25<27:35,  3.51s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 339/810 [18:27<25:45,  3.28s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 340/810 [18:30<25:18,  3.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 341/810 [18:33<24:38,  3.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 342/810 [18:38<28:07,  3.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 343/810 [18:41<25:50,  3.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 344/810 [18:44<25:02,  3.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 345/810 [18:47<24:15,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 346/810 [18:50<23:33,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 347/810 [18:52<22:51,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 348/810 [18:55<23:11,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 349/810 [18:58<22:07,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 350/810 [19:01<22:27,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 351/810 [19:04<21:50,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 352/810 [19:06<21:16,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▎     | 353/810 [19:09<21:18,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▎     | 354/810 [19:12<21:06,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 355/810 [19:15<21:23,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 356/810 [19:18<21:05,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 357/810 [19:21<21:28,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 358/810 [19:23<21:09,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 359/810 [19:26<20:50,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 360/810 [19:29<20:43,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▍     | 361/810 [19:31<19:56,  2.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▍     | 362/810 [19:35<21:49,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▍     | 363/810 [19:39<25:18,  3.40s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▍     | 364/810 [19:42<23:40,  3.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▌     | 365/810 [19:44<22:10,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▌     | 366/810 [19:47<21:35,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▌     | 367/810 [19:52<26:36,  3.60s/it] 45%|████▌     | 368/810 [19:55<24:42,  3.35s/it] 46%|████▌     | 369/810 [19:58<23:17,  3.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 370/810 [20:01<22:25,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 371/810 [20:04<23:45,  3.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 372/810 [20:08<23:52,  3.27s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Trying to load from /users/rhydian/self-supervised-project/model_weights/SSECEncodersBothBoth
==> Resuming model trained for 106 epochs...
Trying to load from ../model_weights/angle_regressor4
==> Resuming model trained for 7 epochs...
5173023_20201_2_0,ib0hso4icz,6.235194447119275,-66.71054323929889,-83.74296933608899

5008353_20201_2_0,ib2w3p4icz,2.876660330885099,-77.73146395820322,-67.15266650508039

2738222_20201_2_0,ibi36p4icz,1.3862941502817259,-89.14370297442218,-43.42141946578795

5640041_20201_2_0,ibjcao4icz,1.6146522020659853,-85.70989791532531,-30.28233761920842

5757250_20201_2_0,ibjpfn4icz,-0.4910642990555582,-131.14527282412226,-34.15512140955151

2527496_20201_2_0,ibrxpn4icz,1.2196828179879162,-113.7670665749429,-37.424217304581745

1583242_20201_2_0,ibv8oo4icz,-7.461434474712657,-49.88453869626579,-36.315897068849694

1591112_20201_2_0,ibxpdp4icz,1.9333345617552846,-73.7147493026456,-51.97259080904159

1105611_20201_2_0,ic26tn4icz,1.7619937691447523,-90.78583296740615,-56.84056040395704

1880408_20201_2_0,ic2hin4icz,2.8711404600501456,-75.80554794149609,-57.44661304130432

3264761_20201_2_0,ic65xn4icz,0.5703636020147385,-115.89673337445916,-34.75940513998495

4137756_20201_2_0,iccdin4icz,0.30611408690117986,-111.21089967599144,-44.48574038675939

4435224_20201_2_0,ice5co4icz,-0.9446568286329303,-63.70687864681133,-29.2409591963236

3086329_20201_2_0,iceh7p4icz,-2.9990920652294686,-124.07828571500553,-8.74403584399461

5459218_20201_2_0,icfr8o4icz,2.8027077809662337,-107.52962575745713,-61.915669471527195

1580570_20201_2_0,icie2p4icz,-1.9048269100118276,-105.08282573739609,-15.23345951578483

2149212_20201_2_0,icq49o4icz,-0.7594400146188356,-121.1711900124821,-28.68324462407321

4115916_20201_2_0,icr6fo4icz,0.7381209576887965,-81.97098133803655,-44.56273024967632

1190756_20201_2_0,icsipo4icz,2.54804924308626,-50.17639035470023,-44.164692923663125

3086950_20201_2_0,ictzno4icz,-1.3491801345638907,-87.97149103039106,-28.15445706230325

3765764_20201_2_0,icu9pn4icz,-3.8505385735281883,-71.45920993443107,-10.840020712049395

5543965_20201_2_0,iczyho4icz,0.30654585345463237,-146.85772997221716,-40.84211685614497

2005546_20201_2_0,id4hin4icz,0.9815954759680136,-109.44729146641325,-43.020194488858266

3235231_20201_2_0,id7nyo4icz,0.3892309329544987,-78.58002117455047,-48.49587831830388

1409693_20201_2_0,idjz3o4icz,-0.7733223563980667,-62.80980603050466,-36.58189092302629

4850510_20201_2_0,idolfp4icz,-2.6597718515195976,-89.32587822365767,-29.33512814397959

5997610_20201_2_0,idsk3o4icz,-0.975074018369623,-105.09828616962261,-39.02965306931455

1669396_20201_2_0,idv9eo4icz,-3.6702043746343813,-51.90120343349403,-21.20769519092336

4451058_20201_2_0,ie8qep4icz,5.160102664390967,-54.813942672497944,-56.43409349738252

4933325_20201_2_0,ief62o4icz,-5.984660259044105,-114.33805189421986,9.577696585474442

5507118_20201_2_0,ieft2p4icz,-3.1811067802933226,-108.11308373677292,-27.539781733951656

3562880_20201_2_0,ieozno4icz,1.2108423922089946,-69.5727345652495,-49.113500687733605

5926686_20201_2_0,ieqaip4icz,2.6764069207126386,-134.34247657143618,-48.58311796724993

4570343_20201_2_0,ierotn4icz,-2.0814858349677303,-117.98779427068618,-9.412581621707687

4554520_20201_2_0,ieyguo4icz,0.20964482191883763,-42.44424491243694,-50.56924481494934

3391466_20201_2_0,ieyjqn4icz,-4.15293854464891,-73.31391352796274,-23.757492060572673

3439840_20201_2_0,if2man4icz,-2.585684776333871,-129.64694115437754,-19.215292508973675

2326798_20201_2_0,if51kp4icz,-2.6966715524325098,-86.50703635016598,-30.059143901119157

4073136_20201_2_0,if83ko4icz,1.4938653987884862,-82.97432113282824,-17.373266697859947

5125669_20201_2_0,iffbln4icz,-0.7977756997703801,-95.36322204701133,-45.69343851104651

2321468_20201_2_0,ifllxn4icz,-1.6909683672096076,-70.84544309484247,-5.361671059175947

3386677_20201_2_0,ifmn6o4icz,-2.073426621809867,-94.277855838665,-11.674250784737637

5426969_20201_2_0,ig4i2p4icz,-1.8178089465936405,-100.26211062390402,-14.228436498266205

3321019_20201_2_0,igcwyo4icz,2.986431836500291,-95.13532238201628,-52.118921759412956

1916629_20201_2_0,iggspo4icz,3.7942589786343084,-76.0087342036079,-66.15885240919954

2083303_20201_2_0,igj1so4icz,2.2935948595413524,-68.15496893949489,-41.168494132399374

5438999_20201_2_0,iglino4icz,2.1758192005128123,-94.81682660751329,-27.1403757981939

3568508_20201_2_0,igp5eo4icz,-1.3977237134823102,-81.72145367339778,-18.44927238135614

2360021_20201_2_0,igw7gp4icz,-2.6906998006176313,-65.35454016098691,-18.920907217544602

5669649_20201_2_0,igzaao4icz,-2.386268399598263,-145.89069246561212,-36.73433402102114

5643815_20201_2_0,ih1wrn4icz,1.7793912419143625,-114.8778094130308,-43.82324368360278

1699478_20201_2_0,ih7mcn4icz,1.2390431211770103,-93.98585460363188,-41.03591879693104

3079696_20201_2_0,ih7olo4icz,0.9343227647473982,-62.712118411951565,-44.01503036249578

4137801_20201_2_0,ih7pfo4icz,0.7183737653457265,-95.43752438519073,-48.60517176448134

3064021_20201_2_0,ihcc9p4icz,-3.241619804290896,-98.41044063715532,-14.674426989336297

4613717_20201_2_0,ihpqrn4icz,1.3431499992349976,-85.32003001572429,-56.047830570663095

3681657_20201_2_0,ihrufn4icz,0.21788742485223936,-117.57352613604186,-35.372114685365176

5365740_20201_2_0,ihs2xn4icz,-1.7070098476907556,-87.40701334108695,-30.805276439780016

4842011_20201_2_0,ihthxn4icz,-2.297646246803733,-102.56660761221951,-17.048045542425626

1485855_20201_2_0,ihv8vo4icz,3.614390581847587,-125.48154113513152,-61.123794941750845

4273263_20201_2_0,ii39jo4icz,1.5896074821994297,-124.9505593351077,-59.00671274834404

4414554_20201_2_0,ii7h5o4icz,-31.82451484155898,-131.08403350799742,133.91795564245496

2575682_20201_2_0,ii93fp4icz,1.1834368980756829,-58.98194478113348,-28.71096967444015

1839835_20201_2_0,iicsyn4icz,-1.3757996079934198,-100.82759660879478,-19.788568636122307

5377096_20201_2_0,iigzwn4icz,0.4479730652647915,-92.30929744882502,-41.51177573634175

1559006_20201_2_0,iik8ko4icz,-2.6409392639464033,-111.44239067277167,-3.315868931252126

1733730_20201_2_0,iikwdp4icz,0.3194140635998972,-90.29951485050898,-33.60616387243239

5275832_20201_2_0,iim8do4icz,0.38649064442285525,-113.60340900945286,-26.519314985972414

5622012_20201_2_0,iimm3o4icz,-7.596456185413801,-116.49103367828661,11.003531394080554

5008646_20201_2_0,iipwoo4icz,1.966880452364229,-113.64761853791515,-45.58968203272828

2807051_20201_2_0,iiun6p4icz,-3.826767054406117,-83.62696375781405,-10.891339409696997

2609089_20201_2_0,iiw99o4icz,-0.8095864596279304,-81.06907653462144,-22.210301674667363

4935835_20201_2_0,ij425o4icz,-1.68155123482261,-80.76696311330821,-23.956960043429063

1587920_20201_2_0,ijaaip4icz,2.2359559800024615,-84.68457152120556,-52.35108842397514

4756888_20201_2_0,ijewtn4icz,-2.0748538428062857,-106.83048257223473,-18.437182802476983

6025909_20201_2_0,ijh8po4icz,2.3121849986670497,-34.25340908459722,-61.63958592699288

3364709_20201_2_0,iji5fo4icz,-0.11128187015195867,-129.44073985643848,-37.78236544744844

3770434_20201_2_0,ijle6o4icz,-0.8056285289909042,-95.17122216870087,-23.01310653016209

5521866_20201_2_0,ijluon4icz,2.070741672357342,-129.2489336915736,-39.429611342518626

5678033_20201_2_0,ijncdp4icz,-2.0518928528618128,-128.7108618346133,-32.70592870107333

2848654_20201_2_0,ijr2to4icz,-0.4000345218419234,-104.8026057395727,-31.024493760863137

1006237_20201_2_0,ijrnfo4icz,3.6212419642211047,-49.812027491894526,-58.847885538109566

1956027_20201_2_0,ijt9ap4icz,2.535116767230757,-82.92027605047255,-27.802627805031165

2262596_20201_2_0,ijxufp4icz,-0.40654936369289113,-82.52539121409578,-44.04211956614732

4611763_20201_2_0,ijym3p4icz,-0.5338120211260586,-95.72881217886433,-15.545053509717945

1951573_20201_2_0,ik4mso4icz,-0.4086619642626188,-95.45826128836336,-3.768032960213503

3218778_20201_2_0,ik51on4icz,2.3631355557548557,-106.05356290818511,-54.41903126850326

3197880_20201_2_0,ik963p4icz,-1.0243174490901836,-86.05270978706233,-23.117782783577468

1072953_20201_2_0,ikcjip4icz,-0.37082009559550766,-57.30378358941468,-30.7777858167769

1816477_20201_2_0,ikdebp4icz,-0.058514624216974856,-151.5660730149456,-26.78272866476206

3672656_20201_2_0,ikfwtn4icz,5.3136629246974225,-68.79467754653024,-63.14421475456872

4040274_20201_2_0,ikj64o4icz,-0.9180369537504551,-64.69551189060084,-19.577388647315615

1147777_20201_2_0,ikkiqo4icz,2.4227516952513826,-53.22169531884717,-66.7113089582932

3789873_20201_2_0,ikknmn4icz,0.1729720385832557,-85.6255712075862,-38.794535770237104

1986930_20201_2_0,ng7qao4icz,-1.4139476320371724,-96.16718312445667,-18.906977175852404

5232196_20201_2_0,ikp3jn4icz,0.2233260804992965,-109.9738035085488,-34.64248683665491

2087643_20201_2_0,ikr7pn4icz,2.193247196085258,-131.81081060430796,-48.57902368240934

2541212_20201_2_0,ikrtwn4icz,-0.7059868017055505,-106.8155912534306,-30.71126257494018

5041204_20201_2_0,iktgwo4icz,-0.964936319699037,-119.02543859273229,-30.498577069825927

5750849_20201_2_0,ikxxmn4icz,-0.4081615521615308,-96.62875322125842,-26.385460940912665

1973770_20201_2_0,il1hrn4icz,2.1931909366523077,-84.47204062800671,-46.928673987484984

2300161_20201_2_0,il7gao4icz,0.6628427003391161,-71.47785419671982,-40.796935808386905

3619440_20201_2_0,il7scp4icz,-3.4944919182559846,-127.15290367509019,-16.27889803683142

1065352_20201_2_0,il9o3p4icz,-0.2835960614986837,-82.88306858657646,-31.95305234405309

4377001_20201_2_0,ilbcto4icz,1.5808999116075775,-79.34655791746727,-51.458803759265024

2352780_20201_2_0,ilhx1p4icz,-0.8712556049059632,-80.85749049047175,-35.5565366512367

1612221_20201_2_0,y2mmnn4icz,1.9235049997642863,-84.8717035441972,-43.95843672020237

5434393_20201_2_0,iljcho4icz,-1.4871509669834797,-100.49916652181324,-45.66830265843639

2715616_20201_2_0,ilk5xo4icz,-1.7736134518554658,-77.08288907397045,-38.28802341542456

4252783_20201_2_0,illm8p4icz,0.5426376644400571,-110.0609662668765,-39.20915497814548

5925092_20201_2_0,ilp14p4icz,-0.33212738366246974,-14.573365557818363,-22.96045189764895

3671792_20201_2_0,ilpxgo4icz,-1.7330149706170417,-81.99884827597884,-29.77524199086983

3842260_20201_2_0,ilqzwn4icz,2.4321507007983536,-72.24527819801892,-41.61015052466763

2978001_20201_2_0,iltbto4icz,-0.23853260681295693,-85.45663941443328,-18.044432333000586

1856327_20201_2_0,iluf2o4icz,-0.7530278206252979,-55.603441342596284,-44.31410818973086

3653915_20201_2_0,ilwpjn4icz,-3.156429802384888,-74.00822698633857,-9.988510385641476

4828410_20201_2_0,ilx2fn4icz,-1.5401622666050447,-105.34005432059425,-32.00446971913982

2181915_20201_2_0,ilxn3o4icz,0.8272732651420199,-80.01763213945873,-37.72146640165835

4017875_20201_2_0,ilyaqn4icz,1.9411032431603703,-95.9013702192675,-37.7077943995602

2969443_20201_2_0,ilyufn4icz,-1.4697722092939234,-129.08318863402584,-27.671382150018303

5255292_20201_2_0,im00ln4icz,1.1560236690060377,-115.06966020907396,-42.303917789218914

2175227_20201_2_0,im5kso4icz,-1.5671832337445697,-84.58903281264838,-6.560344308843014

5523850_20201_2_0,im630p4icz,-3.161916602284818,-148.6729588891364,-5.831862551988053

1123889_20201_2_0,im791p4icz,-7.5271614908516895,-108.48292241916906,4.327039623782653

3267898_20201_2_0,im8gon4icz,2.637927671459572,-68.25264906140109,-46.59621939383064

1153240_20201_2_0,im9poo4icz,1.9274998833894788,-100.49038105557091,-43.519460153887536

5550584_20201_2_0,imdiap4icz,-1.305324297079775,-130.00557921112605,-27.847713897874215

2206636_20201_2_0,imev8p4icz,-0.0027433662021502806,-134.77843659195136,-40.52796195066779

2677525_20201_2_0,imf9uo4icz,-2.8123794556112274,-85.97533104524743,-12.309998740622916

3944990_20201_2_0,imjq3p4icz,-0.862865765068404,-95.64338428819553,-38.97064278229928

3353671_20201_2_0,imkxjo4icz,-0.9527023758583562,-97.32054428433125,-32.14281409952082

5966957_20201_2_0,imq02o4icz,2.868718059523076,-100.86893784528394,-67.01023042808109

4876657_20201_2_0,imwguo4icz,-0.6051798055173069,-37.32962710407867,-45.49561644002718

4282731_20201_2_0,in13mn4icz,7.0470984282796545,-101.12041418143312,-63.189037692921374

2625982_20201_2_0,in22cn4icz,0.2574649972350775,-131.62847645276256,-42.1428380286051

1204130_20201_2_0,in3bzo4icz,0.17650184838758828,-58.364620614343266,-30.918388861994714

1815133_20201_2_0,in6oao4icz,-1.0476149925122042,-112.80485672880235,-34.091685685225684

1245530_20201_2_0,in71mo4icz,-4.5635441724169095,-130.34635152604199,-8.374337600740319

4348861_20201_2_0,in9rdo4icz,-0.26428000120258716,-90.56664680523963,-33.82892619789547

2755729_20201_2_0,ina5sn4icz,-2.0993964354825994,-105.58845371392073,-16.08169073825927

3464239_20201_2_0,iniien4icz,-1.1529851710239016,-94.93869482649794,-20.075448467586753

1552867_20201_2_0,inj1ln4icz,-1.3044220553889372,-147.42981840380858,-11.48306709163785

4463506_20201_2_0,inoq2o4icz,-3.2004285014928637,-131.5710534190428,-24.49297393807396

1190848_20201_2_0,inu4do4icz,0.9427943285199195,-63.17757275348487,-41.29576302939664

2918212_20201_2_0,io21ip4icz,1.194502398282766,-168.19864982114842,-64.88662289537018

3167662_20201_2_0,io69fo4icz,-5.980869728183698,-93.34203214245466,8.835328145534078

3218349_20201_2_0,io6jpo4icz,-1.2720757087640384,-35.60472960812979,-20.608029499525443

2769725_20201_2_0,io9a2p4icz,-115.22424377603004,368.1882936259088,281.93313063271955

2858179_20201_2_0,iod9hp4icz,1.7322754103233193,-113.0485679700503,-45.779764491758996

3338990_20201_2_0,iohtoo4icz,0.6136693876658282,-96.2335879077668,-32.669304636764636

4944202_20201_2_0,ion73o4icz,-76.50926386097849,254.37545135682197,357.0007326282687

5400519_20201_2_0,iopnsn4icz,2.171321849474863,-32.736719121118995,-50.98121308786119

2879709_20201_2_0,iora2p4icz,2.119203614924892,-111.79102601335134,-52.040943901959736

5507667_20201_2_0,ioyb7p4icz,-0.04344560548356718,-116.00553972533808,-40.64191663124883

5702228_20201_2_0,ioyt3o4icz,-2.18790430925409,-122.8884474173085,-26.763880596231346

5735489_20201_2_0,ip17xn4icz,1.9716854010679907,-85.41569803481502,-60.644346726281526

5047677_20201_2_0,ip2o8o4icz,-3.3933414805374684,-81.32588375571373,-10.20402276086051

5005173_20201_2_0,ip9xqo4icz,0.20478192657930774,-103.34768123757922,-40.60420670468113

4324987_20201_2_0,ipba4o4icz,1.1142315383801993,-93.15333317290259,-43.43448421130873

3564995_20201_2_0,ipc7jn4icz,46.96184624285036,161.8052023924958,-210.31795885039293

5189277_20201_2_0,iphzjo4icz,0.5191320429936381,-59.82380852882039,-28.12959694784189

1778746_20201_2_0,ipi07o4icz,-2.4036313032933485,-136.34130139714313,-29.175972243149943

1983197_20201_2_0,ipmd7p4icz,-1.5744711004098477,-94.67697308490548,-18.635713663447234

5214154_20201_2_0,ipq79o4icz,1.114857317547152,-114.26448521559493,-47.063345943877934

2747860_20201_2_0,ipt2mo4icz,-1.3493757234509929,-92.84228669124798,-25.580445939420272

4622965_20201_2_0,iptbtn4icz,2.8393402842164512,-66.11823880729949,-53.554260939585035

3020643_20201_2_0,iq0eqn4icz,0.42113547727398587,-134.43680110665196,-45.822498622746565

5403812_20201_2_0,iq1jjp4icz,0.052506105409176294,-124.79235279967631,-48.14118827803081

6020819_20201_2_0,iq4g8n4icz,-2.2275899091327185,-114.88539284347422,-35.95828217964396

5899798_20201_2_0,iq4mao4icz,0.626617222140094,-95.51032426398609,-21.263792132035107

3584544_20201_2_0,iq5mfp4icz,1.2272051528841048,-61.729463544452216,-49.61524101275134

2298580_20201_2_0,iq77xo4icz,-1.583118040448945,-69.80627027214285,-40.542119024641266

3705688_20201_2_0,iqapsn4icz,-1.9728408696428532,-48.3349115376767,-33.18745008967258

5508682_20201_2_0,iqe1bp4icz,-0.09597704605415919,-97.94515006348405,-37.75688963182003

1365287_20201_2_0,iqhfyo4icz,2.862290258690628,-95.25932831741699,-52.18863231189073

3317262_20201_2_0,iqkm3p4icz,0.8397769345914409,-87.05878399947261,-50.4841316182671

1082368_20201_2_0,iqllyo4icz,0.5947889001499929,-87.92148872299452,-21.241621571663032

2302746_20201_2_0,iqmukn4icz,-0.26063827754346,-40.72774382587005,-34.33117148243363

4104966_20201_2_0,iqpqon4icz,4.51343839895277,-55.32686074195169,-59.83951217817494

2919594_20201_2_0,iqyilo4icz,0.23360305043935423,-114.57365148179656,-24.715025084168133

1402124_20201_2_0,iqym9n4icz,1.271018715453816,-89.41134271108416,-37.37086029886795

1958476_20201_2_0,iqywqn4icz,2.5566625215298404,-62.859474097306816,-54.992122546858695

5724284_20201_2_0,ir2yrn4icz,0.673260981791647,-101.28707329811334,-46.21330019334903

1156697_20201_2_0,ir3bgn4icz,-3.8425708247031025,-150.6761996873476,-37.88926576849292

5443113_20201_2_0,ircrao4icz,0.8492990302611652,-95.4582465677803,-38.859540318234735

4767549_20201_2_0,byimyn4icz,-1.3279897637065319,-79.3220031070893,-17.593556395219068

1202281_20201_2_0,irf1vn4icz,3.58847978734316,-111.61400205055793,-55.20093687696114

3008715_20201_2_0,irfcoo4icz,2.1259007974397557,-86.69382138867388,-49.21845910407774

4804728_20201_2_0,irlenn4icz,-0.5577436623715519,-65.75270115361408,-46.34435409359156

1229366_20201_2_0,irm6tn4icz,-0.9938560915690595,-112.8092412656452,-22.392030800967433

4136980_20201_2_0,irrc2p4icz,1.359035396040012,-100.43918725317164,-29.362699423060008

1726165_20201_2_0,irwrfp4icz,0.010562638934681188,-104.69225265958144,-43.664299708627595

4905554_20201_2_0,irxyxo4icz,1.2089314389908306,-64.20852156166197,-34.428256809054645

2963283_20201_2_0,irykeo4icz,2.72699108164134,-72.0241770225594,-52.63026404285692

1654821_20201_2_0,irzzgo4icz,0.6176675060535093,-84.03774636025713,-25.121001576731103

2131817_20201_2_0,is1feo4icz,-1.2338615380902516,-88.46186679976012,-44.74371004127866

5770003_20201_2_0,is3jep4icz,-4.973966544807871,-87.40541422925918,-10.310193025129507

3998661_20201_2_0,is7iip4icz,2.0496432777998552,-62.516844216006746,-42.615831756770305

1924210_20201_2_0,is9cio4icz,-0.6816421661700538,-98.11947835987857,-37.61576820141073

5733514_20201_2_0,iskq7p4icz,-0.5578035294306769,-67.50726471763511,-35.275402506609666

4839923_20201_2_0,ism98p4icz,-0.4223970480863236,-92.23186323203598,-38.9557650933764

2790155_20201_2_0,isny9p4icz,-1.8514695281102487,-92.323091895016,-35.96097722891204

1516225_20201_2_0,ispdwo4icz,4.949707995909168,-102.56675891726937,-60.65657835904737

5039504_20201_2_0,isriwn4icz,2.2895065612993357,-82.50213723590903,-40.34799962023257

3660123_20201_2_0,isu6io4icz,2.9724311823050558,-121.14984597823164,-40.661356459368136

3944974_20201_2_0,isuq9p4icz,-0.8588738470305819,-134.93987485581255,-28.589883593031047

1016954_20201_2_0,isw68n4icz,-2.8550764390268975,-104.05282121857266,-20.72991949557317

5776372_20201_2_0,isw8vo4icz,-2.2191620501877054,-95.12548642528168,-29.010280587771007

1116297_20201_2_0,iswieo4icz,0.1815310563972648,-120.86907184025398,-27.82693088184189

5500876_20201_2_0,it049n4icz,-0.09687254106396889,-141.1716921124189,-40.36419425735171

4562395_20201_2_0,it0ppo4icz,0.08191899160190891,-100.44032803837797,-33.88347329654927

3202523_20201_2_0,it9jin4icz,0.12026030672757297,-67.1864176286577,-11.153772478991385

2336342_20201_2_0,it9zwn4icz,-0.7031823785625935,-87.05902649976963,-42.478730150429186

4103730_20201_2_0,itds3p4icz,-4.698861813202412,-89.59764526434756,-13.380907721769944

4568236_20201_2_0,itek8o4icz,-2.8418738476605006,-104.54482483224785,-32.296085431869614

3387232_20201_2_0,itjpxn4icz,-0.9851606644933772,-107.02939710828639,-30.328652608513153

4075137_20201_2_0,itkj5p4icz,-1.041536071845012,-80.22851171603241,-27.54640656559407

5240744_20201_2_0,itzrhp4icz,-1.9481483061884424,-87.67673804681868,-21.70866979849127

4750916_20201_2_0,iu4bjo4icz,-1.9667534703534382,-71.82295050069683,-28.235970397209684

5040641_20201_2_0,iu56pn4icz,-0.3779179193295057,-105.21795173606921,-32.81395220778478

5747053_20201_2_0,iu8kqn4icz,1.3534470739646693,-79.57939404119247,-30.23563904189716

1380822_20201_2_0,iubn9o4icz,-0.4969626201251751,-53.59827102546444,-27.959388731211305

3168970_20201_2_0,iuomen4icz,0.26215575392690094,-137.8853752441563,-47.704917814613594

2350946_20201_2_0,iusaao4icz,-1.0921069762252107,-80.92448237192565,-16.818724982001925

5882693_20201_2_0,iuud9p4icz,-1.0040609513150163,-78.71734400158383,-27.20968496447803

1150653_20201_2_0,iuvbgo4icz,3.0087053722586794,-106.88277442780887,-51.443976971730024

3233147_20201_2_0,iuy3jp4icz,5.656140507325106,-89.97578681299805,-49.07135526502303

3867243_20201_2_0,iuzovo4icz,1.051361476932893,-105.74527019667028,-41.78453819396337

2610701_20201_2_0,iv0u9n4icz,-0.8149590380696279,-136.2428717460857,-21.997930454616053

2916574_20201_2_0,iv1r6o4icz,-0.9383664523257532,-64.25535654563026,-37.07205861164661

5192078_20201_2_0,iv4e4o4icz,3.445622507342686,-125.82606208195105,-43.46626602681468

5842591_20201_2_0,iv4w3p4icz,0.9031351325366109,-80.33275586905322,-50.54816431336732

1423455_20201_2_0,iv8cto4icz,-0.3708968287642623,-104.50921414867574,-40.887184021557175

2555586_20201_2_0,ivcqkn4icz,0.5522611162087954,-91.53198206293516,-35.68606247937545

5731482_20201_2_0,ivh6io4icz,1.2987365657621308,-135.98318580445402,-46.60324476265373

3968590_20201_2_0,ivmu9o4icz,-2.2159270976060705,-112.65469416875234,-24.002600079051703

2603080_20201_2_0,ivq86o4icz,0.597971513637182,-81.7008437989827,-28.103984558426703

1728734_20201_2_0,ivr6mn4icz,-1.411320122367354,-64.43182895359476,-29.258839762223147

2267214_20201_2_0,ivuxwo4icz,1.149252130165523,-100.91580022387879,-47.61045317408994

2429117_20201_2_0,ivwjqn4icz,-1.4955194973216792,-64.93824920225583,-20.57212963128019

3311599_20201_2_0,ivwyjo4icz,0.824938536308365,-74.93958892977551,-45.25775796447755

2596926_20201_2_0,iw3d3o4icz,-1.4586263944676314,-131.28087729745076,-21.105993604040805

5370008_20201_2_0,iw3l9n4icz,2.0379334138292693,-80.60093057307498,-61.35672475439878

3582740_20201_2_0,iw5h7o4icz,-0.7172023453875132,-111.3079372218991,-46.1648432836015

4360497_20201_2_0,iw5xmo4icz,-0.4108750446313981,-97.09145425137422,-33.89477422033849

2124180_20201_2_0,iw6cbn4icz,1.4975278420407279,-108.97148527420967,-58.88883228039367

2307972_20201_2_0,iw6nmo4icz,-1.1121834687993417,-120.53118330594535,-33.90236127447125

5055746_20201_2_0,iw7kho4icz,1.8814904739542095,-92.2240978023436,-50.56954079992394

3537826_20201_2_0,iwc9nn4icz,-2.735482871447276,-123.7328364583638,-4.712176120687047

5322287_20201_2_0,iwlumo4icz,2.408216986618571,-139.3237675020912,-61.419988770344375

4127966_20201_2_0,iwpkcp4icz,54.98343181460407,267.18137230113837,-347.68849898341784

4732343_20201_2_0,iwrumn4icz,-1.4335645329805728,-78.27423943439626,-27.721890108526125

5542733_20201_2_0,iws7hp4icz,2.8006215247847592,-130.51293588884695,-39.8724085586434

1936588_20201_2_0,iwsaun4icz,0.2799208086425043,-100.02582825228521,-34.00562788680678

5158847_20201_2_0,iwsvjo4icz,-0.7557377908310398,-39.1505445704384,-48.91168651065104

1234513_20201_2_0,iwutfp4icz,0.6604610772397635,-87.18391620201211,-44.2228774960993

3880916_20201_2_0,ix1a6n4icz,1.2158915607744636,-74.64852223826875,-42.11871290932514

1522771_20201_2_0,ix2a7p4icz,1.2739600835361153,-105.92867086255606,-27.337044518499624

3410226_20201_2_0,ix723o4icz,-0.04672161921987268,-78.67970851509355,-39.23114000732906

1225750_20201_2_0,ix81ko4icz,-0.603769504068405,-79.35002618693531,-38.7864124990151

3434516_20201_2_0,ix8rvn4icz,0.7408469207596707,-90.32255781540377,-50.59031681401322

2628807_20201_2_0,ixd6ko4icz,-0.21514006827661103,-79.65331365424757,-46.074182302411515

2923113_20201_2_0,ixfmen4icz,0.1651069697918085,-124.66219151619197,-49.11512928685859

1465463_20201_2_0,ixlado4icz,0.45726583126771186,-111.65349082642908,-28.66214186996325

4588574_20201_2_0,ixm07n4icz,0.3259986874811783,-139.5351657863013,-47.33030646530905

3758197_20201_2_0,ixpqbo4icz,1.3258514139699034,-103.93973764138474,-48.740894688429876

3708870_20201_2_0,ixwk0o4icz,-1.5907505091632317,-78.86823292269864,-23.535418091396267

5202452_20201_2_0,ixxi7p4icz,2.5830576393192546,-102.39907707796482,-49.39022300634487

4867685_20201_2_0,iy79jo4icz,1.0482345778146676,-102.82454593106951,-46.009468050978114

3944360_20201_2_0,iy9jrn4icz,2.029895567047206,-103.50356932367976,-45.71955260950213

2615436_20201_2_0,iyf10p4icz,-0.6747951518611506,-51.891463126868615,-24.142951619344217

4628883_20201_2_0,n9bhpn4icz,-4.531811752666008,-152.8057620627417,-22.69631367671991

1133726_20201_2_0,iyl3jn4icz,0.6163139638670875,-117.11930853197723,-43.092042855502726

2961869_20201_2_0,iyplvn4icz,0.6230086824000343,-100.22727728214775,-33.67302823376083

5218345_20201_2_0,iytotn4icz,-0.9928299615742131,-106.72710894153505,-29.449926966561563

3678610_20201_2_0,iytx3p4icz,-1.3300445295617898,-102.0740818562088,-22.36880074226636

2124040_20201_2_0,iyxggo4icz,-0.11264142112568583,-85.17773774152946,-33.9688371942987

3605729_20201_2_0,iz7iho4icz,-0.7190384827101041,-114.66759238351065,-34.63210236785551

5591288_20201_2_0,iz7mho4icz,0.469660820983421,-99.71201468220968,-29.81864186538789
 46%|████▌     | 373/810 [20:10<22:25,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 374/810 [20:13<22:27,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▋     | 375/810 [20:16<21:30,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▋     | 376/810 [20:20<23:10,  3.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 377/810 [20:27<32:49,  4.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 378/810 [20:30<28:43,  3.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 379/810 [20:34<28:49,  4.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 380/810 [20:37<25:44,  3.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 381/810 [20:40<23:43,  3.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 382/810 [20:42<22:03,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 383/810 [20:45<21:32,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 384/810 [20:49<22:47,  3.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 385/810 [20:51<22:02,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 386/810 [20:54<21:30,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 387/810 [20:59<24:18,  3.45s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 388/810 [21:02<23:16,  3.31s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 389/810 [21:05<22:06,  3.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 390/810 [21:07<21:01,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 391/810 [21:10<20:31,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 392/810 [21:13<20:02,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▊     | 393/810 [21:15<19:34,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▊     | 394/810 [21:19<21:36,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 395/810 [21:22<21:26,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 396/810 [21:26<22:46,  3.30s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 397/810 [21:29<21:19,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 398/810 [21:31<20:21,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 399/810 [21:34<20:14,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 400/810 [21:37<19:34,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|████▉     | 401/810 [21:39<18:47,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|████▉     | 402/810 [21:42<18:32,  2.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|████▉     | 403/810 [21:45<18:35,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|████▉     | 404/810 [21:50<23:53,  3.53s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 405/810 [21:53<22:40,  3.36s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 406/810 [21:56<21:24,  3.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 407/810 [21:59<20:55,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 408/810 [22:02<19:56,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 409/810 [22:05<19:56,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 410/810 [22:07<19:14,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 411/810 [22:11<20:16,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 412/810 [22:13<19:36,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 413/810 [22:16<18:54,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 414/810 [22:21<22:49,  3.46s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 415/810 [22:24<21:14,  3.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████▏    | 416/810 [22:26<20:09,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████▏    | 417/810 [22:29<19:47,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 418/810 [22:32<19:37,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 419/810 [22:35<18:55,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 420/810 [22:40<23:12,  3.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 421/810 [22:43<21:51,  3.37s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 422/810 [22:46<20:48,  3.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 423/810 [22:49<19:55,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 424/810 [22:51<19:30,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 425/810 [22:54<19:12,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 426/810 [22:57<18:46,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 427/810 [23:00<18:55,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 428/810 [23:04<19:38,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 429/810 [23:06<19:21,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 430/810 [23:09<19:05,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 431/810 [23:13<19:18,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 432/810 [23:16<19:05,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 433/810 [23:18<18:21,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▎    | 434/810 [23:21<18:18,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▎    | 435/810 [23:24<17:47,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 436/810 [23:27<18:07,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 437/810 [23:30<17:51,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 438/810 [23:32<17:36,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 439/810 [23:35<17:30,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 440/810 [23:38<17:38,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 441/810 [23:41<17:49,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▍    | 442/810 [23:44<17:20,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▍    | 443/810 [23:46<16:59,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▍    | 444/810 [23:49<16:30,  2.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▍    | 445/810 [23:52<16:41,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▌    | 446/810 [23:54<16:27,  2.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▌    | 447/810 [23:57<16:25,  2.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▌    | 448/810 [24:00<16:15,  2.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▌    | 449/810 [24:03<16:35,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 450/810 [24:06<16:46,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 451/810 [24:09<17:16,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 452/810 [24:12<17:04,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 453/810 [24:14<16:52,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 454/810 [24:17<16:18,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 455/810 [24:20<16:07,  2.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▋    | 456/810 [24:22<16:00,  2.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▋    | 457/810 [24:25<16:01,  2.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 458/810 [24:28<16:01,  2.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 459/810 [24:30<16:00,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 460/810 [24:34<16:54,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 461/810 [24:36<16:25,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 462/810 [24:39<16:23,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 463/810 [24:42<16:58,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 464/810 [24:45<16:35,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 465/810 [24:48<16:31,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 466/810 [24:51<16:03,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 467/810 [24:53<15:42,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 468/810 [24:56<15:39,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 469/810 [24:59<15:52,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 470/810 [25:02<16:04,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 471/810 [25:05<16:24,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 472/810 [25:09<18:01,  3.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 473/810 [25:11<17:08,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▊    | 474/810 [25:14<16:27,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▊    | 475/810 [25:17<16:10,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 476/810 [25:20<17:02,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 477/810 [25:23<16:14,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 478/810 [25:26<16:13,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 479/810 [25:29<15:34,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 480/810 [25:31<15:32,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 481/810 [25:34<15:35,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|█████▉    | 482/810 [25:37<15:14,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|█████▉    | 483/810 [25:40<15:16,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|█████▉    | 484/810 [25:42<14:52,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|█████▉    | 485/810 [25:51<24:18,  4.49s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|██████    | 486/810 [25:54<21:21,  3.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|██████    | 487/810 [25:57<19:34,  3.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|██████    | 488/810 [25:59<18:07,  3.38s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|██████    | 489/810 [26:03<18:29,  3.46s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|██████    | 490/810 [26:06<17:16,  3.24s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 491/810 [26:09<16:45,  3.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 492/810 [26:11<15:53,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 493/810 [26:14<16:12,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 494/810 [26:17<15:23,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 495/810 [26:20<15:16,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 496/810 [26:23<15:25,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████▏   | 497/810 [26:26<15:37,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████▏   | 498/810 [26:29<15:38,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 499/810 [26:32<15:20,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 500/810 [26:35<15:07,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 501/810 [26:41<19:33,  3.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 502/810 [26:44<18:53,  3.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 503/810 [26:48<19:11,  3.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 504/810 [26:51<17:35,  3.45s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 505/810 [26:53<16:27,  3.24s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 506/810 [26:56<16:03,  3.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 507/810 [26:59<15:46,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 508/810 [27:04<17:16,  3.43s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 509/810 [27:07<16:28,  3.29s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 510/810 [27:11<17:42,  3.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 511/810 [27:14<16:32,  3.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 512/810 [27:17<16:55,  3.41s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 513/810 [27:20<15:37,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 514/810 [27:23<15:16,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▎   | 515/810 [27:25<14:39,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▎   | 516/810 [27:28<14:02,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 517/810 [27:31<14:03,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 518/810 [27:34<14:29,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 519/810 [27:37<13:56,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 520/810 [27:39<13:43,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 521/810 [27:42<13:28,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 522/810 [27:45<13:17,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▍   | 523/810 [27:50<17:08,  3.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▍   | 524/810 [27:53<16:17,  3.42s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▍   | 525/810 [27:57<15:48,  3.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▍   | 526/810 [27:59<14:55,  3.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▌   | 527/810 [28:02<14:47,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▌   | 528/810 [28:06<15:27,  3.29s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▌   | 529/810 [28:09<14:45,  3.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▌   | 530/810 [28:14<17:21,  3.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 531/810 [28:17<16:06,  3.46s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 532/810 [28:19<14:59,  3.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 533/810 [28:23<14:43,  3.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 534/810 [28:25<13:57,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 535/810 [28:29<14:23,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 536/810 [28:31<13:48,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▋   | 537/810 [28:34<13:17,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▋   | 538/810 [28:37<13:26,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 539/810 [28:40<13:35,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 540/810 [28:43<13:25,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 541/810 [28:46<13:04,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 542/810 [28:49<13:10,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 543/810 [28:52<12:55,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 544/810 [28:54<12:41,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 545/810 [28:57<12:17,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 546/810 [29:00<12:23,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 547/810 [29:03<12:28,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 548/810 [29:06<12:30,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 549/810 [29:14<18:56,  4.36s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 550/810 [29:16<16:43,  3.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 551/810 [29:19<15:41,  3.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 552/810 [29:22<14:18,  3.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 553/810 [29:25<13:19,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 554/810 [29:27<12:44,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▊   | 555/810 [29:30<12:29,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▊   | 556/810 [29:33<12:27,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 557/810 [29:37<13:00,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 558/810 [29:39<12:37,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 559/810 [29:42<12:34,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 560/810 [29:46<12:49,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 561/810 [29:48<12:22,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 562/810 [29:51<12:16,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|██████▉   | 563/810 [29:54<11:53,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|██████▉   | 564/810 [29:57<11:39,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|██████▉   | 565/810 [29:59<11:26,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|██████▉   | 566/810 [30:02<11:24,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|███████   | 567/810 [30:05<11:23,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|███████   | 568/810 [30:08<11:21,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|███████   | 569/810 [30:11<11:14,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|███████   | 570/810 [30:13<11:13,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|███████   | 571/810 [30:16<11:04,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 572/810 [30:20<11:49,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 573/810 [30:22<11:19,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 574/810 [30:26<11:44,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 575/810 [30:28<11:14,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 576/810 [30:31<10:51,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 577/810 [30:33<10:39,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████▏  | 578/810 [30:38<12:35,  3.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████▏  | 579/810 [30:40<11:43,  3.04s/it] 72%|███████▏  | 580/810 [30:43<11:16,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 581/810 [30:46<11:03,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 582/810 [30:48<10:38,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 583/810 [30:51<10:15,  2.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 584/810 [31:04<21:58,  5.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 585/810 [31:07<18:25,  4.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 586/810 [31:10<16:21,  4.38s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 587/810 [31:13<14:25,  3.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 588/810 [31:16<13:17,  3.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 589/810 [31:19<12:31,  3.40s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 590/810 [31:21<11:56,  3.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 591/810 [31:35<22:54,  6.28s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 592/810 [31:37<18:50,  5.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 593/810 [31:40<16:02,  4.44s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 594/810 [31:43<14:09,  3.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 595/810 [31:46<12:45,  3.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▎  | 596/810 [31:48<11:52,  3.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▎  | 597/810 [31:51<11:17,  3.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 598/810 [31:54<10:44,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 599/810 [31:57<10:25,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 600/810 [32:00<10:19,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 601/810 [32:02<10:00,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 602/810 [32:05<10:08,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 603/810 [32:09<10:35,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▍  | 604/810 [32:12<10:20,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▍  | 605/810 [32:15<10:21,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▍  | 606/810 [32:18<10:21,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▍  | 607/810 [32:41<31:05,  9.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▌  | 608/810 [32:44<24:48,  7.37s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▌  | 609/810 [32:47<20:08,  6.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▌  | 610/810 [32:53<20:00,  6.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▌  | 611/810 [32:57<17:13,  5.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 612/810 [32:59<14:46,  4.48s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 613/810 [33:02<12:54,  3.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 614/810 [33:05<11:55,  3.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 615/810 [33:08<10:53,  3.35s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 616/810 [33:20<19:51,  6.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 617/810 [33:23<16:36,  5.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▋  | 618/810 [33:26<14:31,  4.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▋  | 619/810 [33:29<12:31,  3.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 620/810 [33:32<11:30,  3.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 621/810 [33:35<11:29,  3.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 622/810 [33:38<10:42,  3.42s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 623/810 [33:42<10:34,  3.39s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 624/810 [33:44<09:57,  3.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 625/810 [33:47<09:43,  3.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 626/810 [33:50<09:24,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 627/810 [33:53<09:04,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 628/810 [33:56<08:56,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 629/810 [33:58<08:29,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 630/810 [34:03<09:58,  3.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 631/810 [34:06<09:33,  3.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 632/810 [34:09<08:58,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 633/810 [34:11<08:31,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 634/810 [34:14<08:16,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 635/810 [34:18<09:27,  3.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▊  | 636/810 [34:21<08:55,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▊  | 637/810 [34:23<08:32,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 638/810 [34:26<08:23,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 639/810 [34:29<08:24,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 640/810 [34:32<08:12,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 641/810 [34:35<07:59,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 642/810 [34:39<09:03,  3.24s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 643/810 [34:42<08:36,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|███████▉  | 644/810 [34:45<08:32,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|███████▉  | 645/810 [34:48<08:16,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|███████▉  | 646/810 [34:50<08:09,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|███████▉  | 647/810 [34:53<07:57,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 648/810 [34:56<07:40,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 649/810 [34:59<07:43,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 650/810 [35:02<07:39,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 651/810 [35:04<07:30,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 652/810 [35:07<07:36,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 653/810 [35:10<07:39,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 654/810 [35:13<07:29,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).

1665380_20201_2_0,izaz8o4icz,-3.562459062505524,-83.45014066981926,-17.87417780746557

1950781_20201_2_0,izd4bn4icz,-0.2372312504202695,-150.73027718600633,-48.74961858851475

1172785_20201_2_0,izdt4p4icz,-3.2515968452733333,-113.20476563152491,-19.121351646233265

5202006_20201_2_0,izh8ip4icz,-0.6959332206440416,-150.83062220268462,-24.16180737713006

5283583_20201_2_0,izhmep4icz,-3.3368382862898778,-115.15253232782376,-27.279773116929647

2860605_20201_2_0,izikcn4icz,0.846685380444387,-136.41689755920953,-38.59269272733806

3597140_20201_2_0,izknvn4icz,0.6638540770712041,-95.8780286024242,-40.67125888426159

1773885_20201_2_0,izlzwn4icz,0.06872451009863435,-94.42865120203066,-41.79950548144434

2396784_20201_2_0,izoskn4icz,5.616936563065084,-88.75065929903982,-58.18472121525153

4487637_20201_2_0,izryho4icz,2.1154388106259012,-75.84061334796331,-19.865053121951377

2495269_20201_2_0,izs1ao4icz,0.6549207503414989,-92.30526564190319,-34.256856519389885

5188010_20201_2_0,izshmo4icz,-1.563927089448541,-69.94439660013586,-12.869716283761534

3485396_20201_2_0,izt0io4icz,1.6705256843438643,-100.91786485564774,-46.18921129943925

4888708_20201_2_0,izt42p4icz,2.4994912073554194,-73.67270946903065,-63.28940849988662

4079936_20201_2_0,kmdumn4icz,1.2612710795768902,-99.20908410563322,-50.34632990914636

2809901_20201_2_0,izwu4p4icz,-0.6867717721488173,-100.10065156791566,-30.646000965687193

5416625_20201_2_0,izz2on4icz,1.7071934790418073,-106.74199063290973,-48.2397832860141

4131235_20201_2_0,izzi9o4icz,-0.364896078077085,-84.09546723888542,-35.81563021217521

5787026_20201_2_0,j00kxo4icz,3.1189274638140505,-128.14481695302283,-54.77269734361235

4989907_20201_2_0,j013gp4icz,4.060247442402853,-97.91206265129989,-60.95038293956847

5386899_20201_2_0,j07amo4icz,3.385744879821205,-28.36635270983703,-50.51906096947752

5738474_20201_2_0,j07drn4icz,-3.4829542109428693,-109.78876742592334,-27.024084647506683

4989175_20201_2_0,j08fyn4icz,0.471790188252105,-91.69563431013643,-45.03002992198657

2567144_20201_2_0,j09jjp4icz,2.7454742785934054,-63.99752797360702,-38.25171480144682

1728482_20201_2_0,j0dmzo4icz,-1.7603555087658806,-66.39973194690032,-25.71024886961216

5736990_20201_2_0,j0eono4icz,1.8482351696399923,-111.60502648948619,-47.58313430226029

3512157_20201_2_0,j0fndp4icz,-4.785016008806922,-132.2654096508073,-12.928925326228637

1290568_20201_2_0,j0ij0p4icz,1.4691571806955304,-77.84252509611218,-44.23010769291828

5384441_20201_2_0,j0mcun4icz,1.33216006612361,-120.39547867821094,-64.02893709204781

5748331_20201_2_0,j0p4do4icz,-2.5383098900527807,-80.99368581858357,-24.572390818004465

5548662_20201_2_0,j0t5ho4icz,0.26837433835176633,-87.41578973013571,-38.49799898657264

2145754_20201_2_0,lrvfmo4icz,12.510156818255446,-83.53294730099043,-88.44159214188912

4708621_20201_2_0,j0whbo4icz,-1.345972231289954,-112.39749512278604,-17.350262464322512

2689154_20201_2_0,j10rgp4icz,-10.96759348726213,-109.87943096836716,42.192732084919896

1762426_20201_2_0,j11gdo4icz,0.9804658084920187,-130.11395752498757,-40.066777404686235

1285490_20201_2_0,j1c5cn4icz,1.0468978207658102,-103.52263536241654,-38.55628813076433

5692215_20201_2_0,helc8o4icz,0.3066208148468662,-110.78136355619617,-22.494771650401162

2320496_20201_2_0,j1gghp4icz,1.5933318498031777,-39.656365806932854,-49.15999327588868

3470665_20201_2_0,j1jh9o4icz,-6.985049077103269,-129.82044488005195,-5.860763480255542

5023299_20201_2_0,j1nrdp4icz,0.6714601998121164,-101.19840019445701,-54.422171519892856

4059200_20201_2_0,j1p4vn4icz,0.8409650773996118,-90.35320039993218,-39.687186501028236

5832258_20201_2_0,j1qihp4icz,0.16241266486889588,-117.60799527303183,-41.67866986402797

2530179_20201_2_0,j1s6oo4icz,-0.11394730069441815,-71.71503570527844,-47.410085694285144

3576023_20201_2_0,j1v6mo4icz,2.9130436551501755,-90.45693835079177,-51.90484523133051

1080762_20201_2_0,j1wirn4icz,4.185226798666515,-48.63565599877498,-51.67842313082589

3766491_20201_2_0,j23dgn4icz,-0.020642804285029334,-75.76709869407941,-12.671316274063813

4688760_20201_2_0,j25mjo4icz,-3.0240676056269837,-110.38973392981717,-26.28627480549227

1588972_20201_2_0,j29gan4icz,0.7118970450448346,-111.86721265047532,-44.02048597993334

5048761_20201_2_0,j2hkjo4icz,-1.643021792615793,-84.21847429237036,-30.83408192160526

4525733_20201_2_0,j2iaoo4icz,-0.0070752271696202665,-90.19536489852322,-52.562458775182876

5536415_20201_2_0,j2pbap4icz,-3.253445343355052,-93.94784439537997,-22.652521975430716

1947515_20201_2_0,j2po3p4icz,-4.293384923480019,-100.10672703616089,-25.671960614928736

2506201_20201_2_0,j2uf9p4icz,2.7941661735088927,-107.89174795289742,-48.51608007148728

4939037_20201_2_0,j2w5so4icz,0.5018630326534486,-89.3482060474413,-35.21589472150103

3876768_20201_2_0,j2ycfp4icz,-4.248370654044573,-85.61702576025047,-11.390932927084364

1701949_20201_2_0,j30yrn4icz,-0.45714213609054605,-122.55888556213642,-42.245858257105226

4622054_20201_2_0,j315dp4icz,2.4869840068311397,-96.98963231462207,-60.62365666213189

3764401_20201_2_0,j3696p4icz,-2.0614279795450705,-95.28377936087458,-22.493033022409634

4323468_20201_2_0,j3bo5o4icz,0.9491331393609711,-60.0488195614991,-32.764166559975465

3625676_20201_2_0,j3f2en4icz,-0.49952667660711475,-100.07615335325102,-30.784819470959278

3473503_20201_2_0,j3ikpn4icz,-0.8796326078030765,-93.12526509795697,-28.76267873760186

4870055_20201_2_0,j3jghp4icz,-0.3705413179627315,-87.249238053753,-49.40826799052847

5131273_20201_2_0,j3qq7p4icz,2.250655931487928,-66.25474941855197,-44.95993893566745

4951441_20201_2_0,j3xumn4icz,-2.691405805285099,-123.69345105926178,-34.717262198024514

3280112_20201_2_0,j402eo4icz,-2.0372362893068234,-109.4508861914841,-40.39935199589205

5899300_20201_2_0,j41hap4icz,-4.049491562262835,-111.6653692521354,-14.596130273748457

3380406_20201_2_0,j43r8o4icz,0.8649526893665419,-99.22615721444762,-43.949833054997455

3150092_20201_2_0,j49u5p4icz,5.396994930363459,-77.5221173654837,-59.657620886203034

2264571_20201_2_0,j4dg6o4icz,0.10793309662150304,-87.48318167543539,-36.22312453159731

3093298_20201_2_0,j4h9ln4icz,1.2710492371816124,-129.76600400683225,-48.569010827374

4280585_20201_2_0,j4i6xn4icz,-2.6332825632411136,-84.51587902837551,-30.04645791911875

5557341_20201_2_0,j4i91p4icz,-4.104582495283528,-123.59089283471499,-15.65981848210356

5534530_20201_2_0,j4j45p4icz,0.938232062420452,-79.05468064098534,-50.50214152636019

1280003_20201_2_0,j4ntsn4icz,2.7623633049120935,-80.715292075136,-64.60580865690333

3979295_20201_2_0,j4od7o4icz,4.788799995959355,-112.6077762531607,-60.60891302376105

5033724_20201_2_0,j4ovzo4icz,4.598470800726622,-72.33929754802722,-47.11788254553724

5353699_20201_2_0,j4p17n4icz,0.17996828066605564,-102.94065082128029,-45.20273208670926

2332002_20201_2_0,j4pgcn4icz,2.9648523868341243,-95.75625439745312,-60.03902467220867

1987237_20201_2_0,j5c9ap4icz,-0.5492094394565938,-86.82148474650666,-37.33027060944899

5396994_20201_2_0,j5doun4icz,-0.20757193184950704,-106.24633645824892,-26.600527963523945

5680421_20201_2_0,j5j5ln4icz,-0.16855237453035404,-49.89683566920641,-39.24854380504159

4230166_20201_2_0,j5lh9p4icz,-0.14279291043458406,-132.60360157552813,-20.993322180193275

4855054_20201_2_0,j5m2ep4icz,0.6325669186080721,-98.76769676030341,-55.37642225114328

5460749_20201_2_0,j5onmo4icz,0.7931472011145302,-87.60998069039366,-32.21338081401626

5809349_20201_2_0,j5pe1p4icz,-0.07115384970265086,-120.36100848836261,-44.47211997745657

1299994_20201_2_0,j5y8xn4icz,0.33089992496177106,-79.56115826770713,-38.70238712873876

3878956_20201_2_0,j5yrpn4icz,0.939338728115485,-61.439801483692804,-45.05470963774101

3840716_20201_2_0,j65xen4icz,2.882237333648653,-62.30599310895715,-53.64529410866662

2114953_20201_2_0,j687ao4icz,2.3786681968779737,-254.3333556412793,281.9138297902442

5491905_20201_2_0,j68gxn4icz,-170.88071088609698,750.8802751186134,322.2586200720806

1591198_20201_2_0,j6bhgp4icz,2.6434762602894883,-110.71896925290571,-57.48831390972366

4086537_20201_2_0,j6f4bn4icz,-2.2210191234882437,-96.92330459939541,-16.440279182175985

5976273_20201_2_0,j6r27o4icz,1.3294304362835097,-84.39191805805592,-43.14052052384763

2765311_20201_2_0,j6wtwo4icz,0.17717769756795856,-85.79218624949269,-26.421664155177695

3075080_20201_2_0,j6x37n4icz,0.10101864183671685,-99.01980745114466,-50.27129333684232

5725853_20201_2_0,j6zvrn4icz,-2.2309008229365968,-126.65098266455436,-29.485361822624412

1161919_20201_2_0,j726in4icz,-0.9012036916748198,-83.17987447862362,-35.02031161269622

5126887_20201_2_0,j742in4icz,-1.1948705079632818,-105.00602193488231,-43.470122918606876

1644161_20201_2_0,j76vxo4icz,1.5403604449929977,-99.74392541290672,-46.663890633710054

1301928_20201_2_0,j780uo4icz,-2.145987965378328,-87.71569908242861,-20.856379039254747

1432825_20201_2_0,j78feo4icz,-1.266624413927427,-54.51810233831432,-33.805101557431385

1164767_20201_2_0,j7cxzo4icz,-2.5253209364194804,-112.78919279634167,-14.82815316196087

3636097_20201_2_0,j7dv8p4icz,0.26791423751993365,-123.84531362558056,-36.29372650761535

3881626_20201_2_0,j7efgn4icz,0.24947378804248893,-139.38007009590805,-28.81743837264503

4934159_20201_2_0,j7gtao4icz,-0.5269026302132818,-94.49219611162206,-33.43317841872614

4767275_20201_2_0,j7hxno4icz,-2.6737430052972524,-101.42146921752965,-14.596524143397616

4546783_20201_2_0,j7nduo4icz,0.5772593530599228,-84.32164252392266,-36.53451753588004

2548404_20201_2_0,j7ofdn4icz,0.2226432068365411,-70.06649184834345,-35.049701403414076

1543980_20201_2_0,j7zsip4icz,1.8060974274566262,-100.3650965197165,-49.25441537124675

3242793_20201_2_0,j85kdp4icz,0.5168778138166367,-99.88683139628017,-43.764980257581584

3719632_20201_2_0,j8791o4icz,0.7447501821972133,-78.47635736044202,-38.81455410720079

5808208_20201_2_0,j87hwo4icz,-3.520617935248675,-73.18106523008467,-25.38306301415031

4487354_20201_2_0,j8ihrn4icz,-7.099296508135541,-122.33806258405798,19.02857223585906

4864881_20201_2_0,j8mx8p4icz,1.3592229489921877,-118.33684129985866,-33.348671358394256

1427627_20201_2_0,j8mzzo4icz,-13.12797447759445,-132.9801497092567,33.765221245652

3055942_20201_2_0,j8qjmn4icz,-1.5149097650767318,-111.11169944837758,-23.41747033781165

2623765_20201_2_0,j8w2bo4icz,-3.570682284948278,-86.79849092493194,-15.1674826520901

2665859_20201_2_0,j90wpn4icz,0.712369130375227,-130.71890318949116,-20.343123600930994

5903532_20201_2_0,j91g4p4icz,0.6463390261536233,-77.10658523571101,-50.4344786723632

3589800_20201_2_0,j99rsn4icz,-0.07837951202529568,-98.04618636850941,-18.525922601717923

3812203_20201_2_0,j9a1ko4icz,1.0968685675268555,-93.88936250830221,-55.541023665415764

1113144_20201_2_0,j9dxun4icz,-0.2932327085840025,-81.64334072334444,-27.964628772356576

3547554_20201_2_0,j9gcxo4icz,0.0954796246140763,-116.99144558460762,-33.22939470146646

5550213_20201_2_0,j9k3oo4icz,-2.4111722838840928,-83.45104909170445,-33.165945770655185

5216896_20201_2_0,j9kw4o4icz,1.9433304398137001,-88.10986876791833,-44.672786731774806

3886857_20201_2_0,j9p5fp4icz,3.9628571348819337,-80.92429653552824,-70.13473799033821

1011116_20201_2_0,j9tgln4icz,2.7993892509169807,-112.78054100003092,-27.760167172041065

2455631_20201_2_0,j9tqfn4icz,-6.148531882849924,-75.37418391722312,2.1994391997821054

4329054_20201_2_0,j9yzbn4icz,1.5394467134353305,-133.64838089643067,-40.84665465041854

4927545_20201_2_0,j9zkdn4icz,-0.4285652496867747,-77.50782361526214,-29.822472022629228

3115484_20201_2_0,ja27vo4icz,0.07697107812351538,-51.75201903531192,-22.75829388027155

5833442_20201_2_0,ja4y9p4icz,-1.349760272946181,-112.09545295432616,-36.20035085446014

1919260_20201_2_0,ja6xnn4icz,1.0704884357583453,-114.0721903473499,-39.93801464332806

3553534_20201_2_0,ja82in4icz,-0.1226287464718367,-118.10646175367788,-30.00708829003659

3778032_20201_2_0,ja9g4p4icz,-1.4508872609192884,-99.5150889645837,-16.86520438601373

2549145_20201_2_0,jacswn4icz,-1.6212802243314528,-72.04767571926186,-42.00781969616459

5159302_20201_2_0,jafgxn4icz,1.053954000015219,-110.23933716381174,-25.207383893748457

2946128_20201_2_0,jajfkn4icz,0.7581738782298186,-60.06244852930024,-34.27290444352127

1103961_20201_2_0,jajo3o4icz,-3.1123833124916285,-124.13097411120805,-13.013921740657707

2650116_20201_2_0,jak4ko4icz,-2.5541299721541924,-96.64676746260758,-13.410405600962292

3075067_20201_2_0,janjdp4icz,-2.5631243972177895,-86.50220090658306,-12.857385399255193

4861740_20201_2_0,japlbp4icz,0.07418375771531283,-87.0985092779161,-42.23865823588315

5504895_20201_2_0,jaqhdo4icz,-0.43915838219192554,-92.30293422667398,-30.96684881037251

4367360_20201_2_0,jarhbo4icz,0.6371054705724274,-76.41457711987798,-39.2984804861766

4470694_20201_2_0,jasmco4icz,-2.9284620512015676,-107.54660260618331,-19.615742971846885

3092028_20201_2_0,jasoyo4icz,-3.028847251012007,-109.3686553684278,-41.21074598104647

1127514_20201_2_0,jaxxgp4icz,0.5874660574222843,-99.75915291533141,-24.561279055064674

5915699_20201_2_0,25y7yo4icz,17.687424259585143,-45.91422593128607,-125.51849631219523

2495916_20201_2_0,jb0iqn4icz,0.5177707093530783,-104.02336476773604,-36.76791457714282

4004259_20201_2_0,jb63cn4icz,-2.2208116912693874,-115.3277118659598,-40.47077222718809

3347124_20201_2_0,jb6ixo4icz,0.6151659035891662,-70.40393256277079,-52.641909625620315

4896257_20201_2_0,jb75bp4icz,0.9225350602798275,-66.38358475313447,-41.27545247171015

4614183_20201_2_0,jb8e8n4icz,-1.4132028615462104,-106.12701974329502,-28.10313581979517

4661330_20201_2_0,jbd2po4icz,1.5392365352884603,4.900429302632119,-40.99059835058674

3335040_20201_2_0,jbevcn4icz,-2.322548534977025,-94.97300155032599,-42.95692345920487

2019845_20201_2_0,jbgedp4icz,3.05949488605389,-98.35800311338139,-38.05992000337794

3421704_20201_2_0,jbi5fp4icz,1.552895373596391,-102.3255346248302,-41.86644606383494

2486867_20201_2_0,jbjcan4icz,1.0826375888537447,-104.07371880440763,-48.206163016993415

2310768_20201_2_0,jbkwvn4icz,0.4664381390423305,-127.32952220865286,-40.6960398432238

4676010_20201_2_0,jbp1hp4icz,0.9569665129713399,-83.45010855989898,-31.91993145033365

2871693_20201_2_0,jbscmo4icz,0.38851577465186093,-147.96943248419532,-55.24378953968028

2737730_20201_2_0,jbwf5p4icz,-2.3386932821081285,-87.16760717409124,-18.539839473486808

3976943_20201_2_0,jc3pmn4icz,-0.1609680941505222,-129.98198435180154,-27.844905486372184

2213307_20201_2_0,jc5yko4icz,-0.23107028346690164,-110.04973913716839,-25.268125338086108

1501478_20201_2_0,jcg71p4icz,-0.8592510690306638,-102.26173818924792,-44.07103496839184

1677608_20201_2_0,jcs4on4icz,1.278522285061699,-120.28171153066626,-22.834150640496873

3495087_20201_2_0,jctc4p4icz,1.1177211627964323,-64.9998715058376,-54.73542406292957

5364152_20201_2_0,jctp8p4icz,1.3074224039983773,-106.69694224472912,-17.86216415377902

1725090_20201_2_0,jcxpjo4icz,-0.5625856023530639,-39.5346972671924,-33.34249202889475

3664374_20201_2_0,jcxufo4icz,0.44404987609614377,-141.0647678355179,-26.824851633057364

2766481_20201_2_0,jcxwun4icz,2.456782462543213,-53.647674322222485,-40.79861692893968

1421023_20201_2_0,i6srhp4icz,2.061877146974829,-67.99012126328418,-41.33616076404377

2856861_20201_2_0,jd0r9p4icz,2.0233243344524654,-87.22308150678026,-48.58893434128103

5141017_20201_2_0,jd27fp4icz,1.328298457837678,-87.50932795271072,-54.077244134280065

1289930_20201_2_0,jd9lgp4icz,0.63102887536298,-116.60825483031363,-42.2235823516867

4181918_20201_2_0,jdg6vn4icz,3.091714745986688,-71.10101186479898,-66.13285740004815

1933981_20201_2_0,jdh69o4icz,0.6780446644770683,-110.78958090148527,-28.74663229713083

3193007_20201_2_0,jdif3p4icz,-0.35220640252229246,-101.89327192158763,-36.875504215380545

4500958_20201_2_0,jdklvo4icz,2.2002194361252116,-52.0559935334083,-49.88288119632942

1119749_20201_2_0,jdtamo4icz,-2.53541819692053,-100.04375354700832,-0.12747330167560733

3670438_20201_2_0,jdtggn4icz,0.7233151097392195,-117.08587914449646,-41.22663227825436

2266087_20201_2_0,jdtpen4icz,-3.1472686293378307,-89.10893229100833,-26.78005994962902

4692153_20201_2_0,je0q8p4icz,1.5967330527592087,-68.78641500613702,-86.1495422131088

1055544_20201_2_0,je361p4icz,0.7751238355360897,-82.58112484655189,-54.67176682842988

1670936_20201_2_0,je8qzo4icz,1.6871487071737183,-92.20950466387683,-48.13606749255324

5733962_20201_2_0,jei6rn4icz,0.7170968880275831,-114.30023686593796,-33.55215902657689

1573775_20201_2_0,jekz3p4icz,-0.06722508732865105,-74.31936379827866,-25.231207291708003

1032003_20201_2_0,jepqwo4icz,2.179599869587988,-85.36675715961897,-37.50520298814753

1353561_20201_2_0,jeq2rn4icz,0.7726019727704758,-129.45574319110003,-16.10704660149041

1671522_20201_2_0,jet9in4icz,-0.8664573900630425,-96.44322254824402,-26.517268590371373

1858130_20201_2_0,jeyhzn4icz,-2.003235782143252,-71.39951616450071,-28.342879017817552

1303980_20201_2_0,jf14gn4icz,-0.7341164748903922,-135.8623025987788,-41.569251408714635

3235605_20201_2_0,jf20ap4icz,-2.521738955888763,-101.96363632407756,-29.94110156358019

3589549_20201_2_0,jf217p4icz,2.3959621867417358,-113.42785904701532,-45.359642584279584

5303130_20201_2_0,jf4z3o4icz,-1.2627306393358648,-99.12148439288711,-35.4152465069881

3443790_20201_2_0,jf56jp4icz,2.153966467596092,-85.4577891371786,-52.68186487326528

3353507_20201_2_0,jf5sjo4icz,-0.11772949210733627,-110.24053509448143,-33.59425629206942

4985790_20201_2_0,jf6ppo4icz,1.377857163509394,-40.32479543313025,-40.746614448287005

2294264_20201_2_0,jfcixn4icz,8.24555118740991,-62.862869604320395,-93.27738327810758

1168874_20201_2_0,jffvjo4icz,0.8313268788055468,-45.16313948572258,-55.014122058426295

4778406_20201_2_0,jfg4fn4icz,-3.229697986962908,-84.26712357757964,-13.242378591903005

3552810_20201_2_0,jfjkgn4icz,-1.1861723813994087,-84.15183815464809,-40.74952555380524

3829701_20201_2_0,jfk9bn4icz,3.0919010964664806,-120.99547754056772,-35.59323107032259

3446311_20201_2_0,jfkpcn4icz,-0.08541749831481049,-151.5137290036372,-35.484711854088104

3305533_20201_2_0,jfooap4icz,3.397636304049191,-100.69341042924853,-28.828209446650348

1199177_20201_2_0,jfsftn4icz,-0.3517938418622393,-109.38654904345256,-33.618823475984726

1078392_20201_2_0,jftien4icz,-3.2687787218163096,-122.81302196092813,-20.499226684771713

4471410_20201_2_0,jfuwko4icz,1.3724007332983637,-49.657022286035925,-56.03909597225288

4709440_20201_2_0,jfz6fo4icz,-1.7269241243705684,-69.09638793681782,-52.04092425656772

1419373_20201_2_0,jg1lin4icz,-1.198570851086274,-156.90337810829186,-25.382123757174696

1003195_20201_2_0,jg27jn4icz,1.4345930346006635,-97.83251211661599,-40.97098162301258

5267953_20201_2_0,jg43mo4icz,4.430169646900669,-62.71551630892472,-73.62974402483272

3673605_20201_2_0,jg4v8o4icz,-1.3525729425543742,-91.33719012150814,-33.0768645327655

2610835_20201_2_0,jg8mfp4icz,-0.40473162459842466,-109.8696486492208,-36.51991856183858

1928537_20201_2_0,jg99dp4icz,0.289346602574444,-80.58186658095104,-23.535660393770897

5052950_20201_2_0,jg9ton4icz,2.2816146049664243,-104.61005153507782,-38.720829546266316

4262921_20201_2_0,jgacmo4icz,-0.25143957284539126,-105.83541586530805,-37.467711316722685

3699548_20201_2_0,jganio4icz,-0.9111127248646611,-132.88393083688916,-35.34595312910548

4036918_20201_2_0,jgbg1o4icz,-0.9162067762693895,-81.65007819993798,-37.40828605721161

1379048_20201_2_0,jgdrto4icz,0.86671800359739,-110.35249620952737,-32.775942325353085

2195829_20201_2_0,jgf8ep4icz,-0.8508990152396674,-135.8395377482528,-24.864250563823106

5645632_20201_2_0,jggjpo4icz,-0.9930668015964076,-71.81896584967373,-52.26509800718041

5287715_20201_2_0,jgip0p4icz,0.4445011361189978,-94.61643692009653,-35.098494438606224

1948727_20201_2_0,jgjken4icz,-0.46140036127399586,-128.70261157435837,-31.811488716210377

3520914_20201_2_0,jgl43p4icz,0.34269648691756266,-102.33929806601736,-34.915265186769915

5312458_20201_2_0,jgo2tn4icz,-1.0413056469775337,-89.37480551075782,-25.33074003167775

4076809_20201_2_0,jgrvlo4icz,0.8191361448629574,-60.948550551026756,-44.13256221361529

5684369_20201_2_0,jgvkyn4icz,-1.2884578508586466,-115.3220959375513,-33.575727588755086

4498512_20201_2_0,jgztcp4icz,0.2870644968308116,-101.38954763692422,-23.78727145508904

1311142_20201_2_0,jh0xip4icz,0.7364534726973683,-75.23389647125154,-36.19011297517568

1813843_20201_2_0,jh6zzo4icz,1.144513070785785,-78.31952048354194,-33.16882297211899

1908190_20201_2_0,jh8zjn4icz,0.663618084347664,-68.28130584584986,-49.87666381265903

5568355_20201_2_0,jh9ydn4icz,-1.157678215538319,-87.04893658096682,-57.05623381539995

4300839_20201_2_0,jhac8o4icz,0.024119425594683906,-89.80934013214372,-45.63038406616164

2061244_20201_2_0,jhe4eo4icz,-0.2380585590659191,-99.03590267887097,-31.626591887787995

4949482_20201_2_0,jhetco4icz,1.6657015829255397,-82.64705210568874,-50.51892263135858

4815495_20201_2_0,jhis9p4icz,-2.112058634228133,-111.7382020605844,-48.75769479189188

5611612_20201_2_0,jhp7po4icz,0.35575162211853656,-101.49482283372777,-31.581089969356057

3523404_20201_2_0,jhpf3p4icz,-0.20816298674231426,-100.94867955995545,-67.1759801173035

1576284_20201_2_0,jhs4bo4icz,0.6989533635606088,-85.9749878739621,-37.77043003557674

2035767_20201_2_0,jhv4qn4icz,-3.8274226337010924,-77.49539889198755,5.5669281757696325

4360409_20201_2_0,jhwuro4icz,-1.6212252543641934,-103.31283789590836,-25.524776879174212

4941308_20201_2_0,jhxewn4icz,-1.26118261985274,-92.78623592522524,-32.849516816669194

5660334_20201_2_0,jhy6kp4icz,-7.386810357717272,-115.40448951144256,-9.252415792894624

4982533_20201_2_0,jhzvcp4icz,-3.3828487560591385,-154.63989917002013,-12.445217197224807

3772564_20201_2_0,ji2b3o4icz,-6.30471025559814,-139.30404912699535,-2.0700334757533625

1680098_20201_2_0,ji3dwo4icz,-0.2693795976122967,-151.0353938820344,-27.794379141217803

2975635_20201_2_0,ji3hcp4icz,-0.046186738405180956,-69.50277366814132,-48.30216864382156

5783564_20201_2_0,jic67o4icz,-0.9712778142918962,-91.7844293038197,-30.940716681996605

4121947_20201_2_0,jidgfo4icz,-0.9753246900334752,-100.67836382401481,-33.289497244071896

1112373_20201_2_0,jidtfn4icz,1.6979023159043125,-78.95182970923017,-61.84218787542291

2901185_20201_2_0,jifnmn4icz,27.104821965643183,-0.5815655626283558,-201.86464947104483

3447028_20201_2_0,jiixjn4icz,-1.9413448506563922,-93.19043957098381,-5.306513111892059

1799039_20201_2_0,jijxso4icz,-2.636617895482339,-93.80525839939779,-7.188742801580602

1279947_20201_2_0,jikxqo4icz,3.081459486879508,-64.57640207456993,-81.23132833320163

1189392_20201_2_0,jiky8o4icz,6.151143685288109,-66.60106727098662,-84.29917907365491

4372156_20201_2_0,jinafp4icz,4.0394716017186125,-54.91989223597773,-68.96857015982636

4858370_20201_2_0,jip91p4icz,-1.0285326793506107,-71.51881038827764,-47.107396988098984

4902155_20201_2_0,jivfgp4icz,1.7731685223779452,-59.96489223415816,-43.575720533138536

2405043_20201_2_0,jiwqtn4icz,-0.23203285711412658,-80.41962301300265,-27.949027297592238

5334371_20201_2_0,jj1jhp4icz,-0.0928907718068351,-102.48319138352846,-36.068032439435

1317103_20201_2_0,jj41ko4icz,-1.8525267204808276,-92.50898733413047,-24.32729621653877

5088326_20201_2_0,jj517p4icz,2.5689962314706025,-61.924343500139486,-72.5344943111062

5851790_20201_2_0,jj5fyo4icz,2.512204690985023,-66.99113484494288,-45.29214023660904

4504246_20201_2_0,jj7n9p4icz,-2.385534477651369,-95.34542219262022,-34.00270532304978

1546835_20201_2_0,jjhldp4icz,2.8126607415462996,-128.72493015342252,-73.39781807147264

2897263_20201_2_0,jjjz5o4icz,3.4136385880780145,-44.49194751562331,-49.85838649934905

4394489_20201_2_0,jjl4go4icz,1.1201074670329565,-89.59774419198041,-40.71896605729128

2042095_20201_2_0,jjm8bo4icz,-0.5692507252118275,-113.55148719949261,-13.641107460055679

2431882_20201_2_0,jju2tn4icz,2.761652602683187,-53.48982040665919,-78.21866281095585

3211542_20201_2_0,jjumro4icz,0.08497563196478526,-83.50866700114867,-28.733890876125173

5561256_20201_2_0,jjxjdo4icz,-1.2515121202774773,-77.87234233250763,-53.1181357815349

1538311_20201_2_0,jjy0wo4icz,-8.112730707327833,-50.1636769615821,4.255096061641439

3252842_20201_2_0,jjz0fn4icz,-2.6742771986305574,-133.22935566952265,-31.122751255278644

5005350_20201_2_0,jjz1nn4icz,0.5227337279518164,-109.63252319544992,-43.752239002778666

2943553_20201_2_0,jk36no4icz,3.479873934683985,-111.16932353360045,-55.62585317095369

5928424_20201_2_0,jk68cp4icz,-0.7630446122616829,-122.86819316758198,-39.07446943043274

1057661_20201_2_0,jk7huo4icz,-0.2452027911742936,-82.58799597392579,-41.223301392105554

5721032_20201_2_0,jk84no4icz,-2.2297688122986417,-73.65640320463763,-15.72724885512119

1595948_20201_2_0,jkbm3o4icz,4.146942824321979,-77.86710763779553,-74.74335626595528

4514596_20201_2_0,g0zbto4icz,0.990724936574426,-77.94389890048191,-52.27358280700368

1247491_20201_2_0,jkc8mo4icz,0.30602728632231346,-68.77111381237671,-37.808123188782574
 81%|████████  | 655/810 [35:17<07:46,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 656/810 [35:20<07:43,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 657/810 [35:22<07:23,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 658/810 [35:25<07:05,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████▏ | 659/810 [35:28<07:13,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████▏ | 660/810 [35:31<07:03,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 661/810 [35:33<06:52,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 662/810 [35:36<06:47,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 663/810 [35:39<06:40,  2.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 664/810 [35:41<06:42,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 665/810 [35:44<06:37,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 666/810 [35:47<06:33,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 667/810 [35:50<06:35,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 668/810 [35:52<06:27,  2.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 669/810 [35:55<06:28,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 670/810 [35:58<06:26,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 671/810 [36:01<06:24,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 672/810 [36:03<06:18,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 673/810 [36:06<06:08,  2.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 674/810 [36:09<06:04,  2.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 675/810 [36:12<06:46,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 676/810 [36:15<06:32,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▎ | 677/810 [36:18<06:23,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▎ | 678/810 [36:21<06:20,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 679/810 [36:23<06:08,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 680/810 [36:26<06:11,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 681/810 [36:29<06:03,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 682/810 [36:32<05:56,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 683/810 [36:34<05:44,  2.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 684/810 [36:37<05:40,  2.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▍ | 685/810 [36:40<05:38,  2.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▍ | 686/810 [36:43<05:40,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▍ | 687/810 [36:45<05:38,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▍ | 688/810 [36:48<05:32,  2.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▌ | 689/810 [36:51<05:27,  2.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▌ | 690/810 [36:53<05:22,  2.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▌ | 691/810 [36:56<05:14,  2.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▌ | 692/810 [36:59<05:15,  2.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 693/810 [37:01<05:17,  2.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 694/810 [37:07<07:04,  3.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 695/810 [37:10<06:31,  3.41s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 696/810 [37:13<06:13,  3.27s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 697/810 [37:30<13:59,  7.43s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 698/810 [37:33<11:22,  6.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▋ | 699/810 [37:36<09:25,  5.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▋ | 700/810 [37:39<08:05,  4.42s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 701/810 [37:41<07:04,  3.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 702/810 [37:44<06:24,  3.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 703/810 [37:47<05:59,  3.36s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 704/810 [37:50<05:36,  3.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 705/810 [37:53<05:18,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 706/810 [37:55<05:01,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 707/810 [37:58<04:51,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 708/810 [38:01<04:48,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 709/810 [38:04<04:50,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 710/810 [38:06<04:40,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 711/810 [38:09<04:34,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 712/810 [38:12<04:32,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 713/810 [38:14<04:29,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 714/810 [38:18<04:34,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 715/810 [38:20<04:32,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 716/810 [38:23<04:28,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▊ | 717/810 [38:26<04:30,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▊ | 718/810 [38:29<04:20,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 719/810 [38:32<04:17,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 720/810 [38:35<04:13,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 721/810 [38:37<04:05,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 722/810 [38:40<04:01,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 723/810 [38:43<04:03,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 724/810 [38:46<04:01,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|████████▉ | 725/810 [38:48<03:52,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|████████▉ | 726/810 [38:51<03:52,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|████████▉ | 727/810 [38:54<03:52,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|████████▉ | 728/810 [38:57<03:47,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 729/810 [38:59<03:43,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 730/810 [39:02<03:43,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 731/810 [39:05<03:37,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 732/810 [39:08<03:36,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 733/810 [39:11<03:34,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 734/810 [39:13<03:30,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 735/810 [39:16<03:28,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 736/810 [39:19<03:25,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 737/810 [39:22<03:20,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 738/810 [39:25<03:24,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 739/810 [39:29<03:49,  3.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████▏| 740/810 [39:33<04:02,  3.47s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████▏| 741/810 [39:35<03:40,  3.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 742/810 [39:38<03:28,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 743/810 [39:41<03:18,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 744/810 [39:44<03:12,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 745/810 [39:46<03:04,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 746/810 [39:49<03:06,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 747/810 [39:52<03:05,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 748/810 [39:55<02:57,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 749/810 [39:58<02:53,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 750/810 [40:00<02:46,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 751/810 [40:03<02:41,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 752/810 [40:06<02:42,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 753/810 [40:09<02:39,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 754/810 [40:12<02:39,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 755/810 [40:14<02:33,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 756/810 [40:17<02:27,  2.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 757/810 [40:20<02:25,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▎| 758/810 [40:23<02:22,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▎| 759/810 [40:25<02:20,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 760/810 [40:29<02:25,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 761/810 [40:31<02:21,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 762/810 [40:34<02:15,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 763/810 [40:37<02:11,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 764/810 [40:40<02:07,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 765/810 [40:42<02:03,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▍| 766/810 [40:45<02:01,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▍| 767/810 [40:48<02:01,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▍| 768/810 [40:51<01:56,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▍| 769/810 [40:53<01:52,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▌| 770/810 [40:56<01:51,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▌| 771/810 [40:59<01:52,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▌| 772/810 [41:02<01:48,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▌| 773/810 [41:05<01:45,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 774/810 [41:08<01:43,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 775/810 [41:11<01:42,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 776/810 [41:14<01:35,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 777/810 [41:16<01:32,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 778/810 [41:29<03:01,  5.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 779/810 [41:32<02:29,  4.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▋| 780/810 [41:35<02:08,  4.28s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▋| 781/810 [41:37<01:51,  3.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 782/810 [41:40<01:39,  3.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 783/810 [41:43<01:28,  3.29s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 784/810 [41:46<01:21,  3.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 785/810 [41:49<01:17,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 786/810 [41:51<01:11,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 787/810 [41:54<01:06,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 788/810 [41:57<01:02,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 789/810 [42:00<01:00,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 790/810 [42:02<00:56,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 791/810 [42:05<00:52,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 792/810 [42:08<00:51,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 793/810 [42:11<00:48,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 794/810 [42:14<00:45,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 795/810 [42:17<00:42,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 796/810 [42:19<00:39,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 797/810 [42:22<00:36,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▊| 798/810 [42:25<00:33,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▊| 799/810 [42:28<00:30,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 800/810 [42:31<00:27,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 801/810 [42:37<00:34,  3.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 802/810 [42:40<00:28,  3.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 803/810 [42:43<00:23,  3.37s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 804/810 [42:46<00:19,  3.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 805/810 [42:48<00:15,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|█████████▉| 806/810 [42:51<00:11,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|█████████▉| 807/810 [42:54<00:08,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|█████████▉| 808/810 [42:56<00:05,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|█████████▉| 809/810 [42:59<00:02,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|██████████| 810/810 [43:03<00:00,  3.08s/it]100%|██████████| 810/810 [43:03<00:00,  3.19s/it]

4723823_20201_2_0,jkf84o4icz,1.009797200149492,-71.59167967017427,-39.07318617685692

1289359_20201_2_0,jkiwro4icz,3.079745805769423,-66.47668099518344,-44.96658283787232

1756057_20201_2_0,jkjxjp4icz,-1.9890371124199706,-116.20548145977747,-13.928106054057281

1303190_20201_2_0,jkmj9p4icz,4.014515259450479,-107.82845338329187,-60.87338081548931

5128139_20201_2_0,jktkkn4icz,-8.350913479829076,-106.22230657826466,10.979973986278111

3089419_20201_2_0,jl116o4icz,-8.464183374028613,-96.2397832487151,22.962209001982302

4134866_20201_2_0,jl5nep4icz,-0.34210262574947237,-59.467152433648096,-29.04251390694158

1251223_20201_2_0,jl912p4icz,-2.3913868774817972,-66.14642794368442,-14.791346020561662

3868078_20201_2_0,jliiln4icz,-0.5208301835653805,-82.76518920104402,-33.717833212318766

1523466_20201_2_0,jln4tn4icz,1.2555710654281864,-63.35007687573366,-21.66144463755745

3940921_20201_2_0,jloldo4icz,-0.3552495243215492,-132.68084399240962,-35.55286309447487

3023419_20201_2_0,jlop8o4icz,0.6947530921767971,-92.61257606767668,-42.52229778993804

1553659_20201_2_0,jlu5uo4icz,0.9671928962305002,-93.75260104539649,-37.26698717179502

4270874_20201_2_0,jm169o4icz,-8.716298583772037,-101.9365658420952,25.778020774822437

3719420_20201_2_0,jm8p6o4icz,44.12218583962695,174.98175994146627,-164.043488365894

3279986_20201_2_0,jmd5cn4icz,4.17804238852117,-115.0395010675162,-33.749964314527276

2902085_20201_2_0,jmdkan4icz,-3.911402253736906,-120.40160311455614,-4.880542558025056

2686636_20201_2_0,jmefeo4icz,-0.537629818466366,-109.50615293886815,-29.81733956978286

2923833_20201_2_0,jmeilo4icz,86.37154931140066,377.1025326749808,-224.73778316877684

1100623_20201_2_0,jmk5ap4icz,-2.0819769127330443,-65.28088994066923,-27.13127324242636

3039467_20201_2_0,jmnldn4icz,0.12106620205990744,-82.57836149619223,-44.33648887454133

5775419_20201_2_0,jmqxjp4icz,-2.791166966537949,-81.8091865264555,-16.125136476601455

5648672_20201_2_0,jmz48o4icz,9.448487403579099,-84.48817240631433,-72.89101727744452

2636260_20201_2_0,jn4tvn4icz,-1.8131982524514176,-80.649386986049,-28.534281079447

1181186_20201_2_0,jn8cro4icz,-2.93245982778809,-70.31347834390942,-8.129874049084222

3598741_20201_2_0,jn9udn4icz,-2.7695804304194493,-111.6075707163528,-21.069226629220992

2285952_20201_2_0,jnk5zo4icz,2.6022008731566406,-42.94770918789908,-66.61373738547134

3793620_20201_2_0,jnm82o4icz,0.6175820839781859,-90.15053542097192,-42.99801169599738

3756467_20201_2_0,jnpvwn4icz,2.060129573023921,-99.28133662791595,-44.29447974740893

3251216_20201_2_0,jnq8fp4icz,0.29539480978569915,-117.78160421632552,-36.330705840839144

3045040_20201_2_0,jnufmo4icz,-2.7849214359523646,-88.18045253807728,-10.6119646790481

4977084_20201_2_0,jnxnen4icz,16.85033044109088,-37.211465017370045,-113.46629313343922

3186399_20201_2_0,jo2z6p4icz,-2.326536873571915,-92.68409433564389,-35.26462215053209

2218584_20201_2_0,jo36go4icz,-14.264698063644754,-172.7512548221799,41.41005194335217

2474701_20201_2_0,jo52bn4icz,-0.28972226750035074,-102.18602516406563,-38.05761232709243

1161704_20201_2_0,jo5zjp4icz,-1.7797415509299488,-100.4793211675524,-25.526786486902353

5469158_20201_2_0,jo83jn4icz,1.2414797543075133,-118.79168709434288,-65.71993542151245

2996872_20201_2_0,jo8qpn4icz,1.0374452929835216,-102.71505440096959,-29.1539816384023

1570226_20201_2_0,jo9t0p4icz,-1.4775386021580479,-97.89707490304329,-41.61883292691377

2605218_20201_2_0,joe4cp4icz,-0.5295843031565092,-73.05455745003539,-38.72580418642232

1224784_20201_2_0,jogzlo4icz,-0.2817204064409171,-86.03441461955771,-49.30695396758955

2818275_20201_2_0,johdpn4icz,0.47357957219405233,-108.06561622955908,-44.51203563448577

1028834_20201_2_0,joq99o4icz,-0.8224422519765858,-114.6869914006698,-24.276115769278405

1989475_20201_2_0,jot8dp4icz,2.0808541499858872,-114.89974509749663,-26.282549213307192

2847132_20201_2_0,jow86p4icz,-0.585398928473444,-79.24548567992599,-48.62881827371959

4065770_20201_2_0,joxz9n4icz,1.2859172687439209,-79.40308991427966,-35.6345596566984

4969927_20201_2_0,jp23sn4icz,0.4543236806020403,-113.42746601718969,-36.00473789651514

1625887_20201_2_0,jp3pkn4icz,-0.3499154143126289,-62.114821442672735,-32.75097865214168

2495573_20201_2_0,jp86ep4icz,-0.20303954831743518,-108.26128051366189,-23.058376089803232

4784248_20201_2_0,jpbtfn4icz,-0.40254383802657656,-113.61068302864811,-21.93692846115323

4624825_20201_2_0,jpermo4icz,1.5666199348918617,-90.18295605661399,-50.034907885574114

1541928_20201_2_0,jpgjtn4icz,-0.18891884671867779,-94.708354257179,-25.422382795950696

4778594_20201_2_0,jpj7co4icz,2.476420428917291,-72.26465989075001,-56.170508317372736

6001796_20201_2_0,jpnp8o4icz,3.4153270389729204,-119.08118027752639,-63.73557163643159

4948948_20201_2_0,jpocoo4icz,2.0861925039247575,-113.49097952148944,-53.93646428333943

1626431_20201_2_0,jpowmn4icz,1.304159324872479,-74.59303776707335,-52.23464421237436

2793004_20201_2_0,jpt93p4icz,-6.575691670674655,-120.81046119956011,-15.302125435919294

3383373_20201_2_0,jpu7nn4icz,-2.494255057665836,-115.5380021926807,-19.340653869554757

2808248_20201_2_0,jpy4vo4icz,-0.866651475384536,-76.800984324095,-45.74681665735069

5397100_20201_2_0,jpy86o4icz,0.5050554453262452,-100.29797059553877,-32.28435078901691

5962921_20201_2_0,jq19nn4icz,-0.014773201946891912,-106.8195298565993,-38.59427479672584

3290512_20201_2_0,jq2i4p4icz,0.2225561232977587,-76.81083331218497,-50.260306707304736

2648580_20201_2_0,jq3ykn4icz,-0.22307393654488375,-72.72623821913007,-43.851580390961885

1427795_20201_2_0,jq4tbp4icz,0.837813182417977,-121.24204550177805,-39.2767872103186

1808930_20201_2_0,jq543p4icz,-1.0301808149107023,-91.25288410073853,-20.630236019319682

2203481_20201_2_0,jqagbp4icz,-0.19892637039580421,-100.28308389778178,-44.162514528867845

2641089_20201_2_0,jqcb1p4icz,-0.13458709452069703,-46.06888224596912,-68.34096493223342

2171819_20201_2_0,jqid7p4icz,3.060716902205751,-46.41061207348855,-65.41463749207337

1123889_20201_2_0,im791p4icz,-7.5271614908516895,-108.48292241916906,4.327039623782653

1495013_20201_2_0,jqir2p4icz,1.8120562832688565,-37.92530997959926,-39.639363166346726

4710305_20201_2_0,jqlcxo4icz,0.9025682098567963,-116.19540005037072,-32.03308206611351

3405117_20201_2_0,jqmcfn4icz,1.8917392133112465,-103.15578959608717,-48.588445859857956

1670839_20201_2_0,jqnwfo4icz,-3.6878742766342634,-70.58921057890493,-17.60398085897738

3820330_20201_2_0,jqr1co4icz,-2.2424182833921957,-70.93843793872287,-23.771846374029536

2876954_20201_2_0,jqs02o4icz,2.5263658494723353,-61.99288290484097,-56.168714631111044

2036080_20201_2_0,jqs9io4icz,-1.815105055349051,-106.44191442057101,-30.66310157009599

5157114_20201_2_0,jqysvn4icz,1.093777381078654,-123.82564592324505,-31.932260598698264

2602383_20201_2_0,jr1o4p4icz,-4.30381952760602,-73.91510693076543,-16.791448158062394

4424781_20201_2_0,jr5hpo4icz,2.264961815825889,-69.65949443314773,-42.13292700506203

1043321_20201_2_0,jr5seo4icz,0.7118173437921972,-117.53368324403573,-37.794193503078944

1682504_20201_2_0,jr86in4icz,4.383838433909034,-82.88000794717652,-103.5118229326959

4142198_20201_2_0,jrawyn4icz,1.9313157945810775,-121.5276767896446,-42.84520833575064

2818019_20201_2_0,jrb0uo4icz,-2.382393863134662,-81.07887671748057,-14.117731424617546

5202884_20201_2_0,jrhgan4icz,-7.849490012597081,-137.01518492978528,-6.895012181577712

1401192_20201_2_0,jrob1p4icz,1.5611168924234826,-74.7627810449319,-43.81492899893662

3548579_20201_2_0,jrqnan4icz,-2.816917229002135,-110.52711087121548,-26.40812852123851

3710466_20201_2_0,jrsmyn4icz,-1.4409838090370068,-91.5039647492892,-32.6606298489062

3012909_20201_2_0,jrtxpn4icz,0.8807614872562759,-76.13100876805953,-49.69308527385522

2966631_20201_2_0,jrwrzo4icz,-1.3092408032189167,-74.24269004041463,-32.03517708262504

2816195_20201_2_0,jrx7wo4icz,-2.321284892034099,-66.08526533374368,-31.097401800452886

2048446_20201_2_0,jryk9o4icz,2.5107022416928597,-79.84638524079861,-41.455915875335435

2320748_20201_2_0,js747n4icz,-4.22565318505575,-99.00776568918971,-25.742042635973547

3837114_20201_2_0,js7c7p4icz,-2.296598188273557,-84.6908942406248,-15.50104137542607

1121465_20201_2_0,js9rcn4icz,-0.9235665170158137,-116.11783681072589,-34.918858337543824

1669130_20201_2_0,jsdw0o4icz,-1.186912350426051,-74.9073989056754,-42.56942895798598

3879242_20201_2_0,jshxlo4icz,1.1423553256122962,-97.00382128445949,-38.38564438612357

2954730_20201_2_0,jsi3ap4icz,7.516953071157084,-54.19936047911506,-74.24872474485797

5226032_20201_2_0,jsig8o4icz,-0.1683502306315069,-80.71973260308613,-21.31338821687598

5784960_20201_2_0,jskhyn4icz,-0.13998302767158716,-118.39006931166554,-36.09885930070476

5655177_20201_2_0,jsnqkn4icz,3.109390165786912,-86.89400758777401,-48.16528069783166

2014073_20201_2_0,jsofgp4icz,-2.1513734063366092,-99.43677694622346,-27.449805108849915

2521058_20201_2_0,jsp0mn4icz,-6.124169701461439,-99.05403104304742,-4.9988270486614255

2935625_20201_2_0,jspogn4icz,-2.178616230204622,-155.79216514313447,-30.735989452384302

2081788_20201_2_0,jspv3p4icz,-1.3998094082958683,-84.7960087483122,-29.502227382940532

5722546_20201_2_0,jsq2gp4icz,-0.03742026995105415,-64.63575064643058,-38.27511311009317

3827863_20201_2_0,jsy1zo4icz,-0.2155962022026634,-79.3394091220297,-28.234506346054047

1713674_20201_2_0,jsykyn4icz,2.726597355235164,-105.97762791949765,-43.52836797303334

3521414_20201_2_0,jszm5p4icz,-0.9355710553651212,-121.74054973563213,-33.772221935370425

4517750_20201_2_0,jszo9o4icz,-4.734145880659502,-136.64725716000825,5.562477718591907

5301780_20201_2_0,jt0cfn4icz,-0.47219787088301596,-133.04215354708305,-31.98370205808004

5478501_20201_2_0,jt15ho4icz,-0.3177877305380004,-134.06579237127002,-26.955340904576076

5059445_20201_2_0,jtgmao4icz,-0.6347000106256581,-92.55021947788677,-24.036573772685756

3809328_20201_2_0,jtj8qn4icz,0.1337884608284538,-80.83739824034345,-18.689233730980348

1698466_20201_2_0,r6mk7o4icz,-3.5195655146549845,-91.6192842862369,-22.842616974869486

2899045_20201_2_0,jtodno4icz,2.537894919888007,-107.33921776340833,-68.95502463226293

2497788_20201_2_0,jtqphp4icz,-0.3430190907656049,-108.52588774125906,-29.336046205789756

5999479_20201_2_0,jtu75o4icz,1.1121175333609417,-123.38594593177535,-38.36107471760286

5209003_20201_2_0,jtu7so4icz,2.2750103168238347,-50.57098753301085,-28.04424997441822

3994953_20201_2_0,jtxvlo4icz,7.651373548233744,-75.17906269538514,-44.415795020315045

5351717_20201_2_0,jtziio4icz,2.2196602639290166,-100.6782402004039,-61.560247505509665

1852185_20201_2_0,jtzk7p4icz,-6.953925612224538,-128.11160779375456,10.905221799996355

3714221_20201_2_0,ju1rvn4icz,3.208747382959732,-78.78000063367176,-65.6141985125774

2195051_20201_2_0,ju3m8o4icz,-0.2946994109837516,-124.75363968215763,-33.37957812284493

1821171_20201_2_0,ju784o4icz,-1.1922440575825088,-102.37090008309568,-34.18909998662522

1390368_20201_2_0,ju7qlo4icz,2.098244154685106,-65.24630227667919,-47.69024703691521

5150635_20201_2_0,judh7o4icz,0.8244570621603433,-124.79753984764992,-45.52589424769664

1045806_20201_2_0,jueidp4icz,-0.4583951930896631,-90.40866969619975,-43.89995927706573

1323836_20201_2_0,jumh2o4icz,0.7140677088384451,-92.63890833852517,-45.999126938400295

2511030_20201_2_0,jupfko4icz,-1.6883738549875393,-80.25360762471223,-33.36870245726827

4952073_20201_2_0,juvrpn4icz,1.6922820703149082,-88.27001884854243,-41.603085695517166

4782140_20201_2_0,juw2ro4icz,0.48889843294107493,-74.5794914005898,-27.177483803700966

3120611_20201_2_0,juxbbn4icz,2.864698690571649,-106.14046191845907,-48.02912349269401

1668862_20201_2_0,jv08pn4icz,32.14157636669659,56.562772495142156,-124.83206045396878

3407226_20201_2_0,jv0zho4icz,-1.7109670057690143,-88.90332209867225,-20.01681240812816

2105116_20201_2_0,jv4jmn4icz,3.611278400347152,-124.50485325936236,-74.24007900342173

3051897_20201_2_0,jv83xo4icz,0.520605475688018,-87.09532366330052,-49.56117694378757

2100109_20201_2_0,jvjzeo4icz,1.1495284394292669,-74.46120436771139,-48.57169670691981

1992690_20201_2_0,jvlnmo4icz,-3.693079942542612,-113.0167797602526,-30.358828671792125

3508267_20201_2_0,jvlsfn4icz,-1.6347212362053853,-94.55942799231309,-15.654706187405878

5390974_20201_2_0,jvn09n4icz,-0.6790595990621542,-82.80102683789707,-25.332041505321286

2241336_20201_2_0,jvokep4icz,-1.3608002018109286,-106.69931024902183,-41.88935810960112

3856003_20201_2_0,jvos7p4icz,-2.998305482065198,-113.50045192182523,-23.079674608258628

2786883_20201_2_0,jvwn4p4icz,3.1164939976680492,-59.06640841378359,-57.90705123797423

3231988_20201_2_0,jvwu4o4icz,7.860992900459268,-77.74351937515294,-68.5891722186512

1421820_20201_2_0,jvy3no4icz,4.016731604607881,-87.57574153635798,-42.99686550447355

3877412_20201_2_0,jw3hnn4icz,20.15526361336947,-32.623012970857644,-100.6276634915288

2358790_20201_2_0,jw7ivo4icz,0.08888347487423161,-71.47657109796629,-26.651981733878273

1310532_20201_2_0,jwb49o4icz,3.549774012916113,-60.88516735821571,-50.100249343048645

4938663_20201_2_0,jwes3p4icz,-0.4797397125378574,-123.60636303269553,-13.859517734866614

1072131_20201_2_0,jwnqpo4icz,0.11555827705814983,-117.63589115979718,-34.32011943619621

1822352_20201_2_0,jwoq3p4icz,-1.112095849440563,-118.82823825835737,-31.75891469176645

5489196_20201_2_0,jwoq9o4icz,-0.03059097560418719,-145.30364321135022,-15.811882600658663

1474876_20201_2_0,jwpgwn4icz,-1.6875853067083366,-133.62784779413164,-32.374312810880454

5107767_20201_2_0,jwx7dn4icz,0.45883910235923914,-109.40191923841934,-78.1852708822965

5361622_20201_2_0,jwxbvn4icz,-3.7545161020418107,-71.54173076988621,-23.984921820875115

3240960_20201_2_0,jx13to4icz,-0.357548577612956,-102.83774742242193,-21.265272596599544

4428130_20201_2_0,jx1yep4icz,2.6409441264438516,-52.929500070248906,-50.64958151862376

2645534_20201_2_0,jx665p4icz,0.16841146626466083,-81.39271732056295,-27.942905344402163

2809552_20201_2_0,jx82cp4icz,0.2920136829247999,-81.17384223959294,-36.713391985981815

2759192_20201_2_0,jx89ap4icz,-1.5339130548931044,-78.21187804153226,-33.833833239117126

2992459_20201_2_0,jxaphn4icz,1.0156200255370458,-102.3330189059271,-44.64812843882652

4819685_20201_2_0,jxgb3p4icz,-4.252699144996406,-119.42101483629469,-8.404828190286565

4221185_20201_2_0,jxh1vo4icz,0.023984213747045582,-46.16195438774915,-35.70648336713286

1109387_20201_2_0,jxjyvo4icz,25.810430102117486,29.608334071581197,-136.99370636796024

1582020_20201_2_0,jxrmen4icz,0.7279810297107183,-116.02382860635771,-40.552395327506446

1639827_20201_2_0,jxrn8p4icz,-2.251897694400955,-121.73062082996418,-33.16189340960783

4587201_20201_2_0,jxtenn4icz,-0.9409531434251984,-136.6863369735046,-30.876524110845224

1042029_20201_2_0,jxusdo4icz,1.7422890781118756,-70.11718017394236,-31.644861991798933

2304568_20201_2_0,jxysfn4icz,-3.851964056221064,-140.441755468903,-20.13435422605869

3095340_20201_2_0,jy0k8o4icz,1.1190576433093524,-112.89969683001533,-48.70239048200209

2610166_20201_2_0,jybken4icz,-2.5901319280055537,-84.12618722214927,-17.509371980138326

1527722_20201_2_0,jychdn4icz,-3.439976638884042,-69.38594286717125,-29.023892996066422

2966309_20201_2_0,jyee8p4icz,-0.356081965739295,-89.80730938079748,-15.378392051252376

2771895_20201_2_0,jyl0ap4icz,-1.00512443445221,-71.96317697414241,-38.32879600774483

5736071_20201_2_0,jylz5o4icz,1.2032129804411291,-123.28225808448036,-27.35934030140524

1323315_20201_2_0,jyoyxo4icz,3.3881241898196928,-69.53812566181452,-50.19197168220944

3479664_20201_2_0,jyqpfo4icz,0.5345328611149618,-80.88534171879883,-50.171851508351594

5820413_20201_2_0,jysdwo4icz,-6.8555746550117185,-149.60392385562065,-8.593510653547511

2654175_20201_2_0,6381ip4icz,0.8509638843261147,-134.80550135267657,-19.237527885823283

5582076_20201_2_0,jyulxn4icz,2.520154009649243,-88.37952159551028,-52.02196757180761

2438242_20201_2_0,jyuvpo4icz,1.0973427449750688,-51.32856366162699,-27.01926891447566

5025694_20201_2_0,jyxkcp4icz,0.2251292832404417,-60.73486877313931,-40.112395417500124

4702630_20201_2_0,jz6zso4icz,6.42987272703681,-25.188881931873595,-75.30274291552097

1589869_20201_2_0,jz85sn4icz,-1.6079103459692452,-115.56747359540512,-17.78562734357945

1595967_20201_2_0,jzbxco4icz,-0.06553637241067906,-108.53704834813641,-16.448414829469442

5230016_20201_2_0,jzdrun4icz,1.4654504907459989,-92.28422165342329,-51.226577353174875

2229076_20201_2_0,jzdvzo4icz,-1.839715101352064,-73.12684316265677,-40.28894012966455

1026609_20201_2_0,jziwmn4icz,1.6604303615462346,-97.28405132758684,-45.17925339691067

1937972_20201_2_0,jzmm9n4icz,0.4994730585479063,-116.3699320914005,-37.50861302416111

4848595_20201_2_0,jzub2o4icz,0.5908602509606882,-83.94361686114402,-38.20453823262902

2303103_20201_2_0,jzzazo4icz,-15.497747741285835,-105.64399928566951,86.9697155107617

3982842_20201_2_0,k00oso4icz,-1.0269564817923322,-54.632085044144986,-35.93459445170653

5658232_20201_2_0,k075fp4icz,-2.605458610051601,-105.6684245084754,-19.46556005681535

2253399_20201_2_0,k0jrcn4icz,-0.29101005419714765,-154.09663621727233,-30.04530550688176

3884142_20201_2_0,k0k9jp4icz,1.4618668379268578,-117.8227995691187,-40.948462691178804

3093696_20201_2_0,k0kijn4icz,-1.985311624454019,-90.88779711898661,-28.219622811326133

5817099_20201_2_0,k0mw4o4icz,-1.8326922970027624,-136.76633136618116,-19.41630828498421

4991241_20201_2_0,k0o0wo4icz,17.97489012434966,-55.46278985031597,-106.25066504548111

4851821_20201_2_0,k0oudo4icz,0.9399478187723003,-84.6223204485496,-49.59440926129588

4638863_20201_2_0,k0qt8p4icz,0.49792633176382384,-68.63877321562737,-32.311331815864094

1267374_20201_2_0,k0r29o4icz,4.748254410161117,-70.05945893809809,-58.19281381264658

4538847_20201_2_0,k0uvbn4icz,1.0499325604124823,-105.4340355136217,-40.848712729405094

4104072_20201_2_0,k1474p4icz,-1.7024591356472116,-80.26271493688759,-35.75487254876472

4014163_20201_2_0,k17q7o4icz,1.9177048281349016,-139.26405122242414,-40.92092373334768

5276791_20201_2_0,k18cmo4icz,-1.0138364317491382,-91.93072139062406,-40.96466599171161

2466014_20201_2_0,k1blgo4icz,-1.4535698997319302,-97.03894992094433,-24.355449962259684

1250172_20201_2_0,k1boin4icz,-0.4441217456797762,-99.65840030123718,-37.66731504426028

5594908_20201_2_0,k1c7wn4icz,0.7816483660416503,-112.30874842564413,-18.541998783592135

2311925_20201_2_0,k1c9ln4icz,-1.441387502680628,-68.77114420615936,-44.89295474871152

3411883_20201_2_0,k1d7ho4icz,-0.7400874977993105,-119.74228552410898,-38.4454455626412

5940079_20201_2_0,k1dqgn4icz,-2.4592635747807012,-130.3015211027389,-38.00971916636496

5688243_20201_2_0,k1fo7o4icz,-1.8025151915068847,-106.62721050626115,-29.101319863319105

2073247_20201_2_0,k1h49p4icz,-2.8280656952427496,-59.133733869861715,-30.419258721492255

1276187_20201_2_0,k1hcqn4icz,1.2899891265054455,-104.05161125608797,-24.161637331028373

4444391_20201_2_0,k1lj4o4icz,-0.7196255937403941,-114.19124122871563,-7.991252687893137

4064870_20201_2_0,k1mhdo4icz,-2.976704762743399,-109.98211331580745,-16.023324723643682

4977679_20201_2_0,k1nq2o4icz,-3.424305809953281,-113.73716491500645,-24.328223153810455

2217976_20201_2_0,k1qw4o4icz,0.8403136482229493,-97.61538655183654,-28.27385247308368

2767571_20201_2_0,k1ws7p4icz,-0.9702680551654033,-99.27075756831567,-48.99047952101695

4015103_20201_2_0,k23crn4icz,0.6344149246430039,-110.76856976266038,-55.06906458649662

5840549_20201_2_0,k26hio4icz,2.4066945709589445,-73.43002465325355,-73.07860029599924

1601081_20201_2_0,k2dtho4icz,0.21458241514876075,-52.475083889720395,-28.11072676817028

2193675_20201_2_0,k2emen4icz,-1.178362367906748,-92.98666639232147,-28.167282374962866

3480374_20201_2_0,k2hgbp4icz,1.908212640889231,-101.14556040327261,-35.374265277484255

3786019_20201_2_0,k2hjmn4icz,6.263574899013415,-94.35000302106295,-70.60653228700528

2480098_20201_2_0,k2jb7o4icz,-0.007665919705167766,-124.67236221503421,-35.330294981792846

3476114_20201_2_0,k2jtln4icz,-4.530781989582221,-100.38010444199634,13.453158123160847

3424971_20201_2_0,k2lbuo4icz,0.23778994107145457,-91.01930151681333,-28.807076077914772

2486010_20201_2_0,k2phqn4icz,0.19167912172546064,-63.74901134283647,-59.47262671251124

1498672_20201_2_0,k2q6mn4icz,-3.4212446574807,-121.79387612117733,-12.24374794547984

5987624_20201_2_0,k2tkjo4icz,3.0464680009710667,-52.44787007449412,-74.28768907822884

1428331_20201_2_0,k2unxo4icz,-4.1998804564607894,-110.26385348745927,-20.80450211842428

1792114_20201_2_0,k2vpqn4icz,2.1752322399547834,-90.35342507061489,-52.14166982454617

2526136_20201_2_0,k2wvcp4icz,-1.243708145040623,-74.53274692915568,-54.300601454476435

3702526_20201_2_0,k3c69p4icz,0.3986993489395351,-79.25918385060973,-53.65955358273085

1267167_20201_2_0,k3co8p4icz,-3.432504787710019,-100.590515151089,-17.020675205930004

4728234_20201_2_0,k3dr6p4icz,-0.5282653620452895,-94.4023450452504,-20.83160568917286

2511808_20201_2_0,k3e9ho4icz,-1.4015820370374203,-54.46183059988857,-18.915883994473447

4922468_20201_2_0,k3ee1o4icz,0.10142211414300428,-68.13886740822213,-42.34660346925615

3990677_20201_2_0,k3kt6p4icz,1.5251479284088594,-114.52456480216412,-50.010026075885534

4809393_20201_2_0,k3n2fn4icz,-1.3398642108631993,-108.1963111670452,-19.915622395021316

3154860_20201_2_0,k3pz5p4icz,1.4382939175838467,-74.74010799682549,-49.83398824728636

4416695_20201_2_0,k3rqep4icz,0.5608524824504794,-120.55929418910807,-30.332367819037927

4179579_20201_2_0,k3z0do4icz,-0.5710535124727603,-63.67174115578999,-26.28059546689809

1549718_20201_2_0,k3z4bo4icz,-1.697110121867124,-122.41956831307067,-23.188878537839187

3931059_20201_2_0,k42llo4icz,3.3860019576256986,-73.78533243623656,-56.85494874071186

3964511_20201_2_0,k43swo4icz,2.3682943269669816,-104.30809177669232,-58.56657421685179

2474462_20201_2_0,k44bho4icz,-4.502278637572081,-101.40992765630313,-13.884964311088126

3334403_20201_2_0,kkvb7p4icz,-26.635855422550083,-147.58479987089842,101.33925781869527

/users/rhydian/anaconda3/envs/torch_env/lib/python3.7/site-packages/torch/cuda/__init__.py:52: UserWarning: CUDA initialization: Found no NVIDIA driver on your system. Please check that you have an NVIDIA GPU and installed a driver from http://www.nvidia.com/Download/index.aspx (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729006826/work/c10/cuda/CUDAFunctions.cpp:100.)
  return torch._C._cuda_getDeviceCount() > 0
  0%|          | 0/101 [00:00<?, ?it/s]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 1/101 [00:02<04:53,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 2/101 [00:05<04:52,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 3/101 [00:08<04:44,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/101 [00:11<04:40,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▍         | 5/101 [00:14<04:34,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 6/101 [00:17<04:33,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 7/101 [00:20<04:28,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 8/101 [00:24<04:55,  3.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 9/101 [00:28<05:20,  3.48s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|▉         | 10/101 [00:31<04:59,  3.29s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 11/101 [00:33<04:34,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 12/101 [00:36<04:23,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 13/101 [00:39<04:17,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 14/101 [00:46<06:10,  4.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▍        | 15/101 [00:49<05:35,  3.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 16/101 [00:52<05:01,  3.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 17/101 [00:55<04:40,  3.34s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 18/101 [00:57<04:21,  3.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 19/101 [01:00<04:04,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|█▉        | 20/101 [01:04<04:22,  3.24s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 21/101 [01:07<04:12,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 22/101 [01:10<04:01,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 23/101 [01:12<03:49,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 24/101 [01:15<03:46,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▍       | 25/101 [01:18<03:35,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 26/101 [01:21<03:34,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 27/101 [01:23<03:27,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 28/101 [01:31<05:08,  4.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▊       | 29/101 [01:34<04:34,  3.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|██▉       | 30/101 [01:36<04:04,  3.45s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 31/101 [01:39<03:49,  3.29s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 32/101 [01:42<03:32,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 33/101 [01:45<03:37,  3.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▎      | 34/101 [01:48<03:25,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▍      | 35/101 [01:51<03:13,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 36/101 [01:54<03:08,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 37/101 [01:57<03:10,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 38/101 [02:00<03:06,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▊      | 39/101 [02:04<03:23,  3.29s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|███▉      | 40/101 [02:06<03:11,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 41/101 [02:10<03:08,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 42/101 [02:12<02:59,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 43/101 [02:15<02:52,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▎     | 44/101 [02:19<02:56,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▍     | 45/101 [02:22<02:54,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 46/101 [02:25<03:00,  3.29s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 47/101 [02:28<02:51,  3.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 48/101 [02:31<02:40,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▊     | 49/101 [02:34<02:33,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|████▉     | 50/101 [02:36<02:23,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 51/101 [02:39<02:22,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████▏    | 52/101 [02:42<02:17,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 53/101 [02:45<02:15,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 54/101 [02:48<02:11,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 55/101 [02:50<02:08,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▌    | 56/101 [02:53<02:07,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▋    | 57/101 [02:56<02:05,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 58/101 [02:59<02:00,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 59/101 [03:02<02:00,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 60/101 [03:05<01:57,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|██████    | 61/101 [03:08<01:55,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████▏   | 62/101 [03:11<01:52,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 63/101 [03:13<01:48,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 64/101 [03:16<01:43,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 65/101 [03:19<01:39,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▌   | 66/101 [03:21<01:35,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▋   | 67/101 [03:24<01:33,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 68/101 [03:27<01:31,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 69/101 [03:30<01:27,  2.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 70/101 [03:33<01:27,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|███████   | 71/101 [03:35<01:23,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████▏  | 72/101 [03:38<01:19,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 73/101 [03:41<01:18,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 74/101 [03:44<01:14,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 75/101 [03:47<01:14,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▌  | 76/101 [03:49<01:10,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 77/101 [03:52<01:06,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 78/101 [03:55<01:02,  2.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 79/101 [03:58<01:00,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 80/101 [04:01<01:00,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 81/101 [04:03<00:53,  2.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 82/101 [04:10<01:14,  3.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 83/101 [04:12<01:03,  3.53s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 84/101 [04:15<00:56,  3.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 85/101 [04:18<00:50,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▌ | 86/101 [04:21<00:45,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 87/101 [04:33<01:23,  5.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 88/101 [04:36<01:04,  4.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 89/101 [04:39<00:52,  4.34s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 90/101 [04:42<00:41,  3.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 91/101 [04:44<00:34,  3.48s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 92/101 [04:52<00:42,  4.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 93/101 [05:05<00:56,  7.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 94/101 [05:07<00:40,  5.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 95/101 [05:10<00:29,  4.85s/it] 95%|█████████▌| 96/101 [05:13<00:21,  4.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 97/101 [05:15<00:15,  3.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 98/101 [05:18<00:10,  3.45s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 99/101 [05:21<00:06,  3.31s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 100/101 [05:24<00:03,  3.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|██████████| 101/101 [05:27<00:00,  3.13s/it]100%|██████████| 101/101 [05:27<00:00,  3.24s/it]
Trying to load from /users/rhydian/self-supervised-project/model_weights/SSECEncodersBothBoth
==> Resuming model trained for 106 epochs...
Trying to load from ../model_weights/angle_regressor4
==> Resuming model trained for 7 epochs...
5601189_20201_2_0,i1mdgp4icz,-0.7239735896669056,-115.71463112088725,-27.58006966096697

2983426_20201_2_0,i1py9p4icz,1.327007261844365,-93.9083331947632,-57.576074478555824

3402241_20201_2_0,i2zlxo4icz,-16.136581375736426,-110.61377522137315,52.55926865298892

3455958_20201_2_0,i3cnbo4icz,3.320165309753135,-105.79205867509006,-53.97472833331831

4992315_20201_2_0,i45tjn4icz,-1.228956928933841,-107.88931871236616,-27.513168229274754

3696540_20201_2_0,i59gmo4icz,1.3158198940543369,-91.39771652305097,-32.00358278395716

5357760_20201_2_0,i5xb9p4icz,-2.2028602304333273,-61.22383382795567,-37.401264000773665

1490839_20201_2_0,i7xxrn4icz,3.583983331642865,-99.73479053619681,-59.844202520420296

3924949_20201_2_0,i9z17o4icz,9.046430035824999,-100.08396448167991,-81.162069102244

1977301_20201_2_0,iaqbgn4icz,1.8926112376885504,-121.19353019868765,-55.85448206139773

1760562_20201_2_0,idewro4icz,0.812526485507576,-45.9150023200167,-36.03752839560423

3221412_20201_2_0,idkg5o4icz,-0.5857053359634923,-113.49398422451901,-40.29504530156339

3396132_20201_2_0,iec86n4icz,0.46714491391633983,-89.86039699572325,-38.488318804390246

2905685_20201_2_0,iep27p4icz,2.0337251446205187,-62.55021244882687,-42.14195014625547

5849996_20201_2_0,ifgnip4icz,33.536062883441105,142.77490413782863,-110.77857336450094

1684728_20201_2_0,ig8wrn4icz,1.2190492790480083,-97.1684686294713,-41.59208067114227

1759533_20201_2_0,ii1i4p4icz,-32.312962761792704,-42.52636162514034,182.86933838531235

2098076_20201_2_0,iibabp4icz,-2.1128534933827634,-98.59169875927321,-39.63468143511396

4799387_20201_2_0,iiciqn4icz,0.4245175771431242,-144.1364834121718,-42.49271455273329

1484986_20201_2_0,y96zfo4icz,-1.857729270673794,-85.8024508696542,-13.905850961278631

4637926_20201_2_0,iiz59o4icz,1.1603256616916056,-39.074752633995075,-31.327056181184204

4109928_20201_2_0,ij3l7o4icz,1.8662223466943617,-109.25276555271623,-37.06781257392386

2400689_20201_2_0,ijxbyn4icz,12.163517275405335,-79.98916429810427,-70.60601447131455

3234428_20201_2_0,ikk93p4icz,1.842821312814354,-101.39224877370617,-47.701499170538796

1514228_20201_2_0,ilg7pn4icz,-1.2730873367494993,-100.33863351296722,-20.243433857688615

4970526_20201_2_0,im7kln4icz,3.1458579547397325,-139.6264794245591,-37.82206481362566

3794817_20201_2_0,immtdp4icz,0.5572375633868073,-92.62812820275772,-33.13999837289411

4422964_20201_2_0,in3bun4icz,5.503093786300525,-110.58654849294396,-62.128093748320424

3977206_20201_2_0,intnen4icz,-2.9204171298068333,-90.27188952185367,-14.875568719918022

1299644_20201_2_0,ip058o4icz,-2.0144190630059953,-91.85332276140375,-22.949024734992662

5578404_20201_2_0,iq68kn4icz,-1.4855392970652002,-99.62850472818502,-25.955704931268457

5675148_20201_2_0,iqfi1o4icz,-1.7368994861557627,-90.78545028212122,-20.929839176887413

2429779_20201_2_0,iqvxdn4icz,-0.82561143934529,-112.85299060126346,-37.24959849192825

4407921_20201_2_0,ir2vhn4icz,-3.8140663329424815,-111.81084613015517,-20.542571998939792

3876400_20201_2_0,ir3osn4icz,-0.6387475681967448,-104.07736912782929,-50.734038576914855

5866345_20201_2_0,ir46rn4icz,-2.064414032987994,-112.26445379254457,-18.98137610646063

1073812_20201_2_0,iso5ln4icz,0.36130896412261654,-118.01648686885599,-37.95049446787468

5491406_20201_2_0,isupfp4icz,0.9404831542317483,-105.37037332440997,-41.63819860919685

5926818_20201_2_0,it85fn4icz,-4.957766344859512,-150.64188745599841,-13.933567571524733

5660665_20201_2_0,ite1fo4icz,-0.6005355667532544,-72.55103119019091,-42.458249405797915

1778001_20201_2_0,itxe8p4icz,-1.5311302526121682,-130.6081127996475,-31.7272440125395

3463530_20201_2_0,iu595o4icz,-0.4538954240101989,-114.48451247105729,-35.4901337906653

2392751_20201_2_0,iuccxo4icz,2.0864783304218317,-51.55279797817997,-61.13642051643242

1922058_20201_2_0,iutdno4icz,-0.7468729917829191,-69.67444963759513,-60.485370460081114

5977081_20201_2_0,iv4j9o4icz,-0.6566504247640992,-100.96120460429177,-35.2816289481993

2423284_20201_2_0,iw5e2p4icz,0.7787270875429723,-92.1047340470075,-44.665811744392556

1335300_20201_2_0,iwajpn4icz,1.0304735851622386,-64.34223990408913,-27.604361995247828

1948216_20201_2_0,iwsgho4icz,0.5497793314816519,-82.2495167432576,-37.029378877037345

1440423_20201_2_0,ixx5hp4icz,-2.773870169959665,-101.47942093896737,-15.894778730749948

5927899_20201_2_0,iy225o4icz,-8.575367245822369,-140.71227671406277,8.106796892038076

1580302_20201_2_0,iydato4icz,3.375663415374311,-106.35274319623937,-43.932867376920186

4101417_20201_2_0,iyk1xo4icz,-0.6350254369847729,-112.86703553698263,-22.50067734011415

5448875_20201_2_0,iz2zjn4icz,-3.219549967991435,-99.04007793662012,-21.164546584178552

2344719_20201_2_0,izi9hp4icz,-0.1311271997652563,-134.25203650679552,-52.86877064223967

3127783_20201_2_0,j0omnn4icz,-1.9944750939111686,-94.58487436821639,-19.30596609548212

2326109_20201_2_0,j13zxo4icz,0.3993893989376012,-65.84956726107231,-29.047102006244046

5554027_20201_2_0,j1rr8o4icz,-1.920452664159482,-62.15478309199062,-15.496853023454179

3966050_20201_2_0,j22l2o4icz,0.18868085201867882,-113.67780750794265,-52.05130783733941

2781975_20201_2_0,j2b2uo4icz,-1.744515817392111,-105.0640165717507,-21.13363925305579

2317926_20201_2_0,j2n9lo4icz,1.869625649188606,-65.69479084053228,-35.500953991541024

3433448_20201_2_0,j3vl1o4icz,-0.879336419615948,-73.13459784073731,-31.764894384105574

4970532_20201_2_0,j6ntco4icz,0.03155029320436466,-100.51955612513581,-26.494425833991386

1077292_20201_2_0,j7ghyn4icz,-0.702520379892261,-109.47151950373515,-29.222238723945182

2687785_20201_2_0,j878go4icz,-0.6540285607168452,-76.69574313895828,-27.354662033741832

2643654_20201_2_0,j8tlmo4icz,-0.5296826196574541,-92.42108602788647,-48.769792524266364

3493552_20201_2_0,j9x1so4icz,1.8317590289356762,-94.87388952122686,-36.59658527267682

5709859_20201_2_0,jabkln4icz,0.027524555548918278,-105.57225787027596,-20.272312697761393

4351197_20201_2_0,jac6jp4icz,-0.04002738738133131,-103.280952246015,-23.985664749831415

4275005_20201_2_0,jana8o4icz,-0.176895613090195,-112.19230430099552,-34.77095023119682

2544559_20201_2_0,jb14cp4icz,-2.377901404060562,-88.40324267189996,-33.48845654375906

2321778_20201_2_0,jcrxpo4icz,-0.7484426001419178,-114.79933253676452,-30.086744232333842

2917192_20201_2_0,jdafso4icz,-0.6065446977074425,-78.88162972254554,-25.423652733398285

1195197_20201_2_0,jddwgp4icz,-2.1549081283683367,-116.04158042067874,-28.660139291248726

4706204_20201_2_0,je4q3p4icz,-0.28046675296237134,-85.414729292028,-49.37888312537514

5624621_20201_2_0,jf58po4icz,-4.592011808833232,-64.89691438834984,-10.627962638644505

3644015_20201_2_0,jfpukn4icz,0.5947164113567576,-101.37268610346942,-31.869070979656698

1270001_20201_2_0,jfvx7o4icz,-3.575274859921928,-115.32096964509287,-27.129970770149313

2568763_20201_2_0,jglh2o4icz,0.06807232233086306,-91.87997197031927,-28.184902572103937

3480993_20201_2_0,jh31ko4icz,-0.008402685451200109,-127.44156312414668,-25.413118549720366

2816276_20201_2_0,jh6p9p4icz,0.6640856173022366,-86.02273600823264,-33.9354789450295

4980259_20201_2_0,jhexpn4icz,-1.5880625171195248,-82.00383592230685,-35.80861691401314

1737383_20201_2_0,jidbun4icz,-0.5944797821074406,-97.51200175909821,-18.530699593888798

5749216_20201_2_0,jikzzo4icz,0.25245656961681184,-105.43005350305594,-21.72462280963282

1883713_20201_2_0,jj4oeo4icz,-2.731853103344852,-160.20535495629608,-46.961501556143475

3295309_20201_2_0,jjbmeo4icz,2.3713858238770267,-102.1374646938836,-50.88254195451381

5969859_20201_2_0,jjvd7p4icz,0.20702820530634827,-142.94766914368319,-35.19099837569753

4851053_20201_2_0,jk6bzo4icz,4.111576152361269,-94.34915600493065,-46.82099061883768

6014177_20201_2_0,jkt8fn4icz,-1.8589574767331856,-137.44316817541778,-37.51378695012775

1458335_20201_2_0,jkyieo4icz,0.5082443001698225,-109.3927417714375,-39.986085247239146

1547155_20201_2_0,jlnwip4icz,-2.838251627439064,-141.88493626704613,-32.75850542769582

4034559_20201_2_0,jn4sep4icz,-0.6497069448949553,-148.58172216492852,-37.038975202164465

4867148_20201_2_0,jn7mun4icz,-1.7224781766087662,-87.4117819031319,-32.746044344864984

3158283_20201_2_0,jnl1nn4icz,-0.5899098925299668,-90.61116408920807,-35.18654469123416

5499013_20201_2_0,jo9tip4icz,1.0976936233282704,-104.10993218659388,-48.83211318399415

3497782_20201_2_0,joh6fn4icz,2.102007601323298,-57.91750663573754,-42.12051562845272

3422813_20201_2_0,jonw6o4icz,2.351052063542702,-186.69606832914968,264.034963344809

5769239_20201_2_0,jp4men4icz,1.276610607184192,-128.48968466567013,-37.42016868661945

4323106_20201_2_0,jpacgp4icz,1.2631770760256058,-73.42824569349773,-37.143778626515555

2018919_20201_2_0,jqr3gn4icz,-0.050990583478284716,-95.62362569610752,-46.942901327858806

5050630_20201_2_0,jrzzwo4icz,-0.9587182496533809,-60.00036305930644,-23.473997978464112

4970526_20201_2_0,im7kln4icz,3.1458579547397325,-139.6264794245591,-37.82206481362566

/users/rhydian/anaconda3/envs/torch_env/lib/python3.7/site-packages/torch/cuda/__init__.py:52: UserWarning: CUDA initialization: Found no NVIDIA driver on your system. Please check that you have an NVIDIA GPU and installed a driver from http://www.nvidia.com/Download/index.aspx (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729006826/work/c10/cuda/CUDAFunctions.cpp:100.)
  return torch._C._cuda_getDeviceCount() > 0
  0%|          | 0/101 [00:00<?, ?it/s]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 1/101 [00:02<04:51,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 2/101 [00:06<04:58,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 3/101 [00:09<04:51,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/101 [00:12<04:57,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▍         | 5/101 [00:14<04:42,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 6/101 [00:18<04:42,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 7/101 [00:20<04:36,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 8/101 [00:23<04:24,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 9/101 [00:26<04:31,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|▉         | 10/101 [00:29<04:26,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 11/101 [00:32<04:16,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 12/101 [00:34<04:09,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 13/101 [00:37<04:06,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 14/101 [00:40<04:01,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▍        | 15/101 [00:43<04:02,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 16/101 [00:46<04:01,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 17/101 [00:48<03:54,  2.79s/it] 18%|█▊        | 18/101 [00:51<03:50,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 19/101 [00:54<03:46,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|█▉        | 20/101 [00:57<03:53,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 21/101 [01:00<03:51,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 22/101 [01:03<03:40,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 23/101 [01:05<03:37,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 24/101 [01:08<03:35,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▍       | 25/101 [01:11<03:32,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 26/101 [01:14<03:30,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 27/101 [01:17<03:35,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 28/101 [01:20<03:32,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▊       | 29/101 [01:33<07:01,  5.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|██▉       | 30/101 [01:36<05:57,  5.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 31/101 [01:38<05:01,  4.31s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 32/101 [01:41<04:26,  3.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 33/101 [01:45<04:15,  3.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▎      | 34/101 [01:47<03:52,  3.47s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▍      | 35/101 [01:50<03:34,  3.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 36/101 [01:53<03:21,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 37/101 [01:56<03:08,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 38/101 [01:59<03:06,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▊      | 39/101 [02:03<03:30,  3.39s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|███▉      | 40/101 [02:06<03:13,  3.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 41/101 [02:08<03:00,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 42/101 [02:11<02:56,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 43/101 [02:14<02:47,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▎     | 44/101 [02:17<02:44,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▍     | 45/101 [02:22<03:27,  3.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 46/101 [02:26<03:22,  3.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 47/101 [02:29<03:02,  3.38s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 48/101 [02:32<02:59,  3.39s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▊     | 49/101 [02:35<02:44,  3.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|████▉     | 50/101 [02:37<02:32,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 51/101 [02:40<02:26,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████▏    | 52/101 [02:43<02:24,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 53/101 [02:46<02:19,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 54/101 [02:49<02:27,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 55/101 [02:53<02:24,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▌    | 56/101 [02:56<02:21,  3.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▋    | 57/101 [02:59<02:14,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 58/101 [03:03<02:31,  3.52s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 59/101 [03:06<02:17,  3.28s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 60/101 [03:09<02:11,  3.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|██████    | 61/101 [03:16<02:50,  4.27s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████▏   | 62/101 [03:19<02:37,  4.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 63/101 [03:22<02:19,  3.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 64/101 [03:25<02:04,  3.36s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 65/101 [03:27<01:52,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▌   | 66/101 [03:30<01:46,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▋   | 67/101 [03:33<01:42,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 68/101 [03:36<01:38,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 69/101 [03:39<01:35,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 70/101 [03:42<01:30,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|███████   | 71/101 [03:45<01:26,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████▏  | 72/101 [03:47<01:21,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 73/101 [03:50<01:17,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 74/101 [03:53<01:13,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 75/101 [03:55<01:11,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▌  | 76/101 [03:58<01:08,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 77/101 [04:01<01:03,  2.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 78/101 [04:03<01:01,  2.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 79/101 [04:06<00:59,  2.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 80/101 [04:08<00:55,  2.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 81/101 [04:11<00:53,  2.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 82/101 [04:14<00:50,  2.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 83/101 [04:16<00:47,  2.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 84/101 [04:19<00:44,  2.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 85/101 [04:22<00:42,  2.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▌ | 86/101 [04:25<00:40,  2.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 87/101 [04:28<00:42,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 88/101 [04:31<00:37,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 89/101 [04:33<00:33,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 90/101 [04:36<00:29,  2.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 91/101 [04:39<00:28,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 92/101 [04:42<00:25,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 93/101 [04:45<00:22,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 94/101 [04:48<00:20,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 95/101 [04:51<00:17,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▌| 96/101 [04:54<00:14,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 97/101 [04:57<00:11,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 98/101 [04:59<00:08,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 99/101 [05:02<00:05,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 100/101 [05:05<00:02,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|██████████| 101/101 [05:09<00:00,  3.32s/it]100%|██████████| 101/101 [05:09<00:00,  3.07s/it]
Trying to load from /users/rhydian/self-supervised-project/model_weights/SSECEncodersBothBoth
==> Resuming model trained for 106 epochs...
Trying to load from ../model_weights/angle_regressor4
==> Resuming model trained for 7 epochs...
4309708_20201_2_0,i7p9nn4icz,-1.075571320766446,-154.93593351402808,-27.629262611831706

6004959_20201_2_0,i7sv3o4icz,1.4801700486758074,-80.63247194923738,-41.74629894114574

5299820_20201_2_0,i95lyn4icz,2.447990356311139,-111.00613022690357,-70.12751892374871

3704999_20201_2_0,i9x4xn4icz,0.913215905548644,-84.5079206014509,-27.19078079701852

5653517_20201_2_0,ia0pvn4icz,0.9937889742774939,-122.62244624895592,-45.32232775388755

3281222_20201_2_0,iacdgo4icz,-0.9031817864674481,-46.178821797448194,-44.56252386675722

4913496_20201_2_0,iaegun4icz,-0.6079368049383584,-92.90046952848255,-30.04397531284539

2718107_20201_2_0,ialb5p4icz,0.7192953405104107,-108.34808509465705,-44.153499821049664

1960213_20201_2_0,avavmo4icz,1.8847484265175742,-69.87103144716272,-44.57341288400474

5319611_20201_2_0,ib9fyn4icz,-0.3212538818754701,-61.3327605578755,-40.97177586879968

5119498_20201_2_0,ibgz5p4icz,-7.7714492878344705,-101.20404734070092,-3.2320305140305834

2934761_20201_2_0,ic9jpo4icz,1.1683495061181037,-113.79069891461538,-50.430943150579125

2863204_20201_2_0,id3lmn4icz,2.6160654894327457,-95.99897173630058,-66.40949105748186

2412620_20201_2_0,idaeip4icz,1.0025095987071702,-89.46619253461418,-44.82234617387623

5821536_20201_2_0,idey5p4icz,-0.7205666354504326,-95.56086875507816,-20.57022390007053

3178021_20201_2_0,ih5e8n4icz,-2.6995154040163607,-103.16244088210664,-8.859231997315277

2879858_20201_2_0,ihacdp4icz,-8.59465792925538,-119.20391758970894,6.04610726399369

5912055_20201_2_0,iim07p4icz,-49.292207021637175,143.98890325016623,414.9764221252816

1564584_20201_2_0,ij8cfn4icz,-0.3112723864921536,-130.40282510738632,-34.194671043425004

5820907_20201_2_0,at28go4icz,-1.6121474919218568,-82.34062289906853,-16.006216897286734

1900492_20201_2_0,iko4po4icz,-0.9234238245010219,-121.56620318418518,-28.60747529200222

3830781_20201_2_0,il0hpn4icz,-1.9671059850543668,-92.11489857103021,-16.14350169901178

3274657_20201_2_0,il2s3p4icz,-3.648787107322644,-93.77294184231539,-13.362498074532624

1022494_20201_2_0,il6bco4icz,-1.3205728338770673,-111.12525521105468,-8.2710556220066

3052497_20201_2_0,illmrn4icz,-4.988983672200745,-60.95616842595447,-17.73056207606092

2734203_20201_2_0,im1t2p4icz,0.5487182253396322,-77.4417845793673,-37.90343735859719

2159608_20201_2_0,0nindp4icz,0.2670311648320894,-80.73184940225147,-57.232157307799284

2991390_20201_2_0,in93cn4icz,1.710484986925898,-66.86809461879216,-33.28587652331626

4964974_20201_2_0,innolo4icz,0.4507920458536454,-84.03826014453449,-41.356723653082355

2248929_20201_2_0,io86yo4icz,0.8485914563916596,-58.757135308668154,-46.81803377586246

4285528_20201_2_0,ip5iqn4icz,-3.1372226380262416,-116.50833391901955,-31.694875205846728

1919977_20201_2_0,iqqmgp4icz,0.7067547349021531,-96.61453284068148,-53.88101660434664

5119498_20201_2_0,ibgz5p4icz,-7.7714492878344705,-101.20404734070092,-3.2320305140305834

5091453_20201_2_0,is485p4icz,0.4264328654662828,-74.87408201502862,-32.16665723828518

1206985_20201_2_0,istxhp4icz,19.881331031251488,-89.91611348609635,-154.08023453462096

5040335_20201_2_0,isv2tn4icz,1.205942759084717,-101.37971627295005,-51.64024474146066

2143590_20201_2_0,it8aip4icz,1.7816955758532638,-77.170123988153,-53.586308222025195

3183494_20201_2_0,itb0co4icz,0.8361264658417026,-69.58131811055122,-35.969294632879155

4023983_20201_2_0,iv1hhp4icz,0.33280698831199057,-75.8737182582326,-28.62381617908781

4201888_20201_2_0,iv71kp4icz,-0.035489594477899275,-97.68935911561897,-46.29631022047282

1505000_20201_2_0,iv8qnn4icz,-1.5578987084672637,-120.98169689024391,-28.09252730585996

2751139_20201_2_0,ivfijn4icz,-2.402482360694847,-106.25150417330545,-35.365080317561535

4832397_20201_2_0,ivjrhp4icz,-1.21611869713597,-58.894755673720056,-26.054058283693365

3511954_20201_2_0,ivnybp4icz,0.8008763285678449,-122.9998997366985,-31.39260753770334

2713402_20201_2_0,ivv0yo4icz,4.913491597615193,-104.72673426722318,-44.75191090859161

5072993_20201_2_0,iwgdep4icz,-1.4931637342992845,-116.78355623841384,-34.00692775767354

3431820_20201_2_0,iyvgwn4icz,-2.6694228954809933,-90.64222291438529,-16.955271990399595

3483991_20201_2_0,izbuwn4icz,2.7547916620662485,-91.58078891510615,-60.44992315648268

4748270_20201_2_0,izpd2o4icz,5.615304859798542,-59.407741716449436,-83.64821269847747

4162966_20201_2_0,izs42p4icz,-1.2956520628061194,-85.75616623587248,-36.483645524624066

1336647_20201_2_0,j03fpn4icz,-0.04160032631804345,-109.14356687734701,-28.51411918925352

3599951_20201_2_0,j0sd9p4icz,3.048405145616025,-94.07016596400558,-55.24927299012941

5029842_20201_2_0,j12pyo4icz,-4.456794106211114,-132.98690395594826,-22.1452665357111

1677322_20201_2_0,j1hu9p4icz,0.051959547721941356,-134.37804540447846,-33.226334854707645

5361120_20201_2_0,j2acvo4icz,5.100267879446829,-89.65516301170396,-49.85451070406283

1733111_20201_2_0,j35lmn4icz,-2.2285955672212028,-147.3419025894455,-21.91016711382312

1553695_20201_2_0,j5ei3o4icz,-3.551047574770822,-83.25179577649234,-19.860274517780383

3994675_20201_2_0,0rvxyo4icz,3.297455389806498,-76.72844435377522,-67.23160150100568

1758163_20201_2_0,j6vxjp4icz,-4.763531407898828,-74.23903463380657,-4.876203378107675

5818954_20201_2_0,j724hp4icz,3.2328982779721214,-77.8094068968947,-57.22517167628128

3670501_20201_2_0,j7datn4icz,4.380261502211935,-102.91734798096363,-71.24272830443894

1793907_20201_2_0,j80suo4icz,1.053392987971471,-122.74035744281156,-55.34516129085762

4062393_20201_2_0,j9137p4icz,-0.44382635843491525,-88.4792073232808,-30.814051524916707

5678535_20201_2_0,jaz29p4icz,0.20544553550375577,-101.35582439208326,-49.89551907215866

2272532_20201_2_0,jb138o4icz,-1.7656649059279461,-115.59575847066478,-35.24087702260155

1618705_20201_2_0,jbo6mo4icz,-4.292925867712919,-110.67427689489642,-16.968792615081185

1744037_20201_2_0,jc298o4icz,2.78167564742874,-86.94140448593294,-65.48753235883052

3748240_20201_2_0,jcctqn4icz,-3.1952368036042027,-119.29317039600036,-17.24423021501312

2857124_20201_2_0,jdydio4icz,1.7638040502182477,-82.71523906752248,-40.63856447015516

1169338_20201_2_0,jemven4icz,-0.22873470143677196,-111.5765012532348,-23.853010837651993

1511910_20201_2_0,jeogjn4icz,0.5850427699217474,-93.112637193848,-25.91552961130911

5393685_20201_2_0,jf05qo4icz,2.1976275448720712,-55.613473629250706,-34.91666994879114

2234960_20201_2_0,jfe9lo4icz,-0.028223872361193413,-86.10672832600531,-17.322053942490285

5380945_20201_2_0,jfnxzo4icz,-1.963971002718079,-55.421520087295136,-30.88391394067402

1957550_20201_2_0,jhd8xn4icz,-0.2889780627143092,-88.38750243231169,-40.74275887575094

2139624_20201_2_0,jhjmjp4icz,-2.4712436983881747,-119.53950279007952,-47.44139039587034

1735255_20201_2_0,jjca6o4icz,-0.034696834474582314,-95.74385982130659,-49.77244605566075

2037487_20201_2_0,jk26ep4icz,0.16758917069608525,-122.87605060196222,-47.17518512514695

5620860_20201_2_0,jkp6mo4icz,-2.1965753381281767,-83.43943670827747,-31.88813405308659

4369829_20201_2_0,jnp9rn4icz,0.3734452311609662,-113.4146277755124,-36.07849321375605

4950036_20201_2_0,jomg4p4icz,1.6482671649441425,-65.7571311654041,-40.51401303757247

5879103_20201_2_0,jonh9o4icz,-4.770012015216545,-58.981995783114,-15.906960394721636

5398752_20201_2_0,jposbp4icz,-1.4066116029646827,-88.3582446833183,-30.79102606595444

4066400_20201_2_0,jq027o4icz,-0.849450069830934,-95.54059957523589,-29.851169057610917

2976676_20201_2_0,jqn1xn4icz,-1.7597406906440711,-113.33260767334602,-23.536560494758845

1838969_20201_2_0,0h7jcp4icz,-1.3746341223407363,-76.36121542255677,-23.985010842024565

5457448_20201_2_0,uq38yo4icz,-1.1271012252974904,-103.61659483937976,-25.986385518498736

3464684_20201_2_0,jrjpho4icz,-0.1868643497511648,-98.64691684074239,-16.956546940539113

4451171_20201_2_0,jrpk5p4icz,1.1577381442876193,-120.63072061991812,-41.91505153741913

4290617_20201_2_0,jrz1un4icz,5.283046101176185,-73.01518509063442,-67.85773812787113

1606542_20201_2_0,jrzmno4icz,0.0016392638079366837,-122.77618282508035,-26.765788800097667

2786447_20201_2_0,js40wo4icz,-1.5706003746732529,-133.23991782178732,-10.513062238259735

2357266_20201_2_0,jsqv8p4icz,3.4095748965357986,-82.36657210125887,-64.1108945927951

3135997_20201_2_0,jszufn4icz,2.597115532407026,-76.27536155847395,-53.32003960057445

5501130_20201_2_0,0a2buo4icz,0.3034614434557393,-95.32723289122129,-35.17876597134446

4222077_20201_2_0,jxgybp4icz,-2.5644058537183154,-73.24304235709164,-17.94810993771263

3265213_20201_2_0,jxh36o4icz,-1.7195460997511134,-106.1383098462035,-39.02230104365063

4154586_20201_2_0,jy6akn4icz,-0.5742389105203141,-90.38212348931424,-44.4237493977094

1853884_20201_2_0,jyzjsn4icz,7.4043762315458626,-54.66456469219267,-72.53491531641367

1829906_20201_2_0,jzrorn4icz,-2.125585524561788,-101.98532354917086,-33.16882020384254

1482923_20201_2_0,w2zwho4icz,-0.8294605997627292,-64.03684230484467,-22.953632343033306

