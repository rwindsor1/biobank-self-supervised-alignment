17 th decile
.85
.90
/users/rhydian/anaconda3/envs/torch_env/lib/python3.7/site-packages/torch/cuda/__init__.py:52: UserWarning: CUDA initialization: Found no NVIDIA driver on your system. Please check that you have an NVIDIA GPU and installed a driver from http://www.nvidia.com/Download/index.aspx (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729006826/work/c10/cuda/CUDAFunctions.cpp:100.)
  return torch._C._cuda_getDeviceCount() > 0
  0%|          | 0/810 [00:00<?, ?it/s]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  0%|          | 1/810 [00:01<23:08,  1.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  0%|          | 2/810 [00:03<21:27,  1.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  0%|          | 3/810 [00:04<19:37,  1.46s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  0%|          | 4/810 [00:05<18:55,  1.41s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 5/810 [00:06<18:47,  1.40s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 6/810 [00:07<17:35,  1.31s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 7/810 [00:09<18:01,  1.35s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 8/810 [00:10<17:56,  1.34s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 9/810 [00:11<17:38,  1.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 10/810 [00:13<19:09,  1.44s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|▏         | 11/810 [00:15<18:42,  1.40s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|▏         | 12/810 [00:16<18:54,  1.42s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 13/810 [00:19<24:13,  1.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 14/810 [00:20<22:35,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 15/810 [00:21<20:58,  1.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 16/810 [00:24<24:24,  1.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 17/810 [00:25<22:13,  1.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 18/810 [00:27<20:51,  1.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 19/810 [00:28<19:45,  1.50s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 20/810 [00:29<18:49,  1.43s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 21/810 [00:31<21:49,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 22/810 [00:33<20:45,  1.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 23/810 [00:34<20:00,  1.53s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 24/810 [00:35<19:13,  1.47s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 25/810 [00:37<19:32,  1.49s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 26/810 [00:39<20:37,  1.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 27/810 [00:40<20:48,  1.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 28/810 [00:42<19:30,  1.50s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▎         | 29/810 [00:44<21:53,  1.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▎         | 30/810 [00:45<20:59,  1.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 31/810 [00:47<20:03,  1.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 32/810 [00:49<22:48,  1.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 33/810 [00:50<20:24,  1.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 34/810 [00:51<18:35,  1.44s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 35/810 [00:52<18:06,  1.40s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 36/810 [00:54<18:03,  1.40s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▍         | 37/810 [00:56<22:04,  1.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▍         | 38/810 [01:01<33:59,  2.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▍         | 39/810 [01:03<32:44,  2.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▍         | 40/810 [01:05<28:34,  2.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▌         | 41/810 [01:06<25:23,  1.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▌         | 42/810 [01:08<22:54,  1.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▌         | 43/810 [01:09<21:32,  1.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▌         | 44/810 [01:10<20:04,  1.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 45/810 [01:12<18:48,  1.48s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 46/810 [01:13<17:53,  1.40s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 47/810 [01:15<18:39,  1.47s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 48/810 [01:16<18:08,  1.43s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 49/810 [01:18<22:26,  1.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 50/810 [01:20<20:58,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▋         | 51/810 [01:21<19:41,  1.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▋         | 52/810 [01:23<19:39,  1.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 53/810 [01:24<19:25,  1.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 54/810 [01:27<25:34,  2.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 55/810 [01:29<22:58,  1.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 56/810 [01:30<20:52,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 57/810 [01:32<20:42,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 58/810 [01:33<19:10,  1.53s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 59/810 [01:34<17:45,  1.42s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 60/810 [01:35<17:44,  1.42s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 61/810 [01:37<17:23,  1.39s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 62/810 [01:39<19:25,  1.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 63/810 [01:40<19:27,  1.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 64/810 [01:42<19:08,  1.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 65/810 [01:43<18:24,  1.48s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 66/810 [01:45<17:59,  1.45s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 67/810 [01:46<17:44,  1.43s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 68/810 [01:47<17:23,  1.41s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▊         | 69/810 [01:49<16:48,  1.36s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▊         | 70/810 [01:50<16:48,  1.36s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 71/810 [01:51<16:19,  1.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 72/810 [01:53<16:35,  1.35s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 73/810 [01:54<16:19,  1.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 74/810 [01:55<16:13,  1.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 75/810 [01:56<16:07,  1.32s/it]  9%|▉         | 76/810 [01:59<19:19,  1.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|▉         | 77/810 [02:00<18:17,  1.50s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|▉         | 78/810 [02:01<17:42,  1.45s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|▉         | 79/810 [02:04<21:43,  1.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|▉         | 80/810 [02:05<19:43,  1.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|█         | 81/810 [02:06<18:34,  1.53s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|█         | 82/810 [02:08<18:13,  1.50s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|█         | 83/810 [02:09<17:26,  1.44s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|█         | 84/810 [02:10<16:53,  1.40s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|█         | 85/810 [02:12<16:20,  1.35s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 86/810 [02:13<15:50,  1.31s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 87/810 [02:14<15:31,  1.29s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 88/810 [02:16<16:10,  1.34s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 89/810 [02:17<16:12,  1.35s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 90/810 [02:18<16:14,  1.35s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 91/810 [02:20<16:17,  1.36s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█▏        | 92/810 [02:21<16:49,  1.41s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█▏        | 93/810 [02:23<19:03,  1.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 94/810 [02:25<18:37,  1.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 95/810 [02:26<17:41,  1.49s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 96/810 [02:28<20:12,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 97/810 [02:30<18:55,  1.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 98/810 [02:31<17:28,  1.47s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 99/810 [02:32<17:05,  1.44s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 100/810 [02:33<15:53,  1.34s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 101/810 [02:35<15:59,  1.35s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 102/810 [02:36<16:10,  1.37s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 103/810 [02:37<15:35,  1.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 104/810 [02:39<15:56,  1.35s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 105/810 [02:40<15:18,  1.30s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 106/810 [02:41<16:18,  1.39s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 107/810 [02:43<16:37,  1.42s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 108/810 [02:44<16:17,  1.39s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 109/810 [02:46<16:32,  1.42s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▎        | 110/810 [02:47<16:05,  1.38s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▎        | 111/810 [02:48<16:10,  1.39s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 112/810 [02:50<16:13,  1.39s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 113/810 [02:51<15:26,  1.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 114/810 [02:52<15:38,  1.35s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 115/810 [02:54<15:09,  1.31s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 116/810 [02:55<15:16,  1.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 117/810 [02:56<15:11,  1.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▍        | 118/810 [02:58<15:00,  1.30s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▍        | 119/810 [02:59<14:40,  1.27s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▍        | 120/810 [03:00<15:19,  1.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▍        | 121/810 [03:01<14:48,  1.29s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▌        | 122/810 [03:03<14:48,  1.29s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▌        | 123/810 [03:04<15:12,  1.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▌        | 124/810 [03:06<15:22,  1.35s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▌        | 125/810 [03:07<15:16,  1.34s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 126/810 [03:08<15:15,  1.34s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 127/810 [03:10<16:48,  1.48s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 128/810 [03:11<16:30,  1.45s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 129/810 [03:13<18:42,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 130/810 [03:15<17:42,  1.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 131/810 [03:16<16:23,  1.45s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▋        | 132/810 [03:19<20:04,  1.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▋        | 133/810 [03:20<19:36,  1.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 134/810 [03:22<19:49,  1.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 135/810 [03:23<18:17,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 136/810 [03:25<17:15,  1.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 137/810 [03:26<17:49,  1.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 138/810 [03:28<17:33,  1.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 139/810 [03:29<16:43,  1.50s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 140/810 [03:31<16:00,  1.43s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 141/810 [03:32<16:34,  1.49s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 142/810 [03:33<16:02,  1.44s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 143/810 [03:35<15:36,  1.40s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 144/810 [03:36<15:23,  1.39s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 145/810 [03:37<14:56,  1.35s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 146/810 [03:39<14:28,  1.31s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 147/810 [03:40<14:38,  1.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 148/810 [03:41<14:36,  1.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 149/810 [03:43<14:37,  1.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▊        | 150/810 [03:44<14:41,  1.34s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▊        | 151/810 [03:45<15:09,  1.38s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 152/810 [03:47<14:55,  1.36s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 153/810 [03:48<15:47,  1.44s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 154/810 [03:50<15:35,  1.43s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 155/810 [03:51<15:21,  1.41s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 156/810 [03:53<15:46,  1.45s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 157/810 [03:54<16:41,  1.53s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|█▉        | 158/810 [03:56<16:35,  1.53s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|█▉        | 159/810 [03:58<16:50,  1.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|█▉        | 160/810 [03:59<16:52,  1.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|█▉        | 161/810 [04:01<16:17,  1.51s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|██        | 162/810 [04:02<16:45,  1.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|██        | 163/810 [04:03<15:48,  1.47s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|██        | 164/810 [04:05<16:48,  1.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|██        | 165/810 [04:07<15:54,  1.48s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|██        | 166/810 [04:08<16:14,  1.51s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 167/810 [04:10<18:59,  1.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 168/810 [04:12<18:02,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 169/810 [04:13<17:10,  1.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 170/810 [04:15<17:05,  1.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 171/810 [04:16<16:18,  1.53s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 172/810 [04:18<16:07,  1.52s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██▏       | 173/810 [04:19<16:18,  1.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██▏       | 174/810 [04:21<16:37,  1.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 175/810 [04:23<16:28,  1.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 176/810 [04:24<16:03,  1.52s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 177/810 [04:26<16:09,  1.53s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 178/810 [04:27<17:06,  1.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 179/810 [04:29<17:48,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 180/810 [04:31<17:11,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 181/810 [04:33<17:48,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 182/810 [04:34<17:34,  1.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 183/810 [04:36<17:10,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 184/810 [04:38<17:27,  1.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 185/810 [04:39<16:48,  1.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 186/810 [04:40<16:15,  1.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 187/810 [04:42<16:13,  1.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 188/810 [04:44<16:34,  1.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 189/810 [04:45<16:09,  1.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 190/810 [04:47<16:20,  1.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▎       | 191/810 [04:48<16:06,  1.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▎       | 192/810 [04:50<17:55,  1.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 193/810 [04:53<18:44,  1.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 194/810 [04:54<17:32,  1.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 195/810 [04:56<17:50,  1.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 196/810 [04:57<17:35,  1.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 197/810 [04:59<16:39,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 198/810 [05:00<16:35,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▍       | 199/810 [05:02<16:06,  1.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▍       | 200/810 [05:04<16:25,  1.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▍       | 201/810 [05:05<15:53,  1.56s/it] 25%|██▍       | 202/810 [05:06<15:15,  1.51s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▌       | 203/810 [05:08<15:59,  1.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▌       | 204/810 [05:10<15:31,  1.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▌       | 205/810 [05:12<18:15,  1.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▌       | 206/810 [05:14<17:13,  1.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 207/810 [05:15<17:33,  1.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 208/810 [05:17<16:38,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 209/810 [05:18<16:11,  1.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 210/810 [05:20<16:33,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 211/810 [05:22<16:21,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 212/810 [05:23<16:03,  1.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▋       | 213/810 [05:27<22:05,  2.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▋       | 214/810 [05:28<19:25,  1.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 215/810 [05:30<17:57,  1.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 216/810 [05:31<17:21,  1.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 217/810 [05:33<17:09,  1.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 218/810 [05:35<16:52,  1.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 219/810 [05:36<16:26,  1.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 220/810 [05:38<16:38,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 221/810 [05:40<18:22,  1.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 222/810 [05:42<17:17,  1.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 223/810 [05:44<17:09,  1.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 224/810 [05:45<16:36,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 225/810 [05:47<16:01,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 226/810 [05:50<21:39,  2.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 227/810 [05:52<19:42,  2.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 228/810 [05:53<18:21,  1.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 229/810 [05:55<16:42,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 230/810 [05:56<16:19,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▊       | 231/810 [05:58<16:55,  1.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▊       | 232/810 [06:00<16:43,  1.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 233/810 [06:02<16:47,  1.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 234/810 [06:03<16:08,  1.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 235/810 [06:05<16:01,  1.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 236/810 [06:08<19:04,  1.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 237/810 [06:09<17:54,  1.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 238/810 [06:11<17:13,  1.81s/it] 30%|██▉       | 239/810 [06:12<16:32,  1.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|██▉       | 240/810 [06:14<15:47,  1.66s/it] 30%|██▉       | 241/810 [06:15<15:28,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|██▉       | 242/810 [06:17<15:14,  1.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|███       | 243/810 [06:19<17:25,  1.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|███       | 244/810 [06:21<16:02,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|███       | 245/810 [06:22<15:29,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|███       | 246/810 [06:24<14:46,  1.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|███       | 247/810 [06:25<14:35,  1.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 248/810 [06:27<14:24,  1.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 249/810 [06:28<14:41,  1.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 250/810 [06:30<14:45,  1.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 251/810 [06:31<14:12,  1.52s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 252/810 [06:33<13:56,  1.50s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 253/810 [06:34<13:56,  1.50s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███▏      | 254/810 [06:36<14:19,  1.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███▏      | 255/810 [06:38<15:04,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 256/810 [06:40<15:22,  1.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 257/810 [06:41<15:21,  1.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 258/810 [06:43<15:18,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 259/810 [06:44<14:40,  1.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 260/810 [06:46<14:21,  1.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 261/810 [06:47<14:30,  1.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 262/810 [06:49<14:30,  1.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 263/810 [06:51<14:10,  1.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 264/810 [06:52<14:17,  1.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 265/810 [06:54<14:58,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 266/810 [06:55<14:37,  1.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 267/810 [06:57<15:08,  1.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 268/810 [06:59<14:31,  1.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 269/810 [07:08<34:30,  3.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 270/810 [07:09<28:12,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 271/810 [07:11<23:49,  2.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▎      | 272/810 [07:13<23:39,  2.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▎      | 273/810 [07:15<20:37,  2.31s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 274/810 [07:17<18:49,  2.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 275/810 [07:18<17:36,  1.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 276/810 [07:21<18:26,  2.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 277/810 [07:22<17:36,  1.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 278/810 [07:24<16:53,  1.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 279/810 [07:26<16:19,  1.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▍      | 280/810 [07:27<15:14,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▍      | 281/810 [07:29<15:13,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▍      | 282/810 [07:31<15:05,  1.72s/it] 35%|███▍      | 283/810 [07:32<14:33,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▌      | 284/810 [07:34<14:03,  1.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▌      | 285/810 [07:35<13:56,  1.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▌      | 286/810 [07:37<13:32,  1.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▌      | 287/810 [07:38<13:10,  1.51s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 288/810 [07:39<12:52,  1.48s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 289/810 [07:41<13:08,  1.51s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 290/810 [07:42<12:49,  1.48s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 291/810 [07:44<13:02,  1.51s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 292/810 [07:46<13:08,  1.52s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 293/810 [07:47<12:47,  1.48s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▋      | 294/810 [07:49<13:38,  1.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▋      | 295/810 [07:51<14:20,  1.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 296/810 [07:53<15:15,  1.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 297/810 [07:54<14:31,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 298/810 [07:57<17:21,  2.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 299/810 [07:59<15:59,  1.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 300/810 [08:00<15:11,  1.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 301/810 [08:02<15:05,  1.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 302/810 [08:03<14:23,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 303/810 [08:05<14:25,  1.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 304/810 [08:07<15:43,  1.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 305/810 [08:09<15:17,  1.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 306/810 [08:11<14:57,  1.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 307/810 [08:12<13:56,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 308/810 [08:14<14:47,  1.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 309/810 [08:16<13:59,  1.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 310/810 [08:17<13:28,  1.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 311/810 [08:19<13:15,  1.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▊      | 312/810 [08:20<13:00,  1.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▊      | 313/810 [08:22<12:57,  1.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 314/810 [08:23<12:50,  1.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 315/810 [08:25<12:31,  1.52s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 316/810 [08:26<13:11,  1.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 317/810 [08:28<13:23,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 318/810 [08:30<12:45,  1.56s/it] 39%|███▉      | 319/810 [08:31<13:01,  1.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|███▉      | 320/810 [08:33<12:46,  1.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|███▉      | 321/810 [08:34<12:29,  1.53s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|███▉      | 322/810 [08:36<12:13,  1.50s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|███▉      | 323/810 [08:38<13:58,  1.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|████      | 324/810 [08:39<12:55,  1.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|████      | 325/810 [08:41<13:11,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|████      | 326/810 [08:43<15:36,  1.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|████      | 327/810 [08:47<20:05,  2.50s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|████      | 328/810 [08:49<17:53,  2.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 329/810 [08:50<15:56,  1.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 330/810 [08:52<15:01,  1.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 331/810 [08:54<14:23,  1.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 332/810 [08:55<13:53,  1.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 333/810 [08:57<13:24,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 334/810 [08:59<14:55,  1.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████▏     | 335/810 [09:01<14:23,  1.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████▏     | 336/810 [09:02<13:56,  1.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 337/810 [09:04<13:34,  1.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 338/810 [09:06<13:03,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 339/810 [09:07<12:55,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 340/810 [09:09<12:16,  1.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 341/810 [09:10<11:38,  1.49s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 342/810 [09:11<11:54,  1.53s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 343/810 [09:14<15:06,  1.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 344/810 [09:16<14:39,  1.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 345/810 [09:18<14:35,  1.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 346/810 [09:24<24:04,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 347/810 [09:26<21:58,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 348/810 [09:28<19:06,  2.48s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 349/810 [09:29<16:51,  2.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 350/810 [09:31<15:29,  2.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 351/810 [09:33<14:39,  1.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 352/810 [09:34<14:20,  1.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▎     | 353/810 [09:36<13:22,  1.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▎     | 354/810 [09:37<12:46,  1.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 355/810 [09:39<13:14,  1.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 356/810 [09:41<12:50,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 357/810 [09:43<12:39,  1.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 358/810 [09:44<12:09,  1.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 359/810 [09:46<12:14,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 360/810 [09:47<12:24,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▍     | 361/810 [09:49<12:18,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▍     | 362/810 [09:51<12:25,  1.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▍     | 363/810 [09:53<12:52,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▍     | 364/810 [09:54<12:48,  1.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▌     | 365/810 [09:56<12:20,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▌     | 366/810 [09:58<12:27,  1.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▌     | 367/810 [09:59<12:01,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▌     | 368/810 [10:02<14:22,  1.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 369/810 [10:03<13:52,  1.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 370/810 [10:06<14:10,  1.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 371/810 [10:08<14:47,  2.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 372/810 [10:10<14:14,  1.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Trying to load from /users/rhydian/self-supervised-project/model_weights/SSECEncodersBothBoth
==> Resuming model trained for 106 epochs...
Trying to load from ../model_weights/angle_regressor4
==> Resuming model trained for 7 epochs...
4248449_20201_2_0,uqf3ao4icz,-3.9651947668398453,-129.59965232627485,-5.892490242729551

4721446_20201_2_0,uqff7o4icz,5.92783636382632,-60.633852138271095,-61.98050719048061

3257218_20201_2_0,uqgw7p4icz,1.3550326583861276,-75.2716369248214,-42.54674643055051

5343063_20201_2_0,uqht3o4icz,0.7162617583106123,-71.60357076964024,-35.68904829259709

1198708_20201_2_0,uqhxhp4icz,1.8182429790843135,-97.10510928182418,-54.27300087263289

2693288_20201_2_0,uqk4tn4icz,-0.010062421735333293,-134.61125734634948,-31.639491697789325

2817818_20201_2_0,uqkojp4icz,0.3384189964551398,-83.06375992183524,-38.14454198597144

4283405_20201_2_0,uqothp4icz,1.1533207245087664,-100.5379925526087,-51.60930494935883

5662261_20201_2_0,uqrqgp4icz,0.49722456681254873,-155.70524278463648,-29.450857616298336

5715003_20201_2_0,uqtpdp4icz,-3.5058420240120864,-78.82727714673175,-16.047064146046964

2977124_20201_2_0,uqwloo4icz,-0.12994475509985112,-106.42967462456576,-58.363377855204675

5634270_20201_2_0,ur0boo4icz,2.6231530039932207,-66.13213021027636,-65.90299038543483

4925052_20201_2_0,ur3atn4icz,0.4209196312288593,-117.7895688147226,-45.49748479862302

5798659_20201_2_0,urc40p4icz,0.5371608599423662,-87.65324333706667,-51.312405166771825

1333887_20201_2_0,urepxn4icz,0.3336083918881751,-89.35972943097573,-27.02476130068328

2122444_20201_2_0,urfw7p4icz,-1.3164080082810459,-79.64205431934889,-34.48465525634899

2849909_20201_2_0,urilko4icz,2.0941028435614957,-81.80935407928308,-46.09701496152961

1648938_20201_2_0,uriwvo4icz,1.4583776199231289,-79.52485817693571,-31.607526750935293

1959278_20201_2_0,urt8ip4icz,-6.454954345229004,-82.61542605617618,3.4111334831992792

6020807_20201_2_0,urtj9p4icz,1.1515735976068124,-56.3511154622698,-46.99132982430616

2683463_20201_2_0,uru05p4icz,-0.5011959593206413,-100.47241403495369,-32.522298310955634

2599918_20201_2_0,urwpzo4icz,1.4709082416559203,-82.04634551396887,-46.86419973033928

5033418_20201_2_0,us119p4icz,-1.3428805431348323,-105.31436288589245,-47.248758696137486

3118034_20201_2_0,us1j7o4icz,-1.979277804033259,-130.52169517959436,-17.979316618670765

5070530_20201_2_0,us447p4icz,0.3547805101462722,-92.66083283536565,-29.170672492893672

2076758_20201_2_0,us4spn4icz,-2.619319047854551,-128.79064122180037,-7.218990339089373

3276285_20201_2_0,us5aro4icz,-0.537186963669666,-141.37954786740863,-32.75764624765374

3374511_20201_2_0,us6ywo4icz,0.4471219593624746,-125.10500613375595,-66.3486537167973

1434801_20201_2_0,us9wrn4icz,3.606272509657121,-106.44694488709692,-43.637619910257825

5264033_20201_2_0,usc21p4icz,-2.209476982453492,-122.02748944911673,-31.345035276476096

4614865_20201_2_0,usivjo4icz,-0.9144897485674629,-62.41446946903329,-34.79559617297342

2214985_20201_2_0,usl0lo4icz,-0.11069782773338988,-68.99954744708361,-46.64246136804158

2457625_20201_2_0,uslsbn4icz,-0.8871845830374497,-99.77410296753087,-21.276651478803657

5789828_20201_2_0,usr5ao4icz,-1.7632781638733348,-121.44317303350547,-32.23582975363459

4395448_20201_2_0,uszz9p4icz,0.4823377797884535,-94.74696287049738,-38.6087117842245

5242554_20201_2_0,ut2fno4icz,-4.844478251054395,-125.79761061290779,-6.717300928889927

2410484_20201_2_0,ut585p4icz,-2.262845816552942,-109.16370550150586,-32.37761720733786

4101029_20201_2_0,ut5u0o4icz,-0.33618815534246077,-103.12060840017148,-45.78596141106979

2903357_20201_2_0,ut6ybp4icz,1.1410365477185518,-89.75704435540257,-64.43692663175574

1666227_20201_2_0,ute34p4icz,-5.07965968007223,-92.069338944359,-2.8037535614063245

2368188_20201_2_0,utfb3o4icz,3.258041382556686,-53.029166139918345,-66.44707621198845

5907250_20201_2_0,uthfkn4icz,0.2979668206865748,-81.23930175012637,-55.54029528972323

2311472_20201_2_0,uthxso4icz,-5.08449853531848,-106.86203191056674,-6.448974776771067

1329388_20201_2_0,utkfto4icz,0.7966917638065932,-100.49792063540522,-37.27343126908674

5014725_20201_2_0,utm5ao4icz,-2.5247913156485904,-117.70107770891576,-29.99966972731802

5152534_20201_2_0,utq7jp4icz,-1.6338672273397812,-87.13792566648132,-36.72241376268293

2612390_20201_2_0,utu2fo4icz,-0.32543408792011025,-86.03433533321669,-33.7775296961415

5281779_20201_2_0,utwgnn4icz,1.383720463471643,-111.54793354003914,-41.9222440430576

5405680_20201_2_0,utx3wn4icz,-0.5697812206860032,-88.16912233168395,-32.90888952562901

4029820_20201_2_0,uty9lo4icz,-3.15298495970382,-119.3710475755712,-17.922787665035642

4764653_20201_2_0,uu0feo4icz,-7.6203025633564065,-111.67844834617455,1.329257890185886

5625597_20201_2_0,uu501o4icz,-2.1765945181220427,-111.17404323716124,-14.572989033419105

5849252_20201_2_0,uu5zho4icz,-0.23458633883684238,-118.23878412382012,-25.702156197853498

1161095_20201_2_0,uu684o4icz,-2.0259719268056706,-97.9481655000753,-24.340846284159028

1651188_20201_2_0,uu98gp4icz,-0.40103113179734934,-52.75005552426555,-34.15386910132378

2003097_20201_2_0,uuanvn4icz,-2.1162951864935606,-98.10599995627683,-28.186065728203275

2054212_20201_2_0,uubtcn4icz,0.6993993568444322,-107.77573163996902,-45.005472934585825

2955250_20201_2_0,uuclpo4icz,-1.3031589947713846,-93.60371455299881,-25.32211149267998

3031633_20201_2_0,uueqen4icz,-1.915897234775376,-105.98850752866892,-29.30892998905459

2765311_20201_2_0,j6wtwo4icz,0.17717769756795532,-85.79218624949274,-26.42166415517768

1538907_20201_2_0,uukfeo4icz,-4.486680369675218,-110.9384310151448,-4.5892719003484075

5996367_20201_2_0,uukstn4icz,0.42488939732035147,-132.37823972465833,-56.991080793775325

5956933_20201_2_0,uulmun4icz,-19.481075661234755,-165.76810077124307,55.17994213021883

4647114_20201_2_0,uunyfp4icz,-0.7344978465304064,-99.41700795020819,-25.574025248093548

4926725_20201_2_0,uur9eo4icz,2.196662234309606,-84.87272904477456,-47.92044228377837

4127626_20201_2_0,uus9dn4icz,-1.5719819501220922,-109.8670419592359,-17.60414541622633

2556585_20201_2_0,uuuzmn4icz,2.993098093622762,-90.89141342002623,-32.71411843475511

2329209_20201_2_0,uuv8sn4icz,-3.2883089365975247,-111.45949688689896,-27.665929146178343

3558114_20201_2_0,uv0djo4icz,-0.3875178825398675,-102.83579762951487,-35.725612104818794

1184961_20201_2_0,uvheso4icz,0.4878281076887787,-77.54505426979415,-26.322439658821082

3737372_20201_2_0,uvjjvn4icz,-1.0414723991736734,-59.26068150333046,-31.657603777381325

1533959_20201_2_0,uvlgsn4icz,0.9052216049089744,-85.66634321305457,-30.025343153289583

3166439_20201_2_0,uvnh2o4icz,-0.9678076522577849,-97.81149862923635,-30.93250896301278

1358916_20201_2_0,uvnx8p4icz,0.4988991317559303,-92.7149931109401,-49.85209390258866

2850823_20201_2_0,uvo6gp4icz,-0.037719252596347425,-94.53782657482455,-56.60419694014165

4125857_20201_2_0,uvppnn4icz,-9.299120125073797,-65.21403809405675,282.3949847339318

3974875_20201_2_0,uvujqn4icz,-0.5474780742854531,-88.6461975419138,-41.94742385161659

1268941_20201_2_0,uvuxno4icz,-2.6398490757245625,-146.31019497804908,-21.039201248410535

2864258_20201_2_0,uvwuvo4icz,-0.05115490993477318,-57.15317665335979,-35.12933736553532

4729051_20201_2_0,uvxjbp4icz,0.39092659398054963,-102.70328048697706,-58.335508216174176

3424968_20201_2_0,uvzt3o4icz,-1.6868242991701774,-93.43969383194477,-32.27971540270697

1287982_20201_2_0,uw094p4icz,0.13562231668207173,-87.83920795399226,-50.17620078993477

2471376_20201_2_0,uw1wpo4icz,-0.09676235903999403,-92.00947990745914,-26.496075046087824

1621597_20201_2_0,uw2y6n4icz,-0.7152447830509265,-109.55423943177573,-24.688645011542945

3820179_20201_2_0,uw423o4icz,1.1401697309274055,-94.05025269927478,-44.43398448535174

2969984_20201_2_0,uw4k4p4icz,-1.1064356032711116,-84.43472603201329,-36.32215842873461

3168550_20201_2_0,uw88dn4icz,-5.253187581829308,-132.59785387423028,9.172550342713265

3478213_20201_2_0,uw9x8p4icz,2.031653972131415,-74.7852400572929,-44.455492882575996

2621974_20201_2_0,uwdn2p4icz,-0.7127156782146246,-86.43900298318454,-38.92667913053009

4426468_20201_2_0,uwe7ln4icz,-1.6325794448866524,-92.91789548950837,-29.380910043352543

4604006_20201_2_0,uwhdcp4icz,2.3683576809737965,-98.97846061741629,-53.424669445269345

3645692_20201_2_0,uwli3p4icz,-1.148809125742253,-106.0232063212184,-11.890462695602139

3780463_20201_2_0,uwm75o4icz,31.273636541654504,83.87481742946042,-178.68334650439002

3142465_20201_2_0,uwq5lo4icz,1.5283357788775378,-136.93910775090848,-54.13754873082134

5322512_20201_2_0,uws7ln4icz,-2.73115772059493,-111.43593411601796,-32.05557924104505

1462885_20201_2_0,ux3bnn4icz,-3.0904875024781018,-88.43704454903818,-13.848852755406853

2931877_20201_2_0,ux3lcp4icz,1.2270157313288188,-85.24367232247303,-55.04403917540313

4590217_20201_2_0,ux3ngp4icz,-3.43913827758286,-67.75018626208151,-30.669223448721283

5933613_20201_2_0,ux66ap4icz,1.675545656690653,-119.44697795238886,-41.760622722990064

4186483_20201_2_0,ux914p4icz,-3.303405182904883,-90.04202722164217,-22.308434330830124

1987472_20201_2_0,uxgsko4icz,-0.433996722858615,-114.39790834833775,-55.70004439321028

3467245_20201_2_0,uxktwn4icz,-1.6576692808488376,-98.56807589506894,-28.84070137403606

5155727_20201_2_0,uxqyfn4icz,-1.359186160725695,-124.3638213172683,-42.573523424349744

3126599_20201_2_0,uxrhmn4icz,-1.840110982005698,-122.6486117653184,-11.090644924781301

3873025_20201_2_0,uxvzin4icz,-1.4259748540443669,-82.93541337599387,-23.82332490358256

3140132_20201_2_0,uy1cbn4icz,1.7408819549576313,-90.00476261057096,-46.77956689773036

2353442_20201_2_0,uy1jwn4icz,-0.7133072813314798,-105.33629991094449,-31.796541943893374

3031633_20201_2_0,uueqen4icz,-1.915897234775376,-105.98850752866892,-29.30892998905459

1813839_20201_2_0,uy2xco4icz,-4.208283218030499,-114.36735892495693,-17.532647483650294

3994539_20201_2_0,uy69zn4icz,-2.295369607398143,-104.08909208407556,-1.317074676381793

3296910_20201_2_0,uy6c2p4icz,-9.985265879078689,-132.7584571052848,-7.545158778184458

3515316_20201_2_0,uyd9co4icz,-0.652410792392315,-63.44232318181216,-59.929014728477895

3964138_20201_2_0,uyhvao4icz,-6.112854880164579,-83.37692811968634,-0.2949528505902492

2235946_20201_2_0,uyitjo4icz,-0.3153755393662506,-80.24953137125033,-33.922568458324776

2932530_20201_2_0,uyodgp4icz,1.5952077665785542,-65.39774706071324,-46.11320471098617

5118355_20201_2_0,uypi8p4icz,-2.228716712000809,-147.05879059287972,-14.241008320139485

3570185_20201_2_0,uypt8o4icz,0.9379941704494053,-131.06602424198582,-14.65745075243403

5907348_20201_2_0,uyt9gn4icz,-2.6398340827659035,-154.86335088376012,-3.7978862202443224

5789700_20201_2_0,uyythp4icz,1.0643136722470556,-118.64877899914595,-41.29956370853121

3388630_20201_2_0,uz15qo4icz,-1.161544423226211,-68.59036837401078,-29.403146563050655

2025570_20201_2_0,uz21mo4icz,1.7280958931356039,-102.8729273285912,-32.4013837287756

1223488_20201_2_0,uz3hpn4icz,-0.8922253760698592,-115.89381558826196,-27.0635988942678

1774011_20201_2_0,uz4cto4icz,-2.1389921658626854,-102.66870475118964,-12.569898628947442

1323781_20201_2_0,uz6pbo4icz,9.305065952816985,-100.88559691078373,-99.66454072912167

5240515_20201_2_0,uzafwn4icz,-3.6977513415391914,-102.47568497103069,-7.004638681849627

4580645_20201_2_0,uzgafn4icz,-3.2476100241504686,-100.85837450522666,-27.58076497611978

5382131_20201_2_0,uzhyoo4icz,-0.9953500064973467,-77.1736903691023,-32.32735673129662

2258680_20201_2_0,uzi89p4icz,2.5570413037835142,-83.67298817307733,-61.34452981530403

4400607_20201_2_0,uzj8xo4icz,-0.1582252773454589,-122.28106046339866,-24.06593504903546

4932680_20201_2_0,uzl6xn4icz,0.6558848009982213,-79.67091041903063,-30.03394426182372

2745346_20201_2_0,uzmrhp4icz,2.3085406725103024,-132.24360414981987,-58.148712281294806

1576958_20201_2_0,uztmjp4icz,3.6087526100974525,-84.63170897159469,-55.47015929785178

5031052_20201_2_0,uzvbep4icz,-5.404336484697181,-114.2486048917645,-11.927046215188838

1816799_20201_2_0,uzxrao4icz,-1.871677761993337,-93.62173013889065,-34.5284309868469

4782373_20201_2_0,v01vko4icz,1.757999606437424,-85.09696285510648,-44.075923459002524

3811605_20201_2_0,v08hpo4icz,1.270249908164582,-107.76463143742694,-45.63687961377582

3652718_20201_2_0,v0cohp4icz,6.678824867368794,-88.92613581547283,-50.768256139876115

4970729_20201_2_0,v0d4gn4icz,1.5624250454472246,-126.34856208984948,-54.042702954579

1670948_20201_2_0,v0e43p4icz,0.405524434653069,-81.78549535631592,-32.4878805511225

5587122_20201_2_0,v0eydn4icz,1.6049461841014465,-94.59891126995467,-43.394690733058795

3792557_20201_2_0,v0vlho4icz,-1.6828724407093025,-119.8277752442051,-13.51742713670285

3510538_20201_2_0,v0vv0o4icz,0.18928837946117652,-86.92757282034401,-43.573843035445606

2398401_20201_2_0,v0y7eo4icz,-1.6907328092434584,-148.21973583032698,-22.56928687748355

1201871_20201_2_0,v0yrap4icz,3.61161488941968,-92.32705069944348,-37.93667244757222

3449019_20201_2_0,v11o8p4icz,-3.0098059806036863,-77.40979342071273,-25.197008296245286

1027483_20201_2_0,v16sso4icz,-2.201458591383552,-97.87801278057992,-19.36695218253128

5204972_20201_2_0,v1amao4icz,-0.3358818748701344,-127.8140573921496,-15.34813598897901

1369948_20201_2_0,v1aojo4icz,-2.6954723425071023,-114.57334791322003,-23.82896410552202

1004148_20201_2_0,v1ie8p4icz,-0.394254287115603,-80.35994546769948,-52.59525600339478

4813590_20201_2_0,v1nfvn4icz,1.6985711568392468,-88.67143458951492,-51.109529837887436

2813401_20201_2_0,v1otln4icz,0.17721595684031666,-96.65432233581083,-32.45943568775613

3799569_20201_2_0,v1q0to4icz,0.37044589235962677,-81.3798312417313,-40.55077405532505

5550078_20201_2_0,v1rn6p4icz,0.7667279121884955,-53.60067025744479,-46.94566031211225

3801030_20201_2_0,v1s86p4icz,-1.3403892609129906,-89.79435306635315,-34.49144197763846

5992094_20201_2_0,v1sqkn4icz,-1.482855837732763,-130.71623013315912,-21.7109125975646

4696541_20201_2_0,v1wftn4icz,-1.0729439895484607,-91.83282200933994,-19.242820311209883

1280689_20201_2_0,v1wigo4icz,0.7695628169942633,-116.56204894680215,-38.673664734544204

2624748_20201_2_0,v1z49p4icz,3.7002271707695766,-47.33803508922429,-49.83068507665213

3498761_20201_2_0,v20g9p4icz,1.1218986786895782,-126.99107748321813,-41.90551032251312

3702483_20201_2_0,v27ifo4icz,3.051246789269441,-67.91325580424308,-59.34190188707802

5711399_20201_2_0,v2a0ln4icz,-0.5729289404201243,-100.57204138589063,-27.229823724956304

4821123_20201_2_0,v2bpmn4icz,1.304366123692868,-124.89723151667044,-26.124234565732735

4798429_20201_2_0,v2krbp4icz,-0.7638708928388774,-102.5370870988848,-27.22743178854718

2404352_20201_2_0,v2rvrn4icz,-1.9551785593736801,-101.911998545183,-21.246355185505124

2682141_20201_2_0,v32qao4icz,0.10670076055423482,-128.6747030431399,-23.41889304970485

5311339_20201_2_0,v389so4icz,2.697822003897807,-78.72903282134396,-56.89036548336601

4489264_20201_2_0,s8pvso4icz,-2.8138549237428125,-59.28608903184414,-33.532738134099176

1661872_20201_2_0,v3ejtn4icz,0.4697751654743045,-85.24565339605351,-40.40213856391699

3458503_20201_2_0,v3pcmo4icz,-1.406663416846414,-116.40434700156396,-31.5533105557069

3768319_20201_2_0,v3r8mo4icz,3.1678371424724743,-75.41071046096988,-60.790371072299536

1650025_20201_2_0,v3s4ip4icz,1.91424415335276,-61.832444579125934,-67.93615327808172

4008358_20201_2_0,v44kho4icz,0.8795181004976097,-64.21169047619253,-31.49458555336784

3793723_20201_2_0,v45vmo4icz,1.0718672435637668,-112.96096075083449,-31.881639673800493

4460834_20201_2_0,v47vvo4icz,-11.050378325829865,-143.2280505709447,13.672788495882656

3239291_20201_2_0,v48wko4icz,0.5896813228458148,-69.1101355318844,-45.64828819405392

4432800_20201_2_0,v4bkxo4icz,0.5771729004029971,-93.10425292794872,-43.7653708596216

5437724_20201_2_0,v4eijn4icz,-0.8669708141226319,-99.38557494273272,-29.401080064668605

3430348_20201_2_0,v4fufn4icz,2.379970762843399,-100.5838786670368,-60.3980257452567

3786822_20201_2_0,v4g1ao4icz,-0.3579622854351728,-69.40649198901002,-9.118964611942744

2147259_20201_2_0,v4rsin4icz,0.13896685319347954,-63.10283644517699,-33.73290070160314

3412954_20201_2_0,v4w29o4icz,0.32513543507913845,-93.31547645017349,-31.109800597593818

4500295_20201_2_0,v4zqkn4icz,1.2251763807494132,-74.77574654066115,-47.98090774987517

4437059_20201_2_0,v54arn4icz,0.9775469852433867,-92.37244894917714,-57.05888114256605

5718114_20201_2_0,v5bejn4icz,1.0965067332152663,-90.01146548730117,-33.8517577925943

1318678_20201_2_0,v5c51o4icz,0.09362836971022225,-44.24326741287655,-42.49883890365416

2297293_20201_2_0,v5g6rn4icz,4.279798106325067,-91.60984232876882,-60.668633529549766

4583150_20201_2_0,v5lkin4icz,1.1928200907853175,-75.32252030077058,-52.91765081944659

1004264_20201_2_0,v5n40p4icz,1.5795931558871636,-80.93566549414498,-47.60757273377095

2128749_20201_2_0,v5o57o4icz,-0.11717741352992063,-105.95037239396507,-21.02773931448948

4326497_20201_2_0,v5olgp4icz,-1.5906003049680417,-118.51338600986509,-18.721484050011284

2170940_20201_2_0,v5rzjp4icz,-0.3973115765269808,-109.58326142286077,-31.08464526778812

5487238_20201_2_0,divopo4icz,0.2731894071124788,-69.78395668870397,-78.09736539048943

1959200_20201_2_0,v5vyip4icz,0.155877240983887,-70.65568886095463,-38.30828513527641

2777142_20201_2_0,v60jrn4icz,1.1186488473784215,-116.79606349368436,-57.89790840363844

4198666_20201_2_0,v68gto4icz,-2.6674876007800177,-120.62572780595633,-15.612944909584783

1381897_20201_2_0,v6aaon4icz,-1.7593947522938396,-112.12824675630526,-23.465299136318578

2633561_20201_2_0,v6br2p4icz,-0.12789226888483582,-53.11086935926241,-31.56482461909357

5551440_20201_2_0,v6csuo4icz,-2.215868982486384,-79.69755602352902,-17.008285745296448

3471548_20201_2_0,v6czuo4icz,-0.8597414665865603,-113.00627515355262,-23.89320141133348

2346157_20201_2_0,v6f03o4icz,2.087915422923196,-74.18488775844392,-60.10868109106521

1090338_20201_2_0,v6fcmo4icz,4.51897198112362,-90.94592926464264,-59.888622249976635

3178705_20201_2_0,v6g8ip4icz,-74.38286344462803,-168.4669146268827,422.00377109622787

5371187_20201_2_0,v6kw0p4icz,1.9451104591770902,-74.75438711148473,-39.23090635507859

1642393_20201_2_0,v6ln4p4icz,-0.4136672646778619,-79.61485392235676,-18.71129944790127

2661289_20201_2_0,c0mtco4icz,-0.40906815259399776,-95.93338398280966,-12.155723690555277

1140737_20201_2_0,v6ngwn4icz,-1.7054025745970747,-85.82886646333242,-27.74579644354975

2501623_20201_2_0,v6ojmo4icz,0.4000469836647808,-56.83269574101229,-56.506293071680545

5616672_20201_2_0,v6yp6p4icz,0.26450721461582927,-100.51585257081058,-33.3292727785269

3585901_20201_2_0,v6zbno4icz,2.1704694762035732,-108.86765856657408,-50.3473867529336

4721850_20201_2_0,v71t7p4icz,0.469780181592924,-97.87116185244201,-34.074797480235816

3975582_20201_2_0,v72z8o4icz,-3.0894134988636295,-116.03084320803325,-24.09965292385344

3353051_20201_2_0,wluhxn4icz,-0.29746933507254864,-102.0615752559784,-34.30522468327737

4100770_20201_2_0,v7dpgp4icz,0.3524309701518173,-91.8702957771466,-53.37614034946914

2573760_20201_2_0,v7gy0p4icz,2.635998491971076,-101.0804353104177,-41.359891004592825

1569202_20201_2_0,v7hq0o4icz,1.0811426745139954,-77.12730177577501,-41.01027578922617

1349338_20201_2_0,v7j8fn4icz,-0.5430934894586102,-92.40935056923288,-25.317045641126754

4386850_20201_2_0,v7l4yo4icz,-4.237368020791316,-103.05561702858569,-6.6933100266295185

4293584_20201_2_0,v7nowo4icz,0.04244644131478652,-67.68482543033954,-38.45379056380983

5281221_20201_2_0,v7o1ho4icz,-0.6235639562138576,-134.4819555029134,-34.789961126535516

1735362_20201_2_0,v7s99o4icz,0.9378641983741149,-86.13972198347301,-39.046236658036165

4114133_20201_2_0,v7y7io4icz,1.0699971997726987,-76.68616875851023,-48.78556086430861

4490355_20201_2_0,v7z7wo4icz,2.3964688005762613,-93.40217275062128,-46.70567761344785

2436652_20201_2_0,v81hlo4icz,-0.00784344636535925,-85.21876523894207,-49.37728779881019

1430812_20201_2_0,v89j9p4icz,-0.6092923144190845,-98.34565924041769,-24.388000555846318

4852564_20201_2_0,v89y9p4icz,-1.0863524337444637,-71.4105690637376,-39.5436632538313

2809534_20201_2_0,v8acan4icz,-9.834679182397085,-66.54826823204982,10.292921299306585

4957890_20201_2_0,v8azzo4icz,0.006725397701729328,-48.56106004988317,-37.038549122888455

3333586_20201_2_0,v8gdso4icz,-0.1768239743848974,-98.80759763111331,-25.99007774262529

5434160_20201_2_0,v8jubp4icz,-0.8092642584819535,-83.03266654656352,-30.019571698255874

5524423_20201_2_0,v8jyro4icz,-1.8183566164210232,-62.53807604405631,-38.173127597535185

3773481_20201_2_0,v8l7ho4icz,0.3649230134864124,-74.06753261206356,-44.140531322685916

1124012_20201_2_0,v8pbeo4icz,-0.7836773516173099,-103.01913793656783,-75.0158318842214

6003765_20201_2_0,v8sbno4icz,-2.2883761278281587,-101.98804303380405,-26.27152764758908

5376906_20201_2_0,v8ttso4icz,-1.1352626738958485,-108.02252579844662,-21.43656614989959

5351471_20201_2_0,v8u1oo4icz,0.012289588724655659,-138.96626251831367,-23.899132988305496

2546950_20201_2_0,v8u68n4icz,-1.3497409034027015,-80.54433468254618,-14.308161953465003

4121835_20201_2_0,v8vxpn4icz,-0.6143985018750143,-121.18669795274033,-37.70027349741463

6001938_20201_2_0,v8znen4icz,3.6087729513496085,-66.62601918900768,-62.19535339471631

5708537_20201_2_0,v90awo4icz,126.63200156632324,343.9601035633149,-276.7689486647733

5600021_20201_2_0,v9163p4icz,2.292077388901568,-45.34778555472724,-56.50977320175015

4204588_20201_2_0,v92f7o4icz,-77.58682383346547,221.24778427726864,514.4200959090826

2746399_20201_2_0,v94y6n4icz,-0.7693060055631933,-89.67513843194621,-33.076452820883375

2173564_20201_2_0,v957dp4icz,-1.3845295730581415,-109.32133135026379,-36.64222085505662

2630444_20201_2_0,v9a2wo4icz,-0.03842344331641623,-104.77423498095146,-34.055452681135904

4455928_20201_2_0,v9bn7p4icz,0.1567620023699214,-94.13636234777442,-34.2801960044814

2319946_20201_2_0,v9iznn4icz,2.032475264832989,-97.32724800300099,-28.918920882048354

2232903_20201_2_0,v9lxln4icz,2.019610026973635,-66.36524661082163,-61.338455658324804

4129333_20201_2_0,v9nsgp4icz,1.5205088932625517,-42.28788236385,-41.0165881810926

1378480_20201_2_0,v9nupo4icz,-1.0618671016799222,-89.18444010399844,-29.694174265537413

2999991_20201_2_0,v9ovjp4icz,2.224200130468062,-111.55029532333452,-40.999289232010824

1924182_20201_2_0,v9pvcp4icz,0.7074339767908244,-76.60547266728855,-57.380415714862096

3069533_20201_2_0,v9rv3p4icz,-4.310958331513439,-102.30025319763428,-64.71584588842477

2816531_20201_2_0,va3gvo4icz,0.36125823398193035,-84.8978996115203,-28.425414460849055

5248107_20201_2_0,va3q5o4icz,0.023167573917321844,-84.760663245323,-42.59597173547431

4736306_20201_2_0,va5gon4icz,0.0977732654165234,-117.1129563136547,-20.804192659490525

2216330_20201_2_0,vaa71o4icz,3.7358319295408813,-94.97398938962624,-47.74570191026842

5698265_20201_2_0,vabgmo4icz,4.228356704750798,-72.70807937457067,-42.690690273467055

4460106_20201_2_0,vacuyo4icz,-9.190187163839239,-123.56451205337433,-1.1248965124713948

3275407_20201_2_0,vaeldo4icz,-2.8774875079887674,-78.65176160721992,-6.473156697747726

4691082_20201_2_0,vafmqo4icz,-0.28762210563469204,-106.04458288143636,-31.88889062352007

3999049_20201_2_0,vafrzo4icz,0.40952256431571776,-90.61143567200077,-49.078419387749605

4644546_20201_2_0,vai09n4icz,0.6387064855339738,-82.65310374066573,-30.6459652570189

4489766_20201_2_0,vajbcp4icz,1.3351682349439693,-110.04781958395193,-48.40826691454879

2285146_20201_2_0,vakq0o4icz,-1.5497091446591271,-70.3225932270073,-27.293024216445673

5917759_20201_2_0,valq9p4icz,2.1428684263633926,-71.50271477192004,-50.44167123553282

3807172_20201_2_0,vas9uo4icz,0.45752397155655417,-96.60270711958839,-26.752231152181082

5593481_20201_2_0,vaskno4icz,0.21101073542843685,-109.27768787279803,-31.42316693998707

1551546_20201_2_0,vau9bo4icz,-2.2151998460628506,-94.64043643887723,-35.97277993016469

4363295_20201_2_0,vayg5o4icz,0.17740885976814985,-112.79782552184895,-25.596085112643735

1272399_20201_2_0,vayiwn4icz,-6.509362450093253,-121.10315958373951,11.463218901096639

2297097_20201_2_0,vaz95o4icz,-0.04508866590480256,-86.30622485984759,-39.891484525230794

2138172_20201_2_0,vb6heo4icz,1.5352407911495667,-85.84640060894364,-55.98333178005407

3798825_20201_2_0,vbd1xn4icz,-2.464725225286493,-103.88800728311074,-14.02683907090362

4331547_20201_2_0,vbfv1o4icz,0.9346331538258066,-71.40109957824487,-28.34042925491451

1998312_20201_2_0,vblrdp4icz,2.883374228533875,-67.21491459605903,-57.53910788255848

5342637_20201_2_0,vblson4icz,0.12277405833325926,-59.300203401207625,-35.58897151079482

4964472_20201_2_0,vbma8o4icz,-1.566663429487646,-107.06921317832413,-26.442962219693513

1588980_20201_2_0,vbo8oo4icz,3.4505069994124224,-62.74247745824053,-52.02057718457161

1604849_20201_2_0,vbpnon4icz,-1.7208159013765385,-100.23663329107532,-22.22757547558274
 46%|████▌     | 373/810 [10:11<13:53,  1.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 374/810 [10:13<12:59,  1.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▋     | 375/810 [10:15<13:24,  1.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▋     | 376/810 [10:17<13:31,  1.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 377/810 [10:18<12:52,  1.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 378/810 [10:20<12:08,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 379/810 [10:22<13:32,  1.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 380/810 [10:24<12:57,  1.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 381/810 [10:25<12:04,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 382/810 [10:27<11:34,  1.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 383/810 [10:28<10:53,  1.53s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 384/810 [10:29<10:38,  1.50s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 385/810 [10:31<10:57,  1.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 386/810 [10:33<10:57,  1.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 387/810 [10:34<10:49,  1.53s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 388/810 [10:36<10:37,  1.51s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 389/810 [10:37<11:05,  1.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 390/810 [10:39<10:51,  1.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 391/810 [10:40<10:18,  1.48s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 392/810 [10:41<10:09,  1.46s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▊     | 393/810 [10:43<10:32,  1.52s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▊     | 394/810 [10:45<10:56,  1.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 395/810 [10:46<10:40,  1.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 396/810 [10:48<10:23,  1.51s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 397/810 [10:49<10:32,  1.53s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 398/810 [10:51<10:18,  1.50s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 399/810 [10:53<10:45,  1.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 400/810 [10:54<11:12,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|████▉     | 401/810 [10:56<11:42,  1.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|████▉     | 402/810 [10:58<11:18,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|████▉     | 403/810 [10:59<11:12,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|████▉     | 404/810 [11:01<11:03,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 405/810 [11:02<10:49,  1.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 406/810 [11:04<11:10,  1.66s/it] 50%|█████     | 407/810 [11:06<11:05,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 408/810 [11:07<10:53,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 409/810 [11:09<10:37,  1.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 410/810 [11:10<10:08,  1.52s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 411/810 [11:12<10:33,  1.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 412/810 [11:14<10:29,  1.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 413/810 [11:15<10:09,  1.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 414/810 [11:17<10:33,  1.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 415/810 [11:19<10:45,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████▏    | 416/810 [11:20<10:38,  1.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████▏    | 417/810 [11:22<10:24,  1.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 418/810 [11:23<10:29,  1.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 419/810 [11:25<10:17,  1.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 420/810 [11:26<10:20,  1.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 421/810 [11:28<10:09,  1.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 422/810 [11:29<09:38,  1.49s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 423/810 [11:31<09:38,  1.50s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 424/810 [11:33<10:24,  1.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 425/810 [11:35<10:54,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 426/810 [11:37<11:52,  1.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 427/810 [11:38<11:05,  1.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 428/810 [11:42<14:19,  2.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 429/810 [11:43<13:05,  2.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 430/810 [11:45<12:26,  1.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 431/810 [11:47<11:36,  1.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 432/810 [11:48<11:18,  1.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 433/810 [11:50<10:53,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▎    | 434/810 [11:51<10:37,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▎    | 435/810 [11:53<10:06,  1.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 436/810 [11:54<09:49,  1.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 437/810 [11:56<09:28,  1.52s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 438/810 [12:01<15:31,  2.50s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 439/810 [12:02<13:49,  2.24s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 440/810 [12:04<12:31,  2.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 441/810 [12:05<11:36,  1.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▍    | 442/810 [12:07<10:55,  1.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▍    | 443/810 [12:09<11:44,  1.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▍    | 444/810 [12:11<11:07,  1.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▍    | 445/810 [12:13<12:03,  1.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▌    | 446/810 [12:14<11:00,  1.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▌    | 447/810 [12:16<10:31,  1.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▌    | 448/810 [12:18<10:10,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▌    | 449/810 [12:19<09:54,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 450/810 [12:21<09:31,  1.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 451/810 [12:22<09:09,  1.53s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 452/810 [12:24<09:12,  1.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 453/810 [12:25<08:55,  1.50s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 454/810 [12:27<09:25,  1.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 455/810 [12:29<09:44,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▋    | 456/810 [12:30<09:22,  1.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▋    | 457/810 [12:32<09:14,  1.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 458/810 [12:33<09:28,  1.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 459/810 [12:35<09:28,  1.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 460/810 [12:36<09:06,  1.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 461/810 [12:38<09:04,  1.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 462/810 [12:40<09:32,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 463/810 [12:41<09:16,  1.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 464/810 [12:43<09:12,  1.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 465/810 [12:44<09:01,  1.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 466/810 [12:46<08:56,  1.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 467/810 [12:48<09:17,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 468/810 [12:49<09:11,  1.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 469/810 [12:51<10:16,  1.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 470/810 [12:53<09:57,  1.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 471/810 [12:57<12:50,  2.27s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 472/810 [12:58<11:37,  2.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 473/810 [13:02<14:16,  2.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▊    | 474/810 [13:04<12:53,  2.30s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▊    | 475/810 [13:05<11:35,  2.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 476/810 [13:07<10:59,  1.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 477/810 [13:09<10:49,  1.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 478/810 [13:11<11:05,  2.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 479/810 [13:13<10:43,  1.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 480/810 [13:14<09:56,  1.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 481/810 [13:16<09:28,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|█████▉    | 482/810 [13:17<09:09,  1.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|█████▉    | 483/810 [13:19<08:56,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|█████▉    | 484/810 [13:20<08:40,  1.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|█████▉    | 485/810 [13:22<09:04,  1.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|██████    | 486/810 [13:24<08:39,  1.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|██████    | 487/810 [13:25<08:42,  1.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|██████    | 488/810 [13:27<08:59,  1.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|██████    | 489/810 [13:29<09:06,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|██████    | 490/810 [13:30<08:27,  1.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 491/810 [13:33<09:53,  1.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 492/810 [13:34<09:31,  1.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 493/810 [13:36<09:10,  1.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 494/810 [13:38<09:06,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 495/810 [13:39<08:41,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 496/810 [13:41<08:21,  1.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████▏   | 497/810 [13:42<07:50,  1.50s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████▏   | 498/810 [13:43<07:41,  1.48s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 499/810 [13:48<12:02,  2.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 500/810 [13:49<10:46,  2.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 501/810 [13:50<09:33,  1.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 502/810 [13:52<09:30,  1.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 503/810 [13:54<08:56,  1.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 504/810 [13:55<08:28,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 505/810 [13:57<08:28,  1.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 506/810 [13:58<08:14,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 507/810 [14:00<08:24,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 508/810 [14:02<08:00,  1.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 509/810 [14:03<07:53,  1.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 510/810 [14:05<07:39,  1.53s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 511/810 [14:06<07:33,  1.52s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 512/810 [14:08<08:56,  1.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 513/810 [14:10<08:11,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 514/810 [14:12<08:54,  1.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▎   | 515/810 [14:13<08:18,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▎   | 516/810 [14:15<08:07,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 517/810 [14:17<08:57,  1.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 518/810 [14:19<08:29,  1.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 519/810 [14:21<09:09,  1.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 520/810 [14:23<08:47,  1.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 521/810 [14:24<08:19,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 522/810 [14:26<08:17,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▍   | 523/810 [14:29<09:53,  2.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▍   | 524/810 [14:30<09:22,  1.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▍   | 525/810 [14:32<08:43,  1.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▍   | 526/810 [14:34<08:55,  1.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▌   | 527/810 [14:37<10:03,  2.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▌   | 528/810 [14:38<09:18,  1.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▌   | 529/810 [14:40<08:50,  1.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▌   | 530/810 [14:42<08:59,  1.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 531/810 [14:44<08:42,  1.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 532/810 [14:45<08:10,  1.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 533/810 [14:47<07:54,  1.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 534/810 [14:48<07:30,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 535/810 [14:50<07:33,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 536/810 [14:51<07:05,  1.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▋   | 537/810 [14:54<08:08,  1.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▋   | 538/810 [14:55<07:51,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 539/810 [14:57<07:45,  1.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 540/810 [14:59<08:21,  1.86s/it] 67%|██████▋   | 541/810 [15:01<07:59,  1.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 542/810 [15:02<07:53,  1.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 543/810 [15:05<09:16,  2.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 544/810 [15:07<08:25,  1.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 545/810 [15:08<08:09,  1.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 546/810 [15:10<07:48,  1.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 547/810 [15:12<07:24,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 548/810 [15:13<07:04,  1.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 549/810 [15:14<06:42,  1.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 550/810 [15:16<06:40,  1.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 551/810 [15:19<09:09,  2.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 552/810 [15:21<08:46,  2.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 553/810 [15:25<10:20,  2.41s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 554/810 [15:28<11:05,  2.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▊   | 555/810 [15:29<10:05,  2.38s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▊   | 556/810 [15:32<10:06,  2.39s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 557/810 [15:33<08:52,  2.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 558/810 [15:35<07:59,  1.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 559/810 [15:36<07:46,  1.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 560/810 [15:38<07:28,  1.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 561/810 [15:40<07:12,  1.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 562/810 [15:41<06:52,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|██████▉   | 563/810 [15:43<06:42,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|██████▉   | 564/810 [15:44<06:27,  1.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|██████▉   | 565/810 [15:46<06:16,  1.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|██████▉   | 566/810 [15:48<07:39,  1.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|███████   | 567/810 [15:50<07:05,  1.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|███████   | 568/810 [15:54<09:49,  2.44s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|███████   | 569/810 [15:58<12:09,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|███████   | 570/810 [16:00<10:42,  2.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|███████   | 571/810 [16:02<09:53,  2.48s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 572/810 [16:04<08:36,  2.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 573/810 [16:05<07:59,  2.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 574/810 [16:07<07:24,  1.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 575/810 [16:08<06:50,  1.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 576/810 [16:10<06:33,  1.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 577/810 [16:11<06:31,  1.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████▏  | 578/810 [16:13<06:15,  1.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████▏  | 579/810 [16:15<06:16,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 580/810 [16:17<06:42,  1.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 581/810 [16:18<06:19,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 582/810 [16:20<06:05,  1.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 583/810 [16:22<07:31,  1.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 584/810 [16:24<07:13,  1.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 585/810 [16:27<07:43,  2.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 586/810 [16:30<09:03,  2.43s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 587/810 [16:31<08:01,  2.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 588/810 [16:33<07:27,  2.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 589/810 [16:36<07:56,  2.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 590/810 [16:38<07:52,  2.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 591/810 [16:40<07:37,  2.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 592/810 [16:41<07:14,  1.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 593/810 [16:43<06:45,  1.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 594/810 [16:44<06:17,  1.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 595/810 [16:47<06:44,  1.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▎  | 596/810 [16:48<06:27,  1.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▎  | 597/810 [16:50<06:05,  1.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 598/810 [16:52<06:28,  1.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 599/810 [16:53<06:05,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 600/810 [16:55<05:59,  1.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 601/810 [16:57<05:52,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 602/810 [17:00<07:07,  2.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 603/810 [17:01<06:55,  2.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▍  | 604/810 [17:03<06:24,  1.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▍  | 605/810 [17:05<06:12,  1.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▍  | 606/810 [17:07<06:57,  2.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▍  | 607/810 [17:09<06:29,  1.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▌  | 608/810 [17:10<06:03,  1.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▌  | 609/810 [17:12<05:55,  1.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▌  | 610/810 [17:14<05:37,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▌  | 611/810 [17:16<06:07,  1.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 612/810 [17:20<07:55,  2.40s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 613/810 [17:21<07:24,  2.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 614/810 [17:23<06:32,  2.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 615/810 [17:24<06:05,  1.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 616/810 [17:27<06:49,  2.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 617/810 [17:29<06:28,  2.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▋  | 618/810 [17:31<06:05,  1.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▋  | 619/810 [17:32<05:36,  1.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 620/810 [17:33<05:11,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 621/810 [17:35<05:08,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 622/810 [17:36<04:52,  1.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 623/810 [17:38<04:51,  1.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 624/810 [17:39<04:49,  1.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 625/810 [17:42<05:38,  1.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 626/810 [17:43<05:22,  1.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 627/810 [17:45<05:13,  1.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 628/810 [17:47<05:04,  1.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 629/810 [17:48<04:48,  1.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 630/810 [17:50<04:43,  1.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 631/810 [17:51<04:42,  1.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 632/810 [17:53<04:35,  1.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 633/810 [17:55<05:19,  1.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 634/810 [17:57<05:09,  1.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 635/810 [18:02<08:36,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▊  | 636/810 [18:04<07:22,  2.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▊  | 637/810 [18:06<07:10,  2.49s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 638/810 [18:08<06:15,  2.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 639/810 [18:09<05:36,  1.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 640/810 [18:11<05:38,  1.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 641/810 [18:13<05:07,  1.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 642/810 [18:15<05:04,  1.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 643/810 [18:16<04:41,  1.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|███████▉  | 644/810 [18:18<04:56,  1.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|███████▉  | 645/810 [18:20<04:40,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|███████▉  | 646/810 [18:21<04:33,  1.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|███████▉  | 647/810 [18:23<04:28,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 648/810 [18:25<04:53,  1.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 649/810 [18:27<04:52,  1.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 650/810 [18:28<04:36,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 651/810 [18:30<04:24,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 652/810 [18:32<04:26,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 653/810 [18:33<04:27,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 654/810 [18:35<04:11,  1.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).

4732625_20201_2_0,vbqhbo4icz,-2.1902618431272907,-126.7111369845156,-20.96274570786332

3473273_20201_2_0,vbzkbo4icz,-4.801486891327265,-93.59807289093578,-7.111725431371212

6025792_20201_2_0,vc021o4icz,2.239701512929331,-65.62107508239743,-52.79771062315763

3573941_20201_2_0,vc1f8p4icz,-124.6355544345592,617.0681790830071,304.00990435930044

4559975_20201_2_0,vc1msn4icz,-2.1059013537312596,-64.63398134373409,-11.179570561858199

3991206_20201_2_0,vc3dun4icz,-2.805200346867221,-81.1664281548309,-19.3622530491418

1836169_20201_2_0,vc5ugp4icz,-3.294796609611916,-118.7188979223501,-21.95274129967342

3816998_20201_2_0,vc7wgp4icz,0.9188556188886542,-94.36954702856733,-41.76346868920683

1652079_20201_2_0,vchyvo4icz,-2.4370983503843435,-106.0072335966934,-21.2756588711634

5281243_20201_2_0,vckm3o4icz,-0.33090172026628684,-95.01418360703704,-24.772598596254696

5466485_20201_2_0,vclxen4icz,2.765509565820315,-89.4939187974959,-65.64185435269987

2544858_20201_2_0,vcnbap4icz,-2.162657929571889,-55.5588420225622,-59.70746397405961

2494353_20201_2_0,vco8fn4icz,1.1985599970605556,-110.53783940819844,-45.51564273522429

4647700_20201_2_0,vcpuko4icz,1.8302745820387631,-109.41300977583106,-21.592610060724212

4631743_20201_2_0,vctczo4icz,1.1950193543053742,-36.34505547088787,-47.7000689660387

1307618_20201_2_0,vcv2kn4icz,-1.1144013255729186,-148.0181124091765,-42.7444763142731

3974466_20201_2_0,vcxnln4icz,-0.40489059345239536,-70.95711407905785,-39.951301270624626

2904051_20201_2_0,vcxx9o4icz,-4.054292677051916,-100.7951095058466,-10.048975426051669

1237025_20201_2_0,cm1xip4icz,-3.820119638624119,-153.46028458390654,-7.948491022607314

2729095_20201_2_0,vd1aeo4icz,1.8510684997036435,-99.84970803618103,-51.115990922284695

3508642_20201_2_0,vd2adn4icz,1.6672895121517715,-108.19910253016099,-46.50818057901644

3380825_20201_2_0,vd4ugp4icz,-0.04794505807811763,-104.36622885787892,-39.022542253658315

4574189_20201_2_0,vd636o4icz,-0.8164112724531335,-44.307581230381516,-24.11266840178088

3066993_20201_2_0,vda2lo4icz,0.9845360020518106,-79.55357050008925,-41.71220710340868

2202861_20201_2_0,vdbton4icz,-2.8573748876950416,-103.6800183876289,-31.432657499239667

3825583_20201_2_0,vdhz5n4icz,1.1148857477646434,-106.32192218809496,-45.42189581664732

2318825_20201_2_0,vdi2in4icz,0.4336891211053591,-93.63550586104537,-45.578974337207455

5083937_20201_2_0,vdlopo4icz,0.2094882705599933,-89.84064817616024,-35.78062086692776

4540163_20201_2_0,vdnu7p4icz,0.8379921492510919,-61.52299516261803,-54.796745480066804

4737014_20201_2_0,vdrlan4icz,0.6128930035225112,-174.17044504286937,-38.98985618510554

3773641_20201_2_0,vdsxpo4icz,0.8059889745301523,-95.5313049464402,-38.06729697960674

4843859_20201_2_0,vdys8o4icz,0.22221545392276662,-93.80794216434609,-32.7291059890635

1836919_20201_2_0,vdzbvn4icz,2.536930397968693,-109.99196027034665,-50.84622100496291

5068822_20201_2_0,ve2c0p4icz,-0.6221478891811106,-92.71313059308568,-28.638435609174095

3407306_20201_2_0,ve3jeo4icz,0.7390607258131947,-54.635075374401254,-45.25829134356289

4286309_20201_2_0,ve8kjo4icz,-4.616755581609035,-84.3863954516961,-19.85785843123577

3505512_20201_2_0,ve92lo4icz,6.169133884886944,-41.37044012684558,-71.21614489787595

2535627_20201_2_0,vea9cp4icz,-1.9075184066606103,-92.96887197002636,-26.57950002558107

3115970_20201_2_0,vedexn4icz,1.9121612974961137,-99.46147079216593,-59.166077993053136

5219834_20201_2_0,vej4io4icz,-74.2324319626171,116.3257455457105,289.85672805680065

3105302_20201_2_0,venpsn4icz,2.3235472343446393,-53.27304891113812,-43.266362491443815

4088394_20201_2_0,veo3hp4icz,0.8985445595429853,-108.33327707813646,-48.347040606677325

1848505_20201_2_0,veosdo4icz,-0.6433795536342045,-112.20932173395701,-45.02110677454918

4394015_20201_2_0,veqhip4icz,1.1587552404143366,-86.8857705226541,-39.14070660355701

4532037_20201_2_0,veurao4icz,0.10393671370141862,-107.12492029952446,-41.47943807856993

1736570_20201_2_0,vevg3o4icz,2.8879900254090143,-68.36181726972572,-47.122596150815454

1394335_20201_2_0,vevndp4icz,4.4504167779774475,-113.26855547439342,-69.809658220499

4320732_20201_2_0,vexd9o4icz,-1.7437755830623434,-118.84012422517992,-19.252047568563512

1215644_20201_2_0,vf5gxo4icz,0.47653196175024043,-141.28257873959694,-39.83762939050264

1241202_20201_2_0,vf8jyo4icz,-3.4671537554616667,-66.18813785131255,-38.18141519463762

4966841_20201_2_0,vf98wo4icz,6.0945001383934905,-61.43512157897439,-45.22258794180519

4406082_20201_2_0,vfcg8p4icz,3.409215836585553,-49.33841565865427,-56.840274117870734

1481952_20201_2_0,vffpho4icz,-0.12583966553800158,-83.75192219779873,-43.27399967224315

4378677_20201_2_0,vfmrfp4icz,-0.9779845404898713,-88.7942384014068,-35.547497125236816

2535181_20201_2_0,qago5p4icz,-3.5085930249233197,-147.86255613479534,-15.828561359744612

1606671_20201_2_0,vfu3co4icz,-2.6657407633746066,-95.97122077769035,-36.193803159282496

1640957_20201_2_0,vfzv7o4icz,-0.345456730023918,-103.84154214896765,-40.4419355178983

4610791_20201_2_0,vfzyzo4icz,-0.40330549403629834,-93.92310476316115,-23.782220483152216

3710255_20201_2_0,vg39co4icz,-0.6396249538295331,-87.91617518988991,-28.542614835823088

5487809_20201_2_0,vg5abp4icz,0.9814394526064685,-94.40863456737699,-45.49926009143455

2615692_20201_2_0,vg6gto4icz,6.819910783535891,-89.51431958375505,-61.48243878507543

1303759_20201_2_0,vg8tko4icz,-0.8101046369633212,-72.92886525150135,-62.412777446458406

1494365_20201_2_0,vg8zlo4icz,-2.3022229440465254,-103.46797996147473,-28.03553000351573

3119497_20201_2_0,vg9seo4icz,3.289026523071195,-106.86249582441727,-58.39455531104201

2590660_20201_2_0,vgcgmo4icz,2.8868816686723884,-101.44899300973611,-40.63133489125383

1532442_20201_2_0,vgjtoo4icz,1.041302358203668,-77.09007926585568,-33.143695956694444

4373299_20201_2_0,vgm93o4icz,-1.38367805572107,-129.57580649939504,-14.52089536364673

6008488_20201_2_0,vgy4fo4icz,0.16731696008637378,-216.64956736477922,-49.90966909759243

5612902_20201_2_0,vgyxwo4icz,1.3719706657589688,-46.43595151864747,-49.48210498700284

2736482_20201_2_0,vh20pn4icz,1.7143653708281519,-66.74257873819644,-51.483257967942535

4377687_20201_2_0,vh3w5p4icz,-0.4700948011329643,-127.04235136623356,-18.057138211622288

3849460_20201_2_0,vh54jp4icz,-0.9067417669672658,-59.32685764144037,-24.017904103985103

2105195_20201_2_0,vh9ven4icz,0.6687779999269912,-91.22009924884975,-40.24786628652039

3460000_20201_2_0,vha99n4icz,-8.832860809806885,-76.6548926247045,15.968312688774674

4559018_20201_2_0,vhan4p4icz,0.30727289934952473,-115.93239687296492,-43.535404755058735

5008427_20201_2_0,vhdgxn4icz,39.658912855164324,85.18715385702511,-134.0959823220022

2170248_20201_2_0,vhf2mn4icz,-8.365756184107687,-76.57760996059767,11.671709593921676

3055718_20201_2_0,vhipfp4icz,2.3695820963977754,-100.75802373264744,-56.46830279313933

5099306_20201_2_0,vhjmzo4icz,2.8498722023341223,-82.9526421068721,-30.192222673665782

3369145_20201_2_0,vhm2kn4icz,-1.120794691909478,-76.30733802374135,-41.07242533288908

1516351_20201_2_0,vhodpn4icz,3.0066679514517802,-124.01677249269002,-43.561985293049275

4993005_20201_2_0,vhtino4icz,1.1057941160979232,-124.3196341751852,-14.725323769448636

4733446_20201_2_0,vhumio4icz,-1.5134021219412825,-78.60267849389385,-17.577105184188326

4268185_20201_2_0,vhwxmn4icz,0.6253370780027502,-86.54476402587241,-47.776725934716836

3687555_20201_2_0,vhyofn4icz,0.01310205253299951,-153.50820007410022,-38.10319725625533

5535468_20201_2_0,vi44go4icz,0.581131699161886,-36.84509045280282,-49.25702140138159

2938824_20201_2_0,vi8sep4icz,0.014172996412934007,-96.59337861981183,-18.206956509254553

2637967_20201_2_0,vi9zao4icz,0.24745299326354442,-96.01773142823524,-36.49264190103612

3411809_20201_2_0,via8kn4icz,2.253070430057431,-69.83490329508425,-55.28096260703167

3641970_20201_2_0,vibebp4icz,-2.934916445509438,-133.43661978375502,-8.681395367422908

2898685_20201_2_0,vih2gp4icz,-4.487668855895248,-100.68851256948085,-24.57446988379192

3818087_20201_2_0,vih2yo4icz,-0.1323268757179321,-54.390625669116474,-28.60283851093277

5641688_20201_2_0,viirjn4icz,-0.3456047652810079,-102.81518200797134,-45.703839288950334

3941724_20201_2_0,vijvqo4icz,-0.288338835689825,-71.28466844630321,-25.558551996473597

1982916_20201_2_0,vikfko4icz,-0.7440044946339639,-89.77543006740623,-43.16915059413763

4969570_20201_2_0,vil2tn4icz,-0.3588159464720324,-158.90948963609907,-31.760151951641205

1874827_20201_2_0,vimg1o4icz,1.504212843293184,-124.87912528407054,-44.90095854382143

2155648_20201_2_0,visv7o4icz,3.535737680828737,-68.20590714062422,-55.83322050513786

4374679_20201_2_0,vitbkn4icz,3.257489677630036,-60.535930791931776,-53.46955325148865

5802456_20201_2_0,p98s9o4icz,1.2156274998219456,-62.61156967241098,-53.80012841485754

2147463_20201_2_0,viyzep4icz,1.4892021025178988,-66.69388582809108,-46.03083680112529

4839470_20201_2_0,vj8esn4icz,-0.14185588285799683,-96.90447342220091,-39.994425875278196

4431310_20201_2_0,vjddap4icz,0.24052413157064434,-97.53062688452619,-54.009380605182116

4302308_20201_2_0,vjf49p4icz,23.657066042556472,53.11370127911448,-96.19888054912647

3578493_20201_2_0,vjh0no4icz,-1.9100308536011972,-79.9965577482779,-22.044794521377924

5648699_20201_2_0,9a4pfn4icz,-0.5048150361627523,-147.48179158942474,-38.20690204018183

4680919_20201_2_0,vjhx7o4icz,-0.9525976651784855,-98.21829810019474,-47.6678942332471

2170728_20201_2_0,vji4to4icz,-5.1583789171859005,-108.59969559130565,-3.5495084367805703

2443496_20201_2_0,vjko5o4icz,-1.870463341020645,-103.79005829136472,-24.95821534366381

1406555_20201_2_0,vjnxln4icz,-1.5860182184468168,-121.47688841943875,-25.865139193411153

3255551_20201_2_0,vjp4fo4icz,-1.457498320497776,-76.82440909577963,-16.79314191173816

5328781_20201_2_0,vjqdin4icz,1.1996831182476204,-76.75115580203149,-59.96545449085659

1940114_20201_2_0,vjqh6o4icz,-0.4104561929161306,-123.57476249838297,-49.0098211191204

1718411_20201_2_0,vjt53o4icz,0.8124404918724164,-87.40852845257365,-35.01354359233811

3631720_20201_2_0,vjvp8p4icz,1.5360163294274696,-82.59912298520175,-32.3243776874623

5403413_20201_2_0,vjwt7n4icz,3.8334740586546885,-91.04676202314383,-49.99150283104231

3814521_20201_2_0,vk0wpo4icz,-0.5246587453239339,-59.230635497176166,-41.73791676551022

2693576_20201_2_0,vk7ean4icz,2.9323635826447982,-81.61267707489372,-51.54021319696096

3324593_20201_2_0,vk8rmn4icz,-1.0844514524761493,-85.89343253516986,-22.70264495396117

2796601_20201_2_0,vk8syn4icz,0.2005017689981574,-68.7239772125769,-33.33732981606448

5127987_20201_2_0,vkdu0o4icz,0.34630679786239477,-97.30210862953163,-38.85062132561487

4337648_20201_2_0,vke7un4icz,5.653024548741398,-57.51668958445265,-80.81684234332393

5830319_20201_2_0,vkf4io4icz,1.5132076302343318,-85.67171053084385,-53.31827677598034

2663323_20201_2_0,vkkbso4icz,-0.33029260959948437,-129.17959062067843,-27.952249068094105

4700943_20201_2_0,vkl6ep4icz,6.582647491797241,-80.7126403364594,-46.794818483218734

3958455_20201_2_0,vkmonn4icz,0.22391001177373177,-93.3389658004267,-35.588220332828655

5645416_20201_2_0,vkpsmo4icz,4.017377632057125,-87.71586618997429,-52.64957528205818

4249189_20201_2_0,vkqa2p4icz,6.090498724920021,-130.14964865138907,165.73742359468602

2449179_20201_2_0,vkrdto4icz,1.1582269611642226,-114.98310683778544,-38.49604666644258

2715829_20201_2_0,vkvi8p4icz,2.2756189844110155,-88.75488898825682,-34.057190667329536

5938909_20201_2_0,vkyegn4icz,-0.15587306148282573,-92.81152781509905,-19.973016753737156

2949102_20201_2_0,vkyuoo4icz,-1.5752172320168516,-114.71877508531054,-22.17413198115314

3250907_20201_2_0,vl36pn4icz,0.8215007503612727,-86.73955379843977,-48.873643430346704

1592189_20201_2_0,vl4vfp4icz,1.3261915662143524,-72.49766727157677,-40.35648531973288

4863292_20201_2_0,vl56po4icz,-1.053987156370852,-133.16493746621833,-31.565831467023543

5482435_20201_2_0,vl5ofp4icz,2.1708317002047637,-83.39916240213705,-42.0745672066557

1645946_20201_2_0,vl5uuo4icz,-0.6504550147938859,-107.0905473554752,-43.21842640601824

3845644_20201_2_0,vl6dwo4icz,2.7068765025931376,-99.03312303083709,-53.610767086027664

5065624_20201_2_0,vl8znn4icz,-0.2515784437607083,-139.94529965868642,-32.36287587379553

3044952_20201_2_0,vlb2wo4icz,-0.947241743186697,-67.93542347200034,-20.50008007554959

4974610_20201_2_0,vlckeo4icz,-5.665939282215406,-109.09089410792194,-13.923489380124892

4955358_20201_2_0,vlnsgo4icz,-3.9857813251387357,-69.24150152618984,-17.696555665328987

3144899_20201_2_0,vlqc3o4icz,-0.23524930932161786,-94.09349947330588,-31.953340301286914

4823515_20201_2_0,vlsh6o4icz,0.8828086882655167,-67.6871920476824,-46.58148901267157

2167841_20201_2_0,vlt29o4icz,0.8114785836512493,-102.8697588375673,-47.5650096225678

3711097_20201_2_0,vm1tfo4icz,0.16388926306163512,-85.91506290814118,-27.65830167256054

4390388_20201_2_0,vm2ogn4icz,0.9621994947311225,-125.99237407743641,-59.29619977218424

2951058_20201_2_0,vmazso4icz,1.5386641380257624,-84.59585177992457,-49.48922284225945

1809569_20201_2_0,i0t62p4icz,-2.865781216686951,-88.19596691765739,-20.88338235788416

5678110_20201_2_0,vmdq7n4icz,59.62329331113715,108.98384780185751,-218.40280680447967

2836840_20201_2_0,vmdwmn4icz,-1.18770527855773,-121.76820747580385,-33.59156807113149

2382041_20201_2_0,vmdy6o4icz,-0.8625610252676428,-103.67613223715881,-36.7309982468565

1330742_20201_2_0,vmeksn4icz,-0.009973332648245398,-94.54114215268666,-45.49649957795292

2490704_20201_2_0,vmgzwo4icz,3.9999700671919793,-33.85257353153412,-55.396980978072776

5035124_20201_2_0,vmh80p4icz,6.680388996068184,-86.6581157220005,-94.87382929624513

2332942_20201_2_0,vmm73o4icz,-0.26974715317600706,-88.65039368544893,-28.87577303633097

1646583_20201_2_0,vn36so4icz,-1.13205113661957,-97.5547638570525,-19.453985367236328

1436327_20201_2_0,vn3g4p4icz,1.721506600783081,-105.73791029687183,-57.32897528328233

2480324_20201_2_0,vn60un4icz,0.8345976298040936,-106.16057950781098,-41.21156205002663

5695324_20201_2_0,vnaa0p4icz,-0.5831716435020625,-95.50954565782516,-24.347542639876053

2198265_20201_2_0,vnbisn4icz,0.2323640475754267,-91.04133808807151,-29.457904360384575

5664977_20201_2_0,vncp0p4icz,2.112131733128009,-58.38577868564886,-58.73286040886589

3174696_20201_2_0,vne1ip4icz,1.4040449007075917,-69.57949521477738,-46.26069908100395

2069582_20201_2_0,vnggco4icz,2.5159852553485798,-96.29026339454512,-54.402758804220525

5035993_20201_2_0,vnhfno4icz,4.260619605504138,-66.16554124217103,-51.67464268791922

1966066_20201_2_0,hrnk8p4icz,19.877819756787773,3.3521496921699168,-131.17895820016028

4087743_20201_2_0,vnmfyo4icz,-0.19291770808334058,-44.48626356707706,-41.98366803583754

4500705_20201_2_0,vnqa6o4icz,-1.2879457774748562,-136.89898822069566,-35.77508618687807

4398064_20201_2_0,vnrzwn4icz,-0.567885578868408,-111.6502918045139,-31.35282661395709

2476674_20201_2_0,vnyq2o4icz,-4.692030742539077,-95.741171275612,-26.946726869531744

5797638_20201_2_0,vo31io4icz,-0.21631315399971282,-94.3622211624492,-25.466179783282314

6004421_20201_2_0,vo3dap4icz,0.06419763794190662,-117.83047447857135,-39.721002170220345

1922010_20201_2_0,vo5qeo4icz,1.4523334216603887,-104.08482445265778,-32.32645434152312

4379927_20201_2_0,vo798o4icz,1.3191181747805159,-53.80399521270468,-57.691991068111534

5958970_20201_2_0,vo79nn4icz,-0.3488166466227135,-99.82675399316201,-34.8949550235976

3875741_20201_2_0,vo8rfo4icz,-0.16326855182202632,-54.71534929901975,-26.554581906495955

5783549_20201_2_0,vo9mcp4icz,2.587742444804605,-117.35700758818936,-58.09662619791129

3783839_20201_2_0,voa93p4icz,2.476971650375909,-68.30954378862256,-48.488083127849706

2044378_20201_2_0,voo2po4icz,4.1025767372645126,-26.984546364651976,-49.23227347823297

3888098_20201_2_0,vorafo4icz,-1.9755585414779553,-104.24092230082934,-10.18567864710245

3957283_20201_2_0,votjan4icz,2.1676970513710634,-110.22888366102254,-52.16725285192294

4531573_20201_2_0,votren4icz,-0.8862487622708083,-107.84568924142084,-30.71969919083098

5600572_20201_2_0,voxotn4icz,1.7197174396003803,-100.94586097896203,-45.55309356824172

5982380_20201_2_0,vp07xn4icz,4.276116049839935,-72.60708372334128,-44.848202503811265

3132777_20201_2_0,vp6tcn4icz,-2.2578623956701955,-137.76868492833322,-32.81506079106457

1117037_20201_2_0,vp8c7p4icz,-1.631115892620587,-111.69640279992822,-35.7079363560495

3962558_20201_2_0,vpbdap4icz,1.0187984662261476,-100.80217108262701,-65.61043602918303

4131139_20201_2_0,vpdf5o4icz,-3.7617273477607616,-101.28236462069992,1.9535005766529423

2744606_20201_2_0,vpdxlo4icz,-0.14872799279662785,-92.62844826329092,-39.64309850083529

1780142_20201_2_0,cxv6qo4icz,0.25759893612396473,-69.2176209576377,-46.287455082624646

3560528_20201_2_0,vpjx7o4icz,0.4251304054285803,-107.53445028233864,-27.609262068269558

4934276_20201_2_0,95m0ro4icz,-1.1614930664414527,-156.04488689696868,-30.59310180519293

1631997_20201_2_0,vpn7ap4icz,-1.206737715431146,-105.70034694891044,-23.77428959592416

2164486_20201_2_0,vpnq5p4icz,4.558634585268933,-82.68843735703416,-75.77799074451224

2499528_20201_2_0,vpqbdn4icz,-1.8898646726194297,-83.49514918204807,-48.57506863664986

3757440_20201_2_0,vpriyn4icz,0.7476951753797177,-93.24469764635475,-30.04106772457095

5796555_20201_2_0,vptsdo4icz,1.2138000505844693,-117.54884434037734,-37.61893777752407

1862505_20201_2_0,vpxgyn4icz,0.4529173484787871,-116.97797461314232,-45.89814554234701

3974869_20201_2_0,vpxp8o4icz,2.364202335606855,-95.65327887736905,-54.664510147504444

2269764_20201_2_0,vq1kbp4icz,0.4426326747955426,-137.32636281463334,-52.708440696253064

5752076_20201_2_0,vq1qso4icz,-0.4742737946074067,-139.3117109178738,-42.502930697633445

1744156_20201_2_0,vq7xsn4icz,-2.146005984676297,-78.41834284019106,-42.65276483910215

3373143_20201_2_0,vq8sbn4icz,0.9332614076126322,-90.43106063134456,-39.10080047026159

4423917_20201_2_0,vq8uwn4icz,1.4521011294192365,-70.66182452238391,-49.68910550282135

3032280_20201_2_0,vqajep4icz,1.5584228706006482,-54.899071207917956,-45.0868536992695

3085732_20201_2_0,vqcm3o4icz,-17.882674375351137,-77.03418831682427,64.43737250861764

5923331_20201_2_0,vqcrjn4icz,0.870965174669292,-87.24954248585172,-45.74371474785569

5358519_20201_2_0,vqgwfn4icz,-1.27324678035096,-95.58161389150266,-30.47622065475744

1255638_20201_2_0,vqh0ep4icz,3.631507870588939,-87.11087677736532,-57.30408690630567

5623781_20201_2_0,vqjhon4icz,-1.5430960859686653,-113.94461046636187,-24.72813035417309

5750631_20201_2_0,vqn1ln4icz,-0.14333588056428648,-138.50306987170333,-49.644219189154185

2482876_20201_2_0,vqnrfo4icz,0.26440094096822436,-115.013960154463,-45.15408046121681

3914295_20201_2_0,vqu0bn4icz,-0.9672323281077672,-101.86059229763589,-40.99366696082265

4976594_20201_2_0,vqu7no4icz,-3.0303339128379863,-132.11076074159587,-19.457388179288344

4743074_20201_2_0,vqw2vn4icz,1.3023660245219797,-108.9996264190192,-44.797710936262135

2478034_20201_2_0,vr1lvn4icz,-0.8526342826205909,-78.40441128890404,-31.446951320300684

2271290_20201_2_0,vr1non4icz,1.2844954930342796,-116.29681466606584,-29.48758475485009

1256655_20201_2_0,vr4imo4icz,-1.8081222605879805,-125.34543162206097,-29.561351864375695

3738783_20201_2_0,vr7v6o4icz,-0.08286619799953354,-138.28458417225625,-50.05226080103483

5066382_20201_2_0,vra3do4icz,2.751460684119645,-76.9760979078132,-45.44874261481576

4739692_20201_2_0,vrbvhp4icz,0.24329509048008702,-78.26881589763786,-42.66731101598543

1567446_20201_2_0,vrigho4icz,0.591132789743553,-96.16287620524383,-30.36286532809774

4340100_20201_2_0,vrk01p4icz,0.9708274338898571,-43.33160045120144,-55.50109100410445

1530858_20201_2_0,vrk8yo4icz,-12.164158929415562,-99.06284694998902,41.198453417452285

2694699_20201_2_0,vrotco4icz,-0.3848558854071849,-136.60924175155066,-37.71173356816614

2097490_20201_2_0,vrpaon4icz,3.5464584733013407,-98.71040023872374,-61.2563957394232

5331866_20201_2_0,vrvt7o4icz,3.9001539144168267,-64.28883628038253,-59.83508811704992

5675677_20201_2_0,vrweno4icz,0.3587663313905761,-71.59618264632485,-33.54743950155091

1140155_20201_2_0,vs16no4icz,-0.549137300780634,-97.2379566715536,-35.78241123441896

5599928_20201_2_0,vs19oo4icz,0.8902387322137746,-80.28088969268109,-55.66050239664399

4020972_20201_2_0,vs3tqo4icz,-2.240964641573791,-65.9575813296185,-35.375092193292716

1988260_20201_2_0,vs46go4icz,-0.172386084617313,-67.39965115452304,-32.411975000524194

5082688_20201_2_0,vs6coo4icz,0.87471617722958,-63.144613908354785,-42.85060059212266

2059170_20201_2_0,vs8hhp4icz,1.9438861551162794,-88.2689471188458,-51.77095575145769

4335174_20201_2_0,vs9orn4icz,3.5430675794722637,-83.18704967523234,-78.66550805606707

3512290_20201_2_0,vscu5p4icz,-0.25778758377894584,-82.94884398377286,-40.93769505826195

5993931_20201_2_0,vsd0nn4icz,-2.9649158608173063,-134.7579619219538,-13.809548098428579

1984305_20201_2_0,vskfbo4icz,1.0831776922256597,-104.20739247105155,-35.52441545013055

2578390_20201_2_0,vskhdn4icz,-0.11747374030739896,-103.77610939340542,-29.341850837168522

2229121_20201_2_0,vsltuo4icz,1.1937329501566425,-73.75444604753534,-49.11745923681735

3519991_20201_2_0,vsm4fn4icz,0.05398665431257171,-106.2593018302382,-34.86921585571966

3739417_20201_2_0,vsnpxo4icz,2.007777907696633,-67.06448961666788,-41.42337510807681

5064797_20201_2_0,vsogfp4icz,-0.5531824667262527,-127.98741632721706,-39.692840708352165

4060559_20201_2_0,vsoyjn4icz,4.774615132311796,-57.51668056613016,-80.18083787404143

1825507_20201_2_0,vsp97o4icz,3.9842959104567623,-74.88572876505734,-60.5984456041019

4165930_20201_2_0,vsshdn4icz,-4.393839276680121,-146.07025312441942,-20.48535397824665

4120523_20201_2_0,vsxg8p4icz,2.391719238196796,-102.1789173732769,-50.557564486679

5988865_20201_2_0,vt5u9n4icz,-6.103838741987243,-108.3874534499653,-26.855864356596072

4447173_20201_2_0,vtc8dn4icz,2.562520156901218,-137.5029566463541,-32.31690943249558

2240160_20201_2_0,vtefyn4icz,-5.93445268314803,-121.30475010026333,-4.664788470135562

5286194_20201_2_0,vtkg3o4icz,-0.11147938892270653,-119.33624609457516,-19.594506229652467

5560920_20201_2_0,vtlxwo4icz,-0.6746719800693552,-74.71632191819876,-35.930985028820004

2408618_20201_2_0,vtws6o4icz,-1.6123961882073259,-90.83562890192636,-4.412485055998076

3618199_20201_2_0,vtyjmo4icz,-1.449514245711306,-99.06005870785015,-42.602306074054354

1017090_20201_2_0,vu44gn4icz,-0.08230753074981974,-102.61688959272061,-30.611684002849785

3468103_20201_2_0,vu6x6p4icz,-3.893469624238727,-117.08776738220837,-28.049604354589263

1841249_20201_2_0,vu939p4icz,-3.0848941888317403,-90.910796601322,-26.465893729813928

2580906_20201_2_0,vud78o4icz,-0.6992945621200651,-126.58897145461219,-19.74216064342528

4792769_20201_2_0,vudtzo4icz,-1.8336877662021827,-112.58813947374776,-29.43146028820955

1073785_20201_2_0,vufvfp4icz,-1.3997386002278691,-93.99156122060566,-34.80748208029135

4212746_20201_2_0,vujexo4icz,0.5193387194489836,-83.9079543405353,-49.34383417016262

5895045_20201_2_0,vul5cp4icz,10.042168632798312,-110.34857949035268,322.1527159294415

5928589_20201_2_0,vul87p4icz,6.909675194986342,-80.01451938634855,-51.77329722889233

5526893_20201_2_0,aeq1sn4icz,0.8179406761975384,-71.57616322081387,-34.35716382237584

2743350_20201_2_0,vuok7o4icz,-1.2400040551454625,-69.53327718589333,-40.12143591063453

2837339_20201_2_0,vuroin4icz,-1.293008712020333,-98.92597259632828,-29.32467968219663

3028211_20201_2_0,vus7cp4icz,0.5225596622363144,-68.17311171116742,-39.759662972402595

5698461_20201_2_0,vuueun4icz,-1.6362359892198743,-86.62900403145278,-8.011732776920724

3947876_20201_2_0,vuv2qn4icz,2.4927638882840584,-64.7660641238138,-36.95543164676556

1066823_20201_2_0,vuvq7p4icz,2.2871884093878907,-89.83034454427047,-54.321935249283214

2432619_20201_2_0,vuws2p4icz,0.41216659282204177,-110.10124871594198,-39.72693896472882

2933599_20201_2_0,vuww0p4icz,-1.2149654164921582,-56.86723894512386,-29.36007565019449

4882955_20201_2_0,vv1bxo4icz,0.9052125630195557,-56.13423893373255,-45.63343453775528

3138446_20201_2_0,vv55fn4icz,-0.3908768361351974,-85.39261094279831,-28.37565948479127

2082321_20201_2_0,xrtb2o4icz,0.4563633480025007,-94.79464916608279,-27.250402051356744

1447074_20201_2_0,vva3ho4icz,4.951505246018172,-166.26857059281986,-83.60376695562887

1594065_20201_2_0,vvaako4icz,0.9385158409190142,-61.58865992476936,-34.32947952050121

4440170_20201_2_0,vvc0po4icz,-1.6964352261661697,-94.1735748327161,-24.329949427639036

3070804_20201_2_0,vvca8n4icz,2.2034400906114673,-109.08971938323805,-63.041626312651374

1989491_20201_2_0,vvdavn4icz,-0.625973038166657,-77.76863086037378,-73.44690766336117

1271992_20201_2_0,vvelgp4icz,0.6648044512385085,-126.8185505713164,-50.91393658082234

1097919_20201_2_0,vvg8fo4icz,1.154444195594518,-111.14382247307233,-37.324651055158085
 81%|████████  | 655/810 [18:38<05:27,  2.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 656/810 [18:40<05:05,  1.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 657/810 [18:41<04:42,  1.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 658/810 [18:43<04:53,  1.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████▏ | 659/810 [18:45<04:28,  1.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████▏ | 660/810 [18:46<04:17,  1.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 661/810 [18:48<04:09,  1.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 662/810 [18:49<04:00,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 663/810 [18:51<03:51,  1.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 664/810 [18:52<03:51,  1.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 665/810 [18:54<04:04,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 666/810 [18:56<03:54,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 667/810 [18:58<03:54,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 668/810 [18:59<03:56,  1.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 669/810 [19:01<03:52,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 670/810 [19:03<04:18,  1.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 671/810 [19:05<04:09,  1.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 672/810 [19:06<03:53,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 673/810 [19:08<03:44,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 674/810 [19:10<03:50,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 675/810 [19:11<03:42,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 676/810 [19:13<03:32,  1.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▎ | 677/810 [19:14<03:36,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▎ | 678/810 [19:16<03:34,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 679/810 [19:18<03:41,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 680/810 [19:19<03:30,  1.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 681/810 [19:21<03:30,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 682/810 [19:23<03:26,  1.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 683/810 [19:24<03:25,  1.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 684/810 [19:26<03:23,  1.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▍ | 685/810 [19:27<03:17,  1.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▍ | 686/810 [19:29<03:17,  1.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▍ | 687/810 [19:30<03:08,  1.53s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▍ | 688/810 [19:32<03:07,  1.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▌ | 689/810 [19:35<04:02,  2.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▌ | 690/810 [19:39<05:25,  2.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▌ | 691/810 [19:41<04:32,  2.29s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▌ | 692/810 [19:42<04:05,  2.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 693/810 [19:44<03:42,  1.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 694/810 [19:45<03:21,  1.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 695/810 [19:47<03:23,  1.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 696/810 [19:48<03:10,  1.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 697/810 [19:52<04:20,  2.31s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 698/810 [19:53<03:48,  2.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▋ | 699/810 [19:55<03:34,  1.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▋ | 700/810 [19:57<03:23,  1.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 701/810 [19:58<03:14,  1.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 702/810 [20:00<03:16,  1.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 703/810 [20:02<03:00,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 704/810 [20:05<03:44,  2.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 705/810 [20:06<03:19,  1.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 706/810 [20:08<03:10,  1.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 707/810 [20:09<02:58,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 708/810 [20:11<02:56,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 709/810 [20:13<02:53,  1.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 710/810 [20:14<02:47,  1.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 711/810 [20:16<02:41,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 712/810 [20:20<03:47,  2.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 713/810 [20:21<03:23,  2.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 714/810 [20:27<05:14,  3.28s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 715/810 [20:29<04:23,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 716/810 [20:31<04:07,  2.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▊ | 717/810 [20:34<04:15,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▊ | 718/810 [20:36<03:42,  2.42s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 719/810 [20:38<03:18,  2.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 720/810 [20:39<03:05,  2.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 721/810 [20:42<03:04,  2.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 722/810 [20:43<02:47,  1.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 723/810 [20:45<02:40,  1.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 724/810 [20:46<02:28,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|████████▉ | 725/810 [20:48<02:20,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|████████▉ | 726/810 [20:49<02:13,  1.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|████████▉ | 727/810 [20:51<02:08,  1.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|████████▉ | 728/810 [20:52<02:07,  1.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 729/810 [20:54<02:04,  1.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 730/810 [20:55<02:00,  1.51s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 731/810 [20:57<02:02,  1.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 732/810 [20:59<02:21,  1.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 733/810 [21:02<02:35,  2.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 734/810 [21:03<02:19,  1.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 735/810 [21:04<02:07,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 736/810 [21:06<02:11,  1.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 737/810 [21:08<02:06,  1.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 738/810 [21:10<01:59,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 739/810 [21:11<01:57,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████▏| 740/810 [21:13<02:02,  1.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████▏| 741/810 [21:15<01:54,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 742/810 [21:16<01:52,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 743/810 [21:20<02:25,  2.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 744/810 [21:21<02:11,  1.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 745/810 [21:23<01:59,  1.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 746/810 [21:24<01:55,  1.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 747/810 [21:26<01:58,  1.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 748/810 [21:29<02:00,  1.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 749/810 [21:30<01:50,  1.81s/it] 93%|█████████▎| 750/810 [21:31<01:41,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 751/810 [21:33<01:39,  1.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 752/810 [21:35<01:35,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 753/810 [21:36<01:35,  1.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 754/810 [21:40<01:57,  2.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 755/810 [21:41<01:46,  1.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 756/810 [21:43<01:37,  1.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 757/810 [21:44<01:30,  1.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▎| 758/810 [21:45<01:23,  1.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▎| 759/810 [21:50<02:10,  2.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 760/810 [21:52<01:59,  2.38s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 761/810 [21:54<01:42,  2.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 762/810 [21:55<01:34,  1.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 763/810 [21:57<01:24,  1.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 764/810 [21:58<01:19,  1.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 765/810 [22:00<01:14,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▍| 766/810 [22:01<01:09,  1.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▍| 767/810 [22:03<01:06,  1.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▍| 768/810 [22:04<01:08,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▍| 769/810 [22:06<01:05,  1.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▌| 770/810 [22:08<01:05,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▌| 771/810 [22:11<01:20,  2.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▌| 772/810 [22:12<01:13,  1.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▌| 773/810 [22:14<01:05,  1.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 774/810 [22:16<01:03,  1.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 775/810 [22:21<01:35,  2.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 776/810 [22:22<01:24,  2.49s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 777/810 [22:24<01:13,  2.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 778/810 [22:26<01:11,  2.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 779/810 [22:28<01:04,  2.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▋| 780/810 [22:30<00:58,  1.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▋| 781/810 [22:31<00:52,  1.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 782/810 [22:33<00:49,  1.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 783/810 [22:35<00:48,  1.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 784/810 [22:36<00:44,  1.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 785/810 [22:38<00:41,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 786/810 [22:40<00:48,  2.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 787/810 [22:42<00:43,  1.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 788/810 [22:44<00:39,  1.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 789/810 [22:45<00:36,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 790/810 [22:47<00:33,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 791/810 [22:49<00:32,  1.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 792/810 [22:50<00:30,  1.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 793/810 [22:52<00:27,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 794/810 [22:53<00:25,  1.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 795/810 [22:55<00:23,  1.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 796/810 [22:56<00:21,  1.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 797/810 [22:58<00:20,  1.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▊| 798/810 [22:59<00:18,  1.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▊| 799/810 [23:01<00:16,  1.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 800/810 [23:04<00:19,  1.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 801/810 [23:06<00:17,  1.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 802/810 [23:07<00:14,  1.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 803/810 [23:09<00:12,  1.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 804/810 [23:11<00:10,  1.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 805/810 [23:12<00:08,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|█████████▉| 806/810 [23:14<00:06,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|█████████▉| 807/810 [23:15<00:04,  1.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|█████████▉| 808/810 [23:17<00:03,  1.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|█████████▉| 809/810 [23:18<00:01,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|██████████| 810/810 [23:21<00:00,  1.81s/it]100%|██████████| 810/810 [23:21<00:00,  1.73s/it]

3456193_20201_2_0,vvkohp4icz,26.6541635023913,15.302734961146996,-148.57835810065734

1630284_20201_2_0,vvporn4icz,-0.10715820821092883,-70.36107598511745,-41.78701608420283

3071309_20201_2_0,vvsajn4icz,-4.631465713568241,-133.97712943755923,-4.772133664124496

5151573_20201_2_0,vvvkno4icz,0.3077293351839665,-90.36716966405464,-27.604408575795475

4419177_20201_2_0,vvw51p4icz,-0.5833310173634783,-57.146764294769184,-34.3446730139419

2400245_20201_2_0,vw3ban4icz,0.8645404492597263,-121.11852879602802,-35.524474860173555

3786056_20201_2_0,vw6g1o4icz,-0.4158183796133426,-98.23529220234931,-39.3891121088553

2963824_20201_2_0,vw6ifp4icz,2.148603749194896,-100.46804959586049,-51.3024797045462

1541178_20201_2_0,vw6rmn4icz,19.45946250161433,-27.09583726429426,-64.09605839589952

2334730_20201_2_0,vw6z8o4icz,-3.290164386232263,-77.1890652202508,-17.28437692056849

1781071_20201_2_0,vw8vzo4icz,-3.3426395101562756,-114.83315234334606,-32.3604092756167

5100423_20201_2_0,vwcjwo4icz,0.8504699122917896,-93.75741938275027,-50.81743812413869

5293250_20201_2_0,vwdu4o4icz,-0.11624800673257164,-70.18856185574282,-36.05976109982906

4074592_20201_2_0,vwjwro4icz,1.5706429941759366,-48.70810934330203,-47.48339571488489

2513332_20201_2_0,vwl7so4icz,2.192102519757055,-74.77631093310455,-40.262664387381705

3428838_20201_2_0,vwo7ap4icz,-0.21245542008597684,-142.8594185204396,-30.270859351400176

5770133_20201_2_0,vwt5po4icz,-1.3857089979846449,-80.10093018072962,-26.64143945946209

3465452_20201_2_0,vwtgao4icz,-2.4275179049043403,-88.01686998056292,-41.71342209457795

5811817_20201_2_0,vww6fp4icz,-0.4785423781403933,-64.59494394725425,-37.2428892761975

2683247_20201_2_0,vwzh8n4icz,0.08593741601934655,-95.78338528727818,-22.324449787581486

3174621_20201_2_0,vx0hjp4icz,-0.17860039412729953,-128.6966062667613,-30.055120991536924

4215333_20201_2_0,vx35qn4icz,3.8451528993691495,-99.88055207047827,-48.49705175552998

3527921_20201_2_0,vx5jtn4icz,-4.772155141735208,-141.98839093762837,-4.219456953333875

2559877_20201_2_0,vx72wn4icz,-1.5030669301351043,-82.06670002319817,-34.452741901147846

1748563_20201_2_0,vx7isn4icz,-3.214597025823841,-98.40170824186049,-8.579933440839199

4731064_20201_2_0,vxa7nn4icz,0.5383864677534038,-109.02654704265456,-51.19124908719921

2010213_20201_2_0,vxfkgn4icz,-2.3787781710262745,-154.85141703475168,-27.14692053811096

5913191_20201_2_0,vxi7jo4icz,-2.0709356574956477,-99.39182915174999,-33.12999607850959

1498881_20201_2_0,vxkbkn4icz,-1.6317462497050506,-63.52082992222964,-21.86527378227443

3175279_20201_2_0,vxmnmo4icz,0.053545115428937945,-113.83907701814059,-32.50133017337893

2832618_20201_2_0,vxqnjn4icz,0.2510523318267314,-103.57348916195085,-36.9838695911058

1120321_20201_2_0,vxrnxo4icz,-0.006146800002418484,-88.71665545538139,-42.62760199574461

2070079_20201_2_0,vxtfgo4icz,4.851127039715543,-56.581259872466745,-73.32832734308586

5528036_20201_2_0,vxxrsn4icz,0.5703818872061639,-74.50981518113781,-38.101404085856956

4334884_20201_2_0,vxym9o4icz,-5.843643039389772,-102.9849691081146,-37.58302492014852

5596465_20201_2_0,vy2mso4icz,-2.3504825326396355,-69.89719443322184,-20.204770976135606

2248327_20201_2_0,vy5gmo4icz,-1.0236576514794231,-112.64224524974301,-33.75419635174899

1288264_20201_2_0,vy9fjp4icz,-1.5638924875922144,-64.06646386904183,-39.25237747134992

3066895_20201_2_0,vyaxxo4icz,2.731740041540317,-101.81491069349349,-46.32172279348957

5490832_20201_2_0,vybsgo4icz,-6.2880458911335015,-140.5289208815858,-11.104972107926969

4827844_20201_2_0,vycicn4icz,0.9638079669363933,-91.0715478358336,-54.99925481081088

5342823_20201_2_0,vye8dn4icz,1.3009319727654327,-108.19222893988953,-49.743481755335324

2929948_20201_2_0,vylf5p4icz,7.163653556055324,-98.62968751427223,-98.3223771189741

5700240_20201_2_0,vymkzo4icz,-0.6398618590165842,-103.79229707204786,-24.979983872311664

3759817_20201_2_0,vyo73o4icz,-5.271186399411224,-122.68698210467136,14.372333873538182

2948668_20201_2_0,vyq2on4icz,-0.2668091974259335,-69.2661505903082,-48.27414034406996

4423871_20201_2_0,vysb3p4icz,-4.708092089935611,-89.63502099702029,-2.8843594699368396

4525326_20201_2_0,vysv3p4icz,-1.958342699426432,-155.96236764646292,-39.90756907450408

5436428_20201_2_0,vz0a6n4icz,-3.292946739995641,-131.1345212613594,-13.4613241791521

4998863_20201_2_0,vz16gp4icz,-1.599175956906485,-66.20593631503382,-23.997468110791715

3427608_20201_2_0,vz2tip4icz,-3.0471522565282188,-114.74393152900822,-9.289405476501301

2673895_20201_2_0,vz43on4icz,-0.5557692781403882,-88.31027274741734,-23.642410087809566

3824544_20201_2_0,vz6exn4icz,-1.3296102679467559,-97.14513448204545,-24.719856168859053

3830116_20201_2_0,vz6mln4icz,-1.4699783990698754,-112.5087201944022,-36.22891540207108

1274833_20201_2_0,vz7gbo4icz,3.5951200288967033,-92.00322381490312,-74.37052324906503

4334510_20201_2_0,vz7t0p4icz,1.022519688930646,-102.02999490214907,-58.742805496185085

3597700_20201_2_0,vzg47p4icz,0.36042284401658525,-110.08844991039805,-44.81246692214194

5467497_20201_2_0,vzgeip4icz,-0.004501412541651654,-45.68226738756229,-53.56109897552531

3403274_20201_2_0,vzh7ao4icz,-0.24804244554568017,-111.23395119745607,-32.24244617744303

3353590_20201_2_0,vzmwdo4icz,1.449590229514819,-98.5661602659851,-27.278261203606746

4782188_20201_2_0,vznaxo4icz,1.8074892170981651,-66.8527772434735,-37.178016051365276

2485951_20201_2_0,vzojip4icz,-0.6568406878825656,-71.78443350357313,-46.92562004093912

1411028_20201_2_0,vzsy2p4icz,-1.222893140418775,-57.04345393283509,-45.29325093056039

2105617_20201_2_0,vzv0do4icz,-1.7616504594252196,-72.93110297360687,-20.891880045644456

1803049_20201_2_0,vzwcao4icz,13.17811351056724,-95.54677063732584,-106.03131605325217

1125729_20201_2_0,w05hlo4icz,1.0488530656019392,-99.20815732764916,-23.405843171383367

5569184_20201_2_0,w071vn4icz,-0.655293935752976,-103.6621340742154,-25.04144945244191

3408649_20201_2_0,w084ap4icz,0.30404095864251235,-101.25991252155592,-48.55176089976014

1673909_20201_2_0,w0ib1p4icz,0.32265787591621686,-64.64690059057264,-40.18272702376265

4491884_20201_2_0,w0jo0o4icz,-2.436891759827416,-59.30152060340927,-27.416760615211132

2790172_20201_2_0,w0jqin4icz,1.8360420604331387,-101.68669727462361,-54.75210970678728

5738039_20201_2_0,ky5p4p4icz,-2.1366648739543135,-50.96729205766093,-22.980150345490458

3110454_20201_2_0,w0q8mo4icz,-0.6368912966649265,-72.93202225188577,-26.246182063511412

3917244_20201_2_0,w0qwsn4icz,-2.7196447970421995,-76.43795115379399,-16.310343764515366

2326555_20201_2_0,w0txkn4icz,-1.7982051560576326,-154.88600417042963,-27.257591063178552

4020850_20201_2_0,druglo4icz,0.25685334932257164,-58.494537499562455,-43.86690314432566

3309894_20201_2_0,w0vpan4icz,1.142183224964168,-99.1067029426801,-56.11391567359887

1785114_20201_2_0,w0xbvn4icz,-1.138871466471016,-98.10428502055291,-22.782783102888942

2646886_20201_2_0,w0yd4o4icz,2.714899152401169,-119.13783235948017,-42.64015024320294

5902775_20201_2_0,w0yyao4icz,-9.039965811792625,-131.55835503420064,-5.66588968983892

3031866_20201_2_0,w10fcp4icz,-1.0312180737519963,-124.05532942932439,-20.208111687874847

4721461_20201_2_0,w162co4icz,1.3077333574410153,-123.27748217903732,-51.292657974845866

5721245_20201_2_0,w16zuo4icz,0.4322159756590008,-82.1413976289472,-23.163726409950158

1641775_20201_2_0,w187hp4icz,-2.877129557785286,-120.84138610699253,-30.696153637439295

2225712_20201_2_0,w1cvco4icz,7.883446287815573,-63.95090288338369,-65.61030064886228

3198175_20201_2_0,w1g6ro4icz,-0.5102215399616216,-100.39361643442427,-43.4596791957392

5319477_20201_2_0,w1ms9p4icz,0.5311966775408409,-91.68818212757662,-51.92733461216139

3780555_20201_2_0,w1o0uo4icz,0.9074419315426486,-91.10493593273029,-20.13697491939965

3796224_20201_2_0,w1q3wn4icz,-9.049362482824096,-116.6204574908999,21.340790775752836

3814596_20201_2_0,w1qkap4icz,-2.024577041490735,-94.96654245047708,-23.74311009757406

4615870_20201_2_0,w1riun4icz,-2.4081842206918123,-87.09719478102147,-36.50786811271257

3804150_20201_2_0,w1sveo4icz,-1.6917112666075425,-86.75397195791743,-26.341462716477224

2939581_20201_2_0,w1w7ap4icz,0.36822544507658606,-104.44408208993144,-39.664846193346975

2272978_20201_2_0,w1ykin4icz,-0.41162959306836583,-102.54678545359585,-27.483788509208054

4880449_20201_2_0,w20qno4icz,-2.2328381349039916,-54.732960667869975,-29.383138580840438

2858001_20201_2_0,w22wwo4icz,-0.8089302475709754,-56.69311071910178,-21.758893027691997

4975453_20201_2_0,w24tmn4icz,-0.2811932804166551,-71.48549456117277,-24.94278721319968

2659143_20201_2_0,w25ken4icz,14.24218397512672,-13.530771968574015,-102.67643980090537

3761226_20201_2_0,w2728p4icz,-1.021002962813674,-88.16279581189903,-15.868409674500867

2934330_20201_2_0,w2g6ep4icz,-1.0398312245601995,-137.83873474326194,-30.208785137771073

5594225_20201_2_0,w2i1xn4icz,3.1133991958117755,-122.28349389086242,-62.44824512240805

5294549_20201_2_0,mmviyo4icz,-0.7766651616761939,-113.68246595814546,-23.729065893616593

3518530_20201_2_0,w2jvsn4icz,-7.773379484553478,-130.25037194051222,-4.8054561749736

5513897_20201_2_0,w2k3sn4icz,2.190047216108953,-102.09555486088115,-50.57920328871043

3318709_20201_2_0,w2khtn4icz,-4.068184031091844,-110.124739248748,-4.706015489761555

5786999_20201_2_0,w2xqbo4icz,3.199818057587203,-79.4478344440611,-53.698204907018365

1217637_20201_2_0,w2yigo4icz,-0.04036428939107158,-46.845317926266176,-33.79368930135152

2241507_20201_2_0,w36bho4icz,16.498364006964614,-75.30183597267026,-110.82188447194767

2556941_20201_2_0,w36npo4icz,1.1053956422188302,-62.79898998353883,-54.78704353041982

5150661_20201_2_0,w3bcqn4icz,0.135264537112019,-70.62023885958752,-31.370770105216394

3062963_20201_2_0,w3ko5p4icz,-1.461124264632556,-148.18939592914046,-29.870033719972085

1026505_20201_2_0,w3lcqn4icz,0.8810932066854062,-135.7500972088295,-36.80342497918244

3086939_20201_2_0,w3nzjp4icz,-4.046868533911218,-75.8927221974565,-15.06691804291296

1439673_20201_2_0,w3rfon4icz,-0.623651325953944,-100.29840289340555,-30.139821400571407

5586811_20201_2_0,w3ro5p4icz,-0.5294332534064289,-135.45882050079896,-31.04932861095343

1443402_20201_2_0,w3sbgn4icz,3.972896120185503,-80.5908474054072,-81.5302187598526

1665507_20201_2_0,w3t1fp4icz,1.398765420550691,-65.71007914376577,-32.38964338142671

4237595_20201_2_0,w44qno4icz,1.8827950302431804,-89.88884474571535,-40.130467314521255

5479846_20201_2_0,w4b1bp4icz,-0.5253148892080058,-73.86434688646338,-31.353763389811547

1758310_20201_2_0,w4eo5o4icz,-0.22532084011877232,-84.140475356911,-34.9630741860547

4310378_20201_2_0,w4hrqn4icz,1.722239046370014,-112.33435595527166,-54.36318004653684

5230942_20201_2_0,w4hzzo4icz,-1.4057084628732321,-127.61194937405901,-11.391641064731004

4346661_20201_2_0,w4ivsn4icz,4.520005543749922,-103.15714978612911,-60.77949719628646

4456868_20201_2_0,w4lw7p4icz,0.0884884689667739,-117.28632777519607,-49.869923867031176

5834207_20201_2_0,w4rbvn4icz,0.6233945038859844,-80.71933550855817,-39.74280859832734

2803374_20201_2_0,w4vugp4icz,2.5532377495869314,-63.89391456313632,-48.6120226700846

4034470_20201_2_0,w4zbip4icz,-0.1000062676344749,-56.083151343482626,-46.03301488801526

5974536_20201_2_0,w50gtn4icz,1.4290890277947885,-72.50431826082644,-50.04060154322988

5032637_20201_2_0,w51cip4icz,-1.2127900690833717,-95.27229369855303,-18.173337809341177

3106813_20201_2_0,mksvuo4icz,-1.044911005150806,-70.27885450911418,-22.664918683560202

4409828_20201_2_0,w5223p4icz,0.3358748760961372,-87.42359574426376,-41.44055263410266

1092586_20201_2_0,w522nn4icz,-1.2838189794451869,-113.98265606926131,-16.389514947340786

4362736_20201_2_0,w563sn4icz,0.9844928204092245,-92.93397075673172,-38.42984965944035

2252044_20201_2_0,w56y0p4icz,6.134450458408988,-49.52724122165134,-63.3251807905626

3969540_20201_2_0,w58iso4icz,1.9748468682776774,-52.99139596028505,-40.19719903240339

4537700_20201_2_0,w58l5p4icz,0.5871403937782171,-67.5910511155673,-45.68992065467059

3345557_20201_2_0,w59tto4icz,-2.6473389206434477,-122.41353258240073,-20.537467757573594

3694752_20201_2_0,w5brqo4icz,-1.4667801612903273,-78.18246833733832,-18.24193709426281

2377912_20201_2_0,w5cmun4icz,-24.037635279236213,-165.02035594740192,53.56840289890232

3694396_20201_2_0,w5csyo4icz,1.30950508953823,-92.84106822741154,-53.101500513451

4515656_20201_2_0,1kp8gp4icz,-2.633606443697204,-103.02822255911258,-15.021685111796472

5504057_20201_2_0,w5ehrn4icz,0.9327460095471983,-77.42472393803078,-30.214945165079243

1306443_20201_2_0,w5gojp4icz,-1.1404863892682804,-80.0747479961434,-29.166232804874028

2633158_20201_2_0,w5msko4icz,-0.0902947764436824,-74.48665632145145,-49.43572884909118

3275233_20201_2_0,w5snln4icz,-1.394365821574697,-100.7526447861477,-26.19696900359388

1901872_20201_2_0,w5u1ao4icz,-0.6776891452684154,-80.15482941940743,-25.836208835825317

2344044_20201_2_0,w5zgpn4icz,-10.679589098279708,-126.06269330705635,-22.497419514141313

4745319_20201_2_0,w60kln4icz,-1.3030476610517887,-87.2111653203487,-23.44920329716217

4922207_20201_2_0,w614eo4icz,-1.0385922300535504,-128.66348383165152,-25.00854603424399

3254848_20201_2_0,w641oo4icz,0.5661844560032424,-91.09419131738107,-54.2748761574712

5037366_20201_2_0,w6cado4icz,1.2069877426236264,-91.21130069814089,-30.642061071619736

2571258_20201_2_0,w6hl7p4icz,-0.24697320124686908,-89.4590904323897,-24.508301285685803

5421852_20201_2_0,w6i8bp4icz,2.7836287285038677,-124.67148435839422,-33.731201366419896

1239988_20201_2_0,w6jxzo4icz,2.0337628140140143,-74.84140036417182,-36.199759051976244

1662688_20201_2_0,95i2mn4icz,-0.009583070944477584,-109.18315714980466,-41.78642257638374

3941799_20201_2_0,w6sjjn4icz,1.1665382682444974,-110.5799275906009,-78.66499511764843

1774278_20201_2_0,w6wfip4icz,2.5481557461458433,-70.4195623335057,-46.529920165671555

2114099_20201_2_0,w6ywjn4icz,5.71820739292658,-111.64971547432665,-59.65474665305295

1402428_20201_2_0,w6z3bn4icz,1.114425500091303,-84.05245947161848,-40.644241157955264

5416642_20201_2_0,w71n9o4icz,1.9111527513092634,-59.30296169201034,-60.47869197449256

2748445_20201_2_0,w75t2p4icz,3.1820726703724924,-25.780600229054187,-52.62376569803004

3296419_20201_2_0,w789zo4icz,4.267553463971446,-73.16364223234763,-59.6774308297164

4319578_20201_2_0,w79w9o4icz,-4.704660219121791,-95.50886679684245,-6.7979488282757785

1857538_20201_2_0,w7a43p4icz,-2.7378027182288123,-88.14542178928201,-16.741861232999128

3455220_20201_2_0,w7df7o4icz,-0.18868967601631856,-81.27979013587844,-58.57347506867154

4784940_20201_2_0,w7gvhn4icz,0.35522389379227776,-113.75780631249432,-44.93532999327364

3623298_20201_2_0,w7juep4icz,0.02321551988056476,-108.23046374188726,-52.911746362821916

3904205_20201_2_0,w7n4mn4icz,1.6120294646949942,-72.74111393049952,-54.05379049783744

3168364_20201_2_0,w7o11o4icz,3.4157516039962745,-94.72939329860881,-52.453088340588636

5947614_20201_2_0,w7shio4icz,-0.4551546344150325,-112.51575381431971,-41.08519765896639

5621377_20201_2_0,w7w38p4icz,4.1504347587635975,-92.61998421903252,-71.94339734792398

5518454_20201_2_0,w7xmbo4icz,1.522651051195424,-111.91881790241663,-42.84647268253404

2113152_20201_2_0,w82lmn4icz,1.3582854271499758,-91.78841785979802,-28.823113532926044

2827341_20201_2_0,w84abp4icz,-2.1271274209853623,-62.914747772773836,-30.51288432174806

5349416_20201_2_0,w84b3o4icz,-1.8297354130190233,-112.28028282428443,-18.36163456159983

1209798_20201_2_0,w86agp4icz,-1.568208237429493,-145.8880620842841,-20.439730685527138

5488227_20201_2_0,w89suo4icz,-1.7281456729920979,-114.34666755245698,-31.204575415475432

1112941_20201_2_0,w8fcvo4icz,-2.6361041174314446,-123.62950473884084,-26.736561780821347

4182175_20201_2_0,pf026p4icz,-2.2563769317017246,-92.98809388818913,-13.979664410188462

5808132_20201_2_0,w8gp9p4icz,1.1522714916364114,-113.46288276412801,-47.75214295068743

4738471_20201_2_0,w8i42o4icz,1.0464703979412684,-102.49178058866045,-34.85422961993696

4442935_20201_2_0,w8igun4icz,-0.3582388485650365,-105.31567921871218,-25.334655010365395

3131738_20201_2_0,w8jcfn4icz,2.3527884058322193,-104.69908218947691,-63.95265270357291

4581099_20201_2_0,w8jpun4icz,1.2697881219440554,-54.12576509505453,-50.33059679353232

2221443_20201_2_0,w8k8gp4icz,3.6585108554541628,-94.2002277778032,-62.90082739989148

3719398_20201_2_0,w8m71o4icz,2.804989782501001,-109.18487159794046,-39.95671803440278

5366766_20201_2_0,w8my9p4icz,-1.592910300030998,-126.00426349763285,-22.38205640434998

4272762_20201_2_0,w8nn6p4icz,-3.337507224129395,-113.94723580612094,-43.733791962862654

4042788_20201_2_0,w8olbp4icz,-108.86361938356129,321.09905433842846,299.4613904213152

5894931_20201_2_0,w8rgcp4icz,0.8236398963225361,-76.77031491059765,-44.836405550044304

1048993_20201_2_0,w8rw6o4icz,3.908291340045372,-135.6921101610412,-50.675959325472206

5886385_20201_2_0,w8scqo4icz,0.36906084228033637,-121.0825720839481,-39.73582770964015

4680522_20201_2_0,w8u1wn4icz,2.037365078468622,-80.45269018679227,-54.59428673247223

3490474_20201_2_0,w96flo4icz,0.4244217142334041,-124.76061633348937,-35.83708594494556

5975444_20201_2_0,w99non4icz,-1.7622972941448924,-87.2636311131688,-29.88121916326135

1814515_20201_2_0,w9fl0p4icz,-1.1401822827306882,-125.78343506183617,-8.418461357387045

2447058_20201_2_0,w9gb5o4icz,-2.349661573212075,-133.3300797540175,-22.873293647043994

5675621_20201_2_0,w9gh3p4icz,2.1351178248733853,-84.65296497441508,-39.06205246944434

2748662_20201_2_0,w9j5xo4icz,0.38539141736476606,-95.1600008316284,-41.67443049006414

5338179_20201_2_0,w9knxn4icz,-4.986817821947439,-113.58025780984815,-32.954074308628606

5838370_20201_2_0,w9mpjo4icz,0.9189933360718875,-34.75289532814617,-30.776081398481978

4355141_20201_2_0,w9mxln4icz,1.5664098105032036,-90.04971979914353,-28.574292763607843

4754174_20201_2_0,w9ovuo4icz,-1.3855172900035682,-89.67174047418365,-30.14096053749735

4274629_20201_2_0,w9pf9o4icz,4.142548707216262,-68.30055190414689,-74.5295665361248

5003096_20201_2_0,w9ph2p4icz,-4.250695982893895,-117.21851714064383,-28.480625094250968

5114651_20201_2_0,w9vc1o4icz,-1.9803529772888728,-93.73975039303042,-10.242930583968018

5841778_20201_2_0,wa1txo4icz,-9.358102658454285,-125.13914199211541,19.242647490314567

2008934_20201_2_0,wae6ip4icz,-0.35565878997279077,-72.55722403099344,-39.27145571595143

4058136_20201_2_0,wagl2o4icz,0.053681901752839774,-99.86475013915756,-37.348729889370276

4693682_20201_2_0,wajyfo4icz,-2.0231347370230823,-87.38907892846632,-17.69228271752496

4575604_20201_2_0,walexn4icz,1.0798998885246993,-115.30886547448861,-30.24811459983256

2295163_20201_2_0,wapjbp4icz,0.44600445060229044,-87.22101103055749,-52.80844561857913

3298030_20201_2_0,warz9n4icz,0.9142258405216411,-128.1434552193158,-33.470614324770025

5283358_20201_2_0,wazq2p4icz,-0.12151688497143313,-96.56063175154938,-60.371710114123516

5523972_20201_2_0,wb2w9o4icz,0.24626967511117412,-95.77124727519367,-28.985397696124934

2858386_20201_2_0,wb5p5p4icz,-0.7898465785649301,-106.60343190228733,-22.685097409333835

2909908_20201_2_0,wb6t4p4icz,5.375946524536817,-90.22094258688577,-71.65412473056071

4389106_20201_2_0,wb8qjp4icz,4.514069780062294,-147.85022060607153,-77.74882539106315

5247443_20201_2_0,wbbfrn4icz,0.5174258430249983,-87.94507666881609,-36.722274485366654

1118379_20201_2_0,wbdiho4icz,-3.8136865195767364,-97.61439086743988,-6.847470854951581

2881656_20201_2_0,wbjrzo4icz,1.8288686800900122,-96.20806349213785,-36.28166809094259

4396247_20201_2_0,wbnpho4icz,-3.0683979555452865,-68.54962252740941,-17.507843087952565

4152337_20201_2_0,wbuihp4icz,1.391718417263368,-99.580193861879,-37.87727208790726

2933474_20201_2_0,wbvm9n4icz,0.7196794005977394,-119.37920868504574,-72.25467305640623

1886583_20201_2_0,wbx1hp4icz,1.7185113808861059,-77.88204870627578,-24.313238582129685

1530638_20201_2_0,wc7e4p4icz,-2.4101614263769755,-90.35948081059053,-20.67009947740445

4433183_20201_2_0,wc869o4icz,-0.5820985897312125,-123.36970637275516,-34.13373119309291

4405205_20201_2_0,wc8qun4icz,2.4342337847674678,-95.51380682762687,-49.684076093469926

4969964_20201_2_0,wce4wo4icz,5.071989688996424,-33.276307495376386,-80.3731661128757

2536864_20201_2_0,wcfrun4icz,2.0206873945480144,-145.3243180057418,-41.63897360642625

1687489_20201_2_0,wchuwo4icz,-0.23428953809861544,-88.3380669777707,-25.48167122016544

3078083_20201_2_0,wchvuo4icz,0.9958897627225384,-67.79527727546477,-36.82127956004369

4363823_20201_2_0,wckc8p4icz,-0.8783280501533123,-80.40769582597932,-31.910882436704895

5812082_20201_2_0,wckwmo4icz,0.24932329369604972,-85.09643483572066,-36.417354585984654

3128706_20201_2_0,wcm20p4icz,-0.36165232070365944,-60.19996420219235,-23.33385576384788

2736437_20201_2_0,wcoy2p4icz,3.596475699420692,-72.72693583219174,-68.52497325304883

3415132_20201_2_0,wcqtln4icz,0.1854125261454697,-92.30850705927577,-45.960919360646

4141355_20201_2_0,wcsf0p4icz,2.002245288340664,-61.786034923162475,-60.646944420856

1366402_20201_2_0,wcv9jp4icz,0.8801284571719473,-122.07007873134015,-30.22020741176513

5322916_20201_2_0,wcz7co4icz,1.159625098355984,-75.4603725220303,-39.70431114641495

2944181_20201_2_0,wd1a9o4icz,3.8718559658878235,-48.06692152016791,-40.43198594918973

4075676_20201_2_0,wd4c5p4icz,-1.9019248565060098,-101.12105221669327,-17.989963633916602

3744268_20201_2_0,wdavln4icz,-1.1175106879302994,-113.73196006661209,-40.53935776883431

5733950_20201_2_0,wddkqo4icz,-0.8950117665869062,-101.01338197182281,-26.22280997023367

2261199_20201_2_0,wdepvn4icz,-1.895780245172626,-81.75598304697789,-38.01919979386858

4662978_20201_2_0,wdfubn4icz,1.5502198945257986,-103.06293999198667,-47.468894749546166

5603107_20201_2_0,wdpg5o4icz,-1.1064616936447143,-109.04705118260361,-14.437523679613506

1134597_20201_2_0,wdqfbp4icz,1.011139655733214,-82.82202458889219,-47.70992051055889

3813152_20201_2_0,z11wbn4icz,-2.963102474053956,-111.81036936598491,-14.949983039732885

/users/rhydian/anaconda3/envs/torch_env/lib/python3.7/site-packages/torch/cuda/__init__.py:52: UserWarning: CUDA initialization: Found no NVIDIA driver on your system. Please check that you have an NVIDIA GPU and installed a driver from http://www.nvidia.com/Download/index.aspx (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729006826/work/c10/cuda/CUDAFunctions.cpp:100.)
  return torch._C._cuda_getDeviceCount() > 0
  0%|          | 0/101 [00:00<?, ?it/s]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 1/101 [00:01<02:50,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 2/101 [00:03<03:02,  1.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 3/101 [00:05<02:59,  1.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/101 [00:07<02:56,  1.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▍         | 5/101 [00:09<02:50,  1.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 6/101 [00:10<02:39,  1.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 7/101 [00:12<02:30,  1.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 8/101 [00:13<02:25,  1.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 9/101 [00:15<02:23,  1.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|▉         | 10/101 [00:16<02:23,  1.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 11/101 [00:18<02:24,  1.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 12/101 [00:19<02:23,  1.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 13/101 [00:21<02:26,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 14/101 [00:23<02:21,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▍        | 15/101 [00:25<02:23,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 16/101 [00:26<02:14,  1.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 17/101 [00:28<02:16,  1.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 18/101 [00:29<02:15,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 19/101 [00:31<02:10,  1.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|█▉        | 20/101 [00:32<02:03,  1.53s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 21/101 [00:34<02:01,  1.52s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 22/101 [00:35<02:06,  1.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 23/101 [00:37<02:05,  1.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 24/101 [00:39<02:03,  1.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▍       | 25/101 [00:40<02:00,  1.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 26/101 [00:42<01:55,  1.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 27/101 [00:43<01:53,  1.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 28/101 [00:45<01:53,  1.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▊       | 29/101 [00:46<01:50,  1.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|██▉       | 30/101 [00:48<01:51,  1.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 31/101 [00:50<01:51,  1.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 32/101 [00:51<01:49,  1.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 33/101 [00:53<01:43,  1.52s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▎      | 34/101 [00:54<01:44,  1.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▍      | 35/101 [00:55<01:37,  1.48s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 36/101 [00:57<01:38,  1.51s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 37/101 [00:59<01:38,  1.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 38/101 [01:00<01:37,  1.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▊      | 39/101 [01:02<01:39,  1.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|███▉      | 40/101 [01:03<01:36,  1.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 41/101 [01:05<01:34,  1.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 42/101 [01:07<01:31,  1.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 43/101 [01:08<01:31,  1.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▎     | 44/101 [01:10<01:28,  1.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▍     | 45/101 [01:12<01:33,  1.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 46/101 [01:13<01:30,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 47/101 [01:15<01:30,  1.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 48/101 [01:16<01:25,  1.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▊     | 49/101 [01:18<01:20,  1.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|████▉     | 50/101 [01:19<01:19,  1.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 51/101 [01:21<01:20,  1.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████▏    | 52/101 [01:23<01:19,  1.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 53/101 [01:25<01:19,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 54/101 [01:26<01:18,  1.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 55/101 [01:28<01:16,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▌    | 56/101 [01:29<01:12,  1.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▋    | 57/101 [01:31<01:10,  1.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 58/101 [01:32<01:06,  1.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 59/101 [01:34<01:03,  1.51s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 60/101 [01:35<01:03,  1.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|██████    | 61/101 [01:37<01:02,  1.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████▏   | 62/101 [01:38<00:59,  1.53s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 63/101 [01:40<01:01,  1.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 64/101 [01:42<00:58,  1.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 65/101 [01:43<00:55,  1.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▌   | 66/101 [01:46<01:03,  1.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▋   | 67/101 [01:47<00:59,  1.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 68/101 [01:49<00:57,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 69/101 [01:51<00:54,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 70/101 [01:52<00:50,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|███████   | 71/101 [01:54<00:47,  1.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████▏  | 72/101 [01:55<00:45,  1.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 73/101 [01:57<00:47,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 74/101 [01:59<00:44,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 75/101 [02:00<00:40,  1.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▌  | 76/101 [02:01<00:38,  1.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 77/101 [02:03<00:38,  1.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 78/101 [02:05<00:39,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 79/101 [02:07<00:37,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 80/101 [02:09<00:36,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 81/101 [02:10<00:33,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 82/101 [02:12<00:31,  1.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 83/101 [02:13<00:28,  1.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 84/101 [02:15<00:26,  1.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 85/101 [02:22<00:50,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▌ | 86/101 [02:23<00:41,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 87/101 [02:25<00:34,  2.43s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 88/101 [02:27<00:27,  2.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 89/101 [02:28<00:23,  1.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 90/101 [02:30<00:21,  1.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 91/101 [02:32<00:18,  1.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 92/101 [02:33<00:16,  1.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 93/101 [02:35<00:14,  1.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 94/101 [02:37<00:12,  1.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 95/101 [02:39<00:10,  1.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▌| 96/101 [02:40<00:08,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 97/101 [02:42<00:06,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 98/101 [02:43<00:04,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 99/101 [02:46<00:03,  1.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 100/101 [02:47<00:01,  1.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|██████████| 101/101 [02:49<00:00,  1.90s/it]100%|██████████| 101/101 [02:49<00:00,  1.68s/it]
Trying to load from /users/rhydian/self-supervised-project/model_weights/SSECEncodersBothBoth
==> Resuming model trained for 106 epochs...
Trying to load from ../model_weights/angle_regressor4
==> Resuming model trained for 7 epochs...
4884812_20201_2_0,ufsfpo4icz,-0.4000224518095784,-96.11832455289073,-25.779056893323457

5409548_20201_2_0,ugeg1o4icz,-0.9099060973759271,-97.7594850924319,-30.218279000657347

3142406_20201_2_0,ugwhgp4icz,1.4510570407751575,-64.44440557887634,-33.076578801247024

1111264_20201_2_0,uhnbep4icz,0.5281248336081528,-116.99417194206583,-39.49351983805212

5509153_20201_2_0,uhz7uo4icz,-2.190258396449105,-88.14009274010783,-12.367514142517663

4177584_20201_2_0,uinh0p4icz,0.8513044805856183,-103.28977651915454,-39.39877961364262

3134892_20201_2_0,uis67p4icz,-0.29535749044439513,-124.83399313761973,-39.387380462911054

1715442_20201_2_0,uj9xuo4icz,6.6758943634076,-68.4301620750746,-71.90364506038128

2070770_20201_2_0,ukiyqn4icz,-0.9264218693670778,-97.78003191219526,-29.216386616277788

1924652_20201_2_0,ulksdo4icz,-0.9319165378631757,-77.58988439689244,-27.98474029348111

2522436_20201_2_0,uludro4icz,-1.9371019761188042,-87.83722095100185,-14.123193848477243

5509392_20201_2_0,ulzi3p4icz,-1.015939965679135,-97.43894538683585,-33.79958438569

3095628_20201_2_0,um0ban4icz,-0.30194842936533295,-96.41511210923139,-34.49669316153614

2486523_20201_2_0,um3vvo4icz,0.5034067435101776,-88.06868640009046,-55.59633138730497

5801791_20201_2_0,umcq3p4icz,1.9051373484902727,-93.57199637143569,-42.15366016857756

3782584_20201_2_0,umpaxo4icz,-2.5019537490315686,-128.89867061029568,-29.558623323558038

2207187_20201_2_0,unsrcn4icz,-0.029172726320218334,-87.82075073744272,-32.01867713380358

2549474_20201_2_0,uof3zo4icz,1.7478943347044706,-92.20234124551092,-46.14038362693199

3124972_20201_2_0,uoi5qn4icz,-3.8027443211987157,-96.55945196050016,-6.521801713583443

1047834_20201_2_0,uok2ro4icz,4.305346815008733,-87.01821073676925,-56.90094340302757

4398410_20201_2_0,uov1fp4icz,-1.0126578861269928,-93.67414127273258,-35.081925125336255

2839725_20201_2_0,upzb4o4icz,0.8262056225649254,-91.7272836178625,-44.803420008777636

1900011_20201_2_0,uqhxen4icz,0.08292608805673601,-83.3679520291629,-17.945814234493014

4574659_20201_2_0,uqmklo4icz,0.7415617751777261,-84.56188749757717,-41.12474895631195

1027445_20201_2_0,urarko4icz,-0.8432774353828439,-105.94751372342748,-41.22180479487953

1809662_20201_2_0,urs26o4icz,-1.1016401531388924,-116.91199587774238,-18.204685467994693

3502998_20201_2_0,us7vjo4icz,0.13637732658294377,-52.81212766339223,-46.194329968726265

2536631_20201_2_0,ut5opn4icz,-1.1932688713124011,-129.09733497190675,-36.37293721587963

4650625_20201_2_0,uv4xqn4icz,-1.2578712411112078,-104.1893915358495,-33.12750920319121

1227607_20201_2_0,uva8yo4icz,-12.997261277365965,-129.36802282687626,22.60400386363574

1942064_20201_2_0,uvpcso4icz,0.026543105833913224,-82.56587354328059,-48.95529181164197

4772209_20201_2_0,uvy22o4icz,0.265273086165926,-100.35902240912122,-37.58700569596721

2813132_20201_2_0,ux8nyo4icz,28.12530668006161,72.75698786567875,-132.93475625658039

2479820_20201_2_0,uxn23p4icz,-0.6542633515637196,-106.8229325439035,-29.476451836315462

2543016_20201_2_0,uyb1sn4icz,-0.4094751993994302,-71.91317684406346,-39.54440321471435

3095598_20201_2_0,uykz3o4icz,-2.4747615904626707,-88.28261597964195,-14.213048240308638

4329711_20201_2_0,uzfh7p4icz,4.409285498755284,-127.30478874903051,-56.793742212296564

3973345_20201_2_0,uzk4io4icz,-0.7370882603846394,-124.09792312990837,-30.912144832016992

5251482_20201_2_0,uzzzrn4icz,2.389557904897605,-55.574304259515344,-53.18222148158931

5134350_20201_2_0,v03z5o4icz,-3.1420909175178884,-124.89713290629734,-27.900568571919138

5685981_20201_2_0,v0eubn4icz,-0.28345869772065785,-138.55048876182983,-32.6201306743385

1809199_20201_2_0,v0k5uo4icz,-0.7097657780872156,-126.91807107298916,-33.3310547823684

1059518_20201_2_0,v0kaqo4icz,-1.0003849240537168,-113.03011634717282,-21.14805196448873

2501345_20201_2_0,v0lihp4icz,0.8662488443204864,-105.10548992621165,-42.872538100523684

5087878_20201_2_0,v27abn4icz,-5.813528418330276,-114.95199123299275,-6.608779968938933

1973205_20201_2_0,v2hjmo4icz,-2.1117782906813436,-82.06198398390165,-47.55708298952035

3405882_20201_2_0,v2v7gn4icz,-0.6564816267452732,-96.71741329388209,-41.29912675913886

1065830_20201_2_0,v3j3sn4icz,2.007928198078572,-91.18612804552527,-36.539875241038445

4011468_20201_2_0,v3klxn4icz,0.4306109667970473,-104.55127803889076,-36.952237688998935

4113434_20201_2_0,v4zfqn4icz,3.9409581287517743,-85.60735051022763,-71.51548251863045

1840808_20201_2_0,v504no4icz,-3.744832084895396,-77.38524015374782,-14.239780631743187

2124946_20201_2_0,v6oknn4icz,-6.746695034461334,-135.01899230756013,0.5350860745999881

3308977_20201_2_0,v6wqdo4icz,1.0695527480900011,-89.37964143499605,-38.18948976019142

1533340_20201_2_0,v8xj8o4icz,-0.7035665269810112,-79.3416425355006,-25.276788944678472

3862624_20201_2_0,v9gq9o4icz,3.493316622503875,-71.8901396853575,-45.96910774598652

3705020_20201_2_0,v9x5wo4icz,-4.197922255030907,-108.61095809627955,-16.679119702833574

5638273_20201_2_0,vc0y9p4icz,0.9212283129697728,-140.63886611428086,-47.23806964345644

4047139_20201_2_0,vce49p4icz,-2.438014337073353,-80.00713816154436,-24.597454284643476

2963120_20201_2_0,vd3jlo4icz,-1.2076614165501245,-97.61849700117025,-21.41194951125341

5276121_20201_2_0,vdf7ap4icz,-2.0901220906903473,-123.17662726656783,-29.528923850989486

5725487_20201_2_0,vdxlxn4icz,-2.6926791293957293,-64.53767691594291,-28.53071565182826

5641144_20201_2_0,vfsx7p4icz,38.844971718347935,128.07321279562623,-216.6899792185214

1296720_20201_2_0,vh9nvo4icz,1.0497746329981168,-41.28069406668925,-48.996161388534844

3558242_20201_2_0,vi4vln4icz,-7.1669620803277345,-91.06949053949305,11.657754018366532

3159204_20201_2_0,vi87dp4icz,0.34742579622444064,-116.62811835911714,-35.1193660767521

3179573_20201_2_0,vipg1o4icz,1.9420504508388976,-92.57799421236376,-59.73728799503424

3023463_20201_2_0,vjk69p4icz,0.2886712651033582,-57.26489485966806,-45.617805658442975

5195996_20201_2_0,vjl2gp4icz,-0.9084684581722322,-87.5040085569359,-29.741918786455358

1762049_20201_2_0,vk5pip4icz,4.911421581236193,-99.25472645377408,-68.03343450899536

2911920_20201_2_0,vk6l0o4icz,8.98164713221524,-90.27292480954725,-92.43870033352366

4863576_20201_2_0,vm2urn4icz,-0.19208550806632946,-68.66027851194539,-41.29343056224815

4347417_20201_2_0,vm563p4icz,14.426442475655453,43.574348685409234,-147.53122787653956

5912036_20201_2_0,vmjfyn4icz,0.7579096423894237,-88.10266631015784,-52.193092104095854

2537278_20201_2_0,vmns0p4icz,2.471495744972735,-140.7402414067818,-43.31227821924419

2512638_20201_2_0,vmo1fo4icz,-6.446607698351249,-121.08726798013709,4.50802463758906

5862135_20201_2_0,vp1v4o4icz,0.48807869931825043,-95.88238547660296,-22.677293339764674

1373772_20201_2_0,vp8zhp4icz,4.060059639464188,-120.40413817339842,-49.327221313884706

4780519_20201_2_0,vqsv9n4icz,-1.0211048285672584,-133.75398256447983,-16.736929530657875

1429629_20201_2_0,vrbmcn4icz,-0.5486578934865289,-89.14721022702233,-22.834813038321343

1075359_20201_2_0,vrxaho4icz,-0.33224460881575774,-112.99041025917438,-35.85817872743941

1105755_20201_2_0,vs1aep4icz,3.961842991764384,-86.5043504889386,-63.546675782555624

4786725_20201_2_0,vtepmo4icz,3.1336448380469912,-75.90275025650368,-42.05609319911878

5755634_20201_2_0,vvmxeo4icz,0.6004578016280537,-64.64842359338968,-39.70702158271564

5171300_20201_2_0,vwdzao4icz,-0.5525835362793038,-103.2721473122121,-24.148534965934218

1719881_20201_2_0,vwk4do4icz,1.0214337908279407,-84.67683982441511,-47.75505593249211

5634721_20201_2_0,vwmten4icz,1.7071874423845983,-121.75128165932261,-43.203293935285046

2308194_20201_2_0,vz1k8p4icz,22.246565121721925,45.56173551754995,-119.25230802377968

2700013_20201_2_0,w0k5hp4icz,2.784866980575099,-78.41026773359613,-60.44738752122555

3616324_20201_2_0,w1b2co4icz,0.15789003003389304,-70.2420276722194,-40.614050151073

3451244_20201_2_0,w2awmn4icz,0.9596497201637384,-58.34346413704998,-31.816759887680035

2290644_20201_2_0,w2n0po4icz,-0.8905684045086731,-110.1900358811867,-28.969448901400327

5087275_20201_2_0,w36bfp4icz,-5.3665600968659914,-126.7147362858999,-4.968439341837325

3255450_20201_2_0,w39qen4icz,-1.4391981711572497,-47.31665854235402,-45.35739490555241

4427928_20201_2_0,w3cwkn4icz,1.28415453928346,-82.53501496126646,-44.77971601033768

5687595_20201_2_0,w3eyvo4icz,-2.6760574196865106,-75.66865160433767,-7.8452333249568085

4693751_20201_2_0,w3o5so4icz,-2.685537098507843,-60.56438017065932,-19.94189985370751

1709585_20201_2_0,w4g7ho4icz,-2.0885745698680203,-111.77224383810568,-57.19632138702144

1870588_20201_2_0,w4hhrn4icz,-2.0265346968992626,-101.6948407153157,-18.733540999999448

4261963_20201_2_0,w4wqbn4icz,-1.1365131826877708,-83.40747170176209,-25.41951130804452

4040188_20201_2_0,w8718o4icz,-0.8507311623497078,-89.15813541132144,-15.215060786262427

4387899_20201_2_0,a48xlo4icz,-0.993669336380414,-88.69122402207978,-36.35849923794828

/users/rhydian/anaconda3/envs/torch_env/lib/python3.7/site-packages/torch/cuda/__init__.py:52: UserWarning: CUDA initialization: Found no NVIDIA driver on your system. Please check that you have an NVIDIA GPU and installed a driver from http://www.nvidia.com/Download/index.aspx (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729006826/work/c10/cuda/CUDAFunctions.cpp:100.)
  return torch._C._cuda_getDeviceCount() > 0
  0%|          | 0/102 [00:00<?, ?it/s]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 1/102 [00:02<03:26,  2.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 2/102 [00:04<03:22,  2.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 3/102 [00:06<03:27,  2.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/102 [00:08<03:23,  2.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▍         | 5/102 [00:09<03:01,  1.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 6/102 [00:11<02:49,  1.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 7/102 [00:15<03:47,  2.39s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 8/102 [00:16<03:28,  2.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 9/102 [00:19<03:24,  2.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|▉         | 10/102 [00:20<03:02,  1.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 11/102 [00:21<02:46,  1.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 12/102 [00:23<02:38,  1.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 13/102 [00:24<02:27,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▎        | 14/102 [00:26<02:23,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▍        | 15/102 [00:28<02:32,  1.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 16/102 [00:30<02:27,  1.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 17/102 [00:31<02:24,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 18/102 [00:33<02:20,  1.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▊        | 19/102 [00:35<02:18,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|█▉        | 20/102 [00:36<02:07,  1.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 21/102 [00:39<02:33,  1.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 22/102 [00:40<02:24,  1.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 23/102 [00:43<02:42,  2.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▎       | 24/102 [00:45<02:51,  2.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▍       | 25/102 [00:47<02:32,  1.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▌       | 26/102 [00:52<03:32,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▋       | 27/102 [00:53<03:03,  2.44s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 28/102 [00:54<02:31,  2.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 29/102 [00:56<02:14,  1.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 30/102 [00:57<02:08,  1.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|███       | 31/102 [00:59<02:00,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███▏      | 32/102 [01:01<01:58,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 33/102 [01:03<02:08,  1.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 34/102 [01:04<02:00,  1.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 35/102 [01:07<02:11,  1.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▌      | 36/102 [01:08<02:04,  1.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▋      | 37/102 [01:10<01:59,  1.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 38/102 [01:12<01:53,  1.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 39/102 [01:13<01:46,  1.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 40/102 [01:15<01:47,  1.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|████      | 41/102 [01:17<01:39,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 42/102 [01:19<01:58,  1.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 43/102 [01:25<03:00,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 44/102 [01:27<02:33,  2.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 45/102 [01:28<02:16,  2.40s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▌     | 46/102 [01:30<02:05,  2.24s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 47/102 [01:32<01:53,  2.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 48/102 [01:33<01:42,  1.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 49/102 [01:35<01:35,  1.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 50/102 [01:37<01:35,  1.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 51/102 [01:39<01:33,  1.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 52/102 [01:41<01:32,  1.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 53/102 [01:42<01:30,  1.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 54/102 [01:44<01:26,  1.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 55/102 [01:46<01:20,  1.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▍    | 56/102 [01:49<01:38,  2.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 57/102 [01:51<01:41,  2.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 58/102 [01:53<01:27,  2.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 59/102 [01:54<01:20,  1.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 60/102 [01:56<01:13,  1.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|█████▉    | 61/102 [01:57<01:10,  1.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 62/102 [01:59<01:05,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 63/102 [02:01<01:05,  1.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 64/102 [02:02<00:59,  1.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▎   | 65/102 [02:03<00:57,  1.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▍   | 66/102 [02:05<00:56,  1.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 67/102 [02:07<00:54,  1.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 68/102 [02:08<00:52,  1.53s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 69/102 [02:10<00:50,  1.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▊   | 70/102 [02:11<00:52,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|██████▉   | 71/102 [02:13<00:50,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 72/102 [02:15<00:51,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 73/102 [02:17<00:53,  1.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 74/102 [02:19<00:47,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▎  | 75/102 [02:20<00:44,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▍  | 76/102 [02:22<00:43,  1.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▌  | 77/102 [02:24<00:45,  1.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▋  | 78/102 [02:26<00:44,  1.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 79/102 [02:28<00:40,  1.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 80/102 [02:29<00:37,  1.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 81/102 [02:31<00:39,  1.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 82/102 [02:33<00:35,  1.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████▏ | 83/102 [02:35<00:33,  1.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 84/102 [02:36<00:31,  1.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 85/102 [02:38<00:29,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 86/102 [02:40<00:27,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▌ | 87/102 [02:41<00:26,  1.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▋ | 88/102 [02:43<00:23,  1.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 89/102 [02:45<00:22,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 90/102 [02:46<00:19,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 91/102 [02:48<00:17,  1.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 92/102 [02:50<00:18,  1.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 93/102 [02:54<00:20,  2.30s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 94/102 [02:55<00:15,  1.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 95/102 [02:56<00:12,  1.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 96/102 [02:58<00:10,  1.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▌| 97/102 [02:59<00:08,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 98/102 [03:01<00:06,  1.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 99/102 [03:03<00:04,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 100/102 [03:05<00:03,  1.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 101/102 [03:06<00:01,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|██████████| 102/102 [03:11<00:00,  2.53s/it]100%|██████████| 102/102 [03:11<00:00,  1.87s/it]
Trying to load from /users/rhydian/self-supervised-project/model_weights/SSECEncodersBothBoth
==> Resuming model trained for 106 epochs...
Trying to load from ../model_weights/angle_regressor4
==> Resuming model trained for 7 epochs...
2951635_20201_2_0,tyis0o4icz,0.05389250051786444,-119.73832191597728,-39.122572009617755

3985817_20201_2_0,tym1xo4icz,-1.7301062694703342,-108.73277280732424,-21.245667130441788

1524253_20201_2_0,cec2lo4icz,2.8131360703953088,-117.29925173195957,-46.68768727432801

5068019_20201_2_0,tz0lmn4icz,-2.108275764551599,-99.29948326044868,-26.665449070589602

1258977_20201_2_0,u0crip4icz,13.998340144657147,-68.89256327753077,-95.95530973933393

5652953_20201_2_0,u0mkhp4icz,0.09691312471727978,-142.53887173485114,-35.743001717268015

5799918_20201_2_0,u0t0fn4icz,-1.296318600782144,-111.72100558385313,-31.29133689840927

4180515_20201_2_0,u25vko4icz,0.5437372430086232,-84.1131265754164,-45.15930306018659

3787961_20201_2_0,u3aejn4icz,-1.4403333810846168,-112.98120195806214,-30.039677737642776

3845811_20201_2_0,u3keco4icz,7.201923579901674,-75.43943592405319,-98.7620154252412

4045716_20201_2_0,u3tmnn4icz,3.8667881944746414,-88.6241104356352,-58.09662410133012

5501267_20201_2_0,u72ldn4icz,1.268540683793462,-114.20376424731714,-40.557729306182665

2957232_20201_2_0,u8erdo4icz,0.8477454788052572,-60.90796190698498,-38.61694652544844

1310677_20201_2_0,ub5mfo4icz,-2.7200007275789138,-59.5884394728364,-12.695506313101873

2507712_20201_2_0,ubw5pn4icz,2.2985658407079215,-102.08964587965585,-26.081592067820566

2857715_20201_2_0,ubxuko4icz,-0.06063292537098913,-87.6100957819558,-25.35161114834547

3302893_20201_2_0,uc878o4icz,1.1312424543102442,-95.51070250640683,-43.1110684571554

5214100_20201_2_0,uculbp4icz,-5.109772382640919,-63.558830681862474,-9.641931182693611

2031682_20201_2_0,ucuy6o4icz,0.9603735252354698,-76.06757698386832,-54.058634031428625

1428306_20201_2_0,udgmco4icz,-0.16319713919750833,-100.92244945636395,-32.43523557183565

4141491_20201_2_0,udtxco4icz,2.6819018650028332,-108.92238635873102,-60.925808345594206

1495165_20201_2_0,uei6dn4icz,1.1597810917888618,-110.92062571083468,-38.18064592842883

2032414_20201_2_0,uepvuo4icz,-3.271488137693714,-73.6562141370081,-15.203287007196778

4380385_20201_2_0,uf2u8p4icz,-5.121458419012656,-123.90474294473668,-12.6931663077807

4806498_20201_2_0,ufztco4icz,0.5676190646377887,-99.89928265358438,-33.204943558197556

4087282_20201_2_0,ugb5mo4icz,-2.447847571978504,-64.06985284354607,-42.014423294376854

2779050_20201_2_0,uh7vsn4icz,4.728128164710052,-135.73717224304528,-36.590382239926825

4196500_20201_2_0,ui42po4icz,-1.1395490297642656,-53.45568294120335,-43.11389177922517

2539586_20201_2_0,ui9rjn4icz,-4.437249705214052,-82.43596974233137,-0.21356948409801646

2899121_20201_2_0,uiwknn4icz,1.3693245389347777,-98.26462221602614,-46.073347081284666

5982866_20201_2_0,ujd12p4icz,2.05206680583717,-82.36855850351222,-49.811528955993

4803158_20201_2_0,uji84p4icz,-0.5363022936849545,-52.66270457449295,-40.81442731839179

5597500_20201_2_0,ujiuvn4icz,-0.43376496818721993,-145.23550184259776,-38.44181752410522

1872489_20201_2_0,ujyq0o4icz,3.8001379901488157,-83.66442836390331,-46.7214746918184

4620840_20201_2_0,zbv2gp4icz,2.685397513420674,-120.08859628495608,-36.929324532451474

4704334_20201_2_0,ulwxro4icz,-0.639179163640475,-101.7366288130967,-37.474122497482014

2906240_20201_2_0,um9pxn4icz,1.27329611636966,-59.586037897990906,-32.4092689704447

4393819_20201_2_0,umrxuo4icz,-1.907888901715223,-56.3831755557124,-48.111894991282526

2746117_20201_2_0,unh44o4icz,1.5399215007208913,-66.76797580571628,-55.2614914277801

3835572_20201_2_0,uoe8kn4icz,1.9968335629031209,-99.96223597026273,-50.31939867820989

2238002_20201_2_0,uonqno4icz,-1.0454771955996978,-75.60084832919054,-60.68186854497344

3077176_20201_2_0,uppomn4icz,0.9971245956719921,-124.56801044224221,-43.92734252107448

5382610_20201_2_0,upzj5n4icz,5.114205083716736,-28.07398325431052,-54.950823216327606

5457448_20201_2_0,uq38yo4icz,-1.127101225297487,-103.61659483937981,-25.986385518498764

3687160_20201_2_0,ur3pyo4icz,-0.20585777957805304,-77.71406051699245,-43.163378526023564

5228056_20201_2_0,urkwkn4icz,4.988327937114707,-104.3976680151128,-63.01787082766364

1656322_20201_2_0,urqgqo4icz,-1.8367087648514862,-131.43240386190394,-30.530755484713495

4167493_20201_2_0,uslo7o4icz,-7.464571089527216,-90.07642538505797,25.96376117314678

4579351_20201_2_0,usw77o4icz,2.7803259399478706,-86.34635582403493,-45.482603072435325

3490786_20201_2_0,utsj4o4icz,-1.252482197286905,-107.40137859272258,-35.42084107493275

2452917_20201_2_0,uw4eon4icz,-0.5015104104026312,-94.01768304418937,-30.05581294738056

3493795_20201_2_0,uxqf2p4icz,-1.437729072371714,-54.88137473049386,-39.91152033372771

4580634_20201_2_0,uycndp4icz,0.0009572595217729713,-80.3579770356308,-44.44488386993838

2971525_20201_2_0,uz2wyo4icz,-1.0550147160066343,-76.3885154800567,-29.741058387777542

5314833_20201_2_0,v1p51o4icz,-0.18622864980327433,-81.97061572410405,-48.41551042236671

5693828_20201_2_0,v20zqn4icz,3.0664624291452025,-87.31706836136755,-42.73238125966644

2889275_20201_2_0,pna7lo4icz,-1.6670457363420914,-97.07850098668143,-43.404070072183686

5322226_20201_2_0,v43y5p4icz,3.8464168119253084,-96.68816724397837,-56.4226860031588

2608332_20201_2_0,v4rfkn4icz,0.8104762688607021,-41.469271601751586,-30.276889924455304

5828810_20201_2_0,v6minn4icz,-1.5751354533808717,-105.53264821602156,-33.5127145429589

1877433_20201_2_0,v6ow9o4icz,-1.7115647460706362,-116.8084993595607,-18.64997849395388

5343392_20201_2_0,v71bso4icz,5.625727140174182,-135.0707500438282,-60.91580361982352

4171495_20201_2_0,v7f2pn4icz,-0.5599389690684323,-88.63155099277822,-46.45950080779505

1794105_20201_2_0,v7rh7p4icz,1.3879966264256467,-101.83935495836053,-48.40049701842665

3910368_20201_2_0,v8ta2p4icz,-4.950716401947888,-58.679910095808225,1.5932687580427398

5382140_20201_2_0,v8x60p4icz,-5.638601043114848,-87.53360644285704,8.932177294752165

3740930_20201_2_0,vbepho4icz,-1.7842345541101967,-74.59939943666458,-40.20599886018206

3354025_20201_2_0,vddbwn4icz,1.4459756159879793,-141.10951700702137,-41.81828667295714

3479119_20201_2_0,vde8on4icz,-3.035453784638367,-164.3353998168833,-11.085185532083145

5334289_20201_2_0,vf58io4icz,1.3876075414731812,-100.73432086825463,-50.57212119156722

5017620_20201_2_0,vfbiso4icz,1.5435056688962594,-75.99124149076718,-56.93176175192066

2323052_20201_2_0,vfji8p4icz,3.8256078772970366,-65.18674104149557,-62.061188259208194

2913377_20201_2_0,0r241p4icz,1.078646502432148,-91.56081159087569,-49.29762205871933

4934120_20201_2_0,vfssro4icz,1.0212553609329815,-83.81681149878318,-46.267473742658765

3258408_20201_2_0,vgqm7o4icz,2.5013683067120547,-96.54491371561951,-49.086097040320496

2109020_20201_2_0,vi3xsn4icz,-1.5044232866210723,-107.96958889702333,-30.29749154222978

3882708_20201_2_0,chciun4icz,0.9472687588385749,-87.55100865043511,-32.99243196674328

4168652_20201_2_0,vifuko4icz,-0.33590007262133836,-119.30221224946104,-34.08382906134236

3660484_20201_2_0,vih73p4icz,-0.3088345810664759,-69.94900835321602,-29.482473030404293

4765581_20201_2_0,vilc8p4icz,-1.4717962158465634,-64.19908862285973,-35.56695203262788

1759000_20201_2_0,virpln4icz,2.3953747565193155,-85.29392819779085,-40.21767659819689

2516586_20201_2_0,vjoo7o4icz,0.6509354816389398,-71.9561723025306,-42.10944761625137

2404132_20201_2_0,vk0hgn4icz,-4.249156001680233,-116.69226205771298,-13.156440653511822

2931702_20201_2_0,2rvx9n4icz,0.45691426965788634,-127.22249987642016,-51.18745429606851

2561759_20201_2_0,vlutzo4icz,-2.445099594616139,-56.33408857150687,-17.798956257301313

4548890_20201_2_0,vlx6fp4icz,1.036137047100307,-90.77614641363095,-46.18909180827916

2335731_20201_2_0,vm9r6p4icz,-1.591019208624903,-86.05192345701377,-30.561312062945646

1103741_20201_2_0,vn4jno4icz,-0.5789779623697539,-56.596262855085655,-38.34310446751313

3777762_20201_2_0,vnf8yo4icz,-3.5954714900738747,-98.94551937476948,-14.211767637818468

2960789_20201_2_0,vnvi7n4icz,-2.9185292964665637,-104.46830951491876,-32.46006238072626

2871394_20201_2_0,vojuwo4icz,-0.5034176039041938,-71.34562138741836,-31.02930482168081

2494133_20201_2_0,1olzen4icz,-1.3081020492744686,-74.36555418575978,-34.128063224502114

3288158_20201_2_0,von16p4icz,0.773943597949634,-105.09114259391328,-30.830289068184825

3105680_20201_2_0,vs8s7p4icz,1.8264738623701882,-92.21203508508358,-60.437194449270976

4435979_20201_2_0,vsu5ao4icz,-3.8377502812379674,-115.41686180299163,-21.859704783356904

4293931_20201_2_0,vv7udn4icz,0.8759960134805108,-124.31119085530472,-45.78622600112854

4575544_20201_2_0,vvecan4icz,-4.545806464108653,-103.932822605788,-8.488935052469827

4905739_20201_2_0,vvq91p4icz,1.6997835710232514,-116.991634317479,-50.029380079124394

2262632_20201_2_0,vwll6p4icz,10.360723314200195,-142.1041846035777,-78.67207200616664

3844512_20201_2_0,vxmf9p4icz,1.7728553138102654,-86.63254385693554,-56.34219907910234

5523493_20201_2_0,vxnaip4icz,1.5997064465707074,-124.36241171286196,-56.588835077082194

1225665_20201_2_0,0whrfo4icz,-1.1830188988154882,-103.60430181725854,-28.55726606715352

