15 th decile
.75
.80
/users/rhydian/anaconda3/envs/torch_env/lib/python3.7/site-packages/torch/cuda/__init__.py:52: UserWarning: CUDA initialization: Found no NVIDIA driver on your system. Please check that you have an NVIDIA GPU and installed a driver from http://www.nvidia.com/Download/index.aspx (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729006826/work/c10/cuda/CUDAFunctions.cpp:100.)
  return torch._C._cuda_getDeviceCount() > 0
  0%|          | 0/810 [00:00<?, ?it/s]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  0%|          | 1/810 [00:01<23:18,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  0%|          | 2/810 [00:03<22:41,  1.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  0%|          | 3/810 [00:04<21:45,  1.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  0%|          | 4/810 [00:06<23:43,  1.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 5/810 [00:08<21:31,  1.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 6/810 [00:09<20:19,  1.52s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 7/810 [00:10<19:01,  1.42s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 8/810 [00:11<18:20,  1.37s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 9/810 [00:13<17:39,  1.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 10/810 [00:14<17:51,  1.34s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|▏         | 11/810 [00:15<18:03,  1.36s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|▏         | 12/810 [00:17<17:47,  1.34s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 13/810 [00:20<24:51,  1.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 14/810 [00:21<22:38,  1.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 15/810 [00:23<24:48,  1.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 16/810 [00:25<22:21,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 17/810 [00:26<20:24,  1.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 18/810 [00:27<20:15,  1.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 19/810 [00:29<19:28,  1.48s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 20/810 [00:31<23:28,  1.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 21/810 [00:32<21:24,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 22/810 [00:34<20:54,  1.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 23/810 [00:35<20:01,  1.53s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 24/810 [00:37<19:07,  1.46s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 25/810 [00:38<20:20,  1.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 26/810 [00:40<19:10,  1.47s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 27/810 [00:41<18:41,  1.43s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 28/810 [00:45<27:31,  2.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▎         | 29/810 [00:46<24:46,  1.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▎         | 30/810 [00:49<26:59,  2.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 31/810 [00:50<23:47,  1.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 32/810 [00:51<21:34,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 33/810 [00:52<20:06,  1.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 34/810 [00:54<19:48,  1.53s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 35/810 [00:56<22:13,  1.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 36/810 [00:58<21:33,  1.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▍         | 37/810 [01:01<27:53,  2.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▍         | 38/810 [01:03<29:15,  2.27s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▍         | 39/810 [01:05<25:47,  2.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▍         | 40/810 [01:06<22:59,  1.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▌         | 41/810 [01:08<21:54,  1.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▌         | 42/810 [01:09<20:33,  1.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▌         | 43/810 [01:11<20:31,  1.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▌         | 44/810 [01:12<19:36,  1.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 45/810 [01:14<19:25,  1.52s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 46/810 [01:15<18:48,  1.48s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 47/810 [01:18<25:50,  2.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 48/810 [01:19<22:43,  1.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 49/810 [01:21<20:24,  1.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 50/810 [01:22<19:55,  1.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▋         | 51/810 [01:23<18:08,  1.43s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▋         | 52/810 [01:25<17:40,  1.40s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 53/810 [01:27<22:33,  1.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 54/810 [01:29<21:21,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 55/810 [01:30<20:06,  1.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 56/810 [01:32<19:45,  1.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 57/810 [01:33<18:29,  1.47s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 58/810 [01:34<17:15,  1.38s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 59/810 [01:35<17:14,  1.38s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 60/810 [01:37<16:46,  1.34s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 61/810 [01:38<16:41,  1.34s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 62/810 [01:39<17:16,  1.39s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 63/810 [01:41<16:20,  1.31s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 64/810 [01:42<16:25,  1.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 65/810 [01:43<16:07,  1.30s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 66/810 [01:45<16:16,  1.31s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 67/810 [01:46<16:22,  1.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 68/810 [01:47<16:27,  1.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▊         | 69/810 [01:49<17:02,  1.38s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▊         | 70/810 [01:50<16:18,  1.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 71/810 [01:51<16:30,  1.34s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 72/810 [01:53<16:43,  1.36s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 73/810 [01:54<16:50,  1.37s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 74/810 [01:56<18:04,  1.47s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 75/810 [01:58<21:52,  1.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 76/810 [02:00<20:41,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|▉         | 77/810 [02:01<19:46,  1.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|▉         | 78/810 [02:04<22:49,  1.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|▉         | 79/810 [02:05<21:23,  1.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|▉         | 80/810 [02:06<19:43,  1.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|█         | 81/810 [02:08<18:21,  1.51s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|█         | 82/810 [02:09<18:04,  1.49s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|█         | 83/810 [02:11<17:55,  1.48s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|█         | 84/810 [02:12<18:14,  1.51s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|█         | 85/810 [02:14<17:29,  1.45s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 86/810 [02:15<17:27,  1.45s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 87/810 [02:16<16:45,  1.39s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 88/810 [02:18<16:52,  1.40s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 89/810 [02:19<17:12,  1.43s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 90/810 [02:21<19:48,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 91/810 [02:23<21:18,  1.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█▏        | 92/810 [02:25<20:09,  1.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█▏        | 93/810 [02:26<18:34,  1.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 94/810 [02:28<20:51,  1.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 95/810 [02:30<19:30,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 96/810 [02:31<18:33,  1.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 97/810 [02:32<17:41,  1.49s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 98/810 [02:34<17:15,  1.45s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 99/810 [02:35<16:20,  1.38s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 100/810 [02:36<16:03,  1.36s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 101/810 [02:38<15:47,  1.34s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 102/810 [02:39<15:37,  1.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 103/810 [02:40<15:28,  1.31s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 104/810 [02:42<15:38,  1.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 105/810 [02:43<15:33,  1.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 106/810 [02:44<15:50,  1.35s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 107/810 [02:45<15:18,  1.31s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 108/810 [02:47<15:19,  1.31s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 109/810 [02:48<15:34,  1.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▎        | 110/810 [02:49<15:28,  1.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▎        | 111/810 [02:51<15:42,  1.35s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 112/810 [02:52<15:58,  1.37s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 113/810 [02:54<16:10,  1.39s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 114/810 [02:55<16:04,  1.39s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 115/810 [02:56<16:05,  1.39s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 116/810 [02:58<16:02,  1.39s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 117/810 [02:59<15:55,  1.38s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▍        | 118/810 [03:01<16:06,  1.40s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▍        | 119/810 [03:02<15:30,  1.35s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▍        | 120/810 [03:03<15:01,  1.31s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▍        | 121/810 [03:04<15:10,  1.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▌        | 122/810 [03:06<15:33,  1.36s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▌        | 123/810 [03:07<15:38,  1.37s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▌        | 124/810 [03:10<18:37,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▌        | 125/810 [03:11<18:00,  1.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 126/810 [03:13<20:06,  1.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 127/810 [03:15<18:31,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 128/810 [03:16<17:09,  1.51s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 129/810 [03:17<16:21,  1.44s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 130/810 [03:19<18:46,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 131/810 [03:21<17:44,  1.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▋        | 132/810 [03:22<17:26,  1.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▋        | 133/810 [03:23<17:04,  1.51s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 134/810 [03:25<16:18,  1.45s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 135/810 [03:26<17:00,  1.51s/it] 17%|█▋        | 136/810 [03:28<17:24,  1.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 137/810 [03:30<17:32,  1.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 138/810 [03:32<20:14,  1.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 139/810 [03:34<19:23,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 140/810 [03:35<18:22,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 141/810 [03:36<16:53,  1.51s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 142/810 [03:37<15:46,  1.42s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 143/810 [03:39<15:41,  1.41s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 144/810 [03:40<15:02,  1.35s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 145/810 [03:42<16:57,  1.53s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 146/810 [03:43<16:06,  1.46s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 147/810 [03:45<15:18,  1.39s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 148/810 [03:46<14:52,  1.35s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 149/810 [03:47<14:32,  1.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▊        | 150/810 [03:48<14:37,  1.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▊        | 151/810 [03:50<14:51,  1.35s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 152/810 [03:51<14:34,  1.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 153/810 [03:52<14:20,  1.31s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 154/810 [03:54<14:10,  1.30s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 155/810 [03:55<14:50,  1.36s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 156/810 [03:57<15:46,  1.45s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 157/810 [03:58<15:02,  1.38s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|█▉        | 158/810 [04:00<15:56,  1.47s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|█▉        | 159/810 [04:01<16:33,  1.53s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|█▉        | 160/810 [04:03<17:03,  1.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|█▉        | 161/810 [04:05<17:45,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|██        | 162/810 [04:06<17:45,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|██        | 163/810 [04:08<17:07,  1.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|██        | 164/810 [04:10<17:20,  1.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|██        | 165/810 [04:11<17:25,  1.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|██        | 166/810 [04:13<17:02,  1.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 167/810 [04:14<16:47,  1.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 168/810 [04:16<16:49,  1.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 169/810 [04:17<16:49,  1.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 170/810 [04:19<16:51,  1.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 171/810 [04:21<16:51,  1.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 172/810 [04:23<18:22,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██▏       | 173/810 [04:24<17:49,  1.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██▏       | 174/810 [04:26<17:19,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 175/810 [04:27<16:59,  1.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 176/810 [04:29<16:44,  1.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 177/810 [04:30<16:59,  1.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 178/810 [04:32<16:40,  1.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 179/810 [04:34<18:10,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 180/810 [04:36<17:26,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 181/810 [04:37<16:45,  1.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 182/810 [04:38<15:53,  1.52s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 183/810 [04:40<16:03,  1.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 184/810 [04:42<16:29,  1.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 185/810 [04:43<17:01,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 186/810 [04:45<17:16,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 187/810 [04:46<16:10,  1.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 188/810 [04:48<16:07,  1.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 189/810 [04:50<16:38,  1.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 190/810 [04:51<15:59,  1.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▎       | 191/810 [04:53<15:48,  1.53s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▎       | 192/810 [04:54<15:32,  1.51s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 193/810 [04:56<15:47,  1.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 194/810 [04:57<15:59,  1.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 195/810 [04:59<16:04,  1.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 196/810 [05:01<16:30,  1.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 197/810 [05:02<15:48,  1.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 198/810 [05:04<15:44,  1.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▍       | 199/810 [05:05<15:49,  1.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▍       | 200/810 [05:07<16:12,  1.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▍       | 201/810 [05:08<16:08,  1.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▍       | 202/810 [05:10<15:47,  1.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▌       | 203/810 [05:12<17:22,  1.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▌       | 204/810 [05:14<16:57,  1.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▌       | 205/810 [05:15<16:30,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▌       | 206/810 [05:17<16:51,  1.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 207/810 [05:18<16:30,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 208/810 [05:20<16:07,  1.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 209/810 [05:21<15:56,  1.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 210/810 [05:23<15:47,  1.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 211/810 [05:27<22:37,  2.27s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 212/810 [05:29<21:20,  2.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▋       | 213/810 [05:30<19:41,  1.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▋       | 214/810 [05:32<18:00,  1.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 215/810 [05:34<18:05,  1.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 216/810 [05:35<18:02,  1.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 217/810 [05:37<17:19,  1.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 218/810 [05:40<20:16,  2.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 219/810 [05:42<20:19,  2.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 220/810 [05:43<18:52,  1.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 221/810 [05:45<18:04,  1.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 222/810 [05:47<16:59,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 223/810 [05:50<21:18,  2.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 224/810 [05:51<19:04,  1.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 225/810 [05:53<18:37,  1.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 226/810 [05:54<17:16,  1.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 227/810 [05:56<17:11,  1.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 228/810 [05:58<17:11,  1.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 229/810 [06:00<17:01,  1.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 230/810 [06:02<17:18,  1.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▊       | 231/810 [06:03<17:02,  1.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▊       | 232/810 [06:05<16:37,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 233/810 [06:06<15:55,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 234/810 [06:08<15:46,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 235/810 [06:10<15:24,  1.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 236/810 [06:11<15:51,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 237/810 [06:13<15:50,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 238/810 [06:14<15:12,  1.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|██▉       | 239/810 [06:16<15:15,  1.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|██▉       | 240/810 [06:19<19:25,  2.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|██▉       | 241/810 [06:21<18:35,  1.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|██▉       | 242/810 [06:23<17:53,  1.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|███       | 243/810 [06:24<16:52,  1.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|███       | 244/810 [06:26<16:03,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|███       | 245/810 [06:27<15:08,  1.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|███       | 246/810 [06:29<14:44,  1.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|███       | 247/810 [06:30<14:25,  1.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 248/810 [06:32<14:31,  1.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 249/810 [06:33<14:49,  1.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 250/810 [06:35<14:36,  1.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 251/810 [06:37<15:22,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 252/810 [06:38<14:24,  1.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 253/810 [06:39<14:07,  1.52s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███▏      | 254/810 [06:41<14:17,  1.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███▏      | 255/810 [06:42<14:01,  1.52s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 256/810 [06:44<13:44,  1.49s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 257/810 [06:46<14:01,  1.52s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 258/810 [06:47<14:15,  1.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 259/810 [06:49<14:44,  1.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 260/810 [06:50<14:37,  1.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 261/810 [06:52<14:50,  1.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 262/810 [06:54<14:26,  1.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 263/810 [06:55<14:08,  1.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 264/810 [06:57<13:51,  1.52s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 265/810 [06:58<13:36,  1.50s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 266/810 [07:03<24:19,  2.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 267/810 [07:09<31:02,  3.43s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 268/810 [07:10<25:54,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 269/810 [07:12<22:17,  2.47s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 270/810 [07:13<19:50,  2.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 271/810 [07:15<19:31,  2.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▎      | 272/810 [07:17<17:40,  1.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▎      | 273/810 [07:19<17:30,  1.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 274/810 [07:21<17:14,  1.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 275/810 [07:22<16:13,  1.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 276/810 [07:24<15:32,  1.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 277/810 [07:25<15:11,  1.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 278/810 [07:27<15:24,  1.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 279/810 [07:29<15:18,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▍      | 280/810 [07:31<15:42,  1.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▍      | 281/810 [07:32<15:13,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▍      | 282/810 [07:34<15:27,  1.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▍      | 283/810 [07:36<15:38,  1.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▌      | 284/810 [07:38<15:02,  1.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▌      | 285/810 [07:40<15:33,  1.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▌      | 286/810 [07:42<18:24,  2.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▌      | 287/810 [07:44<17:20,  1.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 288/810 [07:46<16:01,  1.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 289/810 [07:47<15:33,  1.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 290/810 [07:49<14:56,  1.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 291/810 [07:51<14:35,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 292/810 [07:52<14:21,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 293/810 [07:54<13:48,  1.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▋      | 294/810 [07:55<13:49,  1.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▋      | 295/810 [07:57<13:21,  1.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 296/810 [07:58<13:41,  1.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 297/810 [08:00<13:16,  1.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 298/810 [08:01<13:26,  1.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 299/810 [08:03<12:41,  1.49s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 300/810 [08:04<13:03,  1.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 301/810 [08:06<13:03,  1.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 302/810 [08:08<14:00,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 303/810 [08:09<13:15,  1.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 304/810 [08:11<12:58,  1.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 305/810 [08:14<18:16,  2.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 306/810 [08:16<17:34,  2.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 307/810 [08:18<18:00,  2.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 308/810 [08:20<16:09,  1.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 309/810 [08:21<14:56,  1.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 310/810 [08:23<14:21,  1.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 311/810 [08:25<13:59,  1.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▊      | 312/810 [08:26<14:10,  1.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▊      | 313/810 [08:28<13:46,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 314/810 [08:30<13:52,  1.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 315/810 [08:31<13:22,  1.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 316/810 [08:33<13:11,  1.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 317/810 [08:35<14:01,  1.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 318/810 [08:36<13:49,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 319/810 [08:38<14:42,  1.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|███▉      | 320/810 [08:40<13:58,  1.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|███▉      | 321/810 [08:41<13:45,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|███▉      | 322/810 [08:44<15:26,  1.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|███▉      | 323/810 [08:47<18:56,  2.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|████      | 324/810 [08:49<16:40,  2.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|████      | 325/810 [08:50<15:31,  1.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|████      | 326/810 [08:52<14:22,  1.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|████      | 327/810 [08:53<14:13,  1.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|████      | 328/810 [08:55<13:47,  1.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 329/810 [08:56<13:06,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 330/810 [08:58<13:32,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 331/810 [09:00<13:03,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 332/810 [09:01<12:42,  1.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 333/810 [09:03<12:29,  1.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 334/810 [09:04<12:17,  1.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████▏     | 335/810 [09:06<12:34,  1.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████▏     | 336/810 [09:08<12:55,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 337/810 [09:09<13:15,  1.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 338/810 [09:11<13:21,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 339/810 [09:14<16:51,  2.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 340/810 [09:16<15:36,  1.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 341/810 [09:17<13:55,  1.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 342/810 [09:24<26:05,  3.35s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 343/810 [09:26<22:34,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 344/810 [09:28<19:48,  2.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 345/810 [09:29<17:21,  2.24s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 346/810 [09:31<15:50,  2.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 347/810 [09:33<15:10,  1.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 348/810 [09:34<14:12,  1.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 349/810 [09:36<13:36,  1.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 350/810 [09:38<13:15,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 351/810 [09:39<12:30,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 352/810 [09:40<11:41,  1.53s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▎     | 353/810 [09:42<12:05,  1.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▎     | 354/810 [09:43<11:22,  1.50s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 355/810 [09:45<11:33,  1.52s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 356/810 [09:47<11:57,  1.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 357/810 [09:48<12:06,  1.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 358/810 [09:50<11:54,  1.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 359/810 [09:51<12:10,  1.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 360/810 [09:53<12:34,  1.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▍     | 361/810 [09:55<12:34,  1.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▍     | 362/810 [09:56<12:06,  1.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▍     | 363/810 [09:58<12:04,  1.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▍     | 364/810 [09:59<11:31,  1.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▌     | 365/810 [10:01<12:28,  1.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▌     | 366/810 [10:04<13:36,  1.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▌     | 367/810 [10:07<17:56,  2.43s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▌     | 368/810 [10:09<16:01,  2.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 369/810 [10:11<14:27,  1.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 370/810 [10:12<13:45,  1.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 371/810 [10:15<15:57,  2.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 372/810 [10:17<14:40,  2.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Trying to load from /users/rhydian/self-supervised-project/model_weights/SSECEncodersBothBoth
==> Resuming model trained for 106 epochs...
Trying to load from ../model_weights/angle_regressor4
==> Resuming model trained for 7 epochs...
4246143_20201_2_0,ransyo4icz,-1.0139552085772574,-57.854764334928745,-32.57911584012825

3103925_20201_2_0,raqa8o4icz,0.02879196278945482,-95.51812952639392,-32.75514107542453

5624833_20201_2_0,raz1uo4icz,-2.0562890414342196,-83.30946813252487,-27.04257719075919

1006144_20201_2_0,rb36tn4icz,2.4928687526652618,-85.54396439642815,-53.3010867591789

2130315_20201_2_0,rb3zun4icz,-0.299587508942754,-92.82106970637275,-37.20500636159207

1959246_20201_2_0,rb4x8p4icz,-2.2988130959408744,-105.4836291641306,-14.464135191033918

5755258_20201_2_0,rb7hap4icz,-0.08318641955107582,-89.27227643866584,-32.69970435059301

1934858_20201_2_0,rbg4yo4icz,0.4594349686704597,-110.74611702381097,-39.2280355825543

2866105_20201_2_0,rbjhbp4icz,-0.35964818823535605,-83.40022091539532,-23.273025332711114

1502081_20201_2_0,rbl79n4icz,-0.21250692943783636,-113.79189592325656,-26.662156855758923

5065162_20201_2_0,rbq58p4icz,0.5437626962148749,-99.24364674111308,-38.89576495989864

1539072_20201_2_0,rbr1wn4icz,-2.1710925329487987,-91.09743130584306,-19.714056210875853

1956487_20201_2_0,rbtlon4icz,-1.852468866370786,-105.8007031902005,-37.520182839727624

1828936_20201_2_0,rbuysn4icz,-0.0441187434668343,-93.8702800572006,-51.52451031452935

3069112_20201_2_0,rbvdtn4icz,7.786170623981716,-128.05809866574492,-80.45581874179484

2993777_20201_2_0,rc0s3o4icz,-1.5724148388194403,-69.7761801678547,-32.65229183541686

5656742_20201_2_0,rc4map4icz,-3.6339313111545986,-93.2418203792688,-19.138012513508414

3660447_20201_2_0,rca49o4icz,-0.6993602000896023,-97.12530194328133,-35.36442472793321

3744969_20201_2_0,rckjko4icz,2.4101675524229194,-81.31042860133891,-53.30104661842354

1578324_20201_2_0,rcklyo4icz,2.178649256361976,-83.69071267940703,-54.222841005348855

4789134_20201_2_0,rclpan4icz,-3.8456661753872114,-144.63463924825103,-13.909734721751548

5249711_20201_2_0,rcqyho4icz,-0.20665272251767278,-103.25039407769287,-25.850578242686197

2614702_20201_2_0,rcreln4icz,0.9562344511030372,-68.6961669826228,-44.25441345450719

3068972_20201_2_0,rctomn4icz,-0.6779964845474757,-121.50255768247115,-23.481197845590856

4658158_20201_2_0,rcw64o4icz,2.516080306728626,-79.03786730209438,-24.15246909621864

5322418_20201_2_0,rcx8ip4icz,-0.018361024909562363,-66.50391843955938,-17.806160572661184

5018299_20201_2_0,rcyy8n4icz,-1.901954353401178,-140.08669270371945,-27.430462419007966

3172487_20201_2_0,dkse8p4icz,2.214507910969208,-88.94975069666765,-46.289812968632916

1971096_20201_2_0,rd4xzo4icz,0.17490150098727744,-140.09266627147804,-27.65147206800907

3241820_20201_2_0,rde78p4icz,-0.08170344418826073,-100.00908305352573,-38.97833381211575

1946606_20201_2_0,rdkcdo4icz,1.7443430835261389,-92.90725114714573,-59.84120645993967

4837258_20201_2_0,rdkyoo4icz,0.32813217258491895,-77.725965931909,-49.97709929345041

1259928_20201_2_0,rdlaqn4icz,1.3351439247189596,-124.26981202099356,-40.12547209457948

3795789_20201_2_0,rdo2ip4icz,-1.8799360793050013,-74.25555264766899,-34.303263727312924

1031352_20201_2_0,rds9no4icz,-2.1590701504732253,-119.80249431945933,-16.50649977743916

5078313_20201_2_0,rdtwqn4icz,-2.3853509604683625,-145.5189484097654,-24.86220876752985

5025991_20201_2_0,rdvx9o4icz,3.4398270352345985,-67.81860347860558,-60.30213539034753

2429911_20201_2_0,re1kxn4icz,0.3622053392887323,-60.4599032416603,-29.373832923519927

1137887_20201_2_0,re2kjo4icz,-2.6461794858834526,-103.83955318183018,-42.17226069155842

2330423_20201_2_0,re43sn4icz,-1.8389166878427654,-90.92712089895349,-34.388521754518464

2682232_20201_2_0,re4ydn4icz,-0.7532580629633002,-83.29074564750564,-22.370300783407203

4723490_20201_2_0,re8w3p4icz,-0.2976622102990368,-95.45295300807123,-52.922122409657305

5564257_20201_2_0,rebg8o4icz,-3.072640363532743,-107.33844523440047,-7.78445247422593

2878119_20201_2_0,red09n4icz,-2.3300203807278703,-148.00884173104083,-39.85608101970507

3833568_20201_2_0,rend0p4icz,-2.487228740021754,-82.54452349564903,-24.041012588224817

2883617_20201_2_0,rep3ln4icz,0.5067491164688596,-112.57208656283706,-17.6889380325958

3024165_20201_2_0,rerm5o4icz,4.678313481600709,-82.87565256081308,-52.47493660315135

1521564_20201_2_0,resvcp4icz,2.9906473614524804,-114.38892099230657,-39.3862589108532

2243489_20201_2_0,reszno4icz,-1.498856259858979,-118.89150289577321,-52.33392477253025

5874648_20201_2_0,rey1pn4icz,-0.9319622846834624,-113.20693966421152,-5.87931467280454

4832413_20201_2_0,rf1jdn4icz,0.293051350312904,-76.48193480535235,-28.557496278546893

3209677_20201_2_0,rf66gp4icz,-2.403613307385789,-96.91424888913224,-24.584515321896973

3710453_20201_2_0,rf9gko4icz,1.401450728363704,-97.42403078361224,-32.520889781308426

3165353_20201_2_0,rf9p8o4icz,4.811698521171973,-97.33831111960095,-73.88064270799883

2120644_20201_2_0,rf9u0o4icz,-3.0968247367625317,-76.68941427806774,-23.266923959171137

3241227_20201_2_0,rfd42o4icz,1.376725969767512,-87.58062194599651,-48.33615002332907

5824918_20201_2_0,rffsgo4icz,0.5267875193444653,-125.19133024026758,-48.777270408780936

5046153_20201_2_0,rfh2ap4icz,2.5667888353492674,-83.72510153186778,-46.560604508581974

2821672_20201_2_0,rfis3p4icz,0.2191655344491361,-75.1598636281013,-44.99860265286894

3705328_20201_2_0,rfo1fp4icz,6.20352760455887,-157.88923336297898,-73.67007958530763

3293973_20201_2_0,rfou6n4icz,0.3084398350180316,-67.35610166669429,-51.76773058151716

3428076_20201_2_0,rfpafo4icz,-0.3095740729668461,-78.06576431146021,-28.038452140843603

5375386_20201_2_0,rfu31p4icz,1.0400960630659033,-100.03439252468505,-39.65074884617519

1096052_20201_2_0,rfuubo4icz,-0.7275009965867059,-92.12430905549428,-38.585818464554805

3926108_20201_2_0,rfw71p4icz,-1.7379191521202952,-75.1947249909216,-21.516053275757287

2119296_20201_2_0,rfwoyo4icz,-0.4581982845918099,-93.57528823748629,-53.39079263996541

5741172_20201_2_0,rfwxkn4icz,-4.170747397088248,-116.81610092745427,-24.09856154991924

4721698_20201_2_0,rg03ip4icz,-4.356574342677884,-124.42431145528914,-13.214350301461465

2796235_20201_2_0,rg0pko4icz,-3.0259841214502106,-51.81681107007219,-13.444447251764103

4520700_20201_2_0,rg2oho4icz,-6.743501681526231,-148.93202115367762,15.098065793850964

3028880_20201_2_0,rg301p4icz,-3.2246987972559187,-114.45710424505793,-24.279003871402523

1242648_20201_2_0,rg787p4icz,1.6500838053224338,-113.52296937689277,-41.36371628693965

2452079_20201_2_0,rgc91o4icz,-0.19006729053387103,-126.7652980487023,-13.673800072254437

3169762_20201_2_0,rgcvsn4icz,1.5105154985698774,-76.64503598666084,-54.62404104159776

3785252_20201_2_0,rgdr8o4icz,-0.5030814198305774,-95.09393521066019,-28.595736910581437

3347057_20201_2_0,rge9en4icz,1.159888856206173,-105.67152842975602,-27.41432798338039

1471649_20201_2_0,rgk16o4icz,3.20860211459041,-38.51423092385946,-56.67664165436044

2010988_20201_2_0,rgkqkn4icz,1.5891964283958875,-117.92785924387806,-34.07879547291188

1218973_20201_2_0,rgsfdo4icz,-1.04102996906542,-50.91010105945992,-36.40896525723781

3147525_20201_2_0,rgv5co4icz,3.7466957722969547,-86.38326189511918,-46.956411900345074

1426689_20201_2_0,rgzmin4icz,-4.593192017090282,-120.39369293871033,-58.07499291762467

3438340_20201_2_0,rh67oo4icz,-2.56600287110069,-94.79074552033038,-17.785138271896813

3472423_20201_2_0,rha4go4icz,0.06790809593648618,-80.50398162859733,-49.18960392774433

2842736_20201_2_0,rha6in4icz,-0.34580804399920634,-132.0967349026308,-40.06942657281701

5710202_20201_2_0,rhcmjp4icz,-1.6231822365813957,-77.43062772869905,-19.05307125144911

1170028_20201_2_0,rhcpip4icz,-11.752140040731396,-84.41053337933207,34.716569043864325

5968465_20201_2_0,rhefhp4icz,-0.26725337000895744,-117.38428058740419,-48.601864865966945

2734291_20201_2_0,rhh3xn4icz,-0.47874752534743686,-139.0110278697788,-39.581644984230564

3935626_20201_2_0,rhhswo4icz,0.9579932152876033,-37.312633498237346,-42.45940640375841

2463192_20201_2_0,rhkbgo4icz,-1.056301388017198,-89.2192658186521,-34.270864854362046

2324326_20201_2_0,rhl44o4icz,1.5416363061897287,-66.61462307371727,-41.716008760795575

1499871_20201_2_0,rhm2io4icz,0.04072233144293496,-86.58111880650716,-42.763265480482474

1458641_20201_2_0,rhmefo4icz,-2.090128499427957,-128.3310439104448,-23.027159425233307

4905657_20201_2_0,rht2ko4icz,3.939929598994651,-75.30581757003108,-53.201935075481956

5533765_20201_2_0,rhvt7n4icz,10.386408102312997,-105.35609603148191,-90.96705841079682

1780240_20201_2_0,rhwmro4icz,-8.429681717849295,-117.123327607476,22.22001966811004

4809021_20201_2_0,ri0ucp4icz,4.821948495029063,-45.603899047155096,-82.8468468037701

1823982_20201_2_0,ri0w0o4icz,1.137134296123348,-38.53937156618289,-54.496208165603704

5919481_20201_2_0,ri2lcp4icz,2.1422917114448543,-95.64857267344664,-58.44525324702795

2834094_20201_2_0,ri4boo4icz,1.367143158812908,-101.88052530727566,-47.426859100601774

5766655_20201_2_0,ri7kxn4icz,-1.4506679387364851,-142.29054684783833,-31.609113501334576

3547593_20201_2_0,ri8jkn4icz,-1.0079448202206371,-62.22368581144062,-35.48144248180566

4097445_20201_2_0,ridmlo4icz,0.5623829738773712,-98.19655878966745,-37.689777218063256

3286387_20201_2_0,ril1xn4icz,-0.39049195416991456,-79.09722697970963,-34.47413278539173

2346263_20201_2_0,rim7ho4icz,-0.8112007162237663,-95.43453180729983,-28.830782902159342

4572463_20201_2_0,rimlro4icz,29.645352724164685,-11.765780245779808,-173.15138247601632

4140831_20201_2_0,riqpso4icz,2.3279515395541646,-76.51383276876746,-52.614670677886835

3429526_20201_2_0,rizv7p4icz,0.43656538857191785,-76.37559523659638,-29.91978328384795

3061168_20201_2_0,rj28eo4icz,3.873797008697967,-88.84920621267847,-68.40326088634644

1306141_20201_2_0,rj5fnn4icz,3.362509170125015,-70.88061816129289,-43.645835785034194

3102811_20201_2_0,rj5hin4icz,0.8717241541731064,-91.26962716534669,-37.36889715038981

3056419_20201_2_0,rj7j2o4icz,0.6690733903525471,-71.12447361272993,-42.884415399041444

2425470_20201_2_0,rj87qn4icz,-4.358942561924072,-74.68431812960529,-29.295960406786037

5802085_20201_2_0,rjb9sn4icz,-1.5961453758998267,-86.78276342966495,-28.15567724876324

2745513_20201_2_0,rjcrbp4icz,-0.7954736255686112,-113.24090905538142,-34.729421096656324

2091126_20201_2_0,rjocfo4icz,-2.289665616805392,-95.53258958672126,-44.72468950653888

3414664_20201_2_0,rjso7p4icz,-3.2291137982621776,-120.14561387576003,-11.74162005103588

1737688_20201_2_0,rjv7wn4icz,-0.7061453907954106,-103.3787395840873,-29.19461941886982

4915884_20201_2_0,rjxkgo4icz,-0.2037000447709996,-154.0499735135818,-47.502253239995184

2118010_20201_2_0,rk88kn4icz,-0.4062561144655548,-143.81959282499685,-31.163046342273788

2770556_20201_2_0,rkiw4o4icz,-15.286833913621956,-94.14907746991832,39.90736734247727

2081829_20201_2_0,rkmcfp4icz,1.847993556241969,-104.54569447989721,-36.92655314241114

2529385_20201_2_0,rknico4icz,1.2627792199341972,-80.43128055501549,-27.10004222914972

1088875_20201_2_0,ctnl8o4icz,-3.349096726856988,-128.92477379047978,0.20858019366215785

2870278_20201_2_0,rksb5p4icz,-0.8698989389988555,-110.32618759654036,-14.504616723119454

3967914_20201_2_0,rl0uuo4icz,1.926486403208334,-84.07986606030403,-54.09911057368342

5197363_20201_2_0,rl21ep4icz,1.3702622984364037,-135.12201945772884,-44.234955231961166

3367142_20201_2_0,rl9f7p4icz,1.6007468467462107,-94.69839794053348,-49.224788857903064

1574375_20201_2_0,rlabnn4icz,11.422708401832928,-70.89965485703374,-105.27534190637193

5753307_20201_2_0,rldlyo4icz,-1.3094889787921968,-104.88341624923251,-41.43183843895119

1413628_20201_2_0,rlgqpn4icz,-0.7084055156361034,-91.7294364269529,-37.436210979634296

5522844_20201_2_0,rlofkn4icz,4.951878016942872,-117.6823710266176,-52.40089135137481

1850919_20201_2_0,rlqjon4icz,1.7642760016025565,-107.25979076274425,-39.37978608355119

3513830_20201_2_0,rlqwbo4icz,0.22007855610408175,-87.26855533223267,-28.281924464994816

4404829_20201_2_0,rlrhip4icz,-1.596141469877912,-67.11128487672255,-34.22723932081702

1913624_20201_2_0,rlu36p4icz,13.52023182589231,-198.50474062859357,192.60021929776843

1714554_20201_2_0,rlvh6o4icz,0.19550692828803742,-95.75068439738061,-49.83532037049278

2416990_20201_2_0,rlvw8o4icz,-0.10159338136311212,-106.61891044929621,-40.73298350437982

3045794_20201_2_0,rlyy8p4icz,-0.9035543070927423,-113.86128394798516,-41.33685652367937

5340638_20201_2_0,rm0g8o4icz,1.765558624898959,-49.901180319760044,-44.12205757228273

1281780_20201_2_0,rm8hnn4icz,-2.1484347746277512,-132.01861068440905,-21.17354856421339

3444591_20201_2_0,rmardp4icz,3.5590683801689,-94.4437794126705,-58.4067043364422

5972812_20201_2_0,rmdjmn4icz,-0.41483733083700947,-140.35767920549338,-22.807470236546763

2419697_20201_2_0,rme0hp4icz,-1.8076110818680968,-97.76627974272486,-23.020584519492317

3975744_20201_2_0,rmjw6o4icz,0.035542878205979504,-111.68664696314988,-48.421054496394106

1155781_20201_2_0,rmlgso4icz,-0.010478913467656257,-110.59870023907644,-42.5134755859241

1385059_20201_2_0,rmoydo4icz,1.2990388575853111,-57.341604923382306,-47.77026640260024

3960365_20201_2_0,rmticp4icz,1.4345617249015448,-81.53478194072954,-47.39174804304419

1151277_20201_2_0,rn419o4icz,0.6053557778474324,-82.08371197498559,-30.49191562394165

5053671_20201_2_0,rn4scp4icz,-2.1414069261855744,-115.33270024510898,-5.156445374371813

3984297_20201_2_0,rn5mxo4icz,-2.8533342233138184,-125.6141243622306,-35.009426125011544

4604338_20201_2_0,rn6gsn4icz,-3.8943301336213785,-130.5223575529708,-22.38889138098766

5015573_20201_2_0,rn6z1p4icz,0.28170232295243375,-69.66638345859946,-47.980677410007104

5017853_20201_2_0,rn75oo4icz,-2.016872844328731,-111.97269249156184,-20.155872222808384

4439808_20201_2_0,rn89jn4icz,-32.28500763592862,-177.15219569669833,185.09613047078227

4672577_20201_2_0,rn8ucp4icz,0.12493712969233055,-110.46070810815866,-35.85170995966284

4513764_20201_2_0,rnegln4icz,1.6510429840718925,-53.790222407665794,-56.63643205572363

3675646_20201_2_0,rnh5ao4icz,-1.0348810558239523,-111.13560944078566,-19.733355140875204

4110830_20201_2_0,rnh7jn4icz,2.4705862340463,-86.75212980727355,-53.38266789401291

2390280_20201_2_0,rnilbo4icz,-0.9816798024843948,-46.46419330406269,-26.607096701834493

5354924_20201_2_0,rnq8sn4icz,11.577592330902142,-14.537256882647199,-86.9746975363135

4965160_20201_2_0,rns0gp4icz,-0.31443368655686993,-59.481522565993544,-40.37723037296139

1881613_20201_2_0,rnw33o4icz,0.3795633860466717,-64.01766262557845,-65.51754622009582

5553074_20201_2_0,rny3ep4icz,1.5218708333597093,-60.57218368606135,-65.00108740362097

3343190_20201_2_0,ro1nyo4icz,1.3901421722764478,-64.07063571023883,-57.28507773932017

4531822_20201_2_0,ro3cbo4icz,1.4415533636250093,-86.0985925501553,-45.005526033157935

3516168_20201_2_0,ro3jmn4icz,-3.203235669618368,-125.54025729443077,-34.908191093466826

5352409_20201_2_0,ro7jep4icz,0.6935236594113723,-87.0911731256119,-49.957645596021266

1818897_20201_2_0,ro927p4icz,1.7946535164105943,-40.549544631667146,-38.84028658671488

1805433_20201_2_0,ro97en4icz,-0.9528924864371012,-119.26902362983074,-36.63706553531512

3591628_20201_2_0,ro9ltn4icz,0.4441896432269764,-107.25622697306119,-41.05034509538862

1893097_20201_2_0,roc0no4icz,-0.4709098210535935,-81.6298820011778,-24.723598926726112

2330384_20201_2_0,rocfbn4icz,-0.8964160286216454,-89.46290696000906,-17.94071454548734

3993481_20201_2_0,roljtn4icz,-3.34148010592533,-123.2052859727784,-11.53278764999861

1147623_20201_2_0,roqsbo4icz,0.6923278412676941,-100.54923211523825,-44.178091897987755

1484541_20201_2_0,rou3nn4icz,-1.363682616176195,-94.27713049389368,-39.55107940503082

3585391_20201_2_0,roxgun4icz,-1.832970584609117,-112.9246303388262,-6.332979313922763

4765740_20201_2_0,roya8p4icz,0.4100330222207333,-77.90881530234674,-28.010223716609545

5163645_20201_2_0,rp017p4icz,1.5865965423937478,-104.16061166867675,-57.75487610425246

4426504_20201_2_0,rp05fo4icz,-1.515907435320633,-56.15780644569841,-41.634494798564674

1663845_20201_2_0,rp2arn4icz,-3.0727929725399377,-103.51882239242971,-19.203304087994113

4617226_20201_2_0,rp41tn4icz,0.41026208723112445,-105.59470701928149,-49.22846450780345

5356111_20201_2_0,rp6xjo4icz,0.4987012086296913,-36.02645758443276,-48.0764208490224

4342225_20201_2_0,rp8gfo4icz,-0.2928334093011741,-102.84740219968165,-44.16698707462565

1467416_20201_2_0,rp8mcn4icz,1.4005227646166771,-76.60005128196127,-53.22120068597178

4070898_20201_2_0,rpgtqo4icz,1.1813876237657943,-52.59243478078085,-40.3255888478343

2469533_20201_2_0,rptxuo4icz,-0.07564680085336332,-77.17429238568681,-48.81723701738693

1097692_20201_2_0,rq0jjp4icz,1.6611117441114487,-110.26550753412818,-33.124958120573524

1405522_20201_2_0,rq0sjo4icz,3.614049382248993,75.80369944510346,-16.939241758428068

2485769_20201_2_0,rq0y3p4icz,-0.12427896426872609,-108.11934241081602,-29.33454070275694

3806141_20201_2_0,rq249o4icz,0.699229613525179,-87.67890593618907,-34.84097904781807

2852151_20201_2_0,rq4jyn4icz,-0.638871008935824,-120.63475964508885,-35.90820432177392

6002635_20201_2_0,rq53to4icz,0.20451420630765696,-81.8714393464235,-26.322462361823824

1531235_20201_2_0,rq7mso4icz,-5.159836012489612,-92.42044652146706,7.302744174617331

5139438_20201_2_0,rq7p4p4icz,-7.291714167730464,-136.47558131549786,5.22756422826717

1674822_20201_2_0,rq98ro4icz,0.502559299915872,-82.40900799062115,-12.48581281983789

1167932_20201_2_0,rqbrhn4icz,-8.650755149434453,-69.95401885057223,0.6151315281713181

3337234_20201_2_0,rqd3mo4icz,2.324092930238235,-115.62812453995662,-39.297368954920316

5452968_20201_2_0,rqfqcp4icz,6.192174035779494,-62.02592941231049,-78.31520365851685

2342440_20201_2_0,rqi8vo4icz,0.24929164538161716,-136.09176134050492,-28.761642244425843

4722551_20201_2_0,rql5zo4icz,6.66573194366397,-86.66114409218676,-81.53136836728771

1274677_20201_2_0,rqmwbp4icz,-12.615236174389551,-160.59389953413742,5.669109039865063

2711600_20201_2_0,rqnrzo4icz,-1.2162437432695166,-127.43141989881485,-38.59552954921104

5821653_20201_2_0,rqpn8p4icz,-1.2050432208877389,-87.696349931854,-35.47663150449068

4760636_20201_2_0,rqsh4o4icz,-0.2568695331952122,-91.00080652782273,-16.653535799772413

2710196_20201_2_0,rqu5ho4icz,1.4876438423556637,-143.93727159015748,-47.173805725875496

1391790_20201_2_0,rqy7wn4icz,-1.3433303520087818,-77.01246339097244,-19.58414224740943

6007879_20201_2_0,rqyien4icz,-0.13447225591463063,-123.76660918104707,-26.4823782036421

5565500_20201_2_0,rqyqdo4icz,0.4327373448212727,-117.0529167018129,-37.985352675605014

5490280_20201_2_0,rr3wpo4icz,-0.20425298027128458,-53.80792098969394,-27.37688499736879

5197199_20201_2_0,rr598o4icz,-2.423541637409655,-89.14214990366776,-33.79324065979853

3950127_20201_2_0,rreafo4icz,-1.2543325343823621,-107.43933294711323,-43.63440606403614

1580508_20201_2_0,rrfmln4icz,-1.3076619622405203,-101.3434573014695,-38.063175268297385

4669763_20201_2_0,rrgq5p4icz,0.7487444427118369,-66.50934576766284,-45.56185702988586

1758511_20201_2_0,rroipn4icz,2.469129414044925,-88.77137640941567,-56.8532315856537

4074091_20201_2_0,rrs0tn4icz,-1.45580267395196,-153.05679758772894,-38.48866147654729

5832772_20201_2_0,rrwrln4icz,3.2138085262897014,-82.95989102237303,-53.155091954039335

1283760_20201_2_0,rrz02p4icz,2.9041991138515817,-37.53965698986701,-42.8693285555068

3700063_20201_2_0,rrzyun4icz,-0.2201094838400685,-80.44293581617902,-48.71285165587595

4691733_20201_2_0,rs2aep4icz,0.49050251198127065,-109.99859388260117,-31.02603980245067

2319205_20201_2_0,rs97ln4icz,-2.6674384359252636,-123.06738535658423,-21.046506539852203

5090131_20201_2_0,rsh5un4icz,-1.1399403477463312,-131.56622804547436,-19.3401872201774

5866743_20201_2_0,rsjd1p4icz,-1.2101747720059162,-129.71477966492586,-49.26511844309624

4503332_20201_2_0,rsjowo4icz,-6.990209565687925,-75.69033405840838,-1.1632150336110954

4659761_20201_2_0,rsm3oo4icz,2.2579486739000614,-51.422875264861034,-50.98795793545972

2623301_20201_2_0,rsr44p4icz,1.9451793720096429,-75.08402385347605,-51.45801030960885

4339676_20201_2_0,rsteho4icz,1.1926292684412219,-90.37972223934759,-26.690946718133347

1422811_20201_2_0,rsw6ko4icz,-1.8644261570974578,-88.79677669638426,-26.08747047609407

5411704_20201_2_0,rsxb9o4icz,0.5146999110414265,-120.4329675294967,-39.672318479582614

3702770_20201_2_0,rt1edp4icz,-1.0176758080812487,-74.53851869477398,-23.853198268037744

4128006_20201_2_0,rt5b6p4icz,-1.8174805817700983,-72.32764438485327,-23.99426475158124

2054212_20201_2_0,uubtcn4icz,0.6993993568444322,-107.77573163996902,-45.005472934585825

3231520_20201_2_0,rt6skn4icz,-0.21188691370136797,-83.9648969691236,-40.87546596059484

5438850_20201_2_0,rta3xn4icz,0.691498339837487,-146.95380696516946,-60.51907429136551

2552680_20201_2_0,rtbznn4icz,-0.7624159835685368,-72.09361866848664,-23.639222931346822

1342405_20201_2_0,rtc6ep4icz,-2.307767524873815,-103.77256064218147,-24.91433370056764

2334463_20201_2_0,rtcpbp4icz,-0.896958269178738,-130.0213268811286,-29.231817460819755

5805685_20201_2_0,rtepan4icz,7.480932589097203,-130.5799252177008,-69.82455189340189

5264270_20201_2_0,rtfdcp4icz,-5.75419398793492,-126.29769099905772,-15.93058014008777

5244751_20201_2_0,rtflro4icz,-1.0222218292030434,-83.60175713101958,-25.965415917451296

2209668_20201_2_0,rtgdno4icz,1.3619512128930473,-87.77626813781495,-31.995335013463517

1149616_20201_2_0,rtgymn4icz,-2.5880481249959217,-94.36325832359873,-19.081779917174003

3252699_20201_2_0,rtimco4icz,-0.9728158448606691,-62.76796914271816,-27.664844912268393

1502388_20201_2_0,rtlq9n4icz,7.28804251245994,-90.75214674063079,-86.93344551407255

5206111_20201_2_0,rtotjn4icz,9.726635172952765,-116.21791532370816,-98.4613502555201

3279440_20201_2_0,rtp5pn4icz,-2.0558212297675804,-147.6650104502068,-8.643592063862442

2808415_20201_2_0,rtteao4icz,-0.16274772045971186,-87.18320222557509,-23.780645086012257

1791273_20201_2_0,rtwdtn4icz,-4.146028033434926,-121.67796709024336,-17.69594608939991

2770285_20201_2_0,rtzh0p4icz,-0.6499834878430166,-76.13803973265655,-38.46908097515578

5944675_20201_2_0,ru0ypn4icz,-0.9800228872741807,-64.38394334591572,-34.056329853361774

4261606_20201_2_0,ru8jvn4icz,0.30945561930000254,-130.01374056037625,-38.432436446312764

1595795_20201_2_0,ru916n4icz,-0.5156816296091068,-118.56970224782532,-45.23056585275337

4066733_20201_2_0,ruck8p4icz,-3.6246985496232207,-84.93016331717752,-17.9522724698125

5581295_20201_2_0,rudmpn4icz,1.2640281725724463,-59.17166708279311,-36.09797065325424

2391492_20201_2_0,rueykn4icz,0.15360423137743554,-100.75546915195744,-51.50736984553619

2555920_20201_2_0,ruicjn4icz,-2.2260111531880504,-115.06844817898931,-11.878866478657116

3613992_20201_2_0,rujugp4icz,-0.12415710305462854,-84.98224964402249,-38.64412868254884

1693544_20201_2_0,rukj9p4icz,0.5654859526396583,-65.25144756317223,-43.03702762555024

4610905_20201_2_0,ruml0p4icz,-1.874109140255388,-108.60232403684611,-24.578335586031045

4228796_20201_2_0,ruom3p4icz,0.07498277902410075,-45.11426003439303,-21.713628073974732

3230468_20201_2_0,ruoysn4icz,1.4290643716979712,-77.5127641733761,-52.13434730450551

5975027_20201_2_0,ruvokn4icz,1.3469840453815016,-113.04004665853242,-46.157030203919476

4621671_20201_2_0,ruvzmn4icz,-0.008202394920965177,-55.24247197502649,-40.09361744613763

5532689_20201_2_0,ruweuo4icz,0.7317734839623177,-99.32153845081731,-52.31159680676733

6025064_20201_2_0,rv7ckn4icz,-0.6783298538271821,-93.4339365560752,-23.81610915173816

3233171_20201_2_0,rv8nro4icz,-0.7879023276847419,-107.33398490432143,-43.774388415725994

4525821_20201_2_0,rv9ibp4icz,0.6875067644697953,-113.1276033072296,-35.25470311303167

3690426_20201_2_0,rva7zo4icz,-2.2316194192184233,-126.954942126623,-41.193581246672906

4908380_20201_2_0,rvbgsn4icz,1.3745743098391987,-134.8456366110342,-57.020225935032315

4593459_20201_2_0,rvbt2p4icz,-1.2240592398146908,-59.86930816665955,-33.226150722893664

5833524_20201_2_0,rvelon4icz,1.0797756174266047,-63.8135320681082,-39.67988552464951

4052125_20201_2_0,rvgown4icz,1.5748587345512268,-93.59051228597389,-62.04247431611894

3473409_20201_2_0,rvkaoo4icz,4.893073566364697,-84.43598378222137,-52.544227903454

1632810_20201_2_0,rvkmwn4icz,-2.777107074680186,-102.66788768308658,-25.109717630877213

5326613_20201_2_0,rvmako4icz,-2.100454202809142,-108.02979838836922,-23.931535177770144

3016158_20201_2_0,rvpdrn4icz,-6.6548756329170455,-77.45152258460917,-4.735674669434658

1248343_20201_2_0,rvuavo4icz,-1.3642372222334371,-83.9665010854433,-26.367157221963993

2886413_20201_2_0,rvuhon4icz,-2.3343751146826697,-136.88579021367772,-30.141388810414995

4592812_20201_2_0,rvxyqo4icz,-4.079885548575014,-107.79653496928074,13.516458089041748
 46%|████▌     | 373/810 [10:18<13:24,  1.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 374/810 [10:20<12:35,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▋     | 375/810 [10:21<12:11,  1.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▋     | 376/810 [10:23<11:20,  1.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 377/810 [10:24<10:55,  1.51s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 378/810 [10:25<10:58,  1.52s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 379/810 [10:27<11:05,  1.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 380/810 [10:29<11:01,  1.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 381/810 [10:30<11:09,  1.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 382/810 [10:32<12:41,  1.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 383/810 [10:34<12:26,  1.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 384/810 [10:36<11:43,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 385/810 [10:37<11:24,  1.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 386/810 [10:39<11:09,  1.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 387/810 [10:40<11:22,  1.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 388/810 [10:42<12:07,  1.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 389/810 [10:44<12:12,  1.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 390/810 [10:45<11:09,  1.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 391/810 [10:47<10:48,  1.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 392/810 [10:48<10:31,  1.51s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▊     | 393/810 [10:50<10:43,  1.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▊     | 394/810 [10:51<10:24,  1.50s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 395/810 [10:53<10:19,  1.49s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 396/810 [10:54<10:24,  1.51s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 397/810 [10:56<10:33,  1.53s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 398/810 [10:57<10:22,  1.51s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 399/810 [10:59<10:19,  1.51s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 400/810 [11:00<10:03,  1.47s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|████▉     | 401/810 [11:02<10:11,  1.49s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|████▉     | 402/810 [11:03<10:20,  1.52s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|████▉     | 403/810 [11:05<10:38,  1.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|████▉     | 404/810 [11:07<10:39,  1.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 405/810 [11:09<11:39,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 406/810 [11:10<10:51,  1.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 407/810 [11:12<10:43,  1.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 408/810 [11:14<11:43,  1.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 409/810 [11:15<11:20,  1.70s/it] 51%|█████     | 410/810 [11:17<10:46,  1.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 411/810 [11:18<10:54,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 412/810 [11:20<10:51,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 413/810 [11:21<10:17,  1.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 414/810 [11:23<10:10,  1.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 415/810 [11:24<10:09,  1.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████▏    | 416/810 [11:26<10:29,  1.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████▏    | 417/810 [11:28<10:39,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 418/810 [11:29<10:40,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 419/810 [11:31<10:36,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 420/810 [11:33<10:49,  1.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 421/810 [11:34<10:29,  1.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 422/810 [11:37<11:33,  1.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 423/810 [11:38<10:53,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 424/810 [11:40<10:48,  1.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 425/810 [11:42<11:22,  1.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 426/810 [11:43<11:08,  1.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 427/810 [11:45<11:07,  1.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 428/810 [11:46<10:22,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 429/810 [11:48<10:46,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 430/810 [11:50<10:02,  1.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 431/810 [11:51<10:20,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 432/810 [11:53<10:01,  1.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 433/810 [11:54<09:36,  1.53s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▎    | 434/810 [11:56<10:16,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▎    | 435/810 [12:00<15:14,  2.44s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 436/810 [12:02<13:43,  2.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 437/810 [12:04<12:49,  2.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 438/810 [12:05<12:00,  1.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 439/810 [12:07<11:43,  1.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 440/810 [12:09<11:07,  1.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 441/810 [12:10<10:23,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▍    | 442/810 [12:12<10:20,  1.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▍    | 443/810 [12:14<10:13,  1.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▍    | 444/810 [12:15<09:55,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▍    | 445/810 [12:17<09:58,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▌    | 446/810 [12:18<10:02,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▌    | 447/810 [12:20<09:50,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▌    | 448/810 [12:22<09:45,  1.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▌    | 449/810 [12:23<09:36,  1.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 450/810 [12:25<09:22,  1.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 451/810 [12:26<09:29,  1.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 452/810 [12:28<09:26,  1.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 453/810 [12:30<09:50,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 454/810 [12:31<09:35,  1.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 455/810 [12:33<09:23,  1.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▋    | 456/810 [12:34<09:13,  1.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▋    | 457/810 [12:36<08:53,  1.51s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 458/810 [12:37<09:28,  1.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 459/810 [12:39<09:52,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 460/810 [12:41<09:26,  1.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 461/810 [12:42<09:20,  1.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 462/810 [12:44<09:33,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 463/810 [12:46<09:26,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 464/810 [12:47<09:26,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 465/810 [12:49<09:21,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 466/810 [12:51<09:19,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 467/810 [12:52<09:16,  1.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 468/810 [12:54<08:50,  1.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 469/810 [12:55<08:40,  1.53s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 470/810 [12:57<09:14,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 471/810 [12:58<08:58,  1.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 472/810 [13:01<11:27,  2.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 473/810 [13:03<11:04,  1.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▊    | 474/810 [13:05<09:49,  1.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▊    | 475/810 [13:06<09:15,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 476/810 [13:08<10:33,  1.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 477/810 [13:10<09:54,  1.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 478/810 [13:11<09:24,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 479/810 [13:13<08:54,  1.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 480/810 [13:15<08:59,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 481/810 [13:16<09:05,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|█████▉    | 482/810 [13:18<08:49,  1.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|█████▉    | 483/810 [13:19<08:40,  1.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|█████▉    | 484/810 [13:21<08:53,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|█████▉    | 485/810 [13:22<08:23,  1.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|██████    | 486/810 [13:24<08:28,  1.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|██████    | 487/810 [13:26<08:19,  1.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|██████    | 488/810 [13:27<08:29,  1.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|██████    | 489/810 [13:29<08:51,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|██████    | 490/810 [13:30<08:28,  1.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 491/810 [13:33<09:30,  1.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 492/810 [13:34<08:44,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 493/810 [13:36<08:50,  1.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 494/810 [13:37<08:43,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 495/810 [13:39<08:39,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 496/810 [13:41<08:42,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████▏   | 497/810 [13:42<08:24,  1.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████▏   | 498/810 [13:47<13:27,  2.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 499/810 [13:49<11:55,  2.30s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 500/810 [13:50<10:52,  2.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 501/810 [13:52<10:39,  2.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 502/810 [13:54<09:33,  1.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 503/810 [13:55<09:14,  1.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 504/810 [13:57<08:59,  1.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 505/810 [13:59<08:40,  1.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 506/810 [14:00<08:22,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 507/810 [14:02<08:26,  1.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 508/810 [14:03<08:12,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 509/810 [14:05<08:19,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 510/810 [14:07<08:17,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 511/810 [14:09<08:33,  1.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 512/810 [14:10<08:17,  1.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 513/810 [14:12<07:52,  1.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 514/810 [14:13<07:57,  1.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▎   | 515/810 [14:15<07:44,  1.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▎   | 516/810 [14:17<08:29,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 517/810 [14:18<08:10,  1.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 518/810 [14:20<08:06,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 519/810 [14:22<08:12,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 520/810 [14:24<08:33,  1.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 521/810 [14:25<07:56,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 522/810 [14:27<08:13,  1.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▍   | 523/810 [14:29<08:37,  1.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▍   | 524/810 [14:31<08:31,  1.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▍   | 525/810 [14:33<09:51,  2.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▍   | 526/810 [14:35<09:11,  1.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▌   | 527/810 [14:37<09:37,  2.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▌   | 528/810 [14:39<08:37,  1.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▌   | 529/810 [14:40<08:12,  1.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▌   | 530/810 [14:43<08:54,  1.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 531/810 [14:44<08:37,  1.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 532/810 [14:46<07:55,  1.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 533/810 [14:47<07:29,  1.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 534/810 [14:49<07:23,  1.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 535/810 [14:50<07:09,  1.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 536/810 [14:52<07:13,  1.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▋   | 537/810 [14:54<07:40,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▋   | 538/810 [14:55<07:41,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 539/810 [14:59<09:59,  2.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 540/810 [15:00<08:41,  1.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 541/810 [15:02<07:59,  1.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 542/810 [15:04<08:24,  1.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 543/810 [15:05<07:44,  1.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 544/810 [15:07<07:34,  1.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 545/810 [15:08<07:24,  1.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 546/810 [15:10<07:05,  1.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 547/810 [15:11<07:05,  1.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 548/810 [15:13<06:54,  1.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 549/810 [15:14<06:50,  1.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 550/810 [15:16<06:44,  1.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 551/810 [15:20<09:34,  2.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 552/810 [15:21<08:30,  1.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 553/810 [15:24<10:00,  2.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 554/810 [15:27<10:22,  2.43s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▊   | 555/810 [15:28<08:58,  2.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▊   | 556/810 [15:30<08:00,  1.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 557/810 [15:32<08:58,  2.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 558/810 [15:34<08:28,  2.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 559/810 [15:36<08:02,  1.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 560/810 [15:37<07:37,  1.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 561/810 [15:39<07:31,  1.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 562/810 [15:41<07:15,  1.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|██████▉   | 563/810 [15:42<07:04,  1.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|██████▉   | 564/810 [15:44<06:49,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|██████▉   | 565/810 [15:46<06:55,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|██████▉   | 566/810 [15:48<08:00,  1.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|███████   | 567/810 [15:50<07:28,  1.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|███████   | 568/810 [15:54<09:48,  2.43s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|███████   | 569/810 [15:58<12:09,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|███████   | 570/810 [16:00<10:07,  2.53s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|███████   | 571/810 [16:02<09:54,  2.49s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 572/810 [16:03<08:29,  2.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 573/810 [16:05<07:47,  1.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 574/810 [16:07<07:26,  1.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 575/810 [16:08<07:03,  1.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 576/810 [16:10<06:44,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 577/810 [16:11<06:36,  1.70s/it] 71%|███████▏  | 578/810 [16:13<06:32,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████▏  | 579/810 [16:15<06:21,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 580/810 [16:16<06:33,  1.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 581/810 [16:18<06:12,  1.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 582/810 [16:20<06:30,  1.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 583/810 [16:23<07:45,  2.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 584/810 [16:24<07:25,  1.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 585/810 [16:27<07:40,  2.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 586/810 [16:30<09:17,  2.49s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 587/810 [16:32<08:13,  2.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 588/810 [16:34<07:47,  2.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 589/810 [16:35<07:27,  2.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 590/810 [16:37<06:53,  1.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 591/810 [16:39<06:36,  1.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 592/810 [16:40<06:11,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 593/810 [16:42<06:06,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 594/810 [16:43<05:49,  1.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 595/810 [16:45<05:39,  1.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▎  | 596/810 [16:47<06:09,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▎  | 597/810 [16:48<05:57,  1.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 598/810 [16:50<05:39,  1.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 599/810 [16:51<05:33,  1.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 600/810 [16:53<05:27,  1.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 601/810 [16:54<05:22,  1.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 602/810 [16:56<05:47,  1.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 603/810 [16:59<07:22,  2.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▍  | 604/810 [17:02<07:23,  2.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▍  | 605/810 [17:03<06:41,  1.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▍  | 606/810 [17:05<06:28,  1.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▍  | 607/810 [17:07<06:54,  2.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▌  | 608/810 [17:09<06:10,  1.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▌  | 609/810 [17:10<05:46,  1.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▌  | 610/810 [17:11<05:27,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▌  | 611/810 [17:13<05:40,  1.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 612/810 [17:16<06:21,  1.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 613/810 [17:19<07:59,  2.43s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 614/810 [17:21<07:11,  2.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 615/810 [17:22<06:21,  1.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 616/810 [17:24<05:48,  1.79s/it] 76%|███████▌  | 617/810 [17:27<06:37,  2.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▋  | 618/810 [17:29<06:35,  2.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▋  | 619/810 [17:30<05:56,  1.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 620/810 [17:32<05:48,  1.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 621/810 [17:33<05:21,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 622/810 [17:34<04:56,  1.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 623/810 [17:36<04:50,  1.55s/it] 77%|███████▋  | 624/810 [17:38<04:51,  1.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 625/810 [17:39<04:43,  1.53s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 626/810 [17:40<04:29,  1.47s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 627/810 [17:42<04:42,  1.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 628/810 [17:44<04:37,  1.52s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 629/810 [17:45<04:39,  1.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 630/810 [17:47<04:50,  1.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 631/810 [17:48<04:43,  1.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 632/810 [17:50<04:30,  1.52s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 633/810 [17:51<04:24,  1.49s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 634/810 [17:53<04:24,  1.50s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 635/810 [17:54<04:21,  1.49s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▊  | 636/810 [17:56<04:23,  1.52s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▊  | 637/810 [18:02<08:29,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 638/810 [18:04<07:10,  2.50s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 639/810 [18:05<06:21,  2.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 640/810 [18:07<05:46,  2.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 641/810 [18:08<05:24,  1.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 642/810 [18:10<05:00,  1.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 643/810 [18:11<04:51,  1.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|███████▉  | 644/810 [18:13<04:31,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|███████▉  | 645/810 [18:14<04:29,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|███████▉  | 646/810 [18:16<04:21,  1.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|███████▉  | 647/810 [18:18<04:50,  1.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 648/810 [18:20<04:25,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 649/810 [18:21<04:16,  1.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 650/810 [18:23<04:26,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 651/810 [18:25<04:35,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 652/810 [18:27<04:48,  1.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 653/810 [18:28<04:33,  1.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).

5581268_20201_2_0,rvyqbp4icz,3.70749813554968,-131.58769439328992,-53.0194484096005

4370531_20201_2_0,rvzavo4icz,2.668968233560534,-83.60404526827068,-45.05351821308929

3206149_20201_2_0,rw0h8p4icz,1.6039288780048127,-97.48707992069248,-48.89164171485031

4830863_20201_2_0,rw13vo4icz,-6.677802401058277,-105.00021227441482,13.5607613700288

4469287_20201_2_0,rw1hjp4icz,-6.624345714392957,-153.98762816632302,24.75823333691436

4310764_20201_2_0,rw2jpn4icz,1.1715413163900683,-71.94093873903623,-44.39345786296464

5257529_20201_2_0,ktf2in4icz,1.7558075227256547,-95.10103472776655,-53.25561198901737

5977772_20201_2_0,rw371o4icz,-1.5549076133874993,-73.90396374366563,-20.911633573781273

2647566_20201_2_0,rw3kmo4icz,-0.5795991145968427,-81.22035944180112,-44.940627109148295

4840158_20201_2_0,rw7kwn4icz,1.5389598309132477,-77.72344448429016,-42.51928199894833

1312611_20201_2_0,rw8h7p4icz,-1.5469759816499693,-96.35827355261114,-13.82480829564598

4669904_20201_2_0,rw8jto4icz,1.673267939984916,-78.12849125713927,-52.74564580146662

4180384_20201_2_0,rwa9uo4icz,-1.7825735214647747,-99.32487426552257,-20.260502223421327

2099770_20201_2_0,rwcq5p4icz,7.7201512104166845,-60.890701716680354,-74.75003294184337

3170290_20201_2_0,rwd5ao4icz,0.8791817413192667,-134.3807653573774,-56.09632313257751

3568060_20201_2_0,rwetqo4icz,-2.3576413655031607,-54.84947593979604,-33.389488154297965

3480307_20201_2_0,rwggqn4icz,1.143071361230757,-59.15291632215886,-56.12711586091109

3539763_20201_2_0,rwkj2p4icz,0.7071259397146,-83.5528944154554,-38.895332371999274

5843488_20201_2_0,rwv3wn4icz,1.6561731697803272,-86.23485459213498,-37.639652055812476

1380306_20201_2_0,rwxfio4icz,-0.7539845159015148,-87.2216119997629,-22.35267804449589

4513096_20201_2_0,rwzpjn4icz,0.5270921020017256,-42.819197182049436,-34.49254087787625

1265872_20201_2_0,rx4r6n4icz,-1.0089596044603508,-96.5020153043628,-47.022706923199664

3892376_20201_2_0,rx6gzn4icz,-0.5309807222228897,-114.13878727990519,-53.0896735906051

4813731_20201_2_0,rxa89o4icz,0.06484954395840943,-111.89002484215925,-33.14146644058384

3493387_20201_2_0,rxbxxo4icz,0.05905580402329876,-80.50921902617003,-41.78829093728626

5564310_20201_2_0,edqhmo4icz,-2.4542730219265465,-104.40224931406996,-23.84154167057077

1912199_20201_2_0,rxnpfo4icz,-2.7230842671657536,-69.22195746539296,-9.951496053192443

5910723_20201_2_0,rxpl6p4icz,3.130025695407969,-81.51969944908691,-45.40323721234395

4505003_20201_2_0,rxue1o4icz,-0.5476478095616815,-138.01930706898548,-36.564939042560354

4632867_20201_2_0,rxzbon4icz,21.881308988364502,4.78780456624969,-141.0464497600242

4970639_20201_2_0,ry3zuo4icz,0.9726882736129441,-48.94263846484063,-29.28606348493598

4202881_20201_2_0,ry8l0p4icz,-4.849088277891205,-95.65991353315783,4.653771880319553

3222016_20201_2_0,ry9j7o4icz,-1.1293547527861283,-108.69732479244354,-15.311572163345076

5964893_20201_2_0,rybzun4icz,-3.708155993395012,-113.63978879979439,-17.069294148360285

4315962_20201_2_0,ryehwo4icz,0.5317057337183494,-48.69009606095591,-41.701616794788976

2678607_20201_2_0,ryf38o4icz,-0.6279545925789082,-114.08124440800574,-32.62066938139094

3498447_20201_2_0,ryfukn4icz,-1.7037873314121805,-126.38252264660898,-48.80658393725227

2646095_20201_2_0,ryjdwn4icz,-6.641209606530436,-113.1170288985783,-8.59403416753203

4720917_20201_2_0,ryjutn4icz,1.409728959760608,-72.52898198897805,-65.78260190868193

4231364_20201_2_0,rykjvn4icz,-3.4947388074705388,-103.01860101191295,-6.92190701797071

3146420_20201_2_0,ryla9p4icz,-0.2342375879341213,-88.87220758437925,-32.39024946821915

3708146_20201_2_0,rylfdo4icz,-0.35481256635077796,-70.91208008072982,-48.53406221774877

3166652_20201_2_0,rymuro4icz,1.9998162452688468,-63.08373208211941,-63.193285287251015

1995405_20201_2_0,ryv58p4icz,4.064967216270525,-59.65984812699139,-62.28211535291686

4649930_20201_2_0,rywqro4icz,3.938475108359218,-90.17478972755282,-64.70490401717515

4930397_20201_2_0,ryz55o4icz,-1.9932224052021532,-87.63597104993283,-12.446693251474017

2865982_20201_2_0,rz0cgp4icz,6.182623838684481,-126.39310271761042,-60.664507723177394

4832068_20201_2_0,rz4iho4icz,0.04825416567161546,-95.59986748214115,-36.25250250145618

3362675_20201_2_0,rz5swo4icz,1.0053283986272816,-61.14993449349214,-44.74732009419304

6023658_20201_2_0,rz6r9p4icz,-4.309367143639449,-115.72292921510467,-14.30789125773478

1304594_20201_2_0,rz7djo4icz,-2.4691111938636037,-28.2954997124869,-28.468055894746882

4648917_20201_2_0,rziojp4icz,-2.41909325176283,-80.81355675766275,-11.943772272420048

1953173_20201_2_0,rzk0go4icz,-1.0538264617292374,-157.10526714937413,-35.56239955871642

1049289_20201_2_0,rzmb7p4icz,-1.28474604654026,-110.59610880904629,-32.66465952260607

4652062_20201_2_0,rznvjo4icz,-4.335724859475242,-68.24058113247867,-25.37859056012458

2012111_20201_2_0,rzugpn4icz,-1.0740255182040137,-78.9236894459101,-28.62188067071949

3000430_20201_2_0,rzx3un4icz,1.5594972670698175,-127.72063089072441,-41.93048066671

2406731_20201_2_0,rzy2yo4icz,-0.7735060691298138,-73.47716285643358,-34.246456912539514

2608265_20201_2_0,s088vn4icz,-0.26554829390143625,-103.18291790194118,-41.95091529411613

3513110_20201_2_0,s08w0p4icz,-0.566500039655343,-95.9053266090362,-24.289534804388495

2694492_20201_2_0,s0a1sn4icz,1.8878618482963956,-78.98627972375343,-43.43930216752318

3963791_20201_2_0,s0cs5o4icz,0.6482979689345909,-84.51497162907137,-37.27777922377973

4778890_20201_2_0,s0l3un4icz,-0.9941108791462516,-91.99475495196981,-31.175757779883185

5477758_20201_2_0,s0mvjp4icz,-1.0480715737835087,-131.31607675885817,-15.959357814101395

2138460_20201_2_0,s0oxjo4icz,-0.48153351847140535,-96.62263095790482,-40.55216530350327

5667296_20201_2_0,s0sufo4icz,-6.666999626987123,-117.77389961937325,2.198065219306045

5495411_20201_2_0,s0tk8p4icz,-0.355111046523454,-118.66832233842092,-35.30360709899455

2066829_20201_2_0,s104wo4icz,3.350054299451916,-47.35431210308161,-66.09471167025382

2562392_20201_2_0,s10f1p4icz,0.9530415924279823,-103.02266006164123,-48.02794621443563

4682045_20201_2_0,s12gdn4icz,-3.0796733425932854,-88.6568769177733,-15.187639360314648

3153271_20201_2_0,s144so4icz,0.8552983911070456,-97.24028733828936,-50.86498068060527

4542366_20201_2_0,s14agp4icz,-0.6215933224623716,-107.89877839243778,-50.78497997339386

1983361_20201_2_0,s160eo4icz,1.573198974024279,-90.8217534485693,-51.928340503460305

1549704_20201_2_0,s174jp4icz,0.26311310426859313,-116.53328620320258,-48.24130358689398

5493232_20201_2_0,s1fp6p4icz,-3.151331967819326,-122.98818624112516,-6.68949701874827

3865392_20201_2_0,s1gstn4icz,-0.5390233070005948,-109.48186871271017,-38.33326819858344

2900280_20201_2_0,s1iedp4icz,-2.1524622787814516,-135.91017271881762,-44.739077128354864

5370478_20201_2_0,s1llko4icz,1.1348334423502007,-99.18668522526883,-30.883601780325733

2859535_20201_2_0,s1ohmn4icz,2.449468965942809,-117.6886318980003,-49.619579374536585

1373971_20201_2_0,s1p4vo4icz,3.0751963080226785,-91.97036496170236,-47.494232884498985

2870680_20201_2_0,s1rspo4icz,-1.798227414869647,-98.9939943608382,-19.565712520143364

4373173_20201_2_0,s1rxkn4icz,0.445500927846215,-84.08592583516054,-37.14852621518288

5997290_20201_2_0,s1uo7p4icz,-1.1515881765739202,-93.65934299586192,-34.23902820701193

1572935_20201_2_0,s2143p4icz,-0.2701585565232622,-58.190466063851744,-40.37997522607395

2615956_20201_2_0,s23yko4icz,-1.2517007505169924,-105.70667837888985,-34.742366642836856

4690989_20201_2_0,s259mo4icz,2.757608214584067,-85.52856233800657,-58.24238011786258

1776530_20201_2_0,s25y5p4icz,0.22433999837078689,-87.06902256110189,-27.768580836985734

2935690_20201_2_0,s26d5o4icz,1.8866411510873546,-86.36429282668536,-45.882656056126194

5595470_20201_2_0,s27xvo4icz,-0.01731668318344138,-108.84586140257755,-46.08361316204628

3646580_20201_2_0,s29x1o4icz,0.7204551347149134,-118.7336279832295,-37.51820782292097

5180802_20201_2_0,s2clbo4icz,0.1281970205506037,-80.39857145917301,-18.288024923678975

2970865_20201_2_0,s2jfgo4icz,5.955712302987221,-73.81946642700544,-60.02062739752306

2495439_20201_2_0,s2lznn4icz,-5.825448548466495,-127.51668777063102,-4.378417925463481

4847051_20201_2_0,s2npln4icz,-1.2550607427311875,-109.70699758338623,-36.212003921283696

3282926_20201_2_0,s2pifp4icz,0.717686877981105,-122.44927696647414,-41.56946740606904

2297076_20201_2_0,s31wkn4icz,-3.8647908557968904,-73.28234411517906,-13.046143991081095

3674104_20201_2_0,s37t2p4icz,-0.8245744040661432,-87.43749828674657,-27.458312368601113

2509708_20201_2_0,s3bwep4icz,-1.0719212532640605,-105.81248023412371,-38.757452673402426

2867857_20201_2_0,s3dkhp4icz,-0.2658761761421889,-108.87430774606133,-30.505126755257123

3150381_20201_2_0,s3hbso4icz,1.0191856012554918,-102.1148595905648,-57.867892938998196

3965266_20201_2_0,s3hukn4icz,-1.8069209535374668,-123.41806532189153,-61.4480857476743

4638395_20201_2_0,s3iykn4icz,-0.711029819237132,-85.19522066936298,-32.85281597040539

4356123_20201_2_0,xskasn4icz,-2.469541158272119,-86.76321091412811,-24.248626762118107

3343125_20201_2_0,s3n2no4icz,3.789061179256451,-55.49774409640909,-53.151544839585

3672734_20201_2_0,s3uaho4icz,-1.4049475933554394,-136.11879848867807,-25.99486949460919

2138859_20201_2_0,s46pbp4icz,4.009922831834295,-114.1985491352398,-54.58137666719081

4896094_20201_2_0,s4b74p4icz,5.762309074900102,-70.68559240208037,-63.31180285344638

3471317_20201_2_0,s4d67p4icz,0.6876126698749674,-100.284233756736,-62.20665663436061

3534552_20201_2_0,xg2qlo4icz,1.663303728182634,-105.83182964769236,-49.280352270638545

2877258_20201_2_0,s4igxn4icz,0.2352849614448926,-102.64275527994559,-32.22277132329057

2522144_20201_2_0,s4la4p4icz,0.9088165920478565,-84.58929875643508,-38.8118120987848

1270722_20201_2_0,s4nh7p4icz,3.36009736789342,-108.1212916112676,-54.53975920540509

2950553_20201_2_0,s4yh4p4icz,1.4663764862127084,-72.13637791159516,-28.541615947371938

4734333_20201_2_0,s4zoro4icz,1.0433753556714391,-53.589468594566654,-47.2940560445536

1272367_20201_2_0,s50yro4icz,3.271489745387333,-49.63346516566651,-46.924197892463724

1602223_20201_2_0,s52ofp4icz,6.471476788692572,-102.09979780290027,-90.59888658674777

2144505_20201_2_0,s54jbo4icz,-1.9001513920461592,-86.39171823213476,-45.10875646529152

4120026_20201_2_0,s55e9p4icz,0.6612676515098106,-121.75572130784354,-44.52833422331892

1810751_20201_2_0,s57lgo4icz,-0.06492083704891731,-116.40967156592504,-38.71637404144403

4726726_20201_2_0,s5dxsn4icz,-1.4880706323621022,-99.92377723347121,-28.019335635726762

1111770_20201_2_0,s5hqyo4icz,2.832128579704021,-105.54912995488684,-68.96924798068974

4247110_20201_2_0,s5k9zo4icz,-1.0804463070888644,-118.8685398703366,-34.71552828508413

4940537_20201_2_0,s5lpvo4icz,-1.004088832326815,-98.77296287823566,-13.529224813250664

2773657_20201_2_0,s5maxn4icz,-0.7333960367613173,-109.2817206959676,-30.088948781665437

3277402_20201_2_0,s5nqyo4icz,-1.7781351935018437,-64.05492408216986,-11.12869372070611

3795860_20201_2_0,s5qldo4icz,-2.618165023103657,-97.95630514402046,-22.254852767838486

1810490_20201_2_0,s5tkcp4icz,-1.981451644171065,-126.17169762194618,-26.65327973519777

4420785_20201_2_0,s5zp9n4icz,-1.1228744984155163,-137.9809332413291,-20.415461671119772

5304688_20201_2_0,41poyo4icz,-0.17077878447994418,-70.40951029040201,-34.0746141040472

4213554_20201_2_0,s62awo4icz,1.841463842976083,-72.70781981584332,-39.031440127134914

5136872_20201_2_0,s64xao4icz,-47.28040066201985,150.47593045057562,539.0914816306334

3541181_20201_2_0,s6cspo4icz,12.400304050928948,-19.32422946117788,-93.02954384271447

1541250_20201_2_0,s6ezhp4icz,0.13024398685958938,-63.588147322712416,-39.76379061567593

2450683_20201_2_0,s6mdgn4icz,-1.1395393403650305,-118.46060280423401,-35.08092139945336

5581300_20201_2_0,s6nlvn4icz,-0.47005543651071297,-65.04561209349609,-24.498166868047534

5376810_20201_2_0,s6pzuo4icz,-0.04469857663089072,-100.45215528288904,-38.318016541834666

1305430_20201_2_0,s6sh4p4icz,1.4874663636687988,-93.27958519532362,-55.11927034436057

2147335_20201_2_0,s6uf6o4icz,-2.0913056403369046,-115.68963130241474,-31.66086333910873

4988219_20201_2_0,s6v18o4icz,-1.306709048413075,-121.4432328885201,-37.72697541243285

1701553_20201_2_0,s6y62p4icz,1.2502777944772705,-110.11986585790169,-41.56802531119325

2500627_20201_2_0,s72kmo4icz,-0.1415279398635654,-90.83656769614785,-40.66013083612201

2077640_20201_2_0,s76i4p4icz,-6.973002099795871,-177.99931288588408,8.775547181063118

4822766_20201_2_0,s76scp4icz,-9.311690196331464,-111.45090942672633,10.896319349682074

4725151_20201_2_0,s79uwo4icz,-1.0556661129376868,-80.85468210203942,-25.008691952388986

2983005_20201_2_0,s7d71o4icz,-5.565640542054042,-129.77639479651342,3.901521760878097

5625576_20201_2_0,s7i7zo4icz,-0.9706092074836278,-112.98399405213124,-41.90311630648381

2249812_20201_2_0,s7l0ep4icz,6.596349015550319,-68.06621350114932,-71.77919955268307

1149313_20201_2_0,s7luro4icz,3.2771461811023674,-79.00138693001702,-62.35562701302155

1740822_20201_2_0,s7n1jn4icz,-3.314003620252078,-84.23673054100988,-27.124415702690058

3293011_20201_2_0,s7o4bo4icz,2.039698723385395,-84.01770754796809,-53.029569557592765

4045686_20201_2_0,s7qqyo4icz,3.28546372399985,-96.08289015802688,-63.53911816098913

2354691_20201_2_0,s7tcqo4icz,1.6895725892726012,-62.462444189144094,-48.47375964847981

3032105_20201_2_0,s7uhtn4icz,0.37341462127745184,-108.12706352473799,-41.51329183609651

4873276_20201_2_0,s7wn6p4icz,3.0121518017276414,-93.8328719605502,-59.39437301566308

2505610_20201_2_0,s80n9o4icz,3.2353713273033904,-86.64480398805534,-57.26726695250382

1730298_20201_2_0,s810nn4icz,-0.39253771688767103,-108.9263589767337,-26.963134251140843

5918549_20201_2_0,s84mvo4icz,-3.1225072081771357,-60.31843930109744,-26.925088435331844

5416304_20201_2_0,s8acxn4icz,-1.0493667852531632,-119.89509934301992,-20.51919463028699

1329573_20201_2_0,s8e03o4icz,-1.385740038589636,-69.85291666517602,-26.193752227787712

5736640_20201_2_0,s8humn4icz,2.1875267353147185,-69.67324710104373,-61.92365029491498

5744547_20201_2_0,s8ltjn4icz,1.0736550536833889,-129.18829334931618,-45.53704382803174

4313999_20201_2_0,s8nu0o4icz,-2.720602655444206,-110.69785769566502,-15.426129161035533

2749949_20201_2_0,s8oojp4icz,0.728650043455239,-91.2879364027117,-38.54639154741605

4489264_20201_2_0,s8pvso4icz,-2.8138549237428125,-59.28608903184414,-33.532738134099176

5808606_20201_2_0,s8slbo4icz,-1.7006306878678383,-50.54968990641086,-48.3932953296991

1327162_20201_2_0,s8u38p4icz,-1.5197160190991124,-81.20135190874751,-35.05841085891561

2368746_20201_2_0,s8y3ho4icz,-2.061153279723641,-80.92665907022914,-32.2921614911906

2222576_20201_2_0,s919sn4icz,0.18338824780086102,-81.30351222742297,-28.641876736941683

5687869_20201_2_0,s91blo4icz,1.183385940204631,-76.17657122422276,-31.37427713454322

5893657_20201_2_0,s97nmn4icz,7.0999023445565985,-115.55687794402584,-54.11474234640458

3620352_20201_2_0,s9axdp4icz,1.9420795323411184,-87.75552832841899,-31.89730057898818

3279222_20201_2_0,s9burn4icz,-2.7743239320311672,-111.12883667344704,-23.595572714829927

3841071_20201_2_0,s9cfgp4icz,0.4241813335566003,-101.37068762824407,-41.288032104054224

1601019_20201_2_0,s9e1mo4icz,-3.403491874369891,-67.9555175108116,-16.602920266415765

3411351_20201_2_0,s9i9nn4icz,0.09872195930615356,-128.63652090535996,-35.969207874059634

1794482_20201_2_0,s9icqo4icz,0.5755585026292206,-102.22420341672648,-33.99533502957941

3341757_20201_2_0,s9idgn4icz,-2.0576078425384514,-88.27938537791186,-14.405419528045513

5555113_20201_2_0,s9piap4icz,0.8176523159270181,-119.47975999140337,-41.44517898403308

1631012_20201_2_0,s9qh0o4icz,0.31296333708495117,-107.20123029976534,-22.485130627119617

1728318_20201_2_0,s9rmwn4icz,2.465462399502027,-83.4768031939046,-49.35287382451702

1477467_20201_2_0,s9rxrn4icz,6.314933390775887,-71.87305353840205,-83.25514076725976

5692805_20201_2_0,s9szin4icz,-6.524254360799571,-95.86926649516118,2.3987636171898856

3974776_20201_2_0,s9t2tn4icz,-0.11210572406774798,-130.67368392730376,-37.98036778330594

2764066_20201_2_0,s9u20p4icz,-4.7898706870816605,-62.56716312414494,-19.464196336785136

3443678_20201_2_0,s9u2bo4icz,-1.0155839204320904,-67.60117630487358,-33.80799747536362

2473882_20201_2_0,s9uqip4icz,1.8077113418901904,-66.57229105422846,-27.68245913353877

4447130_20201_2_0,s9vh8n4icz,0.44848392761413863,-123.22754745960688,-32.94197142519063

5906349_20201_2_0,s9ydgo4icz,0.43963316066315355,-94.04499443500333,-26.39319329367794

3921695_20201_2_0,sa1yvn4icz,-0.7026632478405133,-145.88327837537884,-35.60598382547491

1275489_20201_2_0,sa6vfn4icz,0.979236993609854,-104.99181526084257,-46.71937355662007

1735415_20201_2_0,sab67o4icz,3.3161761051191427,-123.40061467047326,-46.227196613675446

3881165_20201_2_0,sad16o4icz,-0.2829524921273944,-102.04839588169338,-24.349546598108063

1461959_20201_2_0,salpip4icz,7.208370266659513,-90.05312495601723,-70.22665475859591

3448004_20201_2_0,sanhtn4icz,-17.445606889106045,-134.3629689475443,77.95821726072367

1192489_20201_2_0,sao8to4icz,-1.0212235509014214,-55.54807259690432,-32.860044238677034

5464235_20201_2_0,saokgo4icz,-1.8607887783850472,-110.23733734213627,-35.283859813463536

1818179_20201_2_0,saqxpn4icz,-1.6076815094298396,-134.9061924574485,-27.88658910717541

2171196_20201_2_0,saumyo4icz,-0.3168872585075121,-78.06857651053929,-51.922042078972254

2194346_20201_2_0,saxaoo4icz,-18.331877524429636,-120.13216833546784,58.61714599858486

2077132_20201_2_0,sazzgp4icz,0.3250290256533326,-76.62571203154363,-41.21872806919467

3998824_20201_2_0,sb05do4icz,-6.257934911317372,-56.73296409091938,-19.62649178444009

5583390_20201_2_0,sb7map4icz,-0.13067167792481232,-83.49739253764349,-35.060807843722216

4463394_20201_2_0,sbbf5p4icz,3.270319226939981,-127.58133722129122,-55.00869619492532

4239370_20201_2_0,sbe3xn4icz,-0.4593584152304018,-112.61655492795495,-39.80307649803569

3280186_20201_2_0,sbg88n4icz,-4.548396333642195,-126.12218267415977,-2.3071925043741004

1795246_20201_2_0,sbjsyo4icz,-1.1965958650889248,-80.36414680384908,-32.86756765759333

5332089_20201_2_0,sbn0gp4icz,-0.7423493138429323,-99.5997932209107,-21.095835177501428

5897119_20201_2_0,sbtqpo4icz,-4.347383164037162,-100.79472436772917,-22.048011868948407

2800345_20201_2_0,sbvp6p4icz,1.6798066982701287,-98.18428202463355,-43.68878522538128

2269096_20201_2_0,sbz8sn4icz,-1.6048913791731778,-119.80683318263942,-25.774235821090087

3342625_20201_2_0,sc33mn4icz,0.31166631882808865,-106.53284876444232,-34.956248409207106

1625547_20201_2_0,sc6wep4icz,-4.2560103621956715,-106.91777914782398,-2.875880398189153

4919658_20201_2_0,sc7h0o4icz,2.0362228876445223,-125.12296922866093,-49.02439114274357

3472384_20201_2_0,scg6go4icz,-2.0160040950794795,-122.21865517749418,-21.9860381527223

2572924_20201_2_0,schjon4icz,12.97075295350853,-106.00856652372346,-115.78349206649261

5222626_20201_2_0,scjo7p4icz,-0.22544760048936743,-116.34103908563338,-27.294016422917906

5734884_20201_2_0,sck0uo4icz,-1.9620112251837551,-81.131831775374,1.9295842352686066

1278442_20201_2_0,scm6yo4icz,-3.2834280633833406,-73.6093719009645,-30.541101629779504

3796470_20201_2_0,scq4bp4icz,0.16792331074046907,-69.95603369753621,-35.728266437061876

1104899_20201_2_0,scuvcp4icz,2.2739851993848292,-116.33398282599387,-47.38755515159123

2061388_20201_2_0,scvzeo4icz,1.1345451210812196,-102.32278864495896,-26.360052592206586

4335955_20201_2_0,scwmjp4icz,-7.568915159762508,-134.58774171459277,-12.174476589111123

5330567_20201_2_0,scxuqo4icz,-17.432095094997027,-95.46389930863302,54.93539806485029

4663347_20201_2_0,sd1hgo4icz,0.9145197272621342,-68.84208089917772,-39.09713176373842

5363691_20201_2_0,sd67jn4icz,-0.06616625807369363,-121.8932813283412,-33.822543136884775

5926583_20201_2_0,sd6vfp4icz,-3.968130081752735,-141.0044032805112,-21.48585825814905

1539420_20201_2_0,sd901o4icz,0.9433829448885725,-110.2847804733579,-41.59261941444598

2866224_20201_2_0,sdd14o4icz,-1.1346984952116188,-72.61225452192804,-11.325497468824082

4170194_20201_2_0,sde5qn4icz,0.7931232286241695,-82.5945860684349,-32.60724179318285

3478339_20201_2_0,sdf5ln4icz,4.292283802882536,-142.26348113670255,-48.400702308822446

3348219_20201_2_0,sdhqkn4icz,-1.5074807280985203,-83.2783914421438,-40.574264991065775

1826816_20201_2_0,sdjvfo4icz,2.6467606749561225,-134.52632443498854,-37.96212181762776

2330045_20201_2_0,sdphip4icz,-0.20393946633767068,-121.13522538424212,-19.772067357531597

5783019_20201_2_0,sdszdn4icz,-0.5455193817434791,-103.86086722562175,-30.895662356170163

1834946_20201_2_0,sdupjn4icz,0.275933655376229,-78.32962059314514,-37.768418904927216

3354817_20201_2_0,sdvwsn4icz,-0.11992058224787383,-97.83386376653706,-40.310851922122595

3541818_20201_2_0,sdw7no4icz,1.2539948263498306,-114.07632534083135,-37.07880661335929

1472660_20201_2_0,sdxhto4icz,3.980410534601294,-106.53148389962718,-64.34103910427137

1037442_20201_2_0,sdxwip4icz,3.4991139681476997,-118.69105698037995,-67.73500701916713

5591560_20201_2_0,sdykhp4icz,-0.521086209406713,-104.07544563237175,-37.959258205734784

3396480_20201_2_0,se4f1p4icz,-0.36679260869931346,-34.07772110494858,-25.276420145530267

5236982_20201_2_0,se8ydn4icz,0.9636876309730538,-81.38870156298213,-46.47471181530068

2472473_20201_2_0,sea4bo4icz,-0.8347886904314267,-75.42287427654648,-23.279822661033634

4705474_20201_2_0,sebs9o4icz,-1.8543330023310984,-90.25146485130202,-21.75032270053643

2989342_20201_2_0,seeymo4icz,0.16386801193017672,-46.15106035010476,-23.934883289963764

5610895_20201_2_0,seg7wn4icz,-1.2793805530327853,-72.60063176098151,-23.11180365076828

4175718_20201_2_0,selrso4icz,-0.9322704875835627,-72.88836347878302,-30.671504250467052

3903939_20201_2_0,sen5jn4icz,-0.2193252478698293,-137.63647841155523,-56.99647479724766

4245690_20201_2_0,sepjio4icz,-2.6754039435135004,-80.90323583644002,-23.143097010016675

3065117_20201_2_0,sesbyo4icz,0.558577568111167,-36.768569955478426,-40.05063305973293

5645929_20201_2_0,set9uo4icz,1.344836421696496,-90.62843595111141,-37.05347739369603

1751872_20201_2_0,sevm3p4icz,1.9651171473296822,-89.30045076649725,-48.55290209689183

1489812_20201_2_0,sewnxo4icz,1.6518077175348658,-78.03807067644522,-50.236630392291204

2041228_20201_2_0,seygpo4icz,-0.8297423355441448,-72.6528439865923,-29.246148568501

3958796_20201_2_0,sf0cto4icz,0.18346336741435984,-113.74037360262685,-13.815450486447247

2319895_20201_2_0,sf0p0p4icz,0.6454637742899819,-94.54121160019056,-39.31433415214461

1756526_20201_2_0,sf2cto4icz,-1.23778982751704,-95.17602108770888,-20.694778824056442

1539219_20201_2_0,sf6hgp4icz,2.1134713378716294,-143.87580003707697,-32.631412130449675

1393123_20201_2_0,sfdflo4icz,1.6455332608088786,-105.64023432681753,-40.18188485721032

1261616_20201_2_0,4p1npo4icz,2.4640406563717514,-122.54300720231836,-64.0410954539193

3491837_20201_2_0,sfjo5o4icz,-2.581424102107651,-88.93693623059113,-24.98118083485076

1950370_20201_2_0,sfn8kn4icz,-1.320387694486515,-90.66496148040514,-25.291653174123937

1422596_20201_2_0,sfp9jo4icz,-3.9126304493254622,-75.56357891600175,-31.102059397561476

4980555_20201_2_0,sfqpjn4icz,-7.016807150886973,-131.4202124585275,-45.54750105253201

5665115_20201_2_0,sfubpo4icz,-0.7275117122841473,-98.64070899363597,-34.20202973975154

4064633_20201_2_0,sfxicp4icz,-2.105497932022318,-117.53138885548648,-18.889218042938296

3878229_20201_2_0,sfz9yo4icz,-0.40237925174048045,-105.42916494284955,-33.27143386230716

4660628_20201_2_0,sfzhsn4icz,-4.11294564132629,-98.2321515508171,-11.606448134054816

3309051_20201_2_0,sg0ebp4icz,-0.4271943236071136,-116.16195241156223,-29.351647800389102

4831531_20201_2_0,sg59hp4icz,-2.571723378828637,-91.28399424222786,-32.984677664421184

5164073_20201_2_0,sg887p4icz,2.1931640209533296,-89.86927133082881,-40.60691984185358

2057289_20201_2_0,0url4p4icz,-0.8899134474569181,-128.12263758576162,-18.035936700773618

2425000_20201_2_0,sgfg6o4icz,-1.7710612852355199,-55.680763642880095,-19.6116118907603

2808914_20201_2_0,sgl7ln4icz,0.21141314201211414,-109.55634972985268,-21.827538017237117

2786691_20201_2_0,sgnmno4icz,1.2468892793332045,-84.08262630880188,-60.33663302165516

2365133_20201_2_0,sgns7p4icz,-0.31888996389367935,-81.56384149625674,-46.79458337325872

5342629_20201_2_0,sgoj2p4icz,-0.5786852669577583,-123.9696718173206,-56.46445245546292

2953447_20201_2_0,sgud4o4icz,1.5356780261488137,-87.69765278500867,-46.894869939554496

5298143_20201_2_0,sgzpdp4icz,-1.6464962517731268,-87.50371599492397,-24.490765666317245

2577754_20201_2_0,sgzs7p4icz,-0.8379410990806941,-113.23290816635097,-39.07940914212105

3978194_20201_2_0,sh330p4icz,-2.4653458799281673,-99.01383272142579,-18.795837802378358
 81%|████████  | 654/810 [18:30<04:25,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 655/810 [18:31<04:18,  1.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 656/810 [18:33<04:25,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 657/810 [18:35<04:08,  1.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 658/810 [18:38<05:09,  2.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████▏ | 659/810 [18:39<04:42,  1.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████▏ | 660/810 [18:41<04:28,  1.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 661/810 [18:43<04:31,  1.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 662/810 [18:44<04:11,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 663/810 [18:46<04:05,  1.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 664/810 [18:47<03:54,  1.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 665/810 [18:49<03:57,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 666/810 [18:51<03:57,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 667/810 [18:52<04:02,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 668/810 [18:54<04:02,  1.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 669/810 [18:56<03:55,  1.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 670/810 [18:57<03:57,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 671/810 [18:59<04:02,  1.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 672/810 [19:01<04:01,  1.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 673/810 [19:03<04:22,  1.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 674/810 [19:05<03:54,  1.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 675/810 [19:06<03:41,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 676/810 [19:08<03:41,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▎ | 677/810 [19:09<03:34,  1.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▎ | 678/810 [19:11<03:47,  1.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 679/810 [19:13<03:38,  1.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 680/810 [19:15<03:38,  1.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 681/810 [19:16<03:35,  1.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 682/810 [19:18<03:30,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 683/810 [19:19<03:26,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 684/810 [19:21<03:19,  1.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▍ | 685/810 [19:22<03:10,  1.52s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▍ | 686/810 [19:24<03:08,  1.52s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▍ | 687/810 [19:25<03:07,  1.52s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▍ | 688/810 [19:27<03:02,  1.50s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▌ | 689/810 [19:29<03:15,  1.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▌ | 690/810 [19:30<03:13,  1.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▌ | 691/810 [19:34<04:44,  2.39s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▌ | 692/810 [19:39<06:07,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 693/810 [19:41<05:09,  2.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 694/810 [19:42<04:30,  2.34s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 695/810 [19:44<04:03,  2.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 696/810 [19:45<03:34,  1.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 697/810 [19:47<03:29,  1.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 698/810 [19:52<05:23,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▋ | 699/810 [19:55<05:00,  2.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▋ | 700/810 [19:56<04:27,  2.43s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 701/810 [19:58<03:53,  2.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 702/810 [19:59<03:27,  1.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 703/810 [20:01<03:10,  1.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 704/810 [20:03<03:09,  1.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 705/810 [20:05<03:27,  1.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 706/810 [20:06<03:07,  1.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 707/810 [20:08<03:09,  1.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 708/810 [20:10<02:59,  1.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 709/810 [20:11<02:49,  1.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 710/810 [20:13<02:41,  1.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 711/810 [20:14<02:39,  1.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 712/810 [20:16<02:30,  1.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 713/810 [20:17<02:24,  1.49s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 714/810 [20:20<02:59,  1.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 715/810 [20:21<02:44,  1.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 716/810 [20:28<04:56,  3.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▊ | 717/810 [20:30<04:24,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▊ | 718/810 [20:31<03:40,  2.40s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 719/810 [20:34<03:52,  2.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 720/810 [20:36<03:23,  2.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 721/810 [20:37<03:05,  2.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 722/810 [20:39<02:53,  1.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 723/810 [20:42<03:00,  2.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 724/810 [20:43<02:47,  1.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|████████▉ | 725/810 [20:45<02:35,  1.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|████████▉ | 726/810 [20:46<02:23,  1.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|████████▉ | 727/810 [20:48<02:14,  1.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|████████▉ | 728/810 [20:49<02:08,  1.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 729/810 [20:50<02:04,  1.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 730/810 [20:52<02:11,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 731/810 [20:54<02:06,  1.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 732/810 [20:56<02:12,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 733/810 [20:57<02:09,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 734/810 [20:59<02:09,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 735/810 [21:02<02:24,  1.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 736/810 [21:03<02:13,  1.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 737/810 [21:05<02:06,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 738/810 [21:06<02:04,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 739/810 [21:08<01:58,  1.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████▏| 740/810 [21:10<01:56,  1.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████▏| 741/810 [21:11<01:57,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 742/810 [21:13<01:51,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 743/810 [21:14<01:47,  1.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 744/810 [21:16<01:41,  1.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 745/810 [21:19<02:15,  2.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 746/810 [21:21<02:15,  2.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 747/810 [21:23<02:10,  2.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 748/810 [21:26<02:11,  2.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 749/810 [21:28<02:08,  2.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 750/810 [21:30<02:12,  2.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 751/810 [21:32<02:08,  2.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 752/810 [21:34<02:02,  2.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 753/810 [21:36<02:04,  2.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 754/810 [21:40<02:18,  2.47s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 755/810 [21:41<02:03,  2.24s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 756/810 [21:43<01:46,  1.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 757/810 [21:44<01:41,  1.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▎| 758/810 [21:46<01:40,  1.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▎| 759/810 [21:50<02:09,  2.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 760/810 [21:52<01:53,  2.28s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 761/810 [21:54<01:44,  2.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 762/810 [21:56<01:38,  2.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 763/810 [21:57<01:27,  1.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 764/810 [21:59<01:26,  1.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 765/810 [22:00<01:17,  1.72s/it] 95%|█████████▍| 766/810 [22:02<01:13,  1.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▍| 767/810 [22:04<01:12,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▍| 768/810 [22:05<01:09,  1.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▍| 769/810 [22:07<01:06,  1.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▌| 770/810 [22:08<01:04,  1.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▌| 771/810 [22:11<01:14,  1.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▌| 772/810 [22:13<01:09,  1.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▌| 773/810 [22:14<01:05,  1.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 774/810 [22:16<01:00,  1.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 775/810 [22:20<01:29,  2.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 776/810 [22:22<01:21,  2.38s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 777/810 [22:24<01:10,  2.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 778/810 [22:25<01:00,  1.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 779/810 [22:27<00:55,  1.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▋| 780/810 [22:29<00:54,  1.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▋| 781/810 [22:31<00:54,  1.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 782/810 [22:32<00:51,  1.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 783/810 [22:34<00:47,  1.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 784/810 [22:36<00:44,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 785/810 [22:37<00:40,  1.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 786/810 [22:41<00:53,  2.24s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 787/810 [22:42<00:47,  2.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 788/810 [22:44<00:41,  1.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 789/810 [22:45<00:37,  1.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 790/810 [22:47<00:33,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 791/810 [22:48<00:30,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 792/810 [22:50<00:30,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 793/810 [22:52<00:28,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 794/810 [22:53<00:25,  1.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 795/810 [22:55<00:23,  1.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 796/810 [22:56<00:22,  1.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 797/810 [22:58<00:20,  1.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▊| 798/810 [23:00<00:19,  1.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▊| 799/810 [23:04<00:26,  2.37s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 800/810 [23:05<00:21,  2.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 801/810 [23:07<00:17,  1.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 802/810 [23:08<00:14,  1.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 803/810 [23:10<00:11,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 804/810 [23:12<00:10,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 805/810 [23:13<00:08,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|█████████▉| 806/810 [23:15<00:06,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|█████████▉| 807/810 [23:16<00:04,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|█████████▉| 808/810 [23:18<00:03,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|█████████▉| 809/810 [23:20<00:01,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|██████████| 810/810 [23:22<00:00,  1.75s/it]100%|██████████| 810/810 [23:22<00:00,  1.73s/it]

4772635_20201_2_0,sh4ojn4icz,1.7186275973782505,-129.65368510349535,-49.667341364721054

3535762_20201_2_0,sh819p4icz,0.5522092264684512,-96.34170048818717,-42.22584793743138

5812163_20201_2_0,sh87oo4icz,0.5587836912572771,-94.77281648581243,-38.33427811471577

2591908_20201_2_0,sh9uin4icz,-3.6272332516254515,-105.23068606539272,-12.58643368508045

3588474_20201_2_0,sha58o4icz,-4.259959528148982,-81.53350278698798,-5.794773317628909

2319460_20201_2_0,shcyon4icz,-1.1629344002594106,-68.43500188826414,-36.832994333461244

1652319_20201_2_0,shhzen4icz,-0.21395913049710935,-92.01247114605789,-26.47424230153507

2655773_20201_2_0,shi3vo4icz,0.15713693848520371,-54.750367778200996,-45.52497376208608

2369990_20201_2_0,shjcqn4icz,-6.6794136297702495,-129.73647041762374,8.21940554195939

3567220_20201_2_0,shmtln4icz,-1.6954209307145633,-94.44044735113076,-37.34945840029127

4704059_20201_2_0,shnemo4icz,-2.0273341949004378,-93.88490617998008,-30.77173661069176

6007975_20201_2_0,shnu6o4icz,-9.435735507068332,-128.94907732960922,20.243848942345124

4700565_20201_2_0,shogap4icz,-1.504610610378996,-75.13562022752114,-34.452046508046266

4009887_20201_2_0,shonsn4icz,1.001461541744626,-83.98360500160891,-39.39856349817313

2346364_20201_2_0,shuzpn4icz,4.2086755380436935,-74.42874911951452,-63.016750403496275

2097202_20201_2_0,shv2vn4icz,0.9523592661933195,-102.83828914421318,-32.55007635950848

2650918_20201_2_0,shxi9o4icz,-1.6943015321392076,-66.58242420198476,-20.091958555991013

5549566_20201_2_0,si6ojo4icz,31.529447810266888,-189.6902296994416,167.48015074708553

5537490_20201_2_0,si9cvn4icz,-0.9801935478369134,-91.16386534659779,-33.91710612657647

5760483_20201_2_0,siaadn4icz,-1.5464385690532052,-113.4993458954321,-17.267455878966572

2461756_20201_2_0,sic6do4icz,2.1114313832922087,-51.50365018552296,-60.44075267968245

4661789_20201_2_0,siduko4icz,0.09180039620134144,-117.54009491265836,-39.4658308472643

2082906_20201_2_0,sif2ro4icz,-0.752305401047461,-95.0176334480995,-43.10910126047921

1986440_20201_2_0,sih64o4icz,-0.26253259564903,-80.3664635175461,-27.419090706206106

2002180_20201_2_0,sii4yo4icz,4.2498194876111555,-124.77912015802286,-60.33376638046576

2178942_20201_2_0,sijwdo4icz,0.27215516999920514,-105.12103767214757,-29.451009208427422

3442432_20201_2_0,sikrvo4icz,-1.562715992159337,-86.44940605896147,-22.02468277513283

1151399_20201_2_0,siu5jp4icz,-1.5896822294759496,-122.57724514301648,-27.99555514032977

5353890_20201_2_0,six1lo4icz,-0.582640854309172,-147.50808279721375,-25.988638175920883

5138713_20201_2_0,siygep4icz,1.6295708038315064,-94.20547536861537,-59.83712226273195

3904900_20201_2_0,sj52en4icz,0.3491165945756741,-89.71733501493657,-38.97718493491506

3109077_20201_2_0,sj66dn4icz,0.605176625245023,-64.52786450719412,-36.28804611550069

3650196_20201_2_0,okoxlo4icz,7.234057884864415,-60.50601658265947,-70.90225073330443

5755392_20201_2_0,sjb38p4icz,-1.4202674488469604,-77.50609852972053,-28.732925618843296

6018658_20201_2_0,sjfyko4icz,-2.589890156311699,-92.21569125738836,-32.91195541907922

1752047_20201_2_0,sjkmnn4icz,-1.2190998761430483,-91.8896667548016,-26.460725763050576

3769034_20201_2_0,sjmmap4icz,-0.2624121192453715,-67.45423803843394,-24.962189328492087

5474922_20201_2_0,sjn7ep4icz,-0.030467172542799525,-76.02327220735322,-54.195629513713286

5016123_20201_2_0,sjnqrn4icz,-3.3279617418071012,-153.45981934135074,-8.25314983628391

4463044_20201_2_0,sjnsfn4icz,2.6622706684028365,-130.92263419357266,-61.390863274677386

3540650_20201_2_0,sjrrxo4icz,-13.895848293469271,-95.14937519126332,32.74947745904838

1638364_20201_2_0,sjrxhp4icz,2.2660817061283045,-82.14939862818989,-56.24350935985848

4021158_20201_2_0,sjtqbp4icz,-3.4264897596462176,-118.43719243163045,-22.351976031822446

1454766_20201_2_0,sjwk5o4icz,-0.6578359874820066,-117.91500727506948,-31.454793208041295

3851895_20201_2_0,sjyufp4icz,-5.208655774934793,-112.20020702142466,-18.320718379135272

5291851_20201_2_0,sk5k1o4icz,2.9908395229786624,-97.286880875191,-55.455364777410324

5658477_20201_2_0,skah5o4icz,-0.5826207121272007,-95.50265752221429,-24.119340386577008

1818518_20201_2_0,skby7p4icz,-16.122281056553973,-124.44048995318141,10.677700134643189

2629205_20201_2_0,skenro4icz,-1.2414021972460536,-127.90316415966782,-20.92841853270542

4929268_20201_2_0,skfbcp4icz,0.7513762094477829,-84.66223886257654,-43.24996339945815

1295770_20201_2_0,skfzun4icz,-1.6914884270295083,-79.51257793425557,-35.257817819124284

5261817_20201_2_0,skgblo4icz,-2.378608442910185,-129.35385389854008,-23.81500309769855

2524513_20201_2_0,skgftn4icz,-0.8264750406573035,-134.04246086314035,-36.431013115080646

5060064_20201_2_0,skjmap4icz,-0.09756387354304003,-105.15304084394248,-28.709183664896827

3439903_20201_2_0,skk5ho4icz,-0.021628325588342552,-122.16261254721348,-36.3657732136312

1718251_20201_2_0,skp3sn4icz,1.425756710786319,-117.20090041901042,-49.12268301808044

4667797_20201_2_0,skw4ro4icz,139.4436648868263,266.4052732218449,-250.93203874559458

3445720_20201_2_0,sky8qn4icz,-0.6976053775484307,-95.0165014948671,-23.50182027925797

5112409_20201_2_0,sl1cdn4icz,-2.043906583851606,-118.76542983139487,-22.2710317752194

1169319_20201_2_0,sl4gio4icz,1.3977800645684435,-58.7802537395564,-34.170956531605796

2339663_20201_2_0,sl5zhp4icz,0.979838327933963,-100.91437701532521,-38.39773211069681

2017168_20201_2_0,sla9sn4icz,-20.909783390181516,-115.34743344731424,65.07849387372909

3685585_20201_2_0,slc5co4icz,-2.7094248655716626,-118.69530258284038,-7.119607008205833

2424550_20201_2_0,slc5nn4icz,99.13833178236142,397.76885271706556,-54.75293986731707

4767340_20201_2_0,sle18o4icz,0.5712050371040939,-88.31752045286362,-29.782916086952525

3273803_20201_2_0,slfjyo4icz,-0.2176567284055558,-42.28377724359001,-35.89716124705596

2838976_20201_2_0,slhc6p4icz,2.493580200288899,-83.94701636805092,-46.74898715589673

4538575_20201_2_0,slr5un4icz,-3.4401164787453937,-118.98512541415676,-16.985629603141575

2826896_20201_2_0,sls1xo4icz,-0.7626798121851246,-44.70185026588001,-27.376355674744346

1234393_20201_2_0,slv53o4icz,-0.6184495116608837,-50.280076136014145,-33.64338835958421

5641942_20201_2_0,slxy3o4icz,-1.2705982211020894,-83.49638457575304,-31.828726640487304

5455201_20201_2_0,sm15to4icz,1.3263482431960758,-80.89154026288696,-27.70244246870928

4740663_20201_2_0,sm4jap4icz,-0.7727559602646408,-88.62057992679172,-23.4006943612425

4619607_20201_2_0,sm558p4icz,-0.980577139530679,-48.91560418513404,-29.175781984324715

2359659_20201_2_0,sm5t0p4icz,0.7097678805955332,-68.69194460896665,-54.46575600158157

5728015_20201_2_0,sm6zlo4icz,-0.6216104971703611,-57.321196822302,-19.561156529961863

5295099_20201_2_0,sm771o4icz,-2.3447274727017535,-111.43187384279949,-24.82523554442062

3762344_20201_2_0,sm99sn4icz,0.0987284909345784,-101.32439973401247,-44.83475283731714

3541163_20201_2_0,smb4ro4icz,2.0116539834161404,-92.72069757611024,-48.30864947107314

5406058_20201_2_0,smcpvo4icz,9.292280906830973,-60.33113099654415,-76.32187606344878

2631040_20201_2_0,smcqbn4icz,-2.0419030812231354,-121.86431638884324,-20.217551158661237

2617127_20201_2_0,smjs7p4icz,-0.30145258619610377,-119.26964150326577,-30.583758117448014

1979877_20201_2_0,smma4p4icz,-0.2983425585608594,-108.44335388204789,-39.19519114527992

4400035_20201_2_0,smnlko4icz,1.9484065971638589,-91.28368435705988,-29.184108821252167

3319422_20201_2_0,smqiqo4icz,0.4095329523084355,-99.68892124424775,-45.57567844511544

1162382_20201_2_0,smu3xo4icz,-1.097421267188346,-86.58628342603888,-19.920986453146043

3826739_20201_2_0,smuwdo4icz,-3.6448160805525003,-109.25321085153598,0.20367421330479374

2842609_20201_2_0,smztgn4icz,-1.2789616481473305,-94.55007599855227,-12.424280587763263

3887520_20201_2_0,sn8fso4icz,2.314586445507952,-50.80307302040325,-42.54392038357754

5132364_20201_2_0,sn8wmn4icz,-1.7151432563816105,-88.68346418736664,-23.38296945024861

5726954_20201_2_0,snac6n4icz,-1.243626344473565,-119.45391452109479,-36.98701354166225

3558908_20201_2_0,snacon4icz,0.893299595403069,-89.1535359870428,-29.838402459656493

3671049_20201_2_0,snc6wo4icz,-0.35289334168094183,-95.95323626000328,-25.229099205825406

5646061_20201_2_0,sng1bp4icz,0.7307792020957817,-133.07813465696316,-36.96029499337209

2218466_20201_2_0,sni9uo4icz,-0.9360777578013937,-86.52902462011096,-35.66288351563246

3754544_20201_2_0,snnvso4icz,-0.10731508790789038,-70.0821690776801,-39.864261972497516

2175180_20201_2_0,snoocp4icz,-1.7300834586608511,-78.71525311295147,-28.51811411038409

5180264_20201_2_0,snpenn4icz,-1.1270806500756747,-94.15724805627059,-39.6039004635401

3155931_20201_2_0,snsono4icz,1.92397544305719,-94.52601111365027,-48.190900107176304

5156122_20201_2_0,snspfo4icz,-1.3533558759992708,-48.305342566559716,-26.726630278071426

3365986_20201_2_0,snxbrn4icz,1.6687112828985957,-118.65500555291734,-49.08207924149407

1558951_20201_2_0,snxd5p4icz,-1.5008772161734023,-106.57501589531688,-42.050339590797876

4619638_20201_2_0,sny88p4icz,2.2942590156388345,-107.08420281450881,-37.55524198866074

2604892_20201_2_0,sof4gp4icz,-1.4437790547622187,-99.44050447349852,-33.83699219165919

1637868_20201_2_0,solico4icz,-0.4511148969316404,-69.9079290489606,-30.69358101234691

3482404_20201_2_0,som60p4icz,3.177407206410693,-101.81433404269995,-68.67346285274606

5723897_20201_2_0,son34p4icz,0.26238716025873127,-64.92662050483773,-26.824109580813072

2837186_20201_2_0,sopbdn4icz,-3.2489383918806096,-83.95626188953392,-10.126630359060073

3582765_20201_2_0,sotpco4icz,0.8149079112861786,-125.50436625920543,-57.25355437461752

5186667_20201_2_0,soue3o4icz,-0.6541171152252456,-103.12680009485138,-19.50911963661521

3628000_20201_2_0,sp3kso4icz,-0.43284069587681007,-111.10519391207666,-21.183590403020844

3125739_20201_2_0,spebao4icz,-1.5311588731725612,-94.5358691975853,-35.8831406477571

3264504_20201_2_0,spj0gn4icz,3.072864158091049,-117.67457834172015,-59.52095775684241

2863380_20201_2_0,spjmwo4icz,1.870900552473276,-87.32661097832423,-52.39249922813822

3998430_20201_2_0,spk5jp4icz,-1.0698571077086494,-117.96445352199385,-40.99940954724286

4531645_20201_2_0,spl2to4icz,0.31415956138179596,-141.00442922014693,-30.06713702521725

2026069_20201_2_0,spm1fo4icz,-0.5068471564676543,-127.80757615601377,-31.428878792505557

2405567_20201_2_0,sprkap4icz,-0.5319124035744904,-96.77312216896905,-40.349207234256596

1467717_20201_2_0,spvv3o4icz,0.41337196555803285,-109.18217261246406,-50.48580363661334

5423457_20201_2_0,spw3so4icz,-3.450746126022379,-100.47082485785879,-12.227451592081167

4264549_20201_2_0,sq3eko4icz,4.610036859382113,-98.23557276351679,-54.685605985377094

1589571_20201_2_0,sqb4no4icz,5.575191043753298,-39.04932969685922,-45.69704313775176

1626838_20201_2_0,sqie6o4icz,-0.3613529688808834,-91.28590067688307,-30.6389247193772

5258043_20201_2_0,sqjqro4icz,-2.76830233806264,-101.04307497310228,-24.76624665393372

3399379_20201_2_0,sqqean4icz,-0.31509988481508233,-148.85106562071618,-31.606627437907477

2258097_20201_2_0,sqqg1o4icz,-3.5081545171061346,-78.90233775913313,-11.768147272546045

4725607_20201_2_0,sqrqrn4icz,-0.9900986618389805,-70.30644439781992,-35.71781002430215

1186561_20201_2_0,sqsgjo4icz,2.710238987295155,-95.66424495217382,-42.27801197186662

4174552_20201_2_0,sr4bsn4icz,0.3784779283847782,-96.91848981958881,-30.691936221543074

5546507_20201_2_0,sr93qn4icz,-2.5822336623730076,-145.81159860113766,-0.8798389970228584

5764809_20201_2_0,x63hap4icz,-1.770276346883302,-110.16287642719467,-23.944645464882655

3310472_20201_2_0,srhnmo4icz,-5.035705003196175,-99.7324238563337,3.2712771545244266

2956497_20201_2_0,sriu5p4icz,-1.7070953290698894,-131.95478025349095,-30.168280676985518

4186591_20201_2_0,srki8o4icz,2.405902184635537,-142.10383946219218,-64.91390684261502

2183703_20201_2_0,srob3p4icz,-2.9743638907495615,-102.52724443452561,-30.070137244209533

4589120_20201_2_0,srouqn4icz,-0.34128799093613543,-90.42904484542834,-40.0252750571148

3084803_20201_2_0,srprqo4icz,1.6086966793002688,-78.54514296453752,-56.593043415411714

3723095_20201_2_0,srs7co4icz,0.39795260163556717,-110.48185357772354,-18.48309147083657

1401722_20201_2_0,yxdzno4icz,-2.152595023801919,-66.88107131702563,-35.74649777043962

2577207_20201_2_0,srt95o4icz,-0.2567518480744563,-65.4347776532021,-20.352451922589978

3816217_20201_2_0,srv5en4icz,-1.897150112421026,-104.93875771915486,-35.87115751681972

1220365_20201_2_0,srxrwo4icz,1.7326358283194372,-61.83671395823242,-52.463608153862424

2806131_20201_2_0,sry8fo4icz,1.7633587300760505,-94.67792444430066,-39.25832245585879

1961667_20201_2_0,srziin4icz,-3.027053768621366,-68.07742464917712,-11.248877826893846

3265343_20201_2_0,srzpap4icz,-0.4569442734970888,-78.31289824538877,-22.778522689802386

1694120_20201_2_0,ss0o4p4icz,-1.9236666886651328,-112.47030973046617,-24.686567835725853

3755041_20201_2_0,ss1dln4icz,-1.0616664434428327,-124.39949761937712,-34.95218743265258

3217249_20201_2_0,ss1ifo4icz,0.5391084915305459,-122.01982503793639,-33.81132082935608

3937085_20201_2_0,ss2e4o4icz,1.0330366264390192,-108.33525742825367,-45.04583219426917

1365210_20201_2_0,ss5d3p4icz,-26.155104986141186,-69.97676294422024,121.68208309004754

4246655_20201_2_0,sscwfn4icz,-2.34439478822734,-78.637655351993,-24.828059192784565

4832448_20201_2_0,ssde4p4icz,1.3008563671153488,-109.08059784066032,-35.93950865940894

1284059_20201_2_0,sse99n4icz,-1.397011934237629,-82.54633038238595,-34.43207808463629

2974431_20201_2_0,ssf4dn4icz,0.17288382179255712,-56.20574482590001,-51.835907992558816

1211589_20201_2_0,ssfmwn4icz,3.880422631585947,-119.74918006040497,-58.51430091243449

5735489_20201_2_0,ip17xn4icz,1.971685401067989,-85.41569803481508,-60.644346726281526

2688211_20201_2_0,ssi73o4icz,-0.8768247205338195,-80.855303737058,-29.318870652415

2249397_20201_2_0,ssi7hp4icz,0.9366657254756267,-60.648302557001415,-55.8819184843903

2492431_20201_2_0,ssjdlo4icz,-1.273220699319455,-110.62336926233831,-46.201651208367124

5292725_20201_2_0,ssp2yo4icz,0.048325752997732785,-87.43188392407274,-27.93247844740074

4419045_20201_2_0,sssyfo4icz,-1.574348149876969,-85.03327044261965,-22.844039971344785

3724979_20201_2_0,ssvn8p4icz,-0.8669386487912523,-132.42665727339306,-31.385967330563517

4620712_20201_2_0,x4qrso4icz,-3.9744513964346493,-84.80151342672713,-16.442806264458866

5090420_20201_2_0,st03oo4icz,-0.8096129985152944,-92.03346512899378,-43.26729232023915

5190393_20201_2_0,st2zhp4icz,4.075411118502814,-88.841566589483,-54.46954167672919

4061235_20201_2_0,st30zo4icz,2.2589459614940655,-57.93986457395846,-49.774664319608405

4849163_20201_2_0,st6zjp4icz,-1.8437536294823926,-118.3378292992721,-35.63427175413702

4101066_20201_2_0,stahin4icz,-0.8042574455518732,-116.18253109348399,-38.668310296153265

2888425_20201_2_0,stbijo4icz,-1.8209172691855828,-99.21046674403553,-28.365970503036493

4431041_20201_2_0,stct6o4icz,-1.261948309044804,-109.94107196227185,-29.217096428380657

2808992_20201_2_0,stgmrn4icz,5.987810379432981,-73.84573408472224,-82.874296630462

1901985_20201_2_0,stl16o4icz,-3.2808981285683787,-80.58155784915817,-18.515536956803814

1084943_20201_2_0,strafn4icz,0.7771390537241346,-102.76940539455217,-42.76720309954082

1427206_20201_2_0,stu0bp4icz,1.5416629889369262,-70.81290962448819,-34.58815019353267

5229786_20201_2_0,stv3cn4icz,-1.7433041300303878,-111.75279947506192,-32.28140000357061

1155091_20201_2_0,stzqmn4icz,3.213224315211342,-66.264419323923,-54.56905519270204

1074533_20201_2_0,su18po4icz,-1.172883388994246,-122.40116220108627,-21.339165052112946

4531287_20201_2_0,su1a7p4icz,0.506863112920464,-120.10253349727043,-43.28995931228013

1503910_20201_2_0,su3aro4icz,-0.12034469155938209,-69.57078196271954,-30.793129519296798

2461283_20201_2_0,su3dao4icz,0.0439631746753423,-67.82135890134822,-37.27463297695179

4396712_20201_2_0,su4qfp4icz,-0.20532779218669808,-72.33627499976745,-31.735330305472303

5632901_20201_2_0,subuep4icz,0.9930410376459968,-71.44743878796567,-54.53603216461889

5437530_20201_2_0,sucv8o4icz,-8.543917739612414,-136.35943863638224,7.299001670096914

4940890_20201_2_0,sudifp4icz,-2.6891801295248547,-120.18143241345504,-40.33957079631202

1320610_20201_2_0,suk9ap4icz,1.9623046310825647,-117.71216777919562,-45.291948182268726

2314755_20201_2_0,wsrzep4icz,-0.7174078941499261,-73.88809601821671,-35.41835683207583

4489917_20201_2_0,0xf0no4icz,-1.7068918181430441,-124.31800328303584,-16.882918111916965

4049822_20201_2_0,6lw69p4icz,0.7683493519432943,-92.91963544439434,-53.311788001982734

5729470_20201_2_0,t1sloo4icz,-1.9971986632459575,-115.20151548663978,-6.859848349008146

1255151_20201_2_0,77h7ap4icz,-1.77555315002037,-62.247783535834174,-36.203703583613475

4488200_20201_2_0,1oic0p4icz,0.5713195511243939,-80.93642837833025,-25.34436291105652

1153240_20201_2_0,im9poo4icz,1.9274998833894719,-100.49038105557096,-43.51946015388749

3557526_20201_2_0,e72sco4icz,-2.501221308874895,-133.0789803081471,-24.11504730969638

5769250_20201_2_0,1ls2gp4icz,1.5312519456262068,-119.55930815673744,-32.431641845351606

3895788_20201_2_0,suwm7p4icz,-0.8060884047625247,-90.94261915856688,-24.671958818631694

3196265_20201_2_0,sv03fn4icz,-0.5217587810140814,-124.1113792234566,-33.54234491209996

3958830_20201_2_0,sv0z8o4icz,0.7250548185659698,-99.77395099624331,-34.77519135068815

2744785_20201_2_0,sv5zsn4icz,-1.141595089727123,-84.82426345504817,-39.663422013828296

1479012_20201_2_0,sv6b6p4icz,-2.150125566692031,-99.48205006539928,-24.692051314391804

5374226_20201_2_0,sva78p4icz,1.7486663040574757,-84.92447024540127,-66.28966362268923

5624604_20201_2_0,svbeko4icz,0.4016111384208943,-78.52138259236199,-27.320266247992706

3520321_20201_2_0,svbhtn4icz,-17.41854798240949,-150.52275023579816,72.99014187698154

4403210_20201_2_0,svbnio4icz,-0.5288524276987276,-74.04924928137777,-38.17052631876993

4044708_20201_2_0,svcpkn4icz,1.156928338656475,-92.12899355205138,-46.5432699015753

2527166_20201_2_0,svdgbp4icz,1.1429557210927697,-119.82124320799474,-62.40565203029783

2150049_20201_2_0,svfw2p4icz,-20.74929344979391,-66.10672709557073,344.1514909622664

3331842_20201_2_0,svjocp4icz,-0.16443674251516338,-116.24788754145385,-36.78353041652805

1881143_20201_2_0,svkugp4icz,-0.5446297810663331,-65.92739329407343,-37.68338420983214

2156824_20201_2_0,svp9tn4icz,0.0694076996030233,-75.65646648399849,-32.81968909611794

4802828_20201_2_0,svpmin4icz,-1.7906976233686922,-101.67014473966219,-31.06216746518568

3395649_20201_2_0,svsipn4icz,-1.3241104179975824,-129.34357316826652,-30.79266356082917

4922669_20201_2_0,svwgjo4icz,0.018737261298257212,-84.37459685648699,-28.42559406997667

2529571_20201_2_0,svy9in4icz,1.1002963932682623,-132.50822849147175,-37.303861154540584

5374485_20201_2_0,sw0c7p4icz,1.3908392687589664,-92.92146416126369,-44.45829636041286

2128567_20201_2_0,sw507o4icz,0.8549711958971772,-99.94548385594209,-47.48647295425988

1940484_20201_2_0,sw80co4icz,-0.1580047418462356,-102.76874144445446,-27.959247025178286

4835538_20201_2_0,sw8ecn4icz,-1.2801874402816378,-117.63603656500749,-19.52754619207056

2314056_20201_2_0,swapvn4icz,-1.2460829972215997,-74.38982297580611,-10.791587099861118

1982258_20201_2_0,swbnto4icz,1.98977685339826,-113.07907150527592,-47.42716938436563

5686295_20201_2_0,swf93p4icz,-3.7248663339968098,-105.2807270316406,-17.56338697696296

3689212_20201_2_0,swjlan4icz,-0.14082310838655585,-122.39748205403203,-44.85076890774465

3433679_20201_2_0,swl8gp4icz,-1.5630162734423352,-109.10037062101009,-7.637525444055768

3131781_20201_2_0,swp7rn4icz,-9.721797499584985,-97.03938766454476,4.956324311579365

5910277_20201_2_0,swuhbo4icz,0.2825346333264231,-135.24711914793411,-31.008068733861393

3524117_20201_2_0,sx0oao4icz,0.748259591427056,-97.37452853706685,-53.819450198188335

1619042_20201_2_0,sx347o4icz,-5.661193879437539,-100.24893881015251,-13.309224051567213

3188922_20201_2_0,sxgwmn4icz,-3.1525198018271863,-90.31708543878403,-30.125619631306876

1409234_20201_2_0,sxh4eo4icz,1.6414304959803652,-82.97503003926892,-48.51702281841072

2966679_20201_2_0,sxl6fn4icz,10.877595763261015,-13.702287778427063,-84.54218367150219

1873105_20201_2_0,sxm73p4icz,0.331052322241796,-66.9975211496091,-33.35150764003954

2899951_20201_2_0,sxspjo4icz,0.30078047550548004,-79.10405795245913,-41.44515665993596

3297940_20201_2_0,sxtsyo4icz,0.7471142678030503,-85.86399965952853,-42.59477184221963

4998807_20201_2_0,sxtz9p4icz,0.2500485484888531,-100.94182520653948,-50.58889967269174

2905381_20201_2_0,sxvejo4icz,1.1150300710558976,-86.76529381591234,-64.94396303313684

2744593_20201_2_0,sxwzgp4icz,0.08479716622215866,-129.02083272778913,-48.15667220248697

5368716_20201_2_0,sy3e4o4icz,-2.441199673442795,-131.543130679837,-25.230263386265364

2179402_20201_2_0,sy3y0o4icz,1.5348189554717935,-94.48613314004149,-70.21098077975952

5559722_20201_2_0,sy4lno4icz,2.9310283413812006,-66.56979704914684,-51.95084444016493

3700586_20201_2_0,sy4p9p4icz,-9.491512510903613,-51.85348732302805,10.878819459678581

5256455_20201_2_0,sy72no4icz,-1.8380855874658377,-154.92349526190065,-16.500594546582676

2248735_20201_2_0,sya4rn4icz,-0.1472717422724072,-119.20469175947997,-60.63436785066857

3743577_20201_2_0,sydfgo4icz,0.6168320381382137,-118.41568811888988,-42.04404599095996

4063984_20201_2_0,sye95o4icz,-0.5626289081569174,-85.01299742279599,-30.476727789194783

2139515_20201_2_0,sygihp4icz,-1.1622727622043405,-71.50185784623966,-37.73991171510531

1660316_20201_2_0,sygw9o4icz,1.3997291727511847,-116.58897959842022,-15.702237961249864

4129045_20201_2_0,sygy4o4icz,1.4492157719831027,-71.08789112872898,-41.82437533228958

4162754_20201_2_0,syh5nn4icz,0.1792499158297497,-95.57190837623935,-34.26693158784873

5215113_20201_2_0,syjpmo4icz,1.5029164221420843,-85.98303405466947,-40.778672827419896

4651655_20201_2_0,sylmso4icz,-2.38615195276601,-54.33476420215737,-19.824449263404745

3574670_20201_2_0,hld4cp4icz,-1.056110764425519,-132.5277555756415,-39.21824563458853

/users/rhydian/anaconda3/envs/torch_env/lib/python3.7/site-packages/torch/cuda/__init__.py:52: UserWarning: CUDA initialization: Found no NVIDIA driver on your system. Please check that you have an NVIDIA GPU and installed a driver from http://www.nvidia.com/Download/index.aspx (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729006826/work/c10/cuda/CUDAFunctions.cpp:100.)
  return torch._C._cuda_getDeviceCount() > 0
  0%|          | 0/101 [00:00<?, ?it/s]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 1/101 [00:01<02:52,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 2/101 [00:03<02:44,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 3/101 [00:04<02:40,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/101 [00:07<03:10,  1.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▍         | 5/101 [00:09<02:56,  1.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 6/101 [00:10<02:41,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 7/101 [00:12<02:35,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 8/101 [00:13<02:30,  1.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 9/101 [00:15<02:31,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|▉         | 10/101 [00:16<02:28,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 11/101 [00:18<02:21,  1.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 12/101 [00:19<02:14,  1.51s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 13/101 [00:21<02:12,  1.51s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 14/101 [00:22<02:12,  1.52s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▍        | 15/101 [00:24<02:13,  1.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 16/101 [00:25<02:09,  1.53s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 17/101 [00:27<02:12,  1.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 18/101 [00:29<02:09,  1.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 19/101 [00:30<02:06,  1.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|█▉        | 20/101 [00:32<02:04,  1.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 21/101 [00:33<01:58,  1.48s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 22/101 [00:35<02:01,  1.53s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 23/101 [00:36<01:56,  1.50s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 24/101 [00:38<01:58,  1.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▍       | 25/101 [00:39<02:01,  1.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 26/101 [00:41<01:58,  1.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 27/101 [00:43<01:58,  1.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 28/101 [00:44<01:56,  1.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▊       | 29/101 [00:46<01:54,  1.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|██▉       | 30/101 [00:47<01:51,  1.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 31/101 [00:49<01:45,  1.50s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 32/101 [00:50<01:48,  1.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 33/101 [00:52<01:51,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▎      | 34/101 [00:54<01:48,  1.61s/it] 35%|███▍      | 35/101 [00:55<01:42,  1.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 36/101 [00:56<01:37,  1.49s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 37/101 [00:58<01:40,  1.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 38/101 [01:00<01:39,  1.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▊      | 39/101 [01:02<01:43,  1.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|███▉      | 40/101 [01:03<01:44,  1.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 41/101 [01:05<01:41,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 42/101 [01:07<01:36,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 43/101 [01:09<01:44,  1.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▎     | 44/101 [01:11<01:44,  1.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▍     | 45/101 [01:12<01:41,  1.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 46/101 [01:14<01:36,  1.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 47/101 [01:16<01:31,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 48/101 [01:17<01:28,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▊     | 49/101 [01:19<01:23,  1.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|████▉     | 50/101 [01:20<01:19,  1.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 51/101 [01:22<01:16,  1.53s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████▏    | 52/101 [01:23<01:13,  1.51s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 53/101 [01:25<01:12,  1.50s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 54/101 [01:26<01:12,  1.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 55/101 [01:28<01:12,  1.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▌    | 56/101 [01:29<01:08,  1.52s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▋    | 57/101 [01:31<01:06,  1.50s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 58/101 [01:33<01:09,  1.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 59/101 [01:34<01:09,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 60/101 [01:36<01:07,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|██████    | 61/101 [01:39<01:21,  2.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████▏   | 62/101 [01:41<01:20,  2.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 63/101 [01:44<01:27,  2.31s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 64/101 [01:46<01:18,  2.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 65/101 [01:47<01:09,  1.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▌   | 66/101 [01:49<01:02,  1.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▋   | 67/101 [01:50<00:58,  1.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 68/101 [01:52<00:54,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 69/101 [01:53<00:52,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 70/101 [01:55<00:50,  1.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|███████   | 71/101 [01:56<00:46,  1.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████▏  | 72/101 [01:58<00:46,  1.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 73/101 [02:00<00:45,  1.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 74/101 [02:01<00:42,  1.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 75/101 [02:03<00:40,  1.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▌  | 76/101 [02:04<00:38,  1.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 77/101 [02:06<00:36,  1.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 78/101 [02:07<00:37,  1.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 79/101 [02:09<00:36,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 80/101 [02:11<00:34,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 81/101 [02:12<00:31,  1.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 82/101 [02:14<00:29,  1.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 83/101 [02:20<00:55,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 84/101 [02:22<00:46,  2.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 85/101 [02:24<00:38,  2.42s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▌ | 86/101 [02:26<00:33,  2.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 87/101 [02:27<00:28,  2.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 88/101 [02:29<00:25,  1.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 89/101 [02:31<00:24,  2.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 90/101 [02:34<00:23,  2.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 91/101 [02:35<00:19,  1.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 92/101 [02:37<00:16,  1.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 93/101 [02:38<00:13,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 94/101 [02:40<00:11,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 95/101 [02:41<00:09,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▌| 96/101 [02:43<00:08,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 97/101 [02:45<00:06,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 98/101 [02:46<00:05,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 99/101 [02:48<00:03,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 100/101 [02:50<00:01,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|██████████| 101/101 [02:52<00:00,  1.83s/it]100%|██████████| 101/101 [02:52<00:00,  1.71s/it]
Trying to load from /users/rhydian/self-supervised-project/model_weights/SSECEncodersBothBoth
==> Resuming model trained for 106 epochs...
Trying to load from ../model_weights/angle_regressor4
==> Resuming model trained for 7 epochs...
4811606_20201_2_0,qopwdp4icz,-1.5393567360120988,-80.884889757704,-19.754133650822425

4775929_20201_2_0,qosexo4icz,1.3984595989582778,-118.0051596187563,-41.94078423475631

2139775_20201_2_0,qp8vfo4icz,-0.5157937771015966,-120.55383474492791,-31.543469835197442

3885467_20201_2_0,qpp5ho4icz,-0.26686325403794814,-76.02472371609076,-25.392666230212612

2844585_20201_2_0,qpzcxo4icz,-1.9308230493842988,-73.63217169177838,-58.18371692087048

3194178_20201_2_0,qq9efo4icz,-0.5816078484625703,-70.18150961970375,-32.18362335400391

1633344_20201_2_0,qqhj8n4icz,-1.4465258578375573,-105.69763530906573,-26.32436104518328

1342003_20201_2_0,qrczjo4icz,2.428985524825468,-128.12346175345817,-41.211215165166195

5291241_20201_2_0,qsgx8p4icz,-5.847484926384793,-122.21837698845314,-4.673745578901745

1080294_20201_2_0,qskjvo4icz,0.4474981876015727,-81.01288569908556,-33.62011493067881

3061120_20201_2_0,qsowmo4icz,3.7270061492519733,-67.23039016638313,-56.60682798953293

1476667_20201_2_0,qssdro4icz,-0.8736326427640596,-89.89847181462952,-23.0871703269071

5855779_20201_2_0,qt9zno4icz,-2.413099219864197,-126.24398875645187,-22.99514281017848

1612073_20201_2_0,qtyl8p4icz,0.6620590718032999,-70.13217257879114,-73.97241731395812

4823566_20201_2_0,qxtl8o4icz,0.5793429668019552,-66.4346331538361,-23.874779064988303

4865921_20201_2_0,qyl2wo4icz,-0.6523196845648215,-73.34236983009632,-25.909336965461918

1291881_20201_2_0,qz31ip4icz,0.27022991354295844,-85.49829353995167,-52.30532649453444

1985760_20201_2_0,qzl4ko4icz,1.9588014668218552,-84.04793796198473,-34.577624981443236

5738730_20201_2_0,r0dw3p4icz,2.058544372200081,-102.83264021812406,-35.4982888285374

5453322_20201_2_0,r0kjxn4icz,-1.6840967062124832,-82.5320984876567,-30.346664241161477

3260101_20201_2_0,r1zyao4icz,0.2890994998582706,-82.02448739726634,-26.2301051518005

2042762_20201_2_0,r4paqo4icz,-3.973214488689186,-96.32185289913352,-15.666029525526056

1539828_20201_2_0,r5c3qn4icz,0.8480401939718012,-90.89096220866782,-49.18168221172476

1095248_20201_2_0,r5r2tn4icz,-4.151494835846943,-134.64369714519128,-9.575738529004326

5515324_20201_2_0,r5z33o4icz,0.4864713093079193,-98.84121716523893,-35.11011924544259

2498625_20201_2_0,r7a65p4icz,2.039985145684618,-67.6000684288125,-56.027049902455474

2807336_20201_2_0,r8fvdp4icz,0.5039764190303767,-118.10963450008802,-63.55719141654103

4607680_20201_2_0,r8g5uo4icz,-0.5067847214684588,-49.00468447989624,-26.010672709593578

3401498_20201_2_0,r8lcto4icz,0.09566404657850831,-79.60037806096014,-51.30288561494781

4191745_20201_2_0,r8ulzo4icz,2.1682230459583365,-76.35673947739252,-53.844126897439736

4651289_20201_2_0,rav3lo4icz,-0.2774262821706032,-106.67771226012928,-13.739331681087606

5072662_20201_2_0,rbcmwn4icz,-1.0349544641644668,-144.3164574465256,-42.70306995116178

1822640_20201_2_0,rbkvcp4icz,-4.655867849678309,-90.4755213089328,-11.116852977829332

1510158_20201_2_0,rby3nn4icz,0.733673183254457,-97.43812117184129,-40.8792496655243

5263151_20201_2_0,rbysmn4icz,-36.62056128538598,30.7358874654405,304.1577644007392

4205893_20201_2_0,rc8r2p4icz,-1.4036286438473005,-75.4908153509675,-30.015874192122652

1250802_20201_2_0,rd08bo4icz,-3.1774593101117747,-113.35777268128149,-24.189668592765074

4764670_20201_2_0,rd2q8p4icz,1.6170930987949612,-50.612751829057316,-57.6637303577734

3640392_20201_2_0,reyf2p4icz,-0.6204337494439266,-105.80040934749411,-23.67004682345342

1418047_20201_2_0,rf3qpn4icz,0.0037331104659875155,-110.39468410345233,-41.101085098936835

1959515_20201_2_0,rgu3ho4icz,-0.14372526984020365,-70.30426989126755,-32.3546457876739

5793009_20201_2_0,rhipxn4icz,-1.055978926527964,-99.64151198706261,-47.021915509638546

5748995_20201_2_0,bb40ap4icz,2.4268199999261153,-100.01215614436953,-58.77425539909639

3455021_20201_2_0,rj1wlo4icz,-0.5439850797911047,-99.13582570239683,-45.54049520634538

5338305_20201_2_0,rkknfn4icz,-0.6516319727012894,-57.956232304870866,-27.119363586447434

1911256_20201_2_0,rkrhko4icz,1.6902021848360078,-90.44779319120309,-41.63936911562929

3776359_20201_2_0,rl176p4icz,-1.8180797144046585,-62.98628966713699,-29.585197320549796

1222205_20201_2_0,rl2d1o4icz,-0.22968453033530936,-133.65450503029786,-57.63532540127929

4932143_20201_2_0,rlinfn4icz,-1.6941367658086155,-91.47926245591083,-24.815256010952154

5107042_20201_2_0,rloh9p4icz,-0.5141454699681512,-102.01383169320314,-17.32293167896411

3717412_20201_2_0,rltf2o4icz,2.144272853142416,-135.63162977489813,-38.67239921987931

5663452_20201_2_0,rm1pbo4icz,-2.6487569974256733,-82.67605068905269,-26.187730433936935

2376360_20201_2_0,rm9e0p4icz,-0.8231971293442665,-107.4899412352535,-20.000810711889713

5904228_20201_2_0,rnh8do4icz,0.08607837547355238,-99.6620176919273,-45.628578150015315

4564075_20201_2_0,rnttwn4icz,-1.7363603196070778,-103.5298662262395,-18.848412220551296

4601965_20201_2_0,rol0cp4icz,0.6063591473640315,-74.1934372840623,-41.007923009760106

6010300_20201_2_0,rp5v2p4icz,-0.732914081797131,-106.86607491615592,-29.778160263494755

2763570_20201_2_0,rq3c7p4icz,0.715727180856958,-110.89291510028681,-39.39146574806679

3803528_20201_2_0,rs17mo4icz,1.699753223109391,-73.03331118358608,-46.83082384758836

4222536_20201_2_0,rtf43p4icz,0.49754459585799665,-76.81742483303941,-36.49310800532507

5958207_20201_2_0,rtz7ep4icz,3.0130216617235934,-128.88681862682074,-39.58631160874788

5484455_20201_2_0,rul0pn4icz,-6.588140179750746,-150.35774934136305,12.469533381574394

4917032_20201_2_0,rvya6p4icz,0.7911955878902943,-120.9184789802377,-52.89991744097955

3908378_20201_2_0,rwb2yo4icz,-5.153205372788251,-64.20597597730506,-17.563829699057933

5885504_20201_2_0,rwpzjp4icz,-0.7737175122279932,-108.43619163077634,-38.20578312402586

4680886_20201_2_0,rx41bo4icz,1.8062323417104398,-102.46630506053847,-30.990720083832386

5573401_20201_2_0,ry0pro4icz,-0.2780992397265481,-111.73651698263564,-38.89147250946074

2901648_20201_2_0,rz1e6o4icz,0.7577598136589544,-102.7989452336611,-34.523273340267934

1800999_20201_2_0,rzh1un4icz,0.7924705878733432,-94.97447232944222,-26.7780984241182

3861932_20201_2_0,rzpcxn4icz,-4.7009135827818485,-130.25342300252353,-1.424189536004036

2213023_20201_2_0,s030cn4icz,-1.8862269521675872,-169.8636564663735,-37.36799269806457

5683217_20201_2_0,s0mwvn4icz,-5.736981128952466,-103.60821595203754,-9.39527473510526

6008118_20201_2_0,s18c9p4icz,-1.9551660084258653,-165.17152711940457,-26.53082478680321

2365790_20201_2_0,s263ko4icz,-2.8776550787401547,-82.60219049641046,-24.779691237893644

1206904_20201_2_0,s29owo4icz,-1.7054963232638223,-116.29695975678777,-33.31684601964028

3648695_20201_2_0,s3efyo4icz,0.7805704494358524,-51.99733659814865,-42.23135209405312

4435304_20201_2_0,s3nrso4icz,0.9221088396066258,-51.28349491868107,-36.30260797773475

5608165_20201_2_0,s4ctso4icz,-3.5028559401767847,-88.30250442299001,-22.186647058350744

5914035_20201_2_0,s59ujp4icz,-1.7671139982656623,-42.36333760337283,-32.545785190401574

4566484_20201_2_0,s62y9o4icz,2.621848826549352,-72.18413861487963,-41.24836318800482

1005489_20201_2_0,s6f93o4icz,-1.2353030401713048,-66.45452927076173,-36.22371489302033

2613289_20201_2_0,s7xz9p4icz,-2.438247950076214,-122.77336681380794,-13.104448475858561

4461054_20201_2_0,s89l2o4icz,4.431054130939233,-131.2841593066106,-58.52292742903275

1869909_20201_2_0,s9vp8o4icz,-1.21326200869541,-103.88098268552869,-40.287662722617114

3607449_20201_2_0,sar31p4icz,2.8336372671506176,-119.8058112168448,-58.865360805798545

3173341_20201_2_0,sbba2p4icz,4.519906824393588,-109.98637436855088,-61.580581817493766

1485514_20201_2_0,sbdbjo4icz,2.1738455892054547,-57.680235295540456,-38.29767413426849

2369805_20201_2_0,sbkfgn4icz,-2.6746036949840217,-132.2705195408425,6.31081546693224

4489363_20201_2_0,godnip4icz,0.5250787487181323,-112.29955037571253,-44.7037817216203

1104661_20201_2_0,sfsx0o4icz,-0.9173491017256997,-94.6047337708099,-29.041126214750506

2554382_20201_2_0,sfyd9o4icz,-2.4888193495946918,-110.85052907772695,-23.719365233426416

3885158_20201_2_0,sgfqap4icz,-1.147756906709479,-76.4663963247796,-29.40930357145922

2036188_20201_2_0,sheb5p4icz,0.3603122338657422,-94.32866976240533,-38.931921371259094

5373262_20201_2_0,shkdpo4icz,-2.033817067848862,-116.58789975467744,-28.219100025939554

3390883_20201_2_0,shr8vn4icz,0.9145007017764256,-106.8684677142916,-17.049808889185485

4362365_20201_2_0,si36in4icz,0.6417082883672115,-100.93893545240076,-37.83379039858184

1787317_20201_2_0,sieh5o4icz,0.2922990767853371,-106.75998703149352,-24.052338877060293

5222852_20201_2_0,sj4o8p4icz,-3.652178243599735,-64.09051871985105,-37.80031693489502

2922964_20201_2_0,sj4swn4icz,0.811222674291749,-94.48272417456442,-44.48388904196332

2723733_20201_2_0,sje3do4icz,-0.26071578203861034,-96.80262542330576,-32.88001766062325

4525358_20201_2_0,d78r6o4icz,-0.8876300991974369,-129.85410410125255,-31.336732326353598

/users/rhydian/anaconda3/envs/torch_env/lib/python3.7/site-packages/torch/cuda/__init__.py:52: UserWarning: CUDA initialization: Found no NVIDIA driver on your system. Please check that you have an NVIDIA GPU and installed a driver from http://www.nvidia.com/Download/index.aspx (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729006826/work/c10/cuda/CUDAFunctions.cpp:100.)
  return torch._C._cuda_getDeviceCount() > 0
  0%|          | 0/101 [00:00<?, ?it/s]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 1/101 [00:01<02:58,  1.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 2/101 [00:03<02:56,  1.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 3/101 [00:05<03:00,  1.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/101 [00:07<02:48,  1.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▍         | 5/101 [00:10<03:35,  2.24s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 6/101 [00:12<03:31,  2.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 7/101 [00:15<03:45,  2.40s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 8/101 [00:16<03:16,  2.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 9/101 [00:18<02:54,  1.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|▉         | 10/101 [00:19<02:45,  1.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 11/101 [00:21<02:33,  1.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 12/101 [00:24<03:06,  2.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 13/101 [00:26<02:55,  2.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 14/101 [00:27<02:39,  1.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▍        | 15/101 [00:29<02:34,  1.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 16/101 [00:31<02:35,  1.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 17/101 [00:32<02:26,  1.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 18/101 [00:36<03:19,  2.40s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 19/101 [00:38<02:52,  2.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|█▉        | 20/101 [00:40<02:45,  2.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 21/101 [00:42<02:59,  2.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 22/101 [00:44<02:42,  2.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 23/101 [00:49<03:41,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 24/101 [00:50<03:09,  2.46s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▍       | 25/101 [00:52<03:04,  2.43s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 26/101 [00:54<02:44,  2.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 27/101 [00:56<02:25,  1.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 28/101 [00:57<02:16,  1.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▊       | 29/101 [00:59<02:23,  1.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|██▉       | 30/101 [01:01<02:12,  1.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 31/101 [01:03<02:03,  1.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 32/101 [01:04<01:55,  1.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 33/101 [01:06<01:55,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▎      | 34/101 [01:07<01:49,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▍      | 35/101 [01:09<01:44,  1.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 36/101 [01:10<01:45,  1.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 37/101 [01:12<01:46,  1.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 38/101 [01:14<01:44,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▊      | 39/101 [01:16<01:49,  1.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|███▉      | 40/101 [01:21<02:52,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 41/101 [01:23<02:29,  2.49s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 42/101 [01:24<02:11,  2.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 43/101 [01:26<02:05,  2.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▎     | 44/101 [01:28<01:51,  1.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▍     | 45/101 [01:30<01:43,  1.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 46/101 [01:31<01:40,  1.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 47/101 [01:33<01:33,  1.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 48/101 [01:34<01:29,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▊     | 49/101 [01:36<01:27,  1.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|████▉     | 50/101 [01:38<01:27,  1.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 51/101 [01:39<01:23,  1.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████▏    | 52/101 [01:41<01:22,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 53/101 [01:45<01:50,  2.30s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 54/101 [01:47<01:39,  2.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 55/101 [01:48<01:32,  2.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▌    | 56/101 [01:50<01:25,  1.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▋    | 57/101 [01:52<01:19,  1.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 58/101 [01:54<01:20,  1.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 59/101 [01:56<01:20,  1.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 60/101 [01:58<01:28,  2.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|██████    | 61/101 [02:00<01:21,  2.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████▏   | 62/101 [02:02<01:14,  1.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 63/101 [02:03<01:09,  1.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 64/101 [02:05<01:02,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 65/101 [02:06<00:58,  1.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▌   | 66/101 [02:08<00:59,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▋   | 67/101 [02:10<00:55,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 68/101 [02:11<00:52,  1.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 69/101 [02:13<00:50,  1.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 70/101 [02:14<00:48,  1.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|███████   | 71/101 [02:16<00:48,  1.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████▏  | 72/101 [02:18<00:47,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 73/101 [02:19<00:48,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 74/101 [02:21<00:45,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 75/101 [02:23<00:43,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▌  | 76/101 [02:25<00:43,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 77/101 [02:26<00:40,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 78/101 [02:28<00:38,  1.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 79/101 [02:29<00:35,  1.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 80/101 [02:31<00:34,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 81/101 [02:33<00:35,  1.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 82/101 [02:35<00:32,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 83/101 [02:36<00:29,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 84/101 [02:38<00:27,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 85/101 [02:39<00:25,  1.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▌ | 86/101 [02:41<00:23,  1.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 87/101 [02:42<00:21,  1.52s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 88/101 [02:44<00:21,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 89/101 [02:46<00:19,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 90/101 [02:47<00:17,  1.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 91/101 [02:51<00:21,  2.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 92/101 [02:52<00:17,  1.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 93/101 [02:54<00:14,  1.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 94/101 [02:55<00:12,  1.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 95/101 [02:57<00:10,  1.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▌| 96/101 [02:59<00:08,  1.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 97/101 [03:00<00:06,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 98/101 [03:02<00:04,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 99/101 [03:04<00:03,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 100/101 [03:07<00:02,  2.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|██████████| 101/101 [03:09<00:00,  2.17s/it]100%|██████████| 101/101 [03:09<00:00,  1.88s/it]
Trying to load from /users/rhydian/self-supervised-project/model_weights/SSECEncodersBothBoth
==> Resuming model trained for 106 epochs...
Trying to load from ../model_weights/angle_regressor4
==> Resuming model trained for 7 epochs...
4272397_20201_2_0,qqrbgp4icz,0.7703097411648675,-66.5391551342849,-58.52970713794211

3580471_20201_2_0,qr80wn4icz,1.7678219726222149,-87.46593878301096,-40.89240018465563

1412987_20201_2_0,qriy8o4icz,-0.7365704756192777,-84.99923097710891,-30.354241261645797

3942223_20201_2_0,qry4oo4icz,-1.8758118259096586,-82.84641948948357,2.5735940043599186

1005955_20201_2_0,qsrz5o4icz,-2.4067921640024315,-132.35540123723888,-29.574573715214356

5720927_20201_2_0,qv0u0o4icz,-2.1472308610985773,-74.29157714711371,-10.753249515254055

4223388_20201_2_0,qv43jn4icz,-2.628324035761542,-117.0205732380754,-36.568113886294014

2992274_20201_2_0,qv9gzo4icz,-1.0596108022521868,-94.25036117528416,-30.74872188711683

5294835_20201_2_0,qvijio4icz,1.265827101534824,-65.38127211176726,-33.33779579988014

1915665_20201_2_0,qvpyfn4icz,2.5738938222145844,-115.79341020612097,-59.31011437481371

4190433_20201_2_0,qwtjto4icz,8.71546438929643,-114.53668700725207,-102.93240301588976

3579321_20201_2_0,azxjxn4icz,0.8184267079415146,-112.92071028866141,-40.97395772614644

4023146_20201_2_0,qx9xoo4icz,0.852985494454795,-87.46850375090423,-37.599761273537126

5049241_20201_2_0,qxnten4icz,-1.213474095721157,-88.40222905553392,-45.07886647950767

4889217_20201_2_0,qxqd9p4icz,-1.0335965982543402,-141.98789763644527,-20.106537981307397

4965865_20201_2_0,qy5t6p4icz,-1.7445952476722983,-68.24582568709081,-20.660683422251736

2621500_20201_2_0,qyopxn4icz,-3.1244441008413597,-119.07346918836436,-29.77782553324792

3780361_20201_2_0,moe6io4icz,1.6745791458246215,-56.0022780591045,-42.398367632147796

5847992_20201_2_0,qzgxun4icz,-1.2523090101933267,-116.20968556185304,-45.62179902034461

6012584_20201_2_0,r00flo4icz,0.7624822765054545,-70.99934563305075,-56.66026136023078

3837834_20201_2_0,r0fpto4icz,0.940805516724108,-114.73481957396294,-37.440943854442025

5308961_20201_2_0,r0jygp4icz,-2.144518309771251,-97.7214774441359,-27.43030969214155

4261593_20201_2_0,r3h8xn4icz,-21.499746505837354,-173.8515364767303,112.99725765859543

1296948_20201_2_0,r3jyvn4icz,13.44635415721852,-88.48864310341042,-112.61187382161482

2976971_20201_2_0,qbieqn4icz,-1.448501703417037,-124.0711144550869,-31.225371448176006

4906629_20201_2_0,r3mvjo4icz,-0.5129779479037001,-32.205912721384095,-36.580117570382555

3137462_20201_2_0,r402fp4icz,0.6624125622657512,-91.5068678937655,-46.545871500010165

2068917_20201_2_0,r422zo4icz,5.372545540612148,-75.26211061552294,-63.94587327934256

3150113_20201_2_0,r49xjo4icz,-2.944405940173833,-101.92655095898448,-14.823925512796805

2584525_20201_2_0,r4ivun4icz,-1.1668312366022233,-119.43319049064826,-40.24150794658479

4605142_20201_2_0,r60hap4icz,0.056082519700186226,-78.0190840882239,-13.244228894134437

4250727_20201_2_0,r6u16p4icz,1.391965139553858,-94.24125162597011,-35.77345031859116

5331976_20201_2_0,r75pxn4icz,0.8821439493228734,-105.72824576259586,-44.90669733190627

1232718_20201_2_0,r7k0bn4icz,-0.7592388650760159,-81.67703656738314,-39.964387570535635

1018784_20201_2_0,r7mafo4icz,-2.1688429872270483,-112.09647268477835,-19.698976778564273

1187121_20201_2_0,r7mc4o4icz,-5.129055602989413,-119.19286605945678,-11.635667366203435

2202598_20201_2_0,r8t7wn4icz,0.25991821213909816,-98.87404349165587,-28.905867774987087

2563295_20201_2_0,r8zoon4icz,2.1620702025004817,-74.6516960706287,-38.651427431271614

2121299_20201_2_0,r9rhmo4icz,-4.510249299475774,-98.50812007045522,-12.78816539936426

4645712_20201_2_0,r9teeo4icz,-1.409784239322701,-59.55581586287727,-33.6006859882189

3629310_20201_2_0,r9wy8n4icz,-2.8827003533847653,-119.50213631473565,-30.323604389934772

3008575_20201_2_0,razcso4icz,-6.79078833005126,-66.26932971039133,-4.709342514335873

3558036_20201_2_0,rb9mjn4icz,-3.589216863475959,-116.20052097133325,-20.827208125817208

2287889_20201_2_0,rbbqen4icz,2.827552221493438,-100.71819472864917,-43.7107383126565

1220920_20201_2_0,rblbwn4icz,-1.7905856642567834,-116.98094986793927,-36.288624923366996

3740927_20201_2_0,rcouep4icz,-0.2963063755701035,-90.24772686040944,-41.10728733474127

2041774_20201_2_0,rcrmtn4icz,2.1078421839531756,-112.3550023663717,-43.85665093266604

4308200_20201_2_0,rcuhio4icz,-0.3829959899432346,-138.08519707128045,-52.68219528368063

5668035_20201_2_0,rcumyn4icz,5.539092610297822,-59.17517931622689,-52.55332075758959

1715128_20201_2_0,rd2vfp4icz,-0.9072281661173922,-57.77445595779045,-27.637384158784855

5680365_20201_2_0,rd8pip4icz,-1.3368562051589679,-82.07424474929252,-18.18131143701416

2570693_20201_2_0,rdkm7o4icz,-0.05851723972676943,-91.25153896513521,-27.719421152698246

5098727_20201_2_0,rdrewn4icz,-0.17526696988804605,-81.94748237270585,-47.42231323735069

3975624_20201_2_0,renabp4icz,6.291781808007754,-52.12427117634138,-67.67817712343616

3085842_20201_2_0,rfj73p4icz,-0.0176414821624674,-76.47237114182963,-32.86608521887008

5325046_20201_2_0,rfmq7p4icz,-1.5247955261152508,-144.85869370346342,-30.071630709040136

2655814_20201_2_0,rg4exo4icz,-2.5929456114452094,-86.27660218679756,-32.52782736939348

2211109_20201_2_0,ri0m3o4icz,-2.954592696549009,-131.38025220272644,-17.893181613819323

3629698_20201_2_0,asc2pn4icz,-2.5011620515510478,-128.06133484038315,-11.182568932040084

1794105_20201_2_0,v7rh7p4icz,1.3879966264256467,-101.83935495836053,-48.40049701842665

2714197_20201_2_0,rivdno4icz,2.441642596081611,-106.17469708254092,-47.795622784189874

2378567_20201_2_0,rj4n0o4icz,0.6222743707679425,-104.95462434410976,-49.04811506371358

3880042_20201_2_0,rjfs5p4icz,-0.760924114350755,-112.19847676214215,-43.67207583022156

5675643_20201_2_0,rjiwqn4icz,0.6173139221318141,-72.01257717413313,-37.68131015023056

3605249_20201_2_0,rl385o4icz,2.8112866745178415,-82.11600863988951,-40.094163505008936

2034405_20201_2_0,rlr7wn4icz,0.5416459931435196,-51.096408136361276,-47.5841367863824

3801135_20201_2_0,rmssbn4icz,8.027747878339511,-95.27956387083549,-88.71112180988466

1576670_20201_2_0,rn48ep4icz,-0.5473048756074187,-95.82881189630581,-46.72769063300465

2402972_20201_2_0,rogxwo4icz,-1.188470411383401,-123.03741121071573,-43.63221124877816

4321588_20201_2_0,ronefo4icz,0.706462435363386,-70.26483756720671,-32.677460621111734

5762496_20201_2_0,rqc9lo4icz,-0.533873525438157,-84.66649262655878,-35.43318291559561

3568710_20201_2_0,rrapmo4icz,-1.0813622184033642,-109.35414326233365,-36.51736256940988

5523649_20201_2_0,rsuieo4icz,3.790697267627692,-100.18138763063712,-49.52097273456006

3785394_20201_2_0,rtbrho4icz,-5.28117574273041,-123.16516489005735,1.78692156269949

1663966_20201_2_0,rto0ep4icz,4.183573330801164,-39.102969274795385,-61.440691971295905

5435221_20201_2_0,rtpfrn4icz,-0.8167301054364751,-117.15291705877581,-38.44053296584249

2075957_20201_2_0,rtqkln4icz,0.7828553868641596,-106.92508294175053,-45.36944385535325

5084463_20201_2_0,rtvydo4icz,1.5429670948726415,-108.99266474854105,-37.33231157850463

4328138_20201_2_0,ru5snn4icz,-1.6987453764767473,-121.41519906910355,-28.958175100886066

2550535_20201_2_0,ru7fcp4icz,2.2329895970844627,-87.48437375313264,-56.224219030013586

3053104_20201_2_0,rwcaon4icz,0.6896140113944773,-128.89685304531494,-35.94661466400338

4054472_20201_2_0,rz7zuo4icz,-1.426461931622481,-93.031668282037,-21.78710000334928

1610192_20201_2_0,rzst3p4icz,1.5124610884140466,-51.10912089021136,-38.2253124534017

3436774_20201_2_0,s07hhp4icz,1.802625685265574,-67.74969452030825,-47.7959938046821

1870781_20201_2_0,s0lbtn4icz,1.486530809099033,-96.39399904069842,-43.8109827491613

3990662_20201_2_0,s0xv0o4icz,1.0722413994850186,-83.15752831071237,-50.081723910062806

2545492_20201_2_0,s0ygzo4icz,2.848033388678292,-128.87991342773074,-41.86901506423695

5215922_20201_2_0,s1sxeo4icz,-2.979935865531141,-45.65639570498573,-28.711717290235867

4570979_20201_2_0,s29d7o4icz,1.2131786829782467,-133.9324409506451,-51.87479887506602

5386370_20201_2_0,s2ac0p4icz,5.674539688485713,-66.32771172548385,-52.53825554149755

1306137_20201_2_0,s482lo4icz,1.1476819541430312,-82.77689030728723,-70.64882534442502

1691903_20201_2_0,s50msn4icz,0.8893918302655234,-111.08385871524109,-41.66464413055836

3759846_20201_2_0,s55i1o4icz,-6.507628590334817,-97.77417575648411,1.5587376157226345

2743078_20201_2_0,s57nvo4icz,-2.1421654436865327,-129.69375148802928,-58.466295461617904

2300146_20201_2_0,s59bzo4icz,-1.2817196775591237,-31.32316436029123,-32.27666087020461

1534556_20201_2_0,s5blvn4icz,-2.295956209855726,-56.39592324196167,-24.441785821447283

1343301_20201_2_0,s5e9pn4icz,-30.32459184727623,-105.49670589907959,151.83985659134294

3552441_20201_2_0,s5ybon4icz,-0.8169048768453547,-80.55526570903649,-27.09052632606661

1639467_20201_2_0,s62pxn4icz,0.09877512670766195,-70.26520477338514,-53.43879020298091

5772231_20201_2_0,s7sd9o4icz,6.853814286221217,-135.50799183992825,150.1423514864788

5273751_20201_2_0,i2ct4p4icz,-0.9228337421602186,-82.3744224341863,-29.691332712964126

