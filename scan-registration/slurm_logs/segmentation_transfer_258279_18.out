18 th decile
.90
.95
/users/rhydian/anaconda3/envs/torch_env/lib/python3.7/site-packages/torch/cuda/__init__.py:52: UserWarning: CUDA initialization: Found no NVIDIA driver on your system. Please check that you have an NVIDIA GPU and installed a driver from http://www.nvidia.com/Download/index.aspx (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729006826/work/c10/cuda/CUDAFunctions.cpp:100.)
  return torch._C._cuda_getDeviceCount() > 0
  0%|          | 0/811 [00:00<?, ?it/s]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  0%|          | 1/811 [00:02<33:08,  2.46s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  0%|          | 2/811 [00:04<30:23,  2.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  0%|          | 3/811 [00:05<28:00,  2.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  0%|          | 4/811 [00:07<26:42,  1.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 5/811 [00:09<25:03,  1.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 6/811 [00:11<24:51,  1.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 7/811 [00:12<24:40,  1.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 8/811 [00:14<22:09,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 9/811 [00:15<21:06,  1.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 10/811 [00:16<20:20,  1.52s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|▏         | 11/811 [00:20<28:17,  2.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|▏         | 12/811 [00:21<25:02,  1.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 13/811 [00:24<26:31,  1.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 14/811 [00:25<23:36,  1.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 15/811 [00:26<21:32,  1.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 16/811 [00:27<20:37,  1.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 17/811 [00:29<20:06,  1.52s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 18/811 [00:30<19:01,  1.44s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 19/811 [00:31<18:26,  1.40s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 20/811 [00:33<18:09,  1.38s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 21/811 [00:34<18:44,  1.42s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 22/811 [00:36<19:58,  1.52s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 23/811 [00:38<20:03,  1.53s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 24/811 [00:39<19:21,  1.48s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 25/811 [00:40<18:19,  1.40s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 26/811 [00:42<18:30,  1.42s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 27/811 [00:44<21:21,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 28/811 [00:45<20:34,  1.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▎         | 29/811 [00:47<19:36,  1.50s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▎         | 30/811 [00:49<23:02,  1.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 31/811 [00:50<21:39,  1.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 32/811 [00:52<22:09,  1.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 33/811 [00:54<21:18,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 34/811 [00:57<26:47,  2.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 35/811 [01:02<38:33,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 36/811 [01:03<33:04,  2.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▍         | 37/811 [01:05<28:53,  2.24s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▍         | 38/811 [01:06<25:33,  1.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▍         | 39/811 [01:08<25:11,  1.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▍         | 40/811 [01:10<22:44,  1.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▌         | 41/811 [01:11<21:31,  1.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▌         | 42/811 [01:12<20:19,  1.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▌         | 43/811 [01:14<19:52,  1.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▌         | 44/811 [01:15<19:58,  1.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 45/811 [01:19<26:14,  2.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 46/811 [01:20<24:12,  1.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 47/811 [01:22<23:26,  1.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 48/811 [01:23<21:39,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 49/811 [01:25<20:31,  1.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 50/811 [01:27<24:40,  1.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▋         | 51/811 [01:29<22:49,  1.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▋         | 52/811 [01:30<21:25,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 53/811 [01:32<20:06,  1.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 54/811 [01:33<20:45,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 55/811 [01:35<19:22,  1.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 56/811 [01:36<18:41,  1.49s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 57/811 [01:38<20:01,  1.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 58/811 [01:39<19:21,  1.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 59/811 [01:41<18:45,  1.50s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 60/811 [01:42<18:58,  1.52s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 61/811 [01:44<19:26,  1.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 62/811 [01:45<19:24,  1.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 63/811 [01:47<19:47,  1.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 64/811 [01:49<19:36,  1.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 65/811 [01:50<20:06,  1.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 66/811 [01:53<22:07,  1.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 67/811 [01:54<22:12,  1.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 68/811 [01:56<21:37,  1.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▊         | 69/811 [01:58<24:00,  1.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▊         | 70/811 [02:00<21:47,  1.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 71/811 [02:01<20:14,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 72/811 [02:04<23:42,  1.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 73/811 [02:05<21:30,  1.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 74/811 [02:06<19:59,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 75/811 [02:08<19:24,  1.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 76/811 [02:09<18:47,  1.53s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 77/811 [02:11<20:23,  1.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|▉         | 78/811 [02:13<21:36,  1.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|▉         | 79/811 [02:15<20:19,  1.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|▉         | 80/811 [02:16<19:39,  1.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|▉         | 81/811 [02:18<19:06,  1.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|█         | 82/811 [02:19<18:57,  1.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|█         | 83/811 [02:21<20:07,  1.66s/it] 10%|█         | 84/811 [02:23<21:34,  1.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|█         | 85/811 [02:25<20:21,  1.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 86/811 [02:26<18:55,  1.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 87/811 [02:28<21:39,  1.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 88/811 [02:30<20:14,  1.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 89/811 [02:31<18:34,  1.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 90/811 [02:32<18:05,  1.51s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 91/811 [02:34<18:31,  1.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█▏        | 92/811 [02:36<19:05,  1.59s/it] 11%|█▏        | 93/811 [02:37<19:22,  1.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 94/811 [02:39<18:48,  1.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 95/811 [02:41<19:28,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 96/811 [02:42<19:58,  1.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 97/811 [02:44<18:58,  1.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 98/811 [02:45<17:29,  1.47s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 99/811 [02:46<17:31,  1.48s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 100/811 [02:48<17:39,  1.49s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 101/811 [02:49<17:31,  1.48s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 102/811 [02:51<17:01,  1.44s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 103/811 [02:53<19:06,  1.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 104/811 [02:54<19:17,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 105/811 [02:56<18:33,  1.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 106/811 [02:59<22:30,  1.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 107/811 [03:01<24:15,  2.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 108/811 [03:03<24:06,  2.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 109/811 [03:05<22:23,  1.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▎        | 110/811 [03:06<20:05,  1.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▎        | 111/811 [03:08<19:54,  1.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 112/811 [03:09<19:24,  1.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 113/811 [03:11<19:17,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 114/811 [03:14<23:14,  2.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 115/811 [03:16<24:09,  2.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 116/811 [03:19<27:24,  2.37s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 117/811 [03:20<23:49,  2.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▍        | 118/811 [03:22<22:13,  1.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▍        | 119/811 [03:23<20:23,  1.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▍        | 120/811 [03:25<18:42,  1.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▍        | 121/811 [03:26<19:06,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▌        | 122/811 [03:28<19:44,  1.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▌        | 123/811 [03:29<18:12,  1.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▌        | 124/811 [03:31<17:06,  1.49s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▌        | 125/811 [03:33<20:10,  1.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 126/811 [03:35<19:10,  1.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 127/811 [03:37<20:28,  1.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 128/811 [03:39<21:16,  1.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 129/811 [03:41<22:13,  1.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 130/811 [03:43<22:33,  1.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 131/811 [03:45<21:48,  1.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▋        | 132/811 [03:46<20:27,  1.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▋        | 133/811 [03:49<22:14,  1.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 134/811 [03:50<20:25,  1.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 135/811 [03:51<19:04,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 136/811 [03:53<17:44,  1.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 137/811 [03:54<16:51,  1.50s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 138/811 [03:55<16:44,  1.49s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 139/811 [03:57<17:53,  1.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 140/811 [03:59<17:21,  1.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 141/811 [04:00<16:53,  1.51s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 142/811 [04:01<15:58,  1.43s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 143/811 [04:03<16:27,  1.48s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 144/811 [04:05<17:05,  1.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 145/811 [04:06<16:38,  1.50s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 146/811 [04:08<17:10,  1.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 147/811 [04:09<16:19,  1.48s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 148/811 [04:11<16:14,  1.47s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 149/811 [04:12<16:29,  1.50s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 150/811 [04:14<16:25,  1.49s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▊        | 151/811 [04:16<18:30,  1.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▊        | 152/811 [04:18<19:46,  1.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 153/811 [04:20<21:08,  1.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 154/811 [04:21<18:53,  1.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 155/811 [04:23<18:42,  1.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 156/811 [04:24<17:52,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 157/811 [04:26<17:58,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 158/811 [04:28<18:52,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|█▉        | 159/811 [04:30<18:38,  1.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|█▉        | 160/811 [04:31<17:47,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|█▉        | 161/811 [04:33<17:36,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|█▉        | 162/811 [04:35<18:12,  1.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|██        | 163/811 [04:37<19:25,  1.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|██        | 164/811 [04:38<19:15,  1.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|██        | 165/811 [04:40<18:32,  1.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|██        | 166/811 [04:41<17:47,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 167/811 [04:44<19:50,  1.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 168/811 [04:46<20:08,  1.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 169/811 [04:48<20:12,  1.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 170/811 [04:49<19:38,  1.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 171/811 [04:51<18:35,  1.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 172/811 [04:53<18:21,  1.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██▏       | 173/811 [04:54<18:38,  1.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██▏       | 174/811 [04:56<17:45,  1.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 175/811 [04:57<17:18,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 176/811 [04:59<17:00,  1.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 177/811 [05:00<16:51,  1.60s/it] 22%|██▏       | 178/811 [05:02<16:36,  1.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 179/811 [05:04<16:28,  1.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 180/811 [05:05<16:11,  1.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 181/811 [05:07<17:00,  1.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 182/811 [05:09<17:18,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 183/811 [05:10<16:31,  1.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 184/811 [05:12<17:40,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 185/811 [05:14<17:29,  1.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 186/811 [05:15<16:52,  1.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 187/811 [05:17<17:05,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 188/811 [05:19<18:26,  1.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 189/811 [05:20<17:47,  1.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 190/811 [05:22<17:40,  1.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▎       | 191/811 [05:27<26:33,  2.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▎       | 192/811 [05:28<22:40,  2.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 193/811 [05:30<20:53,  2.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 194/811 [05:31<19:53,  1.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 195/811 [05:33<18:26,  1.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 196/811 [05:34<17:29,  1.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 197/811 [05:36<17:14,  1.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 198/811 [05:38<17:32,  1.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▍       | 199/811 [05:40<19:45,  1.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▍       | 200/811 [05:42<18:53,  1.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▍       | 201/811 [05:44<19:00,  1.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▍       | 202/811 [05:45<17:35,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▌       | 203/811 [05:47<17:44,  1.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▌       | 204/811 [05:50<22:00,  2.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▌       | 205/811 [05:52<20:10,  2.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▌       | 206/811 [05:53<19:02,  1.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 207/811 [05:55<18:03,  1.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 208/811 [05:57<17:48,  1.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 209/811 [05:59<18:08,  1.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 210/811 [06:01<19:16,  1.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 211/811 [06:03<19:14,  1.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 212/811 [06:04<17:55,  1.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▋       | 213/811 [06:06<17:27,  1.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▋       | 214/811 [06:08<18:16,  1.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 215/811 [06:10<18:53,  1.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 216/811 [06:12<18:27,  1.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 217/811 [06:14<19:03,  1.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 218/811 [06:16<19:03,  1.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 219/811 [06:17<17:29,  1.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 220/811 [06:19<18:38,  1.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 221/811 [06:21<17:53,  1.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 222/811 [06:23<18:14,  1.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 223/811 [06:25<17:43,  1.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 224/811 [06:26<17:55,  1.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 225/811 [06:28<17:17,  1.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 226/811 [06:30<16:45,  1.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 227/811 [06:31<16:54,  1.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 228/811 [06:33<16:02,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 229/811 [06:35<16:08,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 230/811 [06:36<15:45,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 231/811 [06:38<16:03,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▊       | 232/811 [06:39<15:52,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▊       | 233/811 [06:41<16:16,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 234/811 [06:43<15:49,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 235/811 [06:45<16:17,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 236/811 [06:46<15:48,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 237/811 [06:48<15:09,  1.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 238/811 [06:50<16:10,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 239/811 [06:51<16:27,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|██▉       | 240/811 [06:53<16:11,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|██▉       | 241/811 [06:55<17:04,  1.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|██▉       | 242/811 [06:57<16:56,  1.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|██▉       | 243/811 [06:58<16:34,  1.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|███       | 244/811 [07:09<40:45,  4.31s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|███       | 245/811 [07:10<33:16,  3.53s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|███       | 246/811 [07:13<31:35,  3.36s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|███       | 247/811 [07:15<27:10,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 248/811 [07:17<23:18,  2.48s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 249/811 [07:18<21:01,  2.24s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 250/811 [07:20<20:28,  2.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 251/811 [07:22<18:57,  2.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 252/811 [07:24<17:49,  1.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 253/811 [07:26<17:20,  1.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███▏      | 254/811 [07:27<16:29,  1.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███▏      | 255/811 [07:29<16:19,  1.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 256/811 [07:30<15:59,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 257/811 [07:32<15:48,  1.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 258/811 [07:33<13:58,  1.52s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 259/811 [07:35<13:51,  1.51s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 260/811 [07:36<14:07,  1.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 261/811 [07:38<13:56,  1.52s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 262/811 [07:40<16:36,  1.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 263/811 [07:43<17:59,  1.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 264/811 [07:45<18:34,  2.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 265/811 [07:46<17:12,  1.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 266/811 [07:48<17:00,  1.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 267/811 [07:50<17:04,  1.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 268/811 [07:52<16:44,  1.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 269/811 [07:54<17:22,  1.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 270/811 [07:56<16:48,  1.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 271/811 [07:58<18:20,  2.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▎      | 272/811 [08:00<17:57,  2.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▎      | 273/811 [08:02<16:34,  1.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 274/811 [08:03<16:18,  1.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 275/811 [08:05<15:34,  1.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 276/811 [08:07<17:32,  1.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 277/811 [08:10<18:10,  2.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 278/811 [08:11<17:03,  1.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 279/811 [08:14<19:47,  2.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▍      | 280/811 [08:16<18:13,  2.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▍      | 281/811 [08:18<19:19,  2.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▍      | 282/811 [08:20<17:34,  1.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▍      | 283/811 [08:21<16:23,  1.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▌      | 284/811 [08:23<15:30,  1.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▌      | 285/811 [08:24<14:52,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▌      | 286/811 [08:27<15:42,  1.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▌      | 287/811 [08:28<15:31,  1.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 288/811 [08:30<15:16,  1.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 289/811 [08:32<16:47,  1.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 290/811 [08:35<17:53,  2.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 291/811 [08:37<17:22,  2.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 292/811 [08:38<16:47,  1.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 293/811 [08:40<16:06,  1.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▋      | 294/811 [08:41<14:53,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▋      | 295/811 [08:44<16:21,  1.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▋      | 296/811 [08:47<20:36,  2.40s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 297/811 [08:49<18:19,  2.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 298/811 [08:51<17:07,  2.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 299/811 [08:52<15:56,  1.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 300/811 [08:54<14:51,  1.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 301/811 [08:55<14:20,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 302/811 [08:57<13:53,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 303/811 [08:58<13:28,  1.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 304/811 [09:00<13:02,  1.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 305/811 [09:01<13:17,  1.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 306/811 [09:03<13:07,  1.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 307/811 [09:04<12:33,  1.49s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 308/811 [09:06<12:48,  1.53s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 309/811 [09:08<13:53,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 310/811 [09:09<13:43,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 311/811 [09:11<13:29,  1.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 312/811 [09:13<15:12,  1.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▊      | 313/811 [09:15<16:11,  1.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▊      | 314/811 [09:17<16:03,  1.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 315/811 [09:25<31:09,  3.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 316/811 [09:27<25:42,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 317/811 [09:29<24:01,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 318/811 [09:32<22:51,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 319/811 [09:34<20:21,  2.48s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 320/811 [09:35<18:06,  2.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|███▉      | 321/811 [09:37<17:22,  2.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|███▉      | 322/811 [09:39<16:03,  1.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|███▉      | 323/811 [09:40<15:06,  1.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|███▉      | 324/811 [09:42<15:30,  1.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|████      | 325/811 [09:44<14:28,  1.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|████      | 326/811 [09:46<14:41,  1.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|████      | 327/811 [09:47<14:04,  1.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|████      | 328/811 [09:49<13:39,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 329/811 [09:51<13:58,  1.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 330/811 [09:52<14:04,  1.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 331/811 [09:54<13:38,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 332/811 [09:56<13:15,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 333/811 [09:57<13:29,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 334/811 [09:59<13:27,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████▏     | 335/811 [10:02<15:53,  2.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████▏     | 336/811 [10:04<15:21,  1.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 337/811 [10:08<21:03,  2.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 338/811 [10:09<18:08,  2.30s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 339/811 [10:11<16:40,  2.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 340/811 [10:15<20:09,  2.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 341/811 [10:16<17:56,  2.29s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 342/811 [10:18<16:30,  2.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 343/811 [10:20<15:24,  1.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 344/811 [10:21<14:35,  1.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 345/811 [10:23<13:55,  1.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 346/811 [10:25<13:32,  1.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 347/811 [10:26<13:21,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 348/811 [10:28<13:06,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 349/811 [10:29<12:37,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 350/811 [10:32<14:11,  1.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 351/811 [10:34<14:33,  1.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 352/811 [10:35<13:42,  1.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▎     | 353/811 [10:37<13:16,  1.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▎     | 354/811 [10:38<12:37,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 355/811 [10:40<12:17,  1.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 356/811 [10:41<11:58,  1.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 357/811 [10:43<11:41,  1.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 358/811 [10:44<11:40,  1.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 359/811 [10:46<11:45,  1.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 360/811 [10:48<11:46,  1.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▍     | 361/811 [10:49<11:34,  1.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▍     | 362/811 [10:51<11:31,  1.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▍     | 363/811 [10:52<11:38,  1.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▍     | 364/811 [10:54<11:43,  1.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▌     | 365/811 [10:56<12:35,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▌     | 366/811 [10:57<12:06,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▌     | 367/811 [10:59<12:01,  1.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▌     | 368/811 [11:01<12:31,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▌     | 369/811 [11:02<12:22,  1.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 370/811 [11:04<13:09,  1.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 371/811 [11:06<12:52,  1.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Trying to load from /users/rhydian/self-supervised-project/model_weights/SSECEncodersBothBoth
==> Resuming model trained for 106 epochs...
Trying to load from ../model_weights/angle_regressor4
==> Resuming model trained for 7 epochs...
5133535_20201_2_0,wdtyfn4icz,-0.6337783902696952,-104.5103265661092,-43.26500686934574

2251401_20201_2_0,wdz3wn4icz,-2.8504910809595616,-133.76688637029164,-24.34460713707051

4824649_20201_2_0,we02wn4icz,-6.1186284894581995,-102.20868218996569,-10.636721580813884

3623544_20201_2_0,we30jp4icz,3.9039198319389423,-91.86117446765925,-66.62556262727438

3614886_20201_2_0,we7d8p4icz,0.24051052066979475,-87.98093123397416,-37.412133503674795

1808874_20201_2_0,we7rip4icz,-6.09095109872403,-123.89475748085638,-13.36067422347314

1621326_20201_2_0,wedjrn4icz,-0.246716640926287,-117.80157475212701,-34.22101784194976

5286063_20201_2_0,wek47o4icz,0.11196653345949026,-102.15372972613616,-37.642586973892065

2760947_20201_2_0,wela2p4icz,0.5176094776904078,-118.09331980852204,-45.596850799264985

5303061_20201_2_0,wenhgp4icz,-0.5248474839550169,-97.43628744489592,-46.67543451388764

5689069_20201_2_0,weqkwn4icz,-0.5009892981271279,-92.93627491119227,-11.572042000101703

2255626_20201_2_0,wertzo4icz,-2.73327966720082,-68.90139036913806,-18.996290801315595

3611275_20201_2_0,wespho4icz,4.807136130633562,-69.71646587136388,-43.21577111618177

3699730_20201_2_0,wethio4icz,-0.3153219430269876,-98.53756161988557,-41.797828802979396

1341578_20201_2_0,weysfo4icz,-3.1694045569567946,-102.81261587393624,-14.915276793047113

1386892_20201_2_0,wf310p4icz,3.887032981464453,-69.9111039075595,-69.42243801436457

3883479_20201_2_0,wf6hcp4icz,0.3970624965663577,-87.31652254518883,-38.6858271215108

2765424_20201_2_0,wf6rbo4icz,-1.0594618996257805,-83.74260646952166,-42.77508377403848

4936179_20201_2_0,wfaj3p4icz,0.6345921476633088,-106.97921529117622,-40.72475301149058

4609817_20201_2_0,wfijdo4icz,6.316382835738178,-72.4756162713935,-72.59646090644536

1062113_20201_2_0,wfj89o4icz,0.37593450506820814,-56.64261984325634,-35.5989537904256

3954051_20201_2_0,wfo7go4icz,0.9542214757570938,-85.15360257837196,-41.514614277256754

5999316_20201_2_0,wfpijo4icz,21.616188899731668,76.71555289322455,-148.35527521282944

3465273_20201_2_0,wft07p4icz,0.8500982943594668,-109.79260293667602,-44.01009960761034

4541448_20201_2_0,wfxphp4icz,3.1319254707154247,-129.59804593649423,-40.58745780597974

3878614_20201_2_0,wfylfo4icz,-2.918857954620802,-94.5161507432421,-18.17933874759636

5800089_20201_2_0,wg5vqo4icz,-1.200188945419201,-45.79635549242647,-35.880957427788516

3784566_20201_2_0,wg7qso4icz,1.6542177883455744,-76.78755303979526,-35.044440413758466

4423618_20201_2_0,wg843p4icz,5.318090186723759,-50.7204503042455,-44.20072948408358

2047141_20201_2_0,wgc0lo4icz,-1.160961739617671,-115.70431346269515,-24.770509135954114

3021999_20201_2_0,wgrvln4icz,-1.5875669666030534,-100.74919288192507,-27.2212650866622

2974465_20201_2_0,wgt44p4icz,-2.988160061166295,-87.37430989127839,-18.289394402470975

1583754_20201_2_0,wgtdio4icz,2.4692356820642276,-99.24409307018473,-50.09886388601065

3201002_20201_2_0,wgwcwn4icz,0.21747432142614162,-102.07930195899235,-26.02069664959197

1779413_20201_2_0,wgy6qn4icz,3.217977348695854,-107.9893780030576,-66.36607191017568

3628164_20201_2_0,wh074p4icz,-2.558493941147117,-95.70710979533118,-16.593633317677813

2764037_20201_2_0,wh0abn4icz,-2.8942968318804283,-107.43788504966611,-16.03777011791088

5840564_20201_2_0,wh2sjp4icz,-0.4292363107681602,-106.1618520915984,-34.90276182749059

5025599_20201_2_0,wh4ben4icz,1.2532528458413161,-93.86482552101168,-49.02749491801539

5392680_20201_2_0,wh5exn4icz,-0.947698108113482,-75.23762956610977,-37.465162114508075

3176110_20201_2_0,wh9drn4icz,-3.1264834417006417,-91.60461891813682,-42.258828972807606

2707371_20201_2_0,wha8bp4icz,2.121071646254024,-124.02792448656197,-59.2523318540773

2677808_20201_2_0,whh1fp4icz,0.48910562527267065,-100.99062249776512,-24.071503207250515

5945236_20201_2_0,whm93p4icz,0.7589281459946515,-90.5232733867586,-39.96769727327964

1453880_20201_2_0,whmquo4icz,0.5709165208178103,-83.55776254112556,-37.8135019970461

2245514_20201_2_0,who6mn4icz,1.3456149690989203,-76.06230251629967,-38.22051101675552

3760801_20201_2_0,whqzin4icz,-1.9144933152715158,-91.37649418464065,-42.115170291346814

1182779_20201_2_0,b45d3o4icz,6.000153434095506,-36.764508639151074,-57.05930658343932

3541759_20201_2_0,wi74tn4icz,-0.9473446126397395,-72.45899358126385,-15.299653882144838

3068257_20201_2_0,wi9sgp4icz,2.9129207340241656,-59.44158944747255,-45.411414404766006

5808237_20201_2_0,wib8ko4icz,-1.3145960498892006,-104.54565810997764,-28.410712889322838

5836162_20201_2_0,wib8wo4icz,1.6083066836911561,-62.17061759040169,-63.613857114713525

3682120_20201_2_0,wiigvo4icz,1.9891918211795792,-65.00527125478587,-40.91036706345301

5798788_20201_2_0,wimnvn4icz,-0.5582374021839619,-75.48817245360485,-21.711593307909197

2670376_20201_2_0,wipvrn4icz,-0.25045470326830455,-99.77874331321638,-42.57375529542847

3480101_20201_2_0,wipxrn4icz,-0.3073763139003632,-147.72283662647544,-29.084640186670242

3679068_20201_2_0,wj1jap4icz,-2.7849679036633717,-103.77180913265212,-19.88725063083625

1036674_20201_2_0,wj510p4icz,-0.8815710377498828,-68.7506618182407,-23.122962343467336

3914300_20201_2_0,wj810p4icz,0.42933194734802416,-119.07223547423001,-32.409163332110765

2694775_20201_2_0,wjbflo4icz,0.9971150687615246,-71.04891817193604,-36.4910306973709

1108709_20201_2_0,wjenxn4icz,1.6488787659362956,-101.41116991822167,-37.10855394433386

1901531_20201_2_0,wjfpvn4icz,1.5548336088053754,-108.76263352798492,-38.23695878523726

2824616_20201_2_0,wjlduo4icz,-1.2656328235488483,-91.91184282471835,-26.890230690507835

3687814_20201_2_0,wjlglo4icz,2.445712349007417,-86.57805325106034,-54.43680044645045

2056360_20201_2_0,wjp6qn4icz,-4.57520067852181,-108.1537091273378,-14.14886191696634

2778108_20201_2_0,07t5jp4icz,-0.2747878335058152,-72.58412446713686,-43.403180856713064

5819333_20201_2_0,wjw3gn4icz,3.6147048379787514,-61.51680173771206,-67.00564055820465

1427768_20201_2_0,wjxy6p4icz,-0.1190445425404232,-83.91754572736676,-39.67543695881554

3060655_20201_2_0,wjyt8p4icz,1.3800812444969381,-129.82012911727497,-57.70270713075281

4671199_20201_2_0,wk1a4o4icz,-3.429833516494042,-125.73019046049322,-3.648089623766026

4709680_20201_2_0,wk4gmo4icz,1.0589994969892342,-92.101400694089,-33.84546557481612

2706360_20201_2_0,wk580p4icz,1.754142293503559,-77.41898885015209,-52.1671411353706

1013013_20201_2_0,wk6pip4icz,-1.8659098642517888,-143.06980524487412,-32.62595706274833

1629983_20201_2_0,wk6tip4icz,-1.3841737636464027,-99.77356710029449,-30.962207399852673

5100076_20201_2_0,wka9co4icz,-1.2587405955765794,-114.74549542959468,-25.867565276658823

5793235_20201_2_0,wkdc0p4icz,1.47703613826095,-96.31317929342757,-36.36242913216323

2257096_20201_2_0,wkdfbn4icz,-0.06760321642943413,-152.9354309015655,-45.97285739200018

4231562_20201_2_0,wki62o4icz,0.42269660147407573,-67.64591062303751,-28.861627960017728

5767942_20201_2_0,wkmveo4icz,-2.0926833229300317,-111.1743196499539,-18.250716037897206

4651624_20201_2_0,wkodwo4icz,2.5402540558419053,-58.0042893952251,-46.74494874229924

5390589_20201_2_0,wkqcao4icz,1.5603345938254098,-50.025188873685124,-47.69305517743919

1858568_20201_2_0,wks31p4icz,0.10183253580054934,-101.27020450993658,-46.29106817798349

5166206_20201_2_0,wksfon4icz,-1.3731101871758167,-128.7814091496988,-20.116994653388304

4652840_20201_2_0,wktgen4icz,-150.322662192595,542.4788989788934,176.78227864023705

4692634_20201_2_0,wkyeln4icz,0.19342759104156854,-127.64327744496731,-20.26469860409952

1410844_20201_2_0,wl185p4icz,-1.3819064494222728,-116.75363047551738,-28.222366777264497

4348496_20201_2_0,wl5jdn4icz,2.188366712480702,-64.7015021274544,-64.18786332899658

5299101_20201_2_0,wl9hgp4icz,2.2780760850664294,-96.2303541487048,-57.626288558003864

5300058_20201_2_0,wla1xo4icz,-3.548445606883876,-117.369503636133,-18.342510427495043

3534417_20201_2_0,wlc52p4icz,0.6563742818990054,-16.940216767928973,-45.602852435580076

2103698_20201_2_0,wldm8p4icz,0.11236963653987586,-71.12188779649972,-28.461701880295394

2566927_20201_2_0,wlfvsn4icz,2.3011288973143866,-124.22795797403967,-46.25910086461414

3093782_20201_2_0,wlj2to4icz,-134.47019298300634,538.2326629529343,241.40489998624554

5582302_20201_2_0,wlo0gp4icz,-4.235240543157927,-130.3655626304087,-18.090371278115953

2713036_20201_2_0,wlrgwn4icz,-3.0508601262576507,-112.92482451017429,-4.516182339404622

4207064_20201_2_0,wlu7co4icz,-1.2059892978936706,-86.05399618442556,-52.96137982675069

3353051_20201_2_0,wluhxn4icz,-0.29746933507254864,-102.0615752559784,-34.30522468327737

1231622_20201_2_0,wm0wuo4icz,-1.558695922721696,-86.84525110665606,-34.93639166223085

2745958_20201_2_0,wm7jkn4icz,-3.389257464615304,-73.36905398633354,-29.165548592243695

3455271_20201_2_0,wm7pbp4icz,-1.6028369435103855,-98.07052109264365,-24.29087492993132

4427301_20201_2_0,wmbwvn4icz,-0.7404450222104202,-85.02159526470572,-46.39147901766718

5974145_20201_2_0,wmf7dp4icz,-4.2675431616657304,-102.05367668487938,-22.88165591811918

3230577_20201_2_0,wmmbgn4icz,1.5716854902490969,-63.47545551050402,-48.56646908480303

2912181_20201_2_0,wmneco4icz,-1.542327804194041,-109.89275947000789,-24.119744490579137

3246557_20201_2_0,wmsbuo4icz,1.046687258939045,-72.15457380039632,-59.000837213514174

3117975_20201_2_0,wmvsbo4icz,-0.6050638770126172,-97.31649225517396,-35.32491212687374

2379780_20201_2_0,wmwlln4icz,0.8078345313286156,-106.21001760594683,-32.87151556150579

2381115_20201_2_0,wmymep4icz,-0.8138261961013105,-103.88557294347922,-35.86168765238298

1723264_20201_2_0,wndhyn4icz,-2.697575961300205,-105.7266646921226,-15.378801526631321

5587740_20201_2_0,wnr9tn4icz,2.721222395500584,-73.50498491934803,-42.37655439399589

3419252_20201_2_0,wnvx5p4icz,-0.1169487312775404,-92.52546827553908,-12.094523931870398

2409302_20201_2_0,wo380p4icz,-2.04724178322494,-87.64851665953961,-17.276721051630815

1390395_20201_2_0,wo8x6o4icz,4.174093757307787,-130.19361932702014,-64.0676552765174

3287617_20201_2_0,wokyko4icz,-3.686436851894189,-107.50274259902002,-40.49829369246754

1066637_20201_2_0,wowcxo4icz,0.8207501110816565,-85.63571740022229,-47.03518327786851

1360059_20201_2_0,woyann4icz,33.71663737519919,62.01487867608682,-219.34203942077806

3356164_20201_2_0,wp1i9p4icz,-1.255364771156808,-107.14641759744785,-30.910313088886866

3573024_20201_2_0,wp7lto4icz,-1.3302608382044832,-89.6310711585356,-28.71016216473876

1730895_20201_2_0,wp7ybo4icz,5.529644495456059,-51.230526394475845,-56.52792946761542

2608877_20201_2_0,wpigap4icz,-1.1007685657035,-113.66742032956398,-34.13572623504976

1465109_20201_2_0,wpk8fn4icz,0.8179045055674066,-93.29401212702948,-40.674533698441905

3923612_20201_2_0,wpkmcp4icz,-3.783649137848564,-77.85583096846571,-13.992088754798118

4755229_20201_2_0,wpmoap4icz,-0.10001909037015652,-68.14306251686529,-50.561573479207695

4794962_20201_2_0,wpmxpo4icz,-3.2525729605118143,-73.86348715261124,-7.183789852837847

3488904_20201_2_0,tkz93p4icz,0.8212191718315189,-63.93100890725728,-45.780243302985994

5222140_20201_2_0,wpwd0p4icz,0.32010103660005124,-55.04620246136707,-45.0845056512167

4779884_20201_2_0,wpysdo4icz,1.3546780586507965,-109.57626471469601,-43.307170580727316

2993345_20201_2_0,wpz81o4icz,-1.5750815844383041,-98.00419850677056,-23.796743343573468

2355089_20201_2_0,wq1dap4icz,-1.0796196616899003,-79.54700023542324,-24.11538625165784

5526652_20201_2_0,wq5sgo4icz,-0.2670439904065125,-81.56516171555484,-34.890791868771174

2051272_20201_2_0,wq60hp4icz,0.055827690575083445,-82.44004767803375,-39.09334599036811

3002877_20201_2_0,wqcvvo4icz,18.70565310541564,-10.239320742078831,-121.41556333675993

3489221_20201_2_0,wqf85p4icz,-1.1231718128880217,-66.65044122685029,-40.39045567862705

1376716_20201_2_0,wqh3xo4icz,1.3840554467633326,-93.10294398718986,-48.73643548812623

1223775_20201_2_0,wqldep4icz,1.4841969111710565,-109.28036442747171,-33.679456675537836

1467834_20201_2_0,wqr0rn4icz,-1.6665668875179336,-106.69374471627086,-12.972203503136143

5418395_20201_2_0,wqsa8n4icz,-15.026474716105005,-82.7990755184338,33.19522213370523

3921659_20201_2_0,wqsrun4icz,-0.355304081285677,-61.44676021989483,-45.34318198817695

2981657_20201_2_0,wqunfo4icz,-0.7112484453883737,-103.77950055669282,-31.53079581409588

4698147_20201_2_0,wr0qhp4icz,1.104753476166413,-70.20499500816499,-38.822119266741296

1795594_20201_2_0,wr1nfn4icz,1.0734963800027588,-57.09547242202834,-32.714096446536004

4829486_20201_2_0,wr5x3o4icz,-0.6273325341758064,-65.55429147760486,-43.48513532509136

3273078_20201_2_0,wr86tn4icz,-1.073917643405535,-111.894069601029,-20.43864540239322

2414526_20201_2_0,wr90gn4icz,-1.8400011420271813,-105.41787176084424,-34.887638645290906

2507536_20201_2_0,wra27p4icz,-1.1546144182321105,-99.85717489071826,-48.71746990707149

1381402_20201_2_0,wrd7oo4icz,2.219359822983694,-79.27870479770962,-52.118315468575375

4355129_20201_2_0,wrdp8o4icz,-1.0525592625260332,-117.3303205792331,-56.62948060903008

2566732_20201_2_0,wrdygp4icz,1.8429788484731344,-89.85743445549303,-38.669435793119135

4711728_20201_2_0,wrhl9o4icz,-3.4672435091244957,-90.7337918791267,-5.483225820084627

5775879_20201_2_0,wrqlbp4icz,7.240662022138095,-92.00556308942299,-89.951129122607

4400826_20201_2_0,wrt33p4icz,0.5254797547583361,-84.31033599389434,-31.17718195946422

3630503_20201_2_0,wrtcsn4icz,1.3362216526797412,-69.99304850910903,-39.66444693614689

1335039_20201_2_0,ws3lgo4icz,1.3548275995334795,-110.07189884432037,-41.72460755337882

2056424_20201_2_0,ws3t9p4icz,-1.8689574422709077,-88.45185616068764,-25.788335027618686

2993762_20201_2_0,ws449o4icz,-2.1752732972208735,-89.38018753670713,-22.656324346677266

1778883_20201_2_0,ws61vo4icz,3.688669410689982,-127.65982842463802,-40.85487099669237

5505630_20201_2_0,ws64ep4icz,-1.4869308247762112,-102.26463448659271,-37.40534650083771

1999546_20201_2_0,ws6g0p4icz,0.6886650309596689,-100.22883404554625,-30.62481004183556

4216228_20201_2_0,wsa3xo4icz,-2.683598840614721,-66.03184162106743,-7.572454945370595

2120937_20201_2_0,wsfjbo4icz,0.8511575671759208,-96.20553592608775,-30.38326565654694

4935772_20201_2_0,wsga4p4icz,2.042356596291436,-61.3233130767793,-55.107735151129134

4661883_20201_2_0,wsjxhp4icz,1.0731988093540714,-100.78711422715136,-48.318225049085214

2139083_20201_2_0,wsm8vo4icz,-0.8844704891932729,-91.62731310081654,-22.841112431204166

1317692_20201_2_0,wsr27p4icz,-1.6458408009202599,-82.37015951521627,-10.105628551791938

2314755_20201_2_0,wsrzep4icz,-0.7174078941499261,-73.88809601821671,-35.41835683207583

4053776_20201_2_0,wss2bo4icz,1.7103725270575494,-85.85494559661191,-30.723494097898495

5931080_20201_2_0,wsy9gp4icz,-1.2157602306144715,-127.22725317533462,-46.423729461406126

5933667_20201_2_0,wsyobp4icz,0.6280564591506791,-64.45613292424724,-35.012421697592714

4525435_20201_2_0,wt4ygp4icz,-1.0311516022539622,-100.3603901579059,-50.86991791741208

4874954_20201_2_0,wt59xo4icz,-1.5150725919866073,-66.72169537006994,-37.42745411313423

5931675_20201_2_0,wt6wmn4icz,1.7838795756032029,-65.97247468276026,-51.861694386042615

4361901_20201_2_0,wt9ivo4icz,-2.3915264276117716,-89.84952149573624,-32.01586561901743

3695440_20201_2_0,wtamsn4icz,0.2503119787537185,-87.48575962788834,-56.95373628915905

3355420_20201_2_0,wteo3o4icz,-2.2438975565438835,-97.42255801261501,-23.698701119830503

3333090_20201_2_0,wtgaan4icz,-3.4063132498179978,-122.62719688014633,-24.790796509699106

4632540_20201_2_0,wtigfo4icz,-5.845836444645085,-119.45539753979273,8.187297221265425

3039956_20201_2_0,wtj3fo4icz,0.5308845966516437,-96.55465790047566,-37.5790873034274

4087383_20201_2_0,wtk2yo4icz,4.0765183743241815,-86.14970008048098,-59.01638505571135

5600176_20201_2_0,wtkpxn4icz,-0.12384767948890475,-93.1548875197027,-48.386261018357004

5080488_20201_2_0,wtkxin4icz,12.087403594145181,-58.98361566671102,-110.18980278862526

5901910_20201_2_0,wtlvfp4icz,-6.326353837906881,-104.7480289733852,-5.449234539344701

5019310_20201_2_0,wtnjko4icz,-0.8605096548891202,-79.50188326676249,-37.07915717352353

5353293_20201_2_0,wtnkep4icz,-3.7191489732253955,-129.64869233330978,-13.046224035410745

2453246_20201_2_0,wtnmrn4icz,1.5626135157576497,-95.58023336289332,-46.97901674870552

5327919_20201_2_0,wtss2p4icz,-0.11488292236835695,-88.16953035920181,-31.3901659721937

1889072_20201_2_0,wtzztn4icz,-1.8025834309692854,-91.3157883690973,-36.33166099300861

5140165_20201_2_0,wu1h7o4icz,-0.7652757010050618,-100.56518094714374,-41.198898347545224

1903106_20201_2_0,wu1suo4icz,3.5420737707538197,-81.13714121316036,-47.20179318502122

5430508_20201_2_0,wu22ao4icz,-0.8570274765412116,-93.53053304260328,-33.93489989836007

2976551_20201_2_0,wu4a6n4icz,-1.1576451384248447,-68.58357271680151,-28.654252135600004

5016735_20201_2_0,wu8a0p4icz,4.467590702198052,-75.49638762245488,-63.083761005914596

5826242_20201_2_0,wu9xln4icz,-0.4848791833537235,-114.19204966528474,-35.19826668494915

5624155_20201_2_0,wubm8p4icz,4.4132315620060165,-118.6804514390796,-59.64786234693608

3098022_20201_2_0,wuf53o4icz,-0.7545949462062487,-107.12679505847814,-20.230923358928834

1601291_20201_2_0,wuf6do4icz,-1.353333687432684,-84.32241740109149,-41.68871172071408

2033833_20201_2_0,wuoubo4icz,0.0927140850642223,-114.79211648866351,-35.126021757321766

4494248_20201_2_0,wuov7o4icz,2.491384150994944,-85.80350909422478,-29.716746333776356

1881333_20201_2_0,wup86n4icz,-0.48480026165064855,-96.33319586531752,-41.27883826043245

1739122_20201_2_0,wuqqto4icz,1.6507247315404003,-57.39883350790009,-50.84716669735509

2772687_20201_2_0,wuwo7p4icz,-0.9351854235583765,-99.68901378358055,-18.419347722472196

3375110_20201_2_0,wuz3so4icz,0.4129045009388076,-101.8174225025709,-43.03015515769303

3757890_20201_2_0,wv28kn4icz,0.42919996485633377,-79.3337735881675,-48.81984954235821

3837754_20201_2_0,wv2fjo4icz,1.4592132108748213,-89.29883377778918,-44.20247340503087

1448627_20201_2_0,wys8mo4icz,0.43309862511401265,-114.0304926703551,-47.83305359183481

5959413_20201_2_0,wv536p4icz,-0.633082386106567,-104.53156627316702,-51.86909308367652

4209955_20201_2_0,wv6eio4icz,0.44695351669421607,-65.47705341156691,-19.473944779349026

1976099_20201_2_0,wvb8to4icz,0.6535516754787724,-91.02185516782285,-31.010740671383076

3527195_20201_2_0,wvbbgn4icz,-3.0313381684195173,-125.61069337543586,-22.021180663186158

2570341_20201_2_0,wvd5kp4icz,-1.794182474712722,-68.63025819880073,-26.825671891077988

1635245_20201_2_0,wveh0p4icz,-1.3837397780143186,-99.61960104966778,-20.035632641070876

4492735_20201_2_0,wvjm3p4icz,-0.12458610084902842,-93.99198012346068,-51.14345875299816

3906229_20201_2_0,wvmmco4icz,-2.5943052105240945,-60.439161404967706,-25.42843500152955

1413854_20201_2_0,wvoxpo4icz,2.9773396059822996,-37.82558383587349,-72.7041156836127

4890213_20201_2_0,wvrhdp4icz,-0.5285821627321097,-67.44351125852148,-41.27557918952776

5673959_20201_2_0,ww2ito4icz,-1.4137177106254044,-100.57773409554954,-30.77185495319185

5227240_20201_2_0,ww3qco4icz,1.2510834596113578,-100.93229106579253,-46.16949423453269

1512177_20201_2_0,ww5pan4icz,-0.9251711459863811,-107.09372163245894,-70.43896347517092

2397228_20201_2_0,ww891p4icz,-1.3700630589250236,-95.79693669826719,-34.20689819539838

2599592_20201_2_0,ww9cfo4icz,0.47191229776457,-95.77760990157734,-40.92838960729583

2694139_20201_2_0,wwk8mo4icz,2.772329237099995,-99.82820379129882,-64.69596974686426

4058650_20201_2_0,wwlogn4icz,-2.3482015760710664,-79.95855106553725,-27.152789847706998

1606296_20201_2_0,wwm3xo4icz,-1.551516243058494,-101.17327611637012,-30.130161641621555

1991221_20201_2_0,wwnm0o4icz,2.0972251658534455,-118.60173544545086,-48.6015128587988

2422258_20201_2_0,wwon6o4icz,0.2956590641708701,-83.25924457751452,-53.290901489983625

3840138_20201_2_0,wwrpen4icz,1.3319035331595193,-71.34880653680946,-44.329076095743474

2320291_20201_2_0,wws4go4icz,0.8958737931282809,-89.73425555009104,-17.65184013393676

4964805_20201_2_0,wwsw0p4icz,0.692943979254836,-86.22859240595076,-20.07067516408233

5407292_20201_2_0,wwwnnn4icz,-0.15598423085719054,-63.61168465822777,-40.771842605065046

5413581_20201_2_0,wwz4vo4icz,-0.7255546514886309,-101.50523757862331,-29.222435200729024

2355520_20201_2_0,wwzh6o4icz,1.4260719443156036,-125.53801054315815,-41.666058665457086

4745325_20201_2_0,wx09en4icz,-4.3018163248099235,-80.12279919479192,-36.673045662196586

3978485_20201_2_0,wx0bdp4icz,-0.27087336334701506,-52.053641519558596,-33.837350474019175

1160612_20201_2_0,wx63vn4icz,0.44389294207359664,-101.93063797394484,-51.53663793145114

2825922_20201_2_0,wx81qn4icz,6.346580416793089,-114.56983968394826,-65.58288606183966

1150727_20201_2_0,wx8nfn4icz,1.1729804442081981,-55.717783528177335,-34.7668164552627

3391000_20201_2_0,wxarfn4icz,-0.323549735086293,-78.29467899917276,-30.422438427493034

4632756_20201_2_0,wxaxnn4icz,0.14610277083540998,-88.27774214705718,-40.97774610883137

1847560_20201_2_0,wxju9p4icz,-4.723085329095097,-85.07978660598633,-23.574529331109034

3622881_20201_2_0,wxnafo4icz,1.330062712238405,-96.87885147773625,-31.437004585878114

4615952_20201_2_0,wxnkpo4icz,2.9262782446654674,-67.63020223694406,-51.202289934305384

5135371_20201_2_0,wxptpn4icz,1.7590248388485625,-92.76327350740513,-43.464355450160625

1150393_20201_2_0,wxq6io4icz,0.7530861952012496,-71.55595624315254,-35.563799800161405

5376832_20201_2_0,wxscxo4icz,-1.4146810144806214,-98.82048133830392,-45.03954803447577

5091776_20201_2_0,wxvphp4icz,1.2521207076653473,-59.53099510541415,-44.300247307874855

1418805_20201_2_0,wxwbgp4icz,1.0553924281008855,-87.81577646062951,-43.41569134647793

3760824_20201_2_0,wxzdro4icz,0.2606932299191674,-100.39187676884035,-27.824752549916482

5896473_20201_2_0,wy134p4icz,-2.1096403336002916,-68.63656158178946,-22.230338691184315

2083560_20201_2_0,wy2lrn4icz,-0.48372876886592414,-76.17936015091436,-40.10161716274716

4390182_20201_2_0,wy9umn4icz,-3.3089349447696166,-102.13102768008574,-18.475973858391868

2908241_20201_2_0,wyatdp4icz,2.5717221687082517,-99.46629801277811,-58.17464610324549

2130514_20201_2_0,wybkao4icz,-2.084317171007581,-123.10067018679604,-9.817690994513697

1142081_20201_2_0,wydqgo4icz,-1.5658375317852837,-75.02411249135079,-28.547213095947313

5986614_20201_2_0,wyed3p4icz,-1.6676531790758287,-120.54021005474371,-42.18075087925584

3042050_20201_2_0,wyf19p4icz,0.7191666024795239,-114.44291600941747,-29.194883478749063

4146258_20201_2_0,wygfyn4icz,-0.667065125221493,-86.51598155644308,-34.504522348176664

1114745_20201_2_0,wyhucp4icz,-0.4191847863758667,-90.70452838609037,-49.39874185892839

2250784_20201_2_0,wymdrn4icz,-1.2532358314346126,-91.87864462660744,-51.49270055957983

1448627_20201_2_0,wys8mo4icz,0.43309862511401265,-114.0304926703551,-47.83305359183481

3266566_20201_2_0,wysmyo4icz,0.9782332696059078,-78.87225841541607,-39.09945056236691

1799666_20201_2_0,wyv2fn4icz,0.7310106772705477,-130.95025626337903,-51.05116839829276

2421605_20201_2_0,wywahp4icz,-1.265447235363272,-104.40982353431735,-37.44324117404453

1104075_20201_2_0,wz2vmo4icz,-0.9148265041947156,-98.02788019736943,-51.909121411067105

5650049_20201_2_0,wz3bqo4icz,2.207309096046597,-61.525908791200294,-57.60226598176452

1668948_20201_2_0,wzdkso4icz,-0.2128922843124411,-83.4336031116759,-43.16049508822026

2283416_20201_2_0,wzgaro4icz,2.4687677633109204,-105.30296015554305,-46.664321917636485

2124766_20201_2_0,wzjv8p4icz,0.0940253328094637,-102.89005684747985,-53.10793154360846

5181257_20201_2_0,wzqkjo4icz,-0.25556386563461575,-56.955177914497824,-44.50588285065166

3342642_20201_2_0,wzqyao4icz,4.3871087376523334,-86.74570748816353,-54.14353544426841

1669089_20201_2_0,wzr6io4icz,0.6290939064070049,-116.90998109477451,-46.595058412312284

5358367_20201_2_0,wzrkpo4icz,-2.0882126283053495,-108.2750894059705,-24.18009617637793

2897915_20201_2_0,wzrsdo4icz,-0.5043597307390286,-85.57711409696896,-38.861052707038326

4209156_20201_2_0,wzuqdo4icz,1.8595964320695666,-82.4436273871301,-52.35162525177894

1878381_20201_2_0,x08ifo4icz,-0.33401622615992305,-73.51490531833969,-32.60963949962705

5376869_20201_2_0,x08yep4icz,-0.09135499577223608,-120.61522372713335,-38.16681460312128

4998162_20201_2_0,x09o3o4icz,3.0585488300542085,-82.84629321236386,-49.362461122642756

5607172_20201_2_0,x0a4po4icz,-0.13837537807869266,-207.72609536613913,-28.90232626523124

4134012_20201_2_0,x0ayvn4icz,-3.31838506638406,-138.12283346741017,-16.853822336442718

2249956_20201_2_0,x0ggjo4icz,0.742554634789968,-124.09601006045563,-31.352927334781725
 46%|████▌     | 372/811 [11:09<14:48,  2.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 373/811 [11:11<15:12,  2.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 374/811 [11:13<14:46,  2.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 375/811 [11:14<13:40,  1.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▋     | 376/811 [11:16<13:26,  1.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▋     | 377/811 [11:18<13:46,  1.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 378/811 [11:21<16:02,  2.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 379/811 [11:24<16:29,  2.29s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 380/811 [11:26<16:35,  2.31s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 381/811 [11:29<16:57,  2.37s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 382/811 [11:31<16:38,  2.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 383/811 [11:33<17:23,  2.44s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 384/811 [11:35<15:43,  2.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 385/811 [11:37<14:39,  2.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 386/811 [11:38<13:23,  1.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 387/811 [11:40<12:26,  1.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 388/811 [11:42<13:20,  1.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 389/811 [11:43<12:06,  1.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 390/811 [11:45<12:13,  1.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 391/811 [11:47<11:26,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 392/811 [11:48<11:25,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 393/811 [11:50<11:14,  1.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▊     | 394/811 [11:51<10:58,  1.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▊     | 395/811 [11:53<10:57,  1.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 396/811 [11:55<11:26,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 397/811 [11:56<11:20,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 398/811 [12:01<17:06,  2.49s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 399/811 [12:02<15:03,  2.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 400/811 [12:04<14:31,  2.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 401/811 [12:07<15:25,  2.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|████▉     | 402/811 [12:08<13:49,  2.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|████▉     | 403/811 [12:10<13:09,  1.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|████▉     | 404/811 [12:12<12:39,  1.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|████▉     | 405/811 [12:13<11:47,  1.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 406/811 [12:15<11:50,  1.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 407/811 [12:17<12:16,  1.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 408/811 [12:19<12:04,  1.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 409/811 [12:20<11:40,  1.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 410/811 [12:22<12:36,  1.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 411/811 [12:24<11:51,  1.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 412/811 [12:26<11:32,  1.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 413/811 [12:28<11:52,  1.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 414/811 [12:29<11:49,  1.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 415/811 [12:31<11:30,  1.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████▏    | 416/811 [12:33<11:34,  1.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████▏    | 417/811 [12:34<10:51,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 418/811 [12:36<10:41,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 419/811 [12:38<11:21,  1.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 420/811 [12:39<10:56,  1.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 421/811 [12:41<11:46,  1.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 422/811 [12:43<12:03,  1.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 423/811 [12:45<12:16,  1.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 424/811 [12:47<11:39,  1.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 425/811 [12:48<11:08,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 426/811 [12:50<11:06,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 427/811 [12:52<10:36,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 428/811 [12:53<10:46,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 429/811 [12:55<10:41,  1.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 430/811 [12:57<11:59,  1.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 431/811 [12:59<11:36,  1.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 432/811 [13:02<12:40,  2.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 433/811 [13:03<11:33,  1.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▎    | 434/811 [13:05<11:41,  1.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▎    | 435/811 [13:06<10:52,  1.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 436/811 [13:09<12:06,  1.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 437/811 [13:10<11:24,  1.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 438/811 [13:12<11:25,  1.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 439/811 [13:14<10:48,  1.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 440/811 [13:16<10:47,  1.74s/it] 54%|█████▍    | 441/811 [13:17<10:34,  1.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▍    | 442/811 [13:19<10:31,  1.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▍    | 443/811 [13:21<10:45,  1.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▍    | 444/811 [13:22<10:34,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▍    | 445/811 [13:24<10:14,  1.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▍    | 446/811 [13:25<09:43,  1.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▌    | 447/811 [13:27<09:19,  1.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▌    | 448/811 [13:29<10:00,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▌    | 449/811 [13:31<10:44,  1.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▌    | 450/811 [13:33<10:55,  1.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 451/811 [13:35<11:47,  1.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 452/811 [13:37<11:45,  1.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 453/811 [13:39<11:52,  1.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 454/811 [13:40<10:48,  1.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 455/811 [13:42<10:17,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 456/811 [13:47<16:28,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▋    | 457/811 [13:49<14:19,  2.43s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▋    | 458/811 [13:50<12:42,  2.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 459/811 [13:52<11:58,  2.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 460/811 [13:54<11:27,  1.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 461/811 [13:56<11:18,  1.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 462/811 [13:58<12:10,  2.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 463/811 [14:00<11:26,  1.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 464/811 [14:01<10:35,  1.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 465/811 [14:03<10:31,  1.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 466/811 [14:05<10:55,  1.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 467/811 [14:07<10:32,  1.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 468/811 [14:09<11:08,  1.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 469/811 [14:12<12:50,  2.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 470/811 [14:14<12:10,  2.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 471/811 [14:15<10:55,  1.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 472/811 [14:17<09:57,  1.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 473/811 [14:18<09:24,  1.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 474/811 [14:20<10:19,  1.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▊    | 475/811 [14:22<10:09,  1.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▊    | 476/811 [14:24<10:10,  1.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 477/811 [14:26<09:51,  1.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 478/811 [14:29<11:34,  2.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 479/811 [14:30<10:59,  1.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 480/811 [14:32<10:23,  1.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 481/811 [14:34<10:59,  2.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 482/811 [14:37<11:54,  2.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|█████▉    | 483/811 [14:39<11:20,  2.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|█████▉    | 484/811 [14:40<10:48,  1.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|█████▉    | 485/811 [14:42<10:49,  1.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|█████▉    | 486/811 [14:44<10:52,  2.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|██████    | 487/811 [14:46<10:11,  1.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|██████    | 488/811 [14:48<09:45,  1.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|██████    | 489/811 [14:49<09:27,  1.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|██████    | 490/811 [14:51<09:35,  1.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 491/811 [14:54<10:27,  1.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 492/811 [14:56<11:05,  2.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 493/811 [14:59<12:29,  2.36s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 494/811 [15:01<11:22,  2.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 495/811 [15:02<10:08,  1.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 496/811 [15:04<10:09,  1.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████▏   | 497/811 [15:05<09:25,  1.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████▏   | 498/811 [15:07<09:06,  1.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 499/811 [15:09<08:42,  1.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 500/811 [15:10<09:01,  1.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 501/811 [15:13<09:30,  1.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 502/811 [15:14<09:15,  1.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 503/811 [15:16<09:21,  1.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 504/811 [15:20<13:09,  2.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 505/811 [15:25<15:49,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 506/811 [15:27<14:45,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 507/811 [15:29<12:52,  2.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 508/811 [15:30<11:18,  2.24s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 509/811 [15:33<11:07,  2.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 510/811 [15:34<10:15,  2.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 511/811 [15:36<09:23,  1.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 512/811 [15:37<08:48,  1.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 513/811 [15:39<08:28,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 514/811 [15:41<08:49,  1.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▎   | 515/811 [15:42<08:35,  1.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▎   | 516/811 [15:44<08:20,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▎   | 517/811 [15:46<09:17,  1.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 518/811 [15:49<10:00,  2.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 519/811 [15:51<09:48,  2.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 520/811 [15:58<17:45,  3.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 521/811 [16:00<14:37,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 522/811 [16:02<13:39,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 523/811 [16:04<11:44,  2.45s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▍   | 524/811 [16:05<10:28,  2.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▍   | 525/811 [16:07<09:17,  1.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▍   | 526/811 [16:08<08:47,  1.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▍   | 527/811 [16:10<08:13,  1.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▌   | 528/811 [16:12<08:15,  1.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▌   | 529/811 [16:13<07:59,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▌   | 530/811 [16:15<08:33,  1.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▌   | 531/811 [16:17<08:30,  1.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 532/811 [16:19<08:47,  1.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 533/811 [16:22<10:08,  2.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 534/811 [16:24<09:28,  2.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 535/811 [16:25<08:53,  1.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 536/811 [16:27<08:31,  1.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 537/811 [16:30<09:27,  2.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▋   | 538/811 [16:31<08:45,  1.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▋   | 539/811 [16:33<08:43,  1.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 540/811 [16:35<08:54,  1.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 541/811 [16:37<08:27,  1.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 542/811 [16:39<08:00,  1.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 543/811 [16:40<08:00,  1.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 544/811 [16:42<08:30,  1.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 545/811 [16:44<08:11,  1.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 546/811 [16:46<07:52,  1.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 547/811 [16:47<07:39,  1.74s/it] 68%|██████▊   | 548/811 [16:50<08:02,  1.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 549/811 [16:51<08:00,  1.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 550/811 [16:53<07:44,  1.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 551/811 [16:55<07:24,  1.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 552/811 [16:57<07:59,  1.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 553/811 [17:00<09:18,  2.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 554/811 [17:02<08:54,  2.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 555/811 [17:04<08:56,  2.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▊   | 556/811 [17:05<08:13,  1.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▊   | 557/811 [17:07<08:29,  2.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 558/811 [17:09<07:47,  1.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 559/811 [17:10<07:20,  1.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 560/811 [17:12<07:04,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 561/811 [17:13<06:50,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 562/811 [17:16<07:49,  1.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 563/811 [17:20<09:54,  2.40s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|██████▉   | 564/811 [17:21<09:20,  2.27s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|██████▉   | 565/811 [17:23<08:02,  1.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|██████▉   | 566/811 [17:24<07:26,  1.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|██████▉   | 567/811 [17:27<08:11,  2.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|███████   | 568/811 [17:28<07:51,  1.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|███████   | 569/811 [17:30<07:18,  1.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|███████   | 570/811 [17:32<06:57,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|███████   | 571/811 [17:33<06:39,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 572/811 [17:35<06:25,  1.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 573/811 [17:36<06:44,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 574/811 [17:38<06:54,  1.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 575/811 [17:40<06:35,  1.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 576/811 [17:42<07:13,  1.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 577/811 [17:43<06:32,  1.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████▏  | 578/811 [17:45<06:22,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████▏  | 579/811 [17:47<06:49,  1.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 580/811 [17:48<06:33,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 581/811 [17:50<06:14,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 582/811 [17:52<06:11,  1.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 583/811 [17:53<06:13,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 584/811 [17:55<06:18,  1.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 585/811 [17:57<06:14,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 586/811 [18:03<11:27,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 587/811 [18:04<09:39,  2.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 588/811 [18:06<08:52,  2.39s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 589/811 [18:08<08:21,  2.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 590/811 [18:10<08:15,  2.24s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 591/811 [18:13<08:10,  2.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 592/811 [18:15<08:27,  2.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 593/811 [18:17<08:22,  2.30s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 594/811 [18:19<07:54,  2.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 595/811 [18:21<07:43,  2.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 596/811 [18:25<08:53,  2.48s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▎  | 597/811 [18:27<08:19,  2.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▎  | 598/811 [18:29<08:07,  2.29s/it] 74%|███████▍  | 599/811 [18:31<07:55,  2.24s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 600/811 [18:33<07:10,  2.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 601/811 [18:34<06:28,  1.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 602/811 [18:35<06:03,  1.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 603/811 [18:38<07:06,  2.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 604/811 [18:40<06:50,  1.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▍  | 605/811 [18:42<06:28,  1.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▍  | 606/811 [18:44<06:26,  1.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▍  | 607/811 [18:45<06:07,  1.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▍  | 608/811 [18:47<06:09,  1.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▌  | 609/811 [18:49<06:08,  1.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▌  | 610/811 [18:51<06:39,  1.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▌  | 611/811 [18:53<06:33,  1.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▌  | 612/811 [18:55<06:15,  1.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 613/811 [18:57<05:57,  1.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 614/811 [18:58<06:04,  1.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 615/811 [19:00<05:43,  1.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 616/811 [19:02<05:48,  1.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 617/811 [19:04<06:09,  1.90s/it] 76%|███████▌  | 618/811 [19:06<05:56,  1.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▋  | 619/811 [19:08<06:23,  2.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▋  | 620/811 [19:11<06:49,  2.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 621/811 [19:14<07:38,  2.41s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 622/811 [19:15<07:01,  2.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 623/811 [19:17<06:31,  2.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 624/811 [19:20<06:48,  2.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 625/811 [19:22<06:47,  2.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 626/811 [19:24<06:19,  2.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 627/811 [19:26<06:14,  2.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 628/811 [19:27<05:58,  1.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 629/811 [19:29<05:34,  1.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 630/811 [19:31<05:30,  1.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 631/811 [19:32<05:12,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 632/811 [19:35<06:01,  2.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 633/811 [19:39<08:10,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 634/811 [19:41<07:06,  2.41s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 635/811 [19:42<06:14,  2.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 636/811 [19:44<05:43,  1.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▊  | 637/811 [19:46<05:21,  1.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▊  | 638/811 [19:48<05:55,  2.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 639/811 [19:54<08:55,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 640/811 [19:55<07:27,  2.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 641/811 [19:57<06:32,  2.31s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 642/811 [19:58<06:01,  2.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 643/811 [20:00<05:34,  1.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 644/811 [20:02<05:13,  1.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|███████▉  | 645/811 [20:05<06:10,  2.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|███████▉  | 646/811 [20:06<05:25,  1.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|███████▉  | 647/811 [20:08<05:08,  1.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|███████▉  | 648/811 [20:10<04:57,  1.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 649/811 [20:11<04:49,  1.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 650/811 [20:13<04:33,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 651/811 [20:14<04:24,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 652/811 [20:16<04:20,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).

3909697_20201_2_0,x0hc9p4icz,-1.2489172843478658,-63.569857018273495,-36.517185888407525

4949035_20201_2_0,x0i01p4icz,-0.9150948972966712,-82.91447728863011,-39.10021930766763

5866020_20201_2_0,x0lvjp4icz,1.408390422944263,-90.2142583721789,-53.43533464872702

1901540_20201_2_0,x0mfmn4icz,1.9132075462670544,-76.8728209768856,-61.20936248267555

4242477_20201_2_0,x0qp8p4icz,-0.35412807121326034,-140.51105618367853,-26.515053199321727

1879261_20201_2_0,x0uubp4icz,-0.5245076383601479,-93.33860435757325,-34.96828000227245

3668608_20201_2_0,x0ye1p4icz,-4.075672000244214,-118.37335567638064,-14.299882792814572

3043971_20201_2_0,x0yj0p4icz,0.6891422472739844,-83.44627238578741,-39.28320344934008

4183219_20201_2_0,x12exn4icz,-0.7593471668432917,-102.57429234450561,-37.05726329686843

5768308_20201_2_0,x16bln4icz,1.189567385538929,-109.26538880327749,-46.60370869176428

4477833_20201_2_0,x1doyn4icz,2.20936907746616,-94.82641277903835,-33.76016623898241

1557481_20201_2_0,x1jt7n4icz,4.272636324090756,-90.22824328080526,-54.76175704530242

5645828_20201_2_0,x1jx3o4icz,-1.7959213963399292,-94.41430692370966,-24.850378028499463

4846207_20201_2_0,x1rk3o4icz,0.9289457254519512,-120.54988765851732,-42.60452987603104

2828448_20201_2_0,x238gp4icz,-0.8178268715112551,-68.49008417521986,-15.05573366655426

2915749_20201_2_0,x241kp4icz,-0.8071381971905183,-73.6300485221762,-16.597722256761216

3405633_20201_2_0,x28bso4icz,0.009779752933794,-119.58499429864824,-33.74774008501089

1949609_20201_2_0,x2aqeo4icz,-0.7087885497980495,-94.22762379258799,-21.925257323493568

5395959_20201_2_0,x2at2p4icz,-2.3617154624805887,-67.66422290190275,-31.52365808001568

2303704_20201_2_0,x2i56p4icz,4.303376069396209,-73.10397223452603,-72.48055359033458

2970354_20201_2_0,x2kogo4icz,-1.9088068962483626,-78.42442402630522,-39.330713580419925

2064175_20201_2_0,x2lgzo4icz,-4.873640229712911,-161.6178555257143,-5.035340637101228

3222360_20201_2_0,x2mu4o4icz,1.8881980874784716,-50.58671985265184,-47.314015220494014

2712480_20201_2_0,x2t09o4icz,-1.9819019744646649,-75.82159080087337,-10.710604115793501

4412534_20201_2_0,x30szo4icz,0.5261839577910367,-117.41644475535375,-47.917335948262604

3822706_20201_2_0,x35dun4icz,-1.1238378675935934,-88.0845558559657,-38.929759170209735

2570337_20201_2_0,x39oen4icz,-1.8065222490980606,-150.54047206653007,-25.980219419548575

1620510_20201_2_0,x3l9zo4icz,-2.8228531642734493,-80.70619206628913,-29.213496450610037

2573858_20201_2_0,x3nhdo4icz,-1.7103243952112752,-69.18505466372707,-31.454725315056095

1515275_20201_2_0,x3pico4icz,0.5206657911959252,-85.98780880657336,-42.67490918670113

3372136_20201_2_0,x3q7ep4icz,0.8931177457453248,-66.81194032973954,-38.26119613321694

2133520_20201_2_0,x3rjbp4icz,-0.38091347883141147,-109.25942705724742,-14.365432969462901

2775998_20201_2_0,x3rs2p4icz,9.778029212864594,-70.0709842434322,-90.60238008001248

3176016_20201_2_0,x3sgcn4icz,3.731834946538004,-123.0412121561435,-35.24568637438338

1008043_20201_2_0,x3wvjo4icz,4.4508807781697675,-43.95222384714313,-64.83129184578989

1349298_20201_2_0,x3y42p4icz,4.8716111207519965,-70.96245698489977,-59.56562686841998

5066337_20201_2_0,x3yvgo4icz,2.0861213384645008,-118.3355564444816,-43.043512863143604

3081155_20201_2_0,x41xzo4icz,-4.447418923331418,-96.23987465362507,-12.42540704666743

3856506_20201_2_0,x46nvo4icz,0.6025221337048384,-100.67304846325194,-52.86790754001278

3674320_20201_2_0,x497ho4icz,0.8570963108258788,-109.11644221879058,-32.35943053829941

3092672_20201_2_0,x4egmo4icz,1.9229197717222366,-63.29892326738468,-32.226871739125215

4980666_20201_2_0,x4f2po4icz,2.4280505504784786,-96.6711755909833,-52.69350441707374

3085791_20201_2_0,x4g3dp4icz,1.4666372755244115,-65.17521632557387,-55.51462221835614

5040481_20201_2_0,x4i0wn4icz,2.291903285561446,-103.85761140069704,-31.62025162338722

5175090_20201_2_0,x4lako4icz,1.9423991248606927,-64.84554949698179,-35.460424174366594

5642774_20201_2_0,x4pgsn4icz,-0.11759354347676855,-141.9112810138132,-35.494376125370565

4620712_20201_2_0,x4qrso4icz,-3.9744513964346493,-84.80151342672713,-16.442806264458866

1889722_20201_2_0,x4sbgo4icz,0.9832996652186712,-137.0703935474862,-45.96704049681841

3239586_20201_2_0,x4v6ko4icz,0.3364498709936716,-108.09931427883075,-50.94887997781221

3461791_20201_2_0,x4xafo4icz,0.3863816458520794,-98.03423439784513,-40.05506268940127

3078699_20201_2_0,x4yajo4icz,-1.157319270573678,-99.29781671251416,-24.463377322195228

5086677_20201_2_0,x4zlvo4icz,0.9945653274549042,-59.5293892996246,-35.96758665714812

2709598_20201_2_0,x57eko4icz,2.8714740544499917,-100.80968815710193,-58.99434293260667

3054759_20201_2_0,x57rto4icz,0.8901237403276533,-116.2606620460987,-42.635903182390564

5236001_20201_2_0,x5863p4icz,3.5628743207894775,-85.11969041279991,-59.993214563974206

4852530_20201_2_0,x5adln4icz,-0.8008179013559275,-135.47734026376583,-28.365866092685422

1651263_20201_2_0,x5dcqn4icz,0.7150649004678221,-103.3554947742216,-45.0420866279713

3201480_20201_2_0,x5fdeo4icz,-1.2671308151176868,-69.54167123721754,-28.300437618434273

3992090_20201_2_0,6j8nep4icz,-0.3958313527009229,-114.30128674737873,-29.427601996389896

1169532_20201_2_0,x5oobo4icz,-2.392981682954612,-90.92900883270212,-26.789094703371035

5948010_20201_2_0,x5qhtn4icz,1.4911495446321081,-56.90769327120995,-38.42881545968041

4540489_20201_2_0,x5rtjp4icz,1.5577699216619096,-87.58945427502186,-39.91961663579549

3823742_20201_2_0,x5v75p4icz,-0.426571773927155,-78.16088647246457,-41.17689410687707

5972623_20201_2_0,x60tip4icz,-3.693039023282556,-111.83518807091906,-15.358170185867706

3773259_20201_2_0,x6301o4icz,-1.0246319030743987,-77.59807198391675,-21.243722350535663

5764809_20201_2_0,x63hap4icz,-1.770276346883302,-110.16287642719467,-23.944645464882655

4095168_20201_2_0,x668to4icz,1.1168164180999,-60.91904530296807,-39.11149967856514

1567747_20201_2_0,x67vzo4icz,-2.0149287075761664,-115.57317658185315,-18.21316653694977

2188911_20201_2_0,x6cfwo4icz,-0.36930916442792877,-78.90462093261561,-35.11894526089782

4765049_20201_2_0,x6emjp4icz,-0.4134001287448392,-78.0755693770648,-40.95841614234368

3728947_20201_2_0,x6fyep4icz,1.0147171609539978,-75.37491520582302,-36.328341526253325

5878165_20201_2_0,x6opnn4icz,-3.537387543706924,-148.58975895630067,-15.399643772998616

1398509_20201_2_0,x6q2to4icz,-4.575754716730637,-102.7949340684327,5.957224435772687

3909462_20201_2_0,x6qvwo4icz,0.29789099668526203,-80.55612054764191,-38.501871069776286

3335434_20201_2_0,x6r4fo4icz,-1.2283660953372313,-86.93678756248627,-33.785049607793425

1416332_20201_2_0,x6r6ko4icz,-1.191985237857128,-98.70015122335053,-37.15274313342519

5714278_20201_2_0,x6vjmo4icz,-0.7682278013157833,-83.45659181827563,-38.63501378693107

4031264_20201_2_0,x6ysdp4icz,0.421307030488365,-75.82200683131168,-44.46578705533999

2441874_20201_2_0,x701go4icz,-3.7842249436871027,-121.86992877304911,-20.61358606710712

1822266_20201_2_0,x724yo4icz,2.7203721675204675,-59.72683953954987,-45.434242864463215

1966422_20201_2_0,x737ho4icz,0.9337193510149543,-85.06985977053458,-38.70436161469499

3049165_20201_2_0,x73uin4icz,1.794633799080731,-88.64015851359946,-45.669689965186535

4114588_20201_2_0,x76rxo4icz,-0.5461579272921054,-79.28932625154658,-29.94993511289104

2349612_20201_2_0,x7bxao4icz,0.9461870412778131,-93.82086768551702,-47.659538141634926

1517221_20201_2_0,x7cdhp4icz,-0.9604420615600565,-134.33232681744363,-34.936776260241885

2604910_20201_2_0,x7ceao4icz,0.0750196419791202,-82.92226552763577,-34.950868041225505

5729267_20201_2_0,x7cv6p4icz,1.4289390683174283,-77.52864193827725,-44.18038656151066

4378900_20201_2_0,x7dmnn4icz,1.045784055529202,-75.84648474027574,-52.2780388637789

2560124_20201_2_0,x7g1xo4icz,3.073132460342124,-101.12199762003138,-53.31282357397231

2703234_20201_2_0,x7jaoo4icz,1.914081245452838,-100.6807591960013,-46.15010830784884

2001834_20201_2_0,x7jebp4icz,0.383076341383501,-114.22578075022088,-22.95090350548064

2886448_20201_2_0,x7lrjn4icz,1.8193153810290688,-96.67926355690554,-51.29581884603989

1854506_20201_2_0,x7rtwo4icz,-0.2650210594485515,-73.78713292884848,-36.715506893027936

3989843_20201_2_0,x7tsvo4icz,-0.2305688090253724,-118.66983493810645,-47.737539186980584

4616569_20201_2_0,x7u7kn4icz,-1.6669669909635902,-77.42991395991888,-20.964394409879162

4413453_20201_2_0,x7urso4icz,1.205304089680526,-102.09467907180331,-33.56160423922036

4554089_20201_2_0,x7x40p4icz,-0.8991058465048568,-135.4192299269526,-24.499544227167064

4747977_20201_2_0,x7y7cp4icz,-0.3622632484614114,-109.71580393402809,-33.62456365275001

1217062_20201_2_0,x7zsto4icz,-4.05148753762044,-84.80893086773463,-11.269564139151498

1248797_20201_2_0,x825ko4icz,-0.4612380424844247,-106.1940218590426,-39.64527820854455

3612747_20201_2_0,x8l8ro4icz,1.3060176735321687,-66.87997702258082,-46.683028120144414

1426449_20201_2_0,x8niun4icz,3.9364077254984418,-108.13212530576021,-53.25608331382227

1321224_20201_2_0,x8rafp4icz,-2.901068511873332,-173.52102306563893,-22.052500375208552

1959912_20201_2_0,x8v80p4icz,-2.524233574503253,-133.16274205606084,-28.601011430518213

4236295_20201_2_0,x91uwo4icz,-2.4191214532796996,-87.78764492556061,-19.67550494952826

2697510_20201_2_0,x92o3o4icz,1.8945194505927667,-76.74340757563016,-28.441586030281286

3223114_20201_2_0,x94g6o4icz,4.2949395033682345,-59.74686954944633,-49.313816884394186

4692182_20201_2_0,x95dzo4icz,0.003491951266678817,-72.95765673422841,-29.94969634311626

4626129_20201_2_0,x97aep4icz,2.2535998958714516,-62.212401688542315,-23.12824641083708

1661557_20201_2_0,x97lkn4icz,0.339167557862902,-88.49966890897718,-51.55031348631053

5467212_20201_2_0,x9bxwn4icz,-7.014340801507004,-127.41311492920863,-0.8321049599511241

4002472_20201_2_0,x9cz5o4icz,0.030932732309037845,-86.44659690508632,-21.261992934749813

1916806_20201_2_0,x9fdyn4icz,0.49159765196551986,-81.32760130041348,-50.757333382827284

3721532_20201_2_0,x9k0lo4icz,-1.9281429096724148,-71.35504090053223,-31.539475129660644

1091435_20201_2_0,x9krxo4icz,2.2000747300212464,-61.52841125069432,-43.65073896912358

3370893_20201_2_0,x9ledp4icz,0.610551996111233,-85.57711384690927,-57.20769670661268

5595267_20201_2_0,x9m4vn4icz,0.9725555895337544,-75.6622465110388,-37.096025681090424

3904298_20201_2_0,x9mnfo4icz,1.704761071352206,-117.26784656359007,-65.88314568416749

2605296_20201_2_0,x9nb9o4icz,-0.21613107379913757,-77.70126071632612,-41.95181625048019

1378614_20201_2_0,x9sbcp4icz,-0.14044138965713973,-118.50828640048374,-24.32136804978623

4142709_20201_2_0,x9txrn4icz,1.0314181490090781,-129.3678109330402,-36.85955507699009

2030777_20201_2_0,x9wuto4icz,1.5474468067228635,-112.56252386599587,-44.448338975670325

1259117_20201_2_0,xad6gp4icz,0.7909782363091952,-133.1610280651235,-28.89842869583451

4899188_20201_2_0,xaecfo4icz,-3.680059135623256,-118.61734871233583,-22.463070711504912

2675314_20201_2_0,xaeoap4icz,-0.755259296357621,-86.90381214923283,-35.681105409518

4421284_20201_2_0,xaeuto4icz,-0.20505436219538306,-50.78313567599014,-31.91366766172871

3874911_20201_2_0,xar9no4icz,1.752564718735368,-137.14643098514287,-38.22978224003114

5682954_20201_2_0,xarrwn4icz,-3.540841968315243,-124.62409844539974,-28.720086809998875

5618661_20201_2_0,xary2p4icz,3.555174978260736,-83.33186074472053,-69.63342797864671

1462066_20201_2_0,xaywoo4icz,2.3844248126301517,-84.73800926867656,-56.98636583209037

1887592_20201_2_0,xayyun4icz,0.007713748245294631,-94.49332301874483,-53.09696124360181

5237100_20201_2_0,xb2uyo4icz,-0.3178638683781862,-76.17069354589384,-48.77074787025025

2386073_20201_2_0,xb5v6p4icz,-1.8277354442181961,-100.27838733743954,-31.994650318740696

1089181_20201_2_0,xb60wn4icz,-1.9055229055260243,-118.4421621219835,-21.110440530435213

2964434_20201_2_0,xbbvnn4icz,-0.5364207906265122,-105.77894363323344,-24.795307749736764

3323681_20201_2_0,xbjzuo4icz,0.31308112167294155,-108.33895862061195,-27.86332352432565

3132253_20201_2_0,xbs5lo4icz,0.3966659500089314,-92.70457163482928,-52.48139548048839

4979262_20201_2_0,xbupun4icz,0.6909474620160537,-135.207814974481,-36.49775753945667

2657632_20201_2_0,xbwlxn4icz,-1.0758024652252611,-115.97124180697938,-23.082939381330817

3186633_20201_2_0,xbww8n4icz,-0.39552906886844535,-104.72834746577749,-38.858116747628145

2573516_20201_2_0,xbzbin4icz,-0.3069087827733107,-85.76301927109668,-24.346898571308785

2152416_20201_2_0,xbzqgo4icz,52.44537854249233,-122.5995319184999,-117.60284184649544

2204543_20201_2_0,xc2scp4icz,-2.0818753196813846,-112.29458111365696,-20.621105243239256

3822469_20201_2_0,xc3u0o4icz,0.8051974683686567,-73.02281265613698,-41.561359753629034

5361430_20201_2_0,xc42fp4icz,-1.7526710924253488,-131.72508347317708,-23.92251954849361

5712752_20201_2_0,xc6qpo4icz,-0.45680342430720394,-71.22025807421988,-30.38783109745009

1837235_20201_2_0,xcahcp4icz,-2.575629385057914,-82.78421096723534,-22.537581098968687

5465341_20201_2_0,xcgheo4icz,1.3042183245625103,-62.81064703748703,-47.04349655405788

4600140_20201_2_0,xcl27p4icz,4.027033501961807,-93.92654048849485,-43.496210988690535

4708497_20201_2_0,xcleso4icz,1.984687153812626,-60.43570181718604,-43.839351465215245

3962167_20201_2_0,xcq42o4icz,-5.355497128539406,-108.58668840370291,-14.379260819884848

3466839_20201_2_0,xcwz6n4icz,0.664842500376597,-113.85035111180628,-36.99642027328875

3729670_20201_2_0,xczd0p4icz,-1.5696318328814798,-106.6904960692311,-25.216670032946496

1759280_20201_2_0,z6kndp4icz,0.46387615984314284,-88.32522813587047,-55.92997448996903

6010712_20201_2_0,xd52ln4icz,2.6626878900903637,-122.08899654641414,-59.1743932127108

1691202_20201_2_0,xdeizn4icz,-5.918774575775773,-97.84665818365832,26.159372522291207

5974831_20201_2_0,xdhyyo4icz,-1.5351025116432608,-117.8349144574427,-21.80275656557035

3203997_20201_2_0,xdpwgp4icz,-1.1669854023386752,-83.06633772687005,-31.620029749495274

1732129_20201_2_0,xdq7co4icz,-0.41020837822560047,-55.64464291604813,-30.380545903864373

3287557_20201_2_0,xdrdio4icz,0.5448489620870856,-83.1336543993016,-51.91171166430328

5960771_20201_2_0,xdzy1o4icz,0.9575474072016861,-84.58123473666944,-50.58344432545337

4477569_20201_2_0,xe2ijn4icz,0.004191044422066961,-72.6202253440868,-37.31721072595941

1028761_20201_2_0,xe2jmn4icz,101.61905479397947,657.6038212768323,-340.53939217824285

1771563_20201_2_0,xe3i9p4icz,1.0569313117442727,-83.17297255335689,-52.25302245483269

3269336_20201_2_0,xe41xn4icz,-1.3823504844371526,-103.36437618599797,-24.508585354648545

5838531_20201_2_0,xe58ko4icz,-0.5174533368076853,-83.25127719339844,-26.635445645796608

4814388_20201_2_0,xe5l3p4icz,2.515353959471716,-52.59855088396898,-46.51401345668407

1065849_20201_2_0,xe61fo4icz,0.417050548964825,-75.45067622353434,-28.612874529044916

4183603_20201_2_0,xe7vfo4icz,-0.06706896805060096,-93.72548543670348,-39.21583390689828

2132015_20201_2_0,xeaz8p4icz,1.4048162409501417,-127.03279286566686,-44.03273664221868

1178041_20201_2_0,xec93p4icz,-1.9681147409176296,-117.91680002354963,-39.329545817557204

5629984_20201_2_0,xecrjn4icz,0.014412602780198083,-108.93066765766864,-34.309981406161086

5756717_20201_2_0,xedmco4icz,0.22123034241329584,-103.08622758295235,-35.03355117724364

5482698_20201_2_0,xee51o4icz,-1.0980891878891914,-39.671196510248365,-43.37703168598449

1340649_20201_2_0,xei16p4icz,-2.4762574065873384,-68.28415048214373,-12.582557820241504

1820570_20201_2_0,xeiw9p4icz,-0.7128121912947039,-147.26763845984647,-38.491654615220384

2013701_20201_2_0,xej7no4icz,-0.0946801349396186,-39.5829280790646,-50.691018003496424

4169407_20201_2_0,xeky6o4icz,-0.814433344732503,-101.6416879022903,-24.698065819684274

5191491_20201_2_0,xem5ho4icz,-4.144881010688054,-104.52546410074837,-8.612029037422815

5684015_20201_2_0,xepcho4icz,2.2096446714127835,-73.21850128282875,-45.51958944156351

5672216_20201_2_0,xf417p4icz,-1.573389639861991,-64.78115741732034,-31.47373871205967

4156093_20201_2_0,xf8m8o4icz,-1.9957140422267046,-95.85848541157154,-33.81759344548652

1659725_20201_2_0,xfcxso4icz,-2.489560347482707,-83.46015226099911,0.19415486652562208

2555748_20201_2_0,4zsnjo4icz,2.1659930208248506,-71.82302586740241,-51.0745102520068

4577120_20201_2_0,xfiflo4icz,0.4047554079076882,-115.77828214064434,-23.698649713544285

2999322_20201_2_0,xfjj9o4icz,-1.5825570810865317,-129.72847329369912,-34.652443796157854

4239308_20201_2_0,xfk0cp4icz,2.981793388746804,-85.72985741721743,-52.73480633704449

1329331_20201_2_0,xfn93o4icz,0.5755324502441029,-113.54028221582763,-49.640551903307895

3859393_20201_2_0,xfosto4icz,-1.4565595976003196,-51.85226071853333,-19.10296355664103

3387551_20201_2_0,xfu6xo4icz,1.4370634710507602,-79.42512692688999,-50.75121974612901

2849519_20201_2_0,xfyhfo4icz,5.976746874613137,-43.084221517943575,-61.85108325083395

3992822_20201_2_0,xfyrcp4icz,1.1878835636277492,-110.43175929380777,-51.032769851357926

2362940_20201_2_0,xfytzo4icz,0.0743187408541624,-87.75261301996937,-40.332974201979326

3891297_20201_2_0,xg2ncp4icz,0.283305967122706,-125.41850533142559,-49.65749436683177

3534552_20201_2_0,xg2qlo4icz,1.663303728182634,-105.83182964769236,-49.280352270638545

4334230_20201_2_0,xg782o4icz,-2.2184888645360954,-98.31266656630558,-17.23067393285467

3320337_20201_2_0,xga8po4icz,0.8074253092722116,-85.22030993012356,-52.679851293610994

2194727_20201_2_0,xgg7hp4icz,-1.044166724718333,-160.52854770680574,-37.252388499647

2517569_20201_2_0,xghpho4icz,0.2571466660625658,-124.94336100442516,-22.61176709737984

2959638_20201_2_0,xghvfo4icz,-1.5787447818683675,-109.97697368271787,8.951817727269187

3371067_20201_2_0,xgohdo4icz,4.788828652144074,-81.92169541046985,-42.428605735838005

3665231_20201_2_0,xgxi3p4icz,0.2922585164410504,-117.75614095600332,-33.2009116447703

1684607_20201_2_0,xgxq7p4icz,1.8156107491929943,-86.01425566503201,-31.16805280008316

3880835_20201_2_0,xh2etn4icz,-0.24595565046452694,-103.90020762134961,-35.47162335261285

2968152_20201_2_0,xh4ton4icz,1.866952345420664,-72.5103197457405,-47.856551877797244

5703507_20201_2_0,xh5nfn4icz,-3.8756298174639183,-93.72780498712399,-11.269623529498901

4030051_20201_2_0,xh87bp4icz,0.6553536908673272,-83.20726570400305,-42.22524041325951

1604103_20201_2_0,xh90no4icz,-1.4654943715949034,-86.29569527164159,-18.16322517272509

3155470_20201_2_0,xhbw0p4icz,2.08262389156945,-102.30466203661848,-57.02867400602801

1339582_20201_2_0,xhc5qo4icz,0.02477550664356314,-84.10088668800176,-26.347381246086172

4424617_20201_2_0,xhcrvo4icz,-4.617554194274189,-94.28052862501247,-10.154079515180072

2382375_20201_2_0,xhfd3o4icz,-1.1547817781751433,-92.59790173875629,-30.029945954778597

3103762_20201_2_0,xhgtso4icz,-2.7023574806400457,-86.02270619784136,-20.03692193266376

4426048_20201_2_0,xhmskn4icz,-0.03357037175692084,-102.84025678088199,-26.383652672727862

1775880_20201_2_0,xhnq9p4icz,-0.045620315472727345,-107.67676609591402,-36.224985695989574

2200871_20201_2_0,xhov3p4icz,-2.23071354685939,-65.66085100016664,-33.857109612527154

2779077_20201_2_0,xhv1so4icz,3.9816487952395967,-84.32948792327969,-53.13217251937964

4034186_20201_2_0,xhwcln4icz,0.8210422392941337,-74.8198720585014,-52.33242633921829

5223631_20201_2_0,xi298p4icz,-1.0715372858914205,-139.4619852000332,-28.113102890498112

3380964_20201_2_0,xi32cp4icz,0.8023033712285527,-85.1639938629034,-37.5820822910146

4451790_20201_2_0,xi3ngo4icz,0.10008815376741975,-87.74691718311075,-54.15228172854724

1547460_20201_2_0,xi95zo4icz,1.7459203051964929,-119.26038976022227,-23.736384876339315

4255836_20201_2_0,xiakvo4icz,-3.7448345742094338,-61.972596033847765,-19.002737826512885

4898020_20201_2_0,xibbzo4icz,2.4358566653472384,-46.700095561468004,-59.87677558784702

1961726_20201_2_0,xie7co4icz,-0.4830215437042109,-106.80892115201266,-27.27356704621596

1273315_20201_2_0,xiedwn4icz,1.951439438729568,-80.99801010152623,-60.661712818157554

5577454_20201_2_0,xihw2p4icz,-0.023232307357671622,-58.44009141014698,-40.714591339981354

2084672_20201_2_0,xik95o4icz,2.4200760845605593,-118.30643188576582,-41.802467661793955

3105196_20201_2_0,xiknfo4icz,0.954981758988443,-56.532944654616074,-38.17226643615564

2025726_20201_2_0,xilg1o4icz,2.394095594315464,-94.07140649711147,-39.786894496110264

3851935_20201_2_0,xisvso4icz,6.739855697727464,-72.78111257201417,-77.54615067460438

3013565_20201_2_0,xit88o4icz,-1.08386595625077,-104.84813928286732,-35.13299400931771

2144418_20201_2_0,xit9rn4icz,0.4096208719496139,-82.30629994836545,-42.68249932032799

4134647_20201_2_0,xitnao4icz,-0.7572874286376807,-94.97527430492605,-22.38484413559236

2877170_20201_2_0,xiyazo4icz,1.3698159005466903,-44.670694875653226,-39.02676417155807

2920704_20201_2_0,xiyglo4icz,2.219076604766517,-125.0318527480573,-39.92099215570414

5548230_20201_2_0,xiypho4icz,1.1165557683287297,-63.49573028557211,-35.72659043617847

4218115_20201_2_0,xj005o4icz,-11.96246713214062,-152.21714935990798,16.040154999715753

5131014_20201_2_0,xj294p4icz,-1.4643162315412561,-65.32645452125891,-32.0673514409867

4428396_20201_2_0,xj5ltn4icz,-1.312200591666595,-102.92518003248432,-18.803317539055982

1028811_20201_2_0,xjasuo4icz,-0.9227623914172646,-98.68159522575516,-27.257409388641562

2698860_20201_2_0,xjf2yo4icz,1.3121961234450232,-53.753865241108514,-30.936499481326564

1187537_20201_2_0,xjfwvn4icz,-0.03609801604420593,-115.52378377264955,-38.52734413371434

4289166_20201_2_0,xjrlao4icz,-0.6163296984057794,-64.2064887387005,-38.6252652847205

4372664_20201_2_0,xjs2mo4icz,-0.665414216408399,-68.07528631017414,-34.29003456897024

4894204_20201_2_0,xjslho4icz,-1.061694150706726,-91.5379507006254,-25.701858424527956

4785333_20201_2_0,xjt9eo4icz,1.7883774354044577,-69.9504245190935,-42.022468587261386

2777332_20201_2_0,xk4h3p4icz,1.1247973442787098,-44.83467339465807,-48.676144244743455

3056888_20201_2_0,xk6wcp4icz,-1.304471529686474,-126.58712237656081,-43.951506684581176

1799322_20201_2_0,xk79dp4icz,2.5830764315267403,-122.90246327944791,-48.61831781493373

1711645_20201_2_0,xkdjto4icz,-1.7819239160321976,-122.57441143113905,-15.127700373385295

4815883_20201_2_0,xkesin4icz,0.6123634580107602,-104.97240048020473,-45.00108219618956

1136814_20201_2_0,xklo0o4icz,0.27898673476742714,-122.74308979264117,-30.130772660391514

3841990_20201_2_0,xkmgap4icz,-1.5020141690770727,-64.50352201972456,-37.27706137252781

3643162_20201_2_0,xkmghp4icz,-3.686023390012567,-82.66604705805676,-26.70844861390421

5839100_20201_2_0,xkn4bp4icz,-2.97824739674178,-99.76896906555459,-33.92592951806046

3922078_20201_2_0,xkozen4icz,0.281609572854697,-92.69114158434854,-42.35270334823356

3493980_20201_2_0,xkpnfo4icz,2.790922610438475,-120.0089962844927,-53.35061056059256

2462187_20201_2_0,xkui9o4icz,0.16585769482880192,-134.46304991426254,-21.82540487125098

1368810_20201_2_0,xkxx0o4icz,2.0747617578210056,-73.72571059434935,-49.52641471386866

2749302_20201_2_0,xkz7gp4icz,1.8754040229423274,-111.70342375620515,-50.97587863274234

3107999_20201_2_0,xl0oln4icz,-4.457769340044334,-84.90003085155695,-15.131807473566553

1707689_20201_2_0,xl3vto4icz,1.952432951048852,-108.61068571947871,-58.98239068421894

1271516_20201_2_0,xl5sap4icz,3.323630099747433,-68.69238708441071,-45.82184077232699

3604239_20201_2_0,xlbfro4icz,1.2773868883756503,-89.70073606980276,-31.294859126486855

2025196_20201_2_0,xld8bo4icz,-2.772967278931895,-132.9655709199559,-4.2712186927682865

3578125_20201_2_0,xlddtn4icz,-0.46122698033156345,-87.10077600663081,-17.752310283213617

2982848_20201_2_0,xle2io4icz,-3.012581293033333,-74.25639288912231,-13.494154721864746

1447108_20201_2_0,xlfcxn4icz,-2.472395459849607,-136.38188617212944,-10.767780891127543

1676437_20201_2_0,xliean4icz,-23.307380462084,66.26443845348564,408.0393159354106

3286967_20201_2_0,xljfwo4icz,-4.25986501110282,-60.292582541163256,-24.699188651005443

1899514_20201_2_0,xlk1mo4icz,-2.1784916931184943,-49.354671531854706,-23.36938091530631

2039138_20201_2_0,xlkjgp4icz,-1.7716582669391245,-100.8176847209005,-20.962037567683737

4828519_20201_2_0,xlodro4icz,3.3923701555007693,-83.83252596810041,-64.46555942215858

3753813_20201_2_0,xlpb5p4icz,-0.7024376514497555,-88.29251677375726,-40.645598632221365

2236649_20201_2_0,xlq40p4icz,2.681452412957991,-86.49348449982986,-49.448802822004836

4352492_20201_2_0,xlqmeo4icz,-0.9206496989799652,-102.41146330745275,-20.95348563981584

3774238_20201_2_0,xluvso4icz,-0.8346647473423385,-74.53482463961097,-30.12426054034175

4489741_20201_2_0,xlxeao4icz,0.6782139880649082,-96.64730868146816,-33.50404908835115

2407420_20201_2_0,xm05ip4icz,0.18246681825350078,-79.99780950618131,-43.880610386363244

4335417_20201_2_0,xm0icn4icz,2.818072332356699,-90.78581151782629,-57.941701382545176
 81%|████████  | 653/811 [20:17<04:09,  1.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 654/811 [20:20<05:09,  1.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 655/811 [20:22<04:44,  1.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 656/811 [20:27<07:47,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 657/811 [20:29<06:29,  2.53s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 658/811 [20:30<05:38,  2.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████▏ | 659/811 [20:32<05:03,  1.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████▏ | 660/811 [20:34<05:31,  2.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 661/811 [20:36<05:10,  2.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 662/811 [20:38<04:40,  1.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 663/811 [20:39<04:26,  1.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 664/811 [20:41<04:16,  1.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 665/811 [20:42<04:06,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 666/811 [20:44<03:54,  1.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 667/811 [20:46<04:05,  1.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 668/811 [20:48<04:03,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 669/811 [20:49<04:01,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 670/811 [20:51<04:17,  1.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 671/811 [20:53<04:20,  1.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 672/811 [20:56<04:35,  1.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 673/811 [20:57<04:28,  1.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 674/811 [21:00<04:50,  2.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 675/811 [21:02<04:52,  2.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 676/811 [21:04<04:53,  2.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 677/811 [21:07<05:08,  2.30s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▎ | 678/811 [21:09<05:03,  2.28s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▎ | 679/811 [21:11<04:39,  2.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 680/811 [21:13<04:26,  2.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 681/811 [21:15<04:15,  1.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 682/811 [21:16<03:57,  1.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 683/811 [21:20<05:00,  2.35s/it] 84%|████████▍ | 684/811 [21:21<04:27,  2.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 685/811 [21:23<04:17,  2.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▍ | 686/811 [21:25<04:13,  2.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▍ | 687/811 [21:27<04:07,  1.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▍ | 688/811 [21:28<03:42,  1.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▍ | 689/811 [21:30<03:31,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▌ | 690/811 [21:32<03:23,  1.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▌ | 691/811 [21:33<03:23,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▌ | 692/811 [21:35<03:15,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▌ | 693/811 [21:37<03:16,  1.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 694/811 [21:39<03:53,  2.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 695/811 [21:41<03:40,  1.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 696/811 [21:42<03:23,  1.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 697/811 [21:44<03:16,  1.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 698/811 [21:46<03:08,  1.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 699/811 [21:50<04:39,  2.49s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▋ | 700/811 [21:52<04:12,  2.28s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▋ | 701/811 [21:53<03:47,  2.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 702/811 [21:55<03:33,  1.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 703/811 [21:57<03:25,  1.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 704/811 [21:58<03:13,  1.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 705/811 [22:00<03:06,  1.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 706/811 [22:02<02:59,  1.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 707/811 [22:03<02:52,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 708/811 [22:05<02:53,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 709/811 [22:07<03:04,  1.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 710/811 [22:09<02:54,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 711/811 [22:11<03:09,  1.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 712/811 [22:13<03:05,  1.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 713/811 [22:15<03:02,  1.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 714/811 [22:16<02:57,  1.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 715/811 [22:21<04:17,  2.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 716/811 [22:23<03:49,  2.41s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 717/811 [22:25<03:42,  2.37s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▊ | 718/811 [22:27<03:21,  2.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▊ | 719/811 [22:28<03:03,  1.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 720/811 [22:30<03:03,  2.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 721/811 [22:32<02:46,  1.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 722/811 [22:34<02:42,  1.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 723/811 [22:35<02:34,  1.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 724/811 [22:37<02:34,  1.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 725/811 [22:41<03:30,  2.45s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|████████▉ | 726/811 [22:42<03:03,  2.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|████████▉ | 727/811 [22:44<02:49,  2.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|████████▉ | 728/811 [22:46<02:47,  2.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|████████▉ | 729/811 [22:48<02:32,  1.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 730/811 [22:49<02:26,  1.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 731/811 [22:51<02:27,  1.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 732/811 [22:53<02:23,  1.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 733/811 [22:55<02:27,  1.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 734/811 [22:57<02:33,  1.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 735/811 [22:59<02:21,  1.87s/it] 91%|█████████ | 736/811 [23:01<02:21,  1.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 737/811 [23:04<02:41,  2.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 738/811 [23:05<02:24,  1.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 739/811 [23:07<02:13,  1.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 740/811 [23:08<02:03,  1.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████▏| 741/811 [23:10<01:55,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████▏| 742/811 [23:12<02:08,  1.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 743/811 [23:14<02:16,  2.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 744/811 [23:16<02:11,  1.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 745/811 [23:18<02:04,  1.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 746/811 [23:19<01:52,  1.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 747/811 [23:21<01:48,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 748/811 [23:23<01:44,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 749/811 [23:24<01:42,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 750/811 [23:26<01:39,  1.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 751/811 [23:27<01:38,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 752/811 [23:29<01:38,  1.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 753/811 [23:31<01:39,  1.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 754/811 [23:33<01:39,  1.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 755/811 [23:34<01:35,  1.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 756/811 [23:36<01:30,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 757/811 [23:38<01:29,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 758/811 [23:40<01:31,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▎| 759/811 [23:41<01:32,  1.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▎| 760/811 [23:43<01:32,  1.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 761/811 [23:45<01:28,  1.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 762/811 [23:47<01:23,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 763/811 [23:49<01:27,  1.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 764/811 [23:50<01:24,  1.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 765/811 [23:52<01:22,  1.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 766/811 [23:54<01:24,  1.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▍| 767/811 [23:56<01:19,  1.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▍| 768/811 [23:58<01:17,  1.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▍| 769/811 [23:59<01:13,  1.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▍| 770/811 [24:01<01:10,  1.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▌| 771/811 [24:03<01:07,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▌| 772/811 [24:04<01:05,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▌| 773/811 [24:06<01:04,  1.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▌| 774/811 [24:09<01:12,  1.96s/it] 96%|█████████▌| 775/811 [24:11<01:14,  2.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 776/811 [24:13<01:16,  2.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 777/811 [24:16<01:16,  2.24s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 778/811 [24:18<01:10,  2.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 779/811 [24:19<01:04,  2.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 780/811 [24:21<01:01,  1.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▋| 781/811 [24:24<01:03,  2.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▋| 782/811 [24:25<00:58,  2.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 783/811 [24:27<00:52,  1.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 784/811 [24:29<00:48,  1.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 785/811 [24:30<00:46,  1.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 786/811 [24:32<00:43,  1.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 787/811 [24:34<00:40,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 788/811 [24:35<00:38,  1.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 789/811 [24:37<00:36,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 790/811 [24:39<00:35,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 791/811 [24:40<00:33,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 792/811 [24:42<00:31,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 793/811 [24:44<00:30,  1.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 794/811 [24:45<00:28,  1.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 795/811 [24:47<00:27,  1.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 796/811 [24:49<00:24,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 797/811 [24:50<00:22,  1.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 798/811 [24:52<00:20,  1.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▊| 799/811 [24:53<00:19,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▊| 800/811 [24:55<00:17,  1.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 801/811 [24:56<00:16,  1.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 802/811 [24:58<00:14,  1.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 803/811 [25:00<00:13,  1.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 804/811 [25:01<00:11,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 805/811 [25:03<00:09,  1.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 806/811 [25:05<00:07,  1.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|█████████▉| 807/811 [25:06<00:06,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|█████████▉| 808/811 [25:09<00:05,  2.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|█████████▉| 809/811 [25:11<00:03,  1.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|█████████▉| 810/811 [25:14<00:02,  2.34s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|██████████| 811/811 [25:17<00:00,  2.34s/it]100%|██████████| 811/811 [25:17<00:00,  1.87s/it]

4727033_20201_2_0,xm56io4icz,-0.6142414367689302,-92.81421189397335,-27.570821012361165

1291726_20201_2_0,xm5t6o4icz,-0.36712233571065905,-132.69903956698943,-35.95124851893148

4175750_20201_2_0,xmb1xn4icz,0.01190979794710927,-85.11590128661865,-25.420675908985686

3868415_20201_2_0,xmgf9p4icz,-0.18124079525722836,-104.83199905679976,-17.766200996319725

1698343_20201_2_0,xmr3hp4icz,-0.7047712981775041,-134.09055306533548,-31.74970126650942

1593950_20201_2_0,xmt9no4icz,4.3525734354918,-94.37712131740565,-46.63635268717445

5732161_20201_2_0,xmurnn4icz,-2.592042909823657,-82.53985314212096,-16.51533371882671

2470534_20201_2_0,xmvlip4icz,-3.736317696471374,-148.2063120917554,-32.39940141690926

5036461_20201_2_0,xn85xo4icz,2.150984494716352,-101.69446436425557,-37.61545685478593

1689705_20201_2_0,xnb6yo4icz,-5.03293056900382,-133.7598863836808,-17.42897770203868

4287680_20201_2_0,xndjdn4icz,-2.6945985733613282,-90.6530746128401,-21.541135622823788

5134992_20201_2_0,xng5qn4icz,14.477432198638358,-87.27573212797446,-90.67178962919408

2633631_20201_2_0,xni0uo4icz,-1.4929598859364157,-122.50129024236921,-3.5437618165909726

2688588_20201_2_0,xnj1ho4icz,1.3521876191170368,-152.83975597414596,-29.601028449351986

2047933_20201_2_0,xnn0ap4icz,0.5282044918506523,-77.65558239101898,-34.9411796324609

1244725_20201_2_0,xnrnao4icz,0.8402816194697337,-83.6529494893773,-30.603474958997253

3583102_20201_2_0,xnrsto4icz,-0.10864434553960806,-89.49799299860797,-45.50548682405105

1025588_20201_2_0,xnwrun4icz,0.8640043112083073,-106.68502583399876,-54.51527085900254

4213095_20201_2_0,xny16p4icz,-0.9361206072033194,-141.56650984274376,-12.535302106107963

5482784_20201_2_0,xo1y5p4icz,2.507966953996533,-35.070252673019496,-44.1189952687936

3875434_20201_2_0,xo3ebp4icz,2.299880325829904,-99.45192041075163,-41.93729109380986

1006309_20201_2_0,xo9i5n4icz,1.0250518775352473,-109.79898939844426,-40.890081877003894

2554661_20201_2_0,xocxln4icz,4.143474616260581,-102.38765140521133,-62.616698569580834

5798581_20201_2_0,xoivcp4icz,-1.0936408202891292,-100.70467233363465,-32.456229595424716

1839323_20201_2_0,xojnvn4icz,2.703205524774429,-107.660643409887,-47.45859808532185

2336859_20201_2_0,xokabp4icz,3.3399439167916016,-71.57479348919264,-50.26888447688677

5461005_20201_2_0,xomp2p4icz,-7.432880783498938,-165.8433890485169,-3.271910319827242

3808504_20201_2_0,xop8io4icz,4.278502038879513,-52.22775667288968,-62.1374336151887

2930737_20201_2_0,xoqrjn4icz,-0.5615785465730291,-62.67696434315852,-43.3533264720223

2692887_20201_2_0,xosjvn4icz,-7.278101635138101,-115.51607806888504,9.888573963907902

4042671_20201_2_0,xov0on4icz,-1.8892853471688085,-109.76116730723189,-21.975896699793992

4917977_20201_2_0,xov88p4icz,0.3538463871735905,-74.63187608332186,-49.07511993631812

1163829_20201_2_0,xp4sgo4icz,-0.3674688955146161,-87.55818906854859,-18.675695975761457

3998315_20201_2_0,xp4wep4icz,-1.0708211381430568,-48.449261621020554,-27.242946016307016

1486462_20201_2_0,xp80ln4icz,-2.5543246798189445,-145.56583034871448,-6.361722447244006

3840053_20201_2_0,xp86wo4icz,-0.8359554127651543,-60.991911464729526,-23.087493335962208

3244752_20201_2_0,xpfu4o4icz,-1.7618504167877707,-124.13279205571763,-28.91150970628462

3498256_20201_2_0,xpg5sn4icz,-3.0236887177097627,-114.62510361448426,-22.651999949211742

3045342_20201_2_0,xphhep4icz,0.6895805116988937,-105.90800950252995,-53.1960845338123

2513094_20201_2_0,xpjgap4icz,171.6297017778519,833.1713493397498,221.73178920243907

4342207_20201_2_0,xplqmn4icz,-3.9268842208370494,-91.83924442254317,-20.911002115163

2416762_20201_2_0,xpokgn4icz,3.822459967655771,-115.16015129814889,-68.98846847847979

5311224_20201_2_0,xps1lo4icz,-9.235765539796725,-128.23418341133222,0.5776068695136445

5410265_20201_2_0,xq0lyn4icz,-1.707908185396334,-118.84705086794389,-36.897901448498615

2773229_20201_2_0,xq489p4icz,-0.20835211183891622,-85.43232352199328,-37.54751021021201

1174062_20201_2_0,xq5qco4icz,2.5833810656016842,-91.21164671215192,-51.26618073384459

3116752_20201_2_0,xqb8no4icz,1.9660140892758877,-78.672251844593,-59.229106769416504

3091615_20201_2_0,xqg8yo4icz,1.1750910281559557,-76.53396562402614,-34.01285785295296

5764179_20201_2_0,xqklfn4icz,1.0204876583839733,-97.14048974165678,-41.467009543326355

1007150_20201_2_0,xqkv9n4icz,-3.121933601892922,-99.37698129043119,-10.689440590395037

4197492_20201_2_0,xqo0vn4icz,1.9012311051234416,-115.06274183700418,-53.734953784076126

2177252_20201_2_0,xqpvhp4icz,5.536629457815897,-66.6147371330037,-69.55450352438592

5442217_20201_2_0,xqr8jn4icz,-4.566445702595511,-116.70241018154559,-10.180782777896837

3701114_20201_2_0,xqs6xn4icz,-0.580751531602579,-75.05566090158987,-29.475557857234506

4537067_20201_2_0,xqsj4p4icz,-2.964340178974988,-89.93935320544875,-3.6504924647762493

3089814_20201_2_0,xqwuoo4icz,-1.5995081818746262,-93.75202370725668,-10.858485497835815

1401131_20201_2_0,xqzjon4icz,-2.106136812762107,-88.98908630695936,-39.849461302844304

4278576_20201_2_0,xqzyfp4icz,1.5426546421383491,-102.66961029444357,-47.45762828755545

3783461_20201_2_0,xr5dlo4icz,-41.59863818560022,-84.19770857656073,291.37505418296195

4362755_20201_2_0,xr8ukn4icz,-0.8686038101116876,-60.06805196897605,-49.56381582756211

5017633_20201_2_0,xrd56o4icz,1.7647399681850495,-75.27714994114402,-30.462669631771504

1066004_20201_2_0,xrjcxo4icz,-2.773155364724934,-83.65488500743493,-20.01415826342368

1039544_20201_2_0,xrmvun4icz,-0.799838138963109,-80.81755060718669,-31.83585319209611

4404538_20201_2_0,xrrnho4icz,-3.8752656020102396,-76.61582851323664,-7.770799771942549

2082321_20201_2_0,xrtb2o4icz,0.4563633480025007,-94.79464916608279,-27.250402051356744

2102690_20201_2_0,xrua1o4icz,-1.3974208965446622,-112.3751268718087,-29.50942015169747

2700929_20201_2_0,xrvgen4icz,-1.7981335521340593,-65.34654543736744,-31.057497165108416

3642685_20201_2_0,xryl3o4icz,-1.7537070733382025,-78.29887515135741,-30.788425655744916

5107609_20201_2_0,xs189p4icz,-0.744289733098305,-86.8598124733816,-26.508263586495872

1267650_20201_2_0,xs2win4icz,1.0336092928135125,-87.03328884311546,-41.197446485264905

1273329_20201_2_0,xs6ago4icz,3.575053396455005,-72.41524673008726,-43.47258453708316

1125356_20201_2_0,xs6p6o4icz,1.1160338644510994,-89.31593311950277,-40.131376688214786

1900515_20201_2_0,xs7fco4icz,1.2934360990618372,-89.89109337467559,-56.404370369413556

1496198_20201_2_0,xsbijn4icz,-0.2728006128094516,-94.3029813917529,-41.06746906145486

5942063_20201_2_0,xsdvwn4icz,4.086377511778981,-90.00335789279367,-54.479802626130436

3103480_20201_2_0,xshtao4icz,-0.2256710273019664,-119.57896218924478,-32.73867205996666

3706085_20201_2_0,xshxwo4icz,-6.4004812776665565,-79.12922249670686,-5.280906851080246

4441860_20201_2_0,xsi9bn4icz,0.5686119076826704,-94.82033195743023,-50.603652191617286

4356123_20201_2_0,xskasn4icz,-2.469541158272119,-86.76321091412811,-24.248626762118107

1385059_20201_2_0,rmoydo4icz,1.2990388575853111,-57.341604923382306,-47.77026640260024

4912021_20201_2_0,xsntwn4icz,-1.5615829004354558,-102.27127826735952,-40.65931230833385

3756016_20201_2_0,xspnao4icz,1.4070627858801736,-95.25170570157826,-48.190225959717864

4297658_20201_2_0,xsxm9o4icz,1.5822974401277838,-107.87139815976619,-39.09360080726587

2600011_20201_2_0,xt45jn4icz,11.168007279247485,-91.57521795334387,-80.12082687970718

4624200_20201_2_0,xtdv1o4icz,2.071413248712772,-99.95032673480699,-46.07066062479619

4245321_20201_2_0,xthl9p4icz,-1.4120951682464324,-79.5718522605249,-41.28328876654491

2164635_20201_2_0,xtjadp4icz,-1.3001788506003231,-135.45037962335905,-11.761686195093347

5710903_20201_2_0,xtmb3p4icz,1.4953473237183177,-81.42950168089752,-33.7897943891457

4255763_20201_2_0,xtnwvo4icz,3.0782374013113714,-86.71729627738321,-46.938455539977795

1417473_20201_2_0,xty4xo4icz,3.3974106466687153,-102.77148008895767,-56.28373742164078

1306194_20201_2_0,xu0s3p4icz,-1.5092905271949284,-108.36993801562329,-20.380577442174513

2000025_20201_2_0,xu110p4icz,2.3556161151239414,-85.99062617643409,-31.89702207324848

1377763_20201_2_0,xu4fln4icz,-1.2263544781485773,-55.75360732934064,-35.75615014395753

2220996_20201_2_0,xubqjp4icz,-1.395009188855225,-129.64802860543998,-48.96335551866912

1112908_20201_2_0,xude9p4icz,-6.3121180324375805,-90.04423511481065,-12.240543017756572

3509576_20201_2_0,xui2rn4icz,-1.6469804589572075,-110.77603290695694,-10.470738789474396

1655282_20201_2_0,xuiato4icz,-1.0459099239975518,-73.91704630507144,-44.754357323032025

4464993_20201_2_0,xumu0p4icz,-2.265712148211547,-115.54732448501574,-24.13779821124541

3472371_20201_2_0,xusxlo4icz,0.4688283681550036,-95.49878837858162,-30.996689387126878

3006837_20201_2_0,xuujcn4icz,0.08326292636473448,-77.66841195184799,-41.7811656047776

1737282_20201_2_0,xuvm5p4icz,-2.5197992263659006,-132.0630606857412,-35.16411395320738

2957081_20201_2_0,xuyvwo4icz,3.028140968793887,-81.23907414387136,-39.142149392682114

5419411_20201_2_0,xuzcan4icz,1.7502753088338772,-61.95610482877447,-60.415186836497355

4705892_20201_2_0,xuzjmo4icz,-1.7252693308517888,-86.47284257114472,-15.290343592164675

5619870_20201_2_0,xv1mvo4icz,-0.4549743071134329,-70.25353384787567,-25.593977199274306

1999448_20201_2_0,xv3h5o4icz,-0.08269321012068571,-110.4334420460184,-24.700966000481486

4911052_20201_2_0,xv3ito4icz,3.7591144096777027,-73.66665382645934,-51.57830947184519

5467088_20201_2_0,xv9w9p4icz,-3.154760300407562,-161.25700930493645,-30.04673435610023

2319833_20201_2_0,xvayvn4icz,1.5223666782033698,-98.82517647538063,-33.520916251953224

4652183_20201_2_0,xvbvjo4icz,-6.3482267166837705,-58.78844804580331,-12.258713533678602

5795126_20201_2_0,xvfwmo4icz,1.008840863648921,-87.17275804461076,-41.45479637798306

5974969_20201_2_0,xvhm7o4icz,-2.0063781127153604,-96.14732528893953,-23.939804564415226

1979214_20201_2_0,xvjzjo4icz,0.9209436083908968,-124.00073324988156,-34.88621140883804

3933647_20201_2_0,xvm4bo4icz,0.8522407123481451,-93.01788996115175,-35.856281631706395

2113969_20201_2_0,xvo9en4icz,4.154428356348585,-115.60030779870473,-68.09347294528129

1730356_20201_2_0,xvq3nn4icz,2.9979109487245776,-80.65282988808565,-40.77707691932562

4086838_20201_2_0,xvtnhp4icz,-1.3677447090139971,-93.96640286147087,-20.602049818572

5998390_20201_2_0,xvvten4icz,-1.1916547138694151,-140.19277947187146,-24.689083150318908

1394536_20201_2_0,xw2osn4icz,-1.9177594952755481,-117.98906615279785,-22.77400933122918

1158281_20201_2_0,xw34wo4icz,4.277634107684698,-87.83834930749961,-87.64004098334328

3685937_20201_2_0,xw9knn4icz,0.8752079456558183,-70.3870214747661,-39.34086483104056

5972631_20201_2_0,xwjk3o4icz,-0.19696383442501164,-106.68003949561339,-28.18736959006064

5889411_20201_2_0,xwlw6o4icz,1.1983493837205745,-92.87173598346934,-53.958667933070146

5954368_20201_2_0,xwnizo4icz,2.588396562348463,-85.87260321225037,-54.603258170357876

3466138_20201_2_0,xwtaun4icz,76.19809649937919,-79.15712485007106,-86.87708012937412

4128212_20201_2_0,xwttjp4icz,1.127958380158195,-56.685989590171914,-40.960063430248

1297918_20201_2_0,xwuw9p4icz,1.202700774071955,-94.77995787833731,-49.70661522714792

2680409_20201_2_0,xwz90p4icz,-0.7995909612041361,-49.55168857465077,-30.232894085920222

4492632_20201_2_0,xx01xn4icz,-1.499125379649599,-112.36945416783996,-39.937322674818105

5452971_20201_2_0,xx6cyo4icz,0.4389454555543353,-59.76940433202046,-26.784498582940245

2622315_20201_2_0,xx6qho4icz,-2.3894109125754306,-100.78383914100306,-11.634378903658046

4229242_20201_2_0,xx7rdo4icz,0.1887605146865828,-74.55891777096608,-42.088072827124265

3326487_20201_2_0,xx83do4icz,-1.2850387537180483,-135.71867067048632,-35.64022438447532

4396096_20201_2_0,xxa3qn4icz,-2.2848544517712717,-101.89470612327116,-20.848483744579667

5763389_20201_2_0,xxc1vn4icz,-3.136114523766456,-137.2621098292695,-28.480849704132112

5325607_20201_2_0,xxchno4icz,-4.402856791483506,-110.23142074712212,-4.988217768584917

5394133_20201_2_0,xxcpro4icz,1.2489261879236753,-110.39881568162895,-47.57227685939068

1227875_20201_2_0,xxfugp4icz,-0.5974922585873068,-98.98522377691882,-33.93571386001267

3491602_20201_2_0,xxjh4o4icz,-1.8763693691412322,-97.76301739379514,-16.823595875109916

1722838_20201_2_0,xxqvfp4icz,-3.6846034972404262,-104.70956979924668,-6.69826389517516

1456739_20201_2_0,xxrjbo4icz,2.69971351781154,-118.12884065218714,-49.53387275000013

5525921_20201_2_0,xxrp6p4icz,-0.5867985358910814,-109.46374401064256,-32.767620457171034

2387700_20201_2_0,xxugso4icz,2.414565950379712,-98.02774132296565,-53.30076455579025

5451716_20201_2_0,xxuyun4icz,-0.18454500402023805,-76.9615118926846,-43.8895894367827

4243666_20201_2_0,xxydto4icz,7.608275342220441,-72.64438666518478,-80.33991675416911

2733765_20201_2_0,xy01on4icz,-1.5384064068394112,-125.30913844168376,-34.606924160424754

1350574_20201_2_0,xy1sun4icz,-0.5589678086460796,-87.07865886702177,-49.958798605210205

3025105_20201_2_0,xy69zo4icz,0.23336910136999145,-49.096772824458924,-47.58213205270104

3827874_20201_2_0,xy6rqn4icz,0.4236345835040629,-88.61728762014329,-43.518256585909796

1163671_20201_2_0,xy918o4icz,-1.5041570299840463,-130.84470950698173,-11.411945769417088

4810332_20201_2_0,xy92ep4icz,0.8072915139825393,-84.33731665140294,-31.067708610375476

4460811_20201_2_0,xy9ykn4icz,0.25707242711774153,-123.00458224406549,-14.265100118272613

5501869_20201_2_0,xyf49o4icz,-1.7968410187933954,-83.68141596128731,-25.774268717246514

5527230_20201_2_0,xygnmn4icz,-7.552273067097229,-112.93310459819884,13.008344047415306

1543576_20201_2_0,xykutn4icz,-1.2516740119852188,-109.71330013990118,-20.024336244525458

1599645_20201_2_0,xylpfn4icz,0.6808183429259925,-80.38702778902183,-43.93081122505242

2572326_20201_2_0,xypdgn4icz,0.14473093992942887,-112.98982983355089,-49.91558047888469

2178059_20201_2_0,xyut3p4icz,2.802579373258968,-96.6503835547037,-46.04744525464584

5536803_20201_2_0,xz3bhp4icz,4.853362916797262,-110.27909415739654,-69.17922191667763

4001855_20201_2_0,xz48gp4icz,12.655471913117204,-89.7761270924982,-114.60503017661227

2467893_20201_2_0,xzcd3o4icz,-0.9693500460221575,-100.31365801257408,-16.01390025020899

4957613_20201_2_0,xzlg7n4icz,-0.5556190199235793,-86.60288146235021,-19.27404435625114

2289906_20201_2_0,xzm4xn4icz,-3.8658730465379683,-76.22805643199862,-8.115972296918642

2836043_20201_2_0,xzms7o4icz,0.2593469517218785,-89.21687860659785,-47.20163299656329

1866034_20201_2_0,xztzvn4icz,-2.0750637569473662,-100.81342327034014,-16.463330611549665

1329081_20201_2_0,xzxddo4icz,1.3707419212752987,-70.80895477475968,-23.921847960806957

4167673_20201_2_0,y01zqn4icz,0.7140119604760742,-102.10430811277354,-35.45959019635694

1346022_20201_2_0,y064pn4icz,-8.56706260566933,-135.62329336545676,29.068151016320712

5094172_20201_2_0,y07imo4icz,2.4615125234887816,-85.58540504017287,-50.84393472381474

5557557_20201_2_0,y09bho4icz,-2.1288512917195637,-129.13783814584443,-17.31955065530306

4342953_20201_2_0,y0fmso4icz,1.1783207287523405,-26.756521414830388,-29.220210006734646

3134442_20201_2_0,y0g3fp4icz,-0.6806596337320565,-106.20486449012225,-43.50702479854844

1153214_20201_2_0,y0hlvo4icz,-0.30769931568304776,-66.93403369890945,-19.799843457669652

4455348_20201_2_0,y0insn4icz,-0.5845496056737055,-96.27122276923257,-31.33369781362036

3047939_20201_2_0,y0kiwn4icz,-0.42172639216599117,-62.87076422634743,-60.345072976732325

5233057_20201_2_0,y0zf6o4icz,0.9347340241358352,-89.62305813519859,-39.53274222688276

3322369_20201_2_0,y128rn4icz,-34.5050385206823,119.67538645839392,405.8625121586369

4426207_20201_2_0,y136gp4icz,-1.3482737455554514,-132.7084975876792,-32.47806437482805

5469455_20201_2_0,y1669n4icz,-3.0029020781732783,-118.29130552791389,-13.58772389112147

5560269_20201_2_0,y16gho4icz,-2.2902192026293116,-87.77408753088758,-21.85225521770795

1837998_20201_2_0,y17xhp4icz,-3.9283250807692602,-142.60192098851294,-23.228346752598448

1035386_20201_2_0,y1acdn4icz,-0.18331469256676747,-89.14854116999479,-42.18632097040748

5563150_20201_2_0,y1b0gn4icz,0.5930256911917036,-158.1117416047966,-51.64834349158734

3251751_20201_2_0,y1l4on4icz,-0.7143033588929961,-122.8766848293391,-21.075181566049082

4424171_20201_2_0,y1wxrn4icz,1.5522644318749232,-130.49082231945903,-37.68435727499002

1465773_20201_2_0,y1x8mo4icz,-1.5566025495287465,-144.93656605416896,-18.104697207554935

4965879_20201_2_0,y1yovn4icz,0.8527693463787896,-98.22781873292809,-36.032822156115685

2919964_20201_2_0,y20ion4icz,-1.6039794412982866,-81.47861495345018,-20.504717727614562

4840785_20201_2_0,y226cp4icz,2.193915040785777,-104.43006919762337,-53.17428423328511

5054314_20201_2_0,y25d6p4icz,1.4645408866312464,-74.75767915599562,-49.92382154735752

1571722_20201_2_0,y25p7p4icz,1.3326514926718964,-62.330400282300786,-43.592611133129495

3413758_20201_2_0,y27gmo4icz,0.8603555379468837,-109.29493467520709,-38.42688161361954

3481545_20201_2_0,y2b6ro4icz,0.8592794546229736,-72.05809064972411,-27.66551642791903

5523545_20201_2_0,y2c1fp4icz,-0.30611868336360476,-62.86114245856663,-27.443334666450937

5203316_20201_2_0,y2coqo4icz,-1.0432599238938312,-99.46324734317108,-32.2598379020816

3905720_20201_2_0,y2hjwo4icz,1.6145746099846174,-90.10951585814519,-54.104110695472045

3547413_20201_2_0,y2hkao4icz,2.015086502167331,-85.08571083292881,-60.91995090307563

2877166_20201_2_0,y2iqyo4icz,-6.148892099523587,-120.8943633498935,-2.994452380011751

1612221_20201_2_0,y2mmnn4icz,1.9235049997642868,-84.87170354419715,-43.95843672020234

5478202_20201_2_0,y2muto4icz,1.0433461284739136,-76.75219950632908,-50.99166386941975

3715264_20201_2_0,y2wfto4icz,-0.2588592612982452,-92.34329638493915,-42.25634741319902

5848945_20201_2_0,y2wjip4icz,1.1254029794902267,-61.03608194579243,-49.43469345529037

5455681_20201_2_0,y2zu8o4icz,3.886284757983657,-93.49863529634018,-53.049516776533665

2336325_20201_2_0,y38deo4icz,2.507439274293557,-55.86790685313247,-56.89215381422339

1839598_20201_2_0,y3a32p4icz,3.882471767619841,-109.75082293523522,-52.86394407036134

4907453_20201_2_0,y3bxpn4icz,0.5040936630054776,-79.37694378916487,-34.46707144993691

1858568_20201_2_0,wks31p4icz,0.10183253580054934,-101.27020450993658,-46.29106817798349

4742694_20201_2_0,y3ivcn4icz,0.3198496140913584,-98.47494750064314,-50.57489576956111

1909173_20201_2_0,y3jd3p4icz,2.821456693451119,-100.65913830548612,-54.46968321368648

2836857_20201_2_0,y3mvlo4icz,0.365042748493001,-83.1580456121601,-29.147349258638556

4738192_20201_2_0,y3ppfo4icz,3.2123762801027183,-40.19064038705943,-40.02510614489174

5860603_20201_2_0,y3s4qn4icz,-0.35365113465106474,-92.61675839157297,-35.61025596078761

4734097_20201_2_0,y3vufn4icz,3.069697639061163,-83.6349685041582,-57.82772425789902

5945992_20201_2_0,y3z5eo4icz,-3.9010186210990465,-113.0069193567007,-13.177387219146127

3777614_20201_2_0,y430ln4icz,-1.1893978078607013,-113.73767549661878,-29.667955319847607

3161122_20201_2_0,y43bho4icz,6.34037316508992,-63.29923937109419,214.12295764288575

1764900_20201_2_0,y43oap4icz,-0.08021602363559711,-102.12046044574649,-44.67474023031575

1962335_20201_2_0,y463oo4icz,-7.2609566553523335,-104.474959878693,1.3288901305891159

4141731_20201_2_0,y46ukn4icz,-1.004424018442297,-119.17860396865399,-27.084367945926743

1724010_20201_2_0,y4bb5o4icz,0.20891744682011215,-122.21512835518277,-31.90272109412183

3245139_20201_2_0,y4h91o4icz,0.1393032322849729,-102.0151994613351,-42.07221377645814

5512472_20201_2_0,e7x6oo4icz,-2.52729119729268,-96.68369182086539,-26.694777275342517

5906140_20201_2_0,y50mmo4icz,1.6121842250930243,-87.23279197038727,-65.18639919987714

1553285_20201_2_0,y56ero4icz,-1.2518901707515604,-85.28414587366714,-30.19553265738152

1324065_20201_2_0,y5iyro4icz,-0.706571401809221,-57.77143950213372,-41.09716371569711

4481033_20201_2_0,y5nmso4icz,-2.112054143392558,-38.14055595130728,-20.807366434342725

1645411_20201_2_0,y5pp6p4icz,1.4793460582207465,-103.82267690071103,-42.61791343919941

1066317_20201_2_0,y5vk7o4icz,0.5246392215928373,-91.73259685021179,-36.83572679627213

1913359_20201_2_0,y60gbp4icz,-2.8854412313599718,-110.66341350083644,-11.195957963708338

2031111_20201_2_0,y60y0p4icz,0.8824950466533579,-160.64705874221366,-29.70867619026913

1953595_20201_2_0,y65xao4icz,-1.7319186653596403,-131.36268752318108,-33.73718772471915

3550220_20201_2_0,y6afkn4icz,-0.6604737278655181,-65.73699679934714,-41.1141233385606

3989066_20201_2_0,y6aqep4icz,-2.662395428696364,-103.37384330679697,-12.818350138219515

3054534_20201_2_0,y6fd7o4icz,-1.318488046791099,-119.449475175776,-28.19190060314594

3552453_20201_2_0,y6j8mo4icz,0.38343922844369716,-120.42777139374871,-38.05062856570308

4289421_20201_2_0,y6k3hp4icz,-0.4323460443227938,-95.64438408534099,-23.92882610160308

5467802_20201_2_0,y6q68o4icz,-1.1826284627768093,-114.98982437463278,-31.807898324329415

5854944_20201_2_0,y6rolo4icz,0.4188977671438999,-79.23497608268713,-37.471020976419524

5141054_20201_2_0,y6snfp4icz,1.2577845530100804,-94.95222796409834,-50.88143555053563

2169821_20201_2_0,y6ybkn4icz,-0.8203098733912005,-135.6593903441648,-26.67393683212346

2025825_20201_2_0,y70kan4icz,-2.0294354595292448,-62.20670180061285,-28.82954600392891

5639423_20201_2_0,y73xdo4icz,-4.308601506859711,-105.05370275687017,-10.852846018318118

4621221_20201_2_0,y75o3p4icz,-1.7357366123725424,-63.31263930464698,-26.373835191926688

5797858_20201_2_0,y79m3o4icz,0.13670250526289207,-93.04796018245054,-50.0568397857937

4907213_20201_2_0,y7bi1o4icz,2.804678113735543,-117.6283835675753,-57.40648479844184

5832323_20201_2_0,y7k36p4icz,0.37139980960309366,-144.48874019597238,-48.89055185503716

5825697_20201_2_0,y7ob5o4icz,1.269145007451765,-89.2887267135624,-34.72754495006134

2748922_20201_2_0,y7of9o4icz,1.806556678463355,-114.3038122630087,-40.83688415585584

4533149_20201_2_0,y7p6to4icz,2.398088666712854,-46.936908678818554,-44.00460091113891

1251511_20201_2_0,y7qmwn4icz,-0.5302471526602477,-99.23907289377803,-41.800789520960805

4770181_20201_2_0,y7sicn4icz,-0.5486911732399231,-122.63114205738728,-15.97961939250969

5296130_20201_2_0,06b85p4icz,-1.663065712903281,-102.85070377172485,-33.79649882292287

/users/rhydian/anaconda3/envs/torch_env/lib/python3.7/site-packages/torch/cuda/__init__.py:52: UserWarning: CUDA initialization: Found no NVIDIA driver on your system. Please check that you have an NVIDIA GPU and installed a driver from http://www.nvidia.com/Download/index.aspx (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729006826/work/c10/cuda/CUDAFunctions.cpp:100.)
  return torch._C._cuda_getDeviceCount() > 0
  0%|          | 0/101 [00:00<?, ?it/s]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 1/101 [00:01<03:07,  1.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 2/101 [00:04<03:13,  1.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 3/101 [00:06<03:37,  2.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/101 [00:08<03:23,  2.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▍         | 5/101 [00:10<03:05,  1.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 6/101 [00:12<03:00,  1.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 7/101 [00:13<02:49,  1.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 8/101 [00:14<02:34,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 9/101 [00:17<02:46,  1.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|▉         | 10/101 [00:19<02:59,  1.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 11/101 [00:25<04:48,  3.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 12/101 [00:27<04:01,  2.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 13/101 [00:28<03:30,  2.39s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 14/101 [00:30<03:03,  2.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▍        | 15/101 [00:32<03:06,  2.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 16/101 [00:34<02:51,  2.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 17/101 [00:36<02:53,  2.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 18/101 [00:37<02:36,  1.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 19/101 [00:39<02:29,  1.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|█▉        | 20/101 [00:41<02:20,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 21/101 [00:42<02:20,  1.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 22/101 [00:44<02:23,  1.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 23/101 [00:47<02:35,  1.99s/it] 24%|██▍       | 24/101 [00:48<02:28,  1.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▍       | 25/101 [00:50<02:18,  1.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 26/101 [00:52<02:13,  1.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 27/101 [00:54<02:11,  1.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 28/101 [00:55<02:05,  1.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▊       | 29/101 [00:57<02:01,  1.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|██▉       | 30/101 [00:58<01:55,  1.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 31/101 [01:00<01:52,  1.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 32/101 [01:01<01:50,  1.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 33/101 [01:04<02:10,  1.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▎      | 34/101 [01:06<02:00,  1.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▍      | 35/101 [01:07<01:56,  1.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 36/101 [01:09<01:55,  1.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 37/101 [01:11<01:57,  1.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 38/101 [01:14<02:26,  2.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▊      | 39/101 [01:17<02:19,  2.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|███▉      | 40/101 [01:19<02:24,  2.36s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 41/101 [01:21<02:20,  2.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 42/101 [01:24<02:21,  2.40s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 43/101 [01:26<02:06,  2.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▎     | 44/101 [01:27<01:52,  1.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▍     | 45/101 [01:29<01:50,  1.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 46/101 [01:31<01:41,  1.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 47/101 [01:32<01:37,  1.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 48/101 [01:34<01:32,  1.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▊     | 49/101 [01:36<01:35,  1.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|████▉     | 50/101 [01:39<01:54,  2.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 51/101 [01:41<01:43,  2.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████▏    | 52/101 [01:42<01:34,  1.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 53/101 [01:44<01:33,  1.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 54/101 [01:47<01:41,  2.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 55/101 [01:49<01:36,  2.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▌    | 56/101 [01:53<02:00,  2.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▋    | 57/101 [01:55<01:47,  2.45s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 58/101 [01:57<01:43,  2.41s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 59/101 [01:59<01:32,  2.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 60/101 [02:01<01:23,  2.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|██████    | 61/101 [02:02<01:16,  1.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████▏   | 62/101 [02:04<01:15,  1.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 63/101 [02:06<01:06,  1.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 64/101 [02:08<01:06,  1.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 65/101 [02:10<01:08,  1.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▌   | 66/101 [02:12<01:06,  1.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▋   | 67/101 [02:13<01:00,  1.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 68/101 [02:15<00:59,  1.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 69/101 [02:17<01:02,  1.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 70/101 [02:19<00:57,  1.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|███████   | 71/101 [02:20<00:52,  1.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████▏  | 72/101 [02:26<01:25,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 73/101 [02:28<01:09,  2.50s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 74/101 [02:29<01:01,  2.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 75/101 [02:31<00:54,  2.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▌  | 76/101 [02:33<00:50,  2.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 77/101 [02:34<00:45,  1.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 78/101 [02:36<00:41,  1.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 79/101 [02:37<00:37,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 80/101 [02:39<00:33,  1.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 81/101 [02:41<00:36,  1.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 82/101 [02:43<00:33,  1.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 83/101 [02:44<00:30,  1.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 84/101 [02:46<00:28,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 85/101 [02:50<00:38,  2.42s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▌ | 86/101 [02:52<00:34,  2.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 87/101 [02:54<00:31,  2.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 88/101 [02:56<00:28,  2.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 89/101 [02:58<00:25,  2.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 90/101 [03:01<00:24,  2.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 91/101 [03:03<00:22,  2.27s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 92/101 [03:05<00:20,  2.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 93/101 [03:07<00:16,  2.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 94/101 [03:09<00:13,  1.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 95/101 [03:10<00:11,  1.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▌| 96/101 [03:12<00:09,  1.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 97/101 [03:15<00:08,  2.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 98/101 [03:17<00:05,  2.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 99/101 [03:18<00:03,  1.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 100/101 [03:20<00:01,  1.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|██████████| 101/101 [03:23<00:00,  2.15s/it]100%|██████████| 101/101 [03:23<00:00,  2.01s/it]
Trying to load from /users/rhydian/self-supervised-project/model_weights/SSECEncodersBothBoth
==> Resuming model trained for 106 epochs...
Trying to load from ../model_weights/angle_regressor4
==> Resuming model trained for 7 epochs...
4456338_20201_2_0,w8wb5p4icz,0.2103625694446059,-103.8671408562407,-39.97630662090896

1011996_20201_2_0,w9azsn4icz,-0.7722139950730256,-124.69001674424266,-40.33679684037281

1029535_20201_2_0,tcalko4icz,1.5674458645608378,-49.35179384846242,-44.47127503185699

2581293_20201_2_0,w9fbso4icz,-2.36956516467671,-107.54399064994979,-16.24951102855873

4242443_20201_2_0,w9ibso4icz,-2.080169187541084,-87.61237812412742,-16.005641666907067

2439059_20201_2_0,wcry9p4icz,-2.9550346089083686,-136.786338538023,-16.02859357995885

3192580_20201_2_0,wctb7o4icz,-2.994150671814195,-115.75818016427021,-23.631049704888426

5725525_20201_2_0,wd6o3p4icz,2.149605416969205,-79.09541502993403,-51.64181789583691

4662558_20201_2_0,wfma2p4icz,2.1632429160277455,-137.99255320661948,-53.2651569280477

3240671_20201_2_0,wfu6ro4icz,3.616453483575663,-99.44743605483438,-56.95105515075491

3520272_20201_2_0,wg5nvn4icz,-1.700193082433132,-104.18539790264808,-25.7450560056472

4878268_20201_2_0,wh6slo4icz,-2.4113632183203704,-141.67688054159584,-14.270442888398804

1588509_20201_2_0,wheq3p4icz,-2.7525837850087305,-151.74026065537882,-17.32467832785187

5787297_20201_2_0,why3ln4icz,0.9314370409346953,-54.99840351984162,-35.1322000921797

4487666_20201_2_0,wiatvo4icz,1.1782881232159776,-100.91759651742015,-64.22266226836815

5945875_20201_2_0,wkei7n4icz,0.48668991978387244,-98.1343435267272,-49.03128261408027

3105769_20201_2_0,wl6j0p4icz,1.2547766686543538,-67.5665672994026,-34.11643647147265

3773786_20201_2_0,wlqfdo4icz,-0.5258746181044222,-63.064124344470684,-19.72542537076815

4382567_20201_2_0,wmzfio4icz,-4.034067386149603,-123.09944099999734,-13.543915117214794

3332641_20201_2_0,wnwsdp4icz,-0.7281392974635863,-78.55690420115687,-15.042560152079659

4085022_20201_2_0,wo7ejn4icz,-2.667720965137229,-87.89566167636713,-11.681292096955758

1492075_20201_2_0,wor93p4icz,2.8829904187789253,-51.75108153857667,-53.54357072952003

5759924_20201_2_0,wpw5hp4icz,2.95651879057214,-107.36160049050176,-60.92464664812853

1227559_20201_2_0,wq26eo4icz,106.67277618963028,182.57387329098998,-291.5757383016161

1278160_20201_2_0,wqfnyo4icz,2.141119372237641,-103.54419500636783,-53.50103654962125

5641413_20201_2_0,wqm5eo4icz,-1.4969496267538844,-93.0629866212854,-31.953032521073965

4098577_20201_2_0,wr03vn4icz,4.153720880808134,-64.6988872921475,-66.50742101703378

5504023_20201_2_0,wsbzco4icz,0.17992517791162094,-116.09619478563903,-28.644157399632434

2453553_20201_2_0,wsjjpo4icz,2.587922502686335,-65.33457081615242,-53.67182807350969

3337341_20201_2_0,wsrnip4icz,-3.53246533276275,-89.22313617771817,-17.11698432933477

3919619_20201_2_0,wtqfip4icz,1.886303966050044,-112.68489883996719,-73.36332201369964

1411838_20201_2_0,wtwrjp4icz,4.416942620526042,-67.68498473435861,-56.6256865154194

5848005_20201_2_0,wtxzrn4icz,0.23602689335350774,-121.17112184396956,-25.771203281544643

2446821_20201_2_0,ww42hp4icz,1.0916018709126776,-96.03245660018803,-39.152905502881396

1513264_20201_2_0,wwh7co4icz,1.7808628905937627,-72.52386304188576,-54.85041532590992

2111174_20201_2_0,wxklbo4icz,-0.0492546519400582,-122.72803364678211,-43.7492341390231

2951872_20201_2_0,wxv5po4icz,1.1971165936516666,-88.97931421121302,-24.153542187454022

5472633_20201_2_0,wxzk5o4icz,0.6920369705749803,-115.54781837729763,-51.421313814739534

5746531_20201_2_0,wy7izn4icz,0.8190342025326686,-89.33254128304824,-36.37313031369389

3459842_20201_2_0,wzyo0o4icz,-3.0902830979549556,-98.1002008286413,-18.423717038754276

3799662_20201_2_0,x0l7lo4icz,0.4730599910807077,-92.54726845055092,-35.86828415808384

1521628_20201_2_0,x0rfxn4icz,-2.795220925123344,-81.55405192105701,-32.13941409182205

4362439_20201_2_0,x0wjon4icz,-0.6454445048609162,-95.47010655920928,-22.488956382027922

3676586_20201_2_0,x0zf7p4icz,-1.2984332552231066,-131.1197093283081,-36.71633805632611

5410041_20201_2_0,x142ap4icz,4.208112912421571,-100.2786497340694,-46.77108577197265

1761470_20201_2_0,x1scfo4icz,-2.5289576942125236,-110.4660679277028,-30.30378476890796

3130457_20201_2_0,x2toeo4icz,1.444484573169318,-56.355544718327195,-32.70867183979074

4253303_20201_2_0,x3aqjp4icz,15.791630061141557,-77.50189553247932,-107.7519710395648

3052917_20201_2_0,hfq3un4icz,1.2339532532293087,-82.0712581519901,-42.33107602535978

3881099_20201_2_0,x5srao4icz,-0.14036661977518042,-76.21523260361448,-48.78226386327472

3216767_20201_2_0,x7lq7o4icz,-0.921598671282077,-100.97862813660777,-38.32650499984659

3663824_20201_2_0,x7nthp4icz,-2.1015993936806945,-76.00210404496801,-21.591022184589775

1314447_20201_2_0,x99htn4icz,-4.509017709943889,-103.18470911465786,-11.046489837160578

4186167_20201_2_0,xaz73p4icz,-0.0036760844778315673,-77.75933256704201,-38.44768925356857

2619579_20201_2_0,xc2fgn4icz,-2.222457210615864,-94.49712623019573,-30.10954884350417

4481215_20201_2_0,xc3too4icz,-0.9792827464289787,-75.00450463106608,-25.377410179143325

5765385_20201_2_0,xcjnoo4icz,-0.3960970128147576,-111.51355679223641,-31.158700138713883

4234214_20201_2_0,xdinmn4icz,-2.5333849987232226,-101.29483038996176,-17.64615580191571

5743328_20201_2_0,xdmw9o4icz,3.4496980512757793,-33.621736332059754,-55.55969928038121

1419789_20201_2_0,xdnz5p4icz,2.96331973705337,-120.05085846731419,-40.59200466915419

1361653_20201_2_0,xe3zao4icz,1.097587210043077,-123.14259702973558,-49.094541405955255

4321430_20201_2_0,xeoiun4icz,-0.8755527726168316,-60.29293998853913,-36.522120362234205

3733227_20201_2_0,xeqd5p4icz,0.633875475181172,-58.40465163564011,-52.59784225618736

3731259_20201_2_0,xf5rmn4icz,-0.626024944642417,-105.404650631506,-22.400375324057762

1714925_20201_2_0,xgdsap4icz,-2.061506279527025,-102.73940894479401,-22.207618686353683

3028514_20201_2_0,xhsy8o4icz,0.06240198835132809,-94.67824117010275,-33.99489733156361

4531404_20201_2_0,xhxnjo4icz,-0.04591046136992168,-118.48999668819678,-32.40433242337761

5776410_20201_2_0,xj9i8p4icz,-3.4615263626894786,-99.81209077266888,-17.215242550406117

1359176_20201_2_0,xkwaao4icz,-5.3597436963191525,-75.39192444892944,-10.348460975618195

1324922_20201_2_0,xlf9jo4icz,1.9126166233478774,-45.107016404970864,-42.32910464792923

4709807_20201_2_0,xm7g6o4icz,-0.20246224467323343,-97.14756670869991,-30.094850531126667

5197031_20201_2_0,xn4i6o4icz,-3.552180852920618,-88.83950093306186,-13.813748718905828

1770096_20201_2_0,xnj4ep4icz,1.288070715365741,-66.83836479576286,-37.45397989865464

5518716_20201_2_0,xpqxin4icz,0.9656148481719643,-94.92516083657543,-55.720662257037475

1562179_20201_2_0,xq5f0o4icz,0.17299691432700304,-53.70125578042669,-48.874289372022105

4276715_20201_2_0,xqc08p4icz,-4.875550725738691,-131.31595588935033,15.263344402812479

1460867_20201_2_0,xqvvjp4icz,-1.8850244650752788,-102.70105853420793,-41.75662574636928

1378898_20201_2_0,xrpbbo4icz,-0.6888060565100498,-101.02538408206755,-15.026083163661895

2484441_20201_2_0,xrxaqo4icz,1.281726561181691,-112.76115089251039,-36.22069430545028

5137980_20201_2_0,xrzhdo4icz,0.33362776934445765,-66.49228203092608,-51.29282298046667

1652816_20201_2_0,xsk6ip4icz,-1.2704980184190662,-74.77020342165352,-38.57228171857264

4747756_20201_2_0,xsvf0p4icz,0.22128728590178345,-78.26965832079856,-52.88460325462907

5615127_20201_2_0,xtvm5o4icz,-2.14284276904697,-110.62615371581794,-31.26045878024864

4207117_20201_2_0,xuo3lo4icz,1.67313684993468,-76.93418603838671,-41.62893805601044

3670233_20201_2_0,xvmjan4icz,-0.31932250946944535,-113.95846813040981,-22.593924986708373

1202364_20201_2_0,xvqrco4icz,2.3872045337550367,-73.17693978602074,-34.22327287182004

4942623_20201_2_0,xwm5co4icz,2.23680647974957,-78.37118595942917,-44.87099125276194

2765187_20201_2_0,xwuz0p4icz,3.116515556666532,-75.66870611292865,-68.8414056494656

4754651_20201_2_0,xx45do4icz,3.905171119362212,-113.49098085100172,-49.11195481519562

3392301_20201_2_0,xydxfo4icz,-1.4259448929588083,-69.01448774776225,-17.526623181385048

2437677_20201_2_0,xyipon4icz,-0.3593031277978227,-86.49414427774622,-23.737806721838993

1726596_20201_2_0,xzuazo4icz,2.6596763254390625,-63.8103962281001,-53.38206976140769

4530540_20201_2_0,y16b5o4icz,-2.6448643134758383,-76.84524550500282,-20.929592617552572

5991108_20201_2_0,y25avn4icz,-1.3425742261381934,-117.64844548693196,-20.513577540380894

3240313_20201_2_0,y2b7sn4icz,-3.8990756131803805,-125.67617964479189,-10.411767950690034

1976192_20201_2_0,y2tj2p4icz,-1.5033780983193428,-26.5706071593753,-38.622959295551894

3268058_20201_2_0,n9rxyo4icz,2.854953347913755,-69.9429776631199,-43.6777289252079

5953310_20201_2_0,y3tehp4icz,0.7233644023478456,-51.0837523092992,-14.465797556963196

1585426_20201_2_0,y4jjkn4icz,-5.659007534709367,-84.03867048447682,4.397881644913767

2208918_20201_2_0,y5ai8n4icz,-1.4164311341990021,-98.26047017775298,-43.99756419226988

2916296_20201_2_0,0c7dzo4icz,2.262676137755848,-73.04116034451238,-63.510888162849525

/users/rhydian/anaconda3/envs/torch_env/lib/python3.7/site-packages/torch/cuda/__init__.py:52: UserWarning: CUDA initialization: Found no NVIDIA driver on your system. Please check that you have an NVIDIA GPU and installed a driver from http://www.nvidia.com/Download/index.aspx (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729006826/work/c10/cuda/CUDAFunctions.cpp:100.)
  return torch._C._cuda_getDeviceCount() > 0
  0%|          | 0/101 [00:00<?, ?it/s]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 1/101 [00:02<04:00,  2.40s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 2/101 [00:04<03:48,  2.30s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 3/101 [00:06<03:32,  2.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/101 [00:07<03:12,  1.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▍         | 5/101 [00:09<03:05,  1.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 6/101 [00:11<03:06,  1.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 7/101 [00:13<02:55,  1.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 8/101 [00:15<02:57,  1.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 9/101 [00:17<02:52,  1.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|▉         | 10/101 [00:18<02:40,  1.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 11/101 [00:20<02:37,  1.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 12/101 [00:21<02:27,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 13/101 [00:24<02:53,  1.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 14/101 [00:26<02:49,  1.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▍        | 15/101 [00:28<02:38,  1.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 16/101 [00:29<02:32,  1.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 17/101 [00:31<02:22,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 18/101 [00:32<02:16,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 19/101 [00:34<02:24,  1.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|█▉        | 20/101 [00:36<02:29,  1.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 21/101 [00:38<02:20,  1.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 22/101 [00:41<02:44,  2.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 23/101 [00:42<02:34,  1.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 24/101 [00:44<02:25,  1.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▍       | 25/101 [00:46<02:15,  1.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 26/101 [00:47<02:07,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 27/101 [00:49<02:09,  1.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 28/101 [00:51<02:05,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▊       | 29/101 [00:52<02:02,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|██▉       | 30/101 [00:54<01:57,  1.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 31/101 [00:56<02:02,  1.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 32/101 [00:57<01:58,  1.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 33/101 [00:59<01:50,  1.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▎      | 34/101 [01:00<01:47,  1.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▍      | 35/101 [01:02<01:43,  1.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 36/101 [01:04<01:44,  1.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 37/101 [01:05<01:42,  1.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 38/101 [01:07<01:40,  1.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▊      | 39/101 [01:08<01:39,  1.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|███▉      | 40/101 [01:10<01:36,  1.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 41/101 [01:12<01:37,  1.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 42/101 [01:13<01:33,  1.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 43/101 [01:15<01:36,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▎     | 44/101 [01:17<01:36,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▍     | 45/101 [01:19<01:37,  1.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 46/101 [01:20<01:35,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 47/101 [01:22<01:34,  1.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 48/101 [01:24<01:34,  1.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▊     | 49/101 [01:26<01:28,  1.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|████▉     | 50/101 [01:28<01:41,  1.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 51/101 [01:29<01:25,  1.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████▏    | 52/101 [01:31<01:22,  1.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 53/101 [01:33<01:21,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 54/101 [01:35<01:24,  1.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 55/101 [01:36<01:18,  1.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▌    | 56/101 [01:38<01:13,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▋    | 57/101 [01:39<01:09,  1.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 58/101 [01:42<01:29,  2.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 59/101 [01:45<01:33,  2.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 60/101 [01:46<01:20,  1.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|██████    | 61/101 [01:48<01:13,  1.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████▏   | 62/101 [01:50<01:14,  1.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 63/101 [01:51<01:07,  1.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 64/101 [01:53<01:02,  1.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 65/101 [01:54<00:57,  1.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▌   | 66/101 [01:56<00:54,  1.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▋   | 67/101 [01:57<00:55,  1.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 68/101 [02:00<01:00,  1.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 69/101 [02:02<00:59,  1.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 70/101 [02:04<01:01,  1.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|███████   | 71/101 [02:06<01:02,  2.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████▏  | 72/101 [02:08<01:01,  2.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 73/101 [02:10<00:57,  2.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 74/101 [02:12<00:55,  2.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 75/101 [02:14<00:52,  2.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▌  | 76/101 [02:16<00:47,  1.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 77/101 [02:18<00:43,  1.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 78/101 [02:19<00:41,  1.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 79/101 [02:21<00:38,  1.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 80/101 [02:23<00:37,  1.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 81/101 [02:24<00:34,  1.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 82/101 [02:26<00:33,  1.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 83/101 [02:29<00:38,  2.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 84/101 [02:31<00:35,  2.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 85/101 [02:34<00:37,  2.35s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▌ | 86/101 [02:36<00:31,  2.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 87/101 [02:37<00:28,  2.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 88/101 [02:39<00:23,  1.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 89/101 [02:41<00:21,  1.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 90/101 [02:42<00:18,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 91/101 [02:44<00:16,  1.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 92/101 [02:45<00:15,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 93/101 [02:47<00:13,  1.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 94/101 [02:49<00:12,  1.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 95/101 [02:51<00:11,  1.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▌| 96/101 [02:53<00:09,  1.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 97/101 [02:54<00:07,  1.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 98/101 [02:56<00:05,  1.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 99/101 [02:58<00:03,  1.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 100/101 [03:00<00:01,  1.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|██████████| 101/101 [03:04<00:00,  2.33s/it]100%|██████████| 101/101 [03:04<00:00,  1.82s/it]
Trying to load from /users/rhydian/self-supervised-project/model_weights/SSECEncodersBothBoth
==> Resuming model trained for 106 epochs...
Trying to load from ../model_weights/angle_regressor4
==> Resuming model trained for 7 epochs...
5084463_20201_2_0,rtvydo4icz,1.5429670948726415,-108.99266474854105,-37.33231157850463

4308431_20201_2_0,vzonxn4icz,-1.9676109973620404,-97.43963118070602,-35.96220257446221

2511313_20201_2_0,vzrmcp4icz,-1.6005693989996854,-124.44673851906344,-27.479771061076264

5761885_20201_2_0,vzty2p4icz,0.1611750293819388,-66.34431442065838,-29.813081780374432

2448144_20201_2_0,vzwu8n4icz,3.8151930195328068,-99.44691887553793,-55.92523208200991

4607890_20201_2_0,w0p3fo4icz,-0.11076847115660898,-92.03164287092878,-19.36346542689958

1484787_20201_2_0,w137sn4icz,4.577949829111767,-95.59294760965497,-63.84639918884807

2450697_20201_2_0,w1enon4icz,-4.9226291543799,-107.48733294126811,-3.846846107137921

1825668_20201_2_0,w1ocfn4icz,3.8224736491352096,-115.95336338691183,-61.098707814395226

2231672_20201_2_0,w2b87p4icz,-2.362886104329995,-119.88075414540717,-27.377947800176486

1482923_20201_2_0,w2zwho4icz,-0.8294605997627293,-64.03684230484467,-22.953632343033306

3306431_20201_2_0,w4fslo4icz,-0.7744136414388427,-82.81639494201238,-19.148480507804862

2157037_20201_2_0,w53xqn4icz,24.246751049165283,25.478185420651045,-171.93768305584305

2799410_20201_2_0,w6zmro4icz,0.8176842836484347,-53.4724358406354,-39.841201279162334

2567158_20201_2_0,w7vc4p4icz,-1.9633094583889166,-57.737002433408435,-40.0914966477788

2888944_20201_2_0,w7xoep4icz,11.80164663442727,-49.72680040018082,-98.13388838803779

1324452_20201_2_0,w7z8hp4icz,0.7173108169074335,-134.1877730111086,-48.0746566538878

3616348_20201_2_0,w9jfdn4icz,0.30557063356827785,-103.31806071951263,-41.51340119541425

4770265_20201_2_0,wxn3ao4icz,1.4522092979006314,-98.556045496063,-34.04654248744855

2773743_20201_2_0,way69p4icz,1.3619455729547194,-86.4521247821117,-46.60335270970607

1511152_20201_2_0,wbahen4icz,-0.012301300845196084,-117.33447275627532,-35.582347089710126

4629886_20201_2_0,wbh0bn4icz,-0.5364464151004507,-90.62093006646538,-12.728428273092518

6006186_20201_2_0,wbsd4o4icz,3.283560053774158,-100.75488280469636,-47.38832888708157

2272031_20201_2_0,we0odp4icz,-1.2483088459081035,-90.87190392124302,-19.621973967638084

2849866_20201_2_0,weg2gp4icz,1.0979594102974288,-81.82548089451382,-35.0000134326408

3888487_20201_2_0,wfbu9p4icz,2.4773078354253486,-105.61510823180097,-48.572780557008215

5198131_20201_2_0,wfdw9o4icz,0.8663608532925221,-70.20977270525844,-28.14506225248553

4675863_20201_2_0,wh41yo4icz,0.7571612133879072,-88.4673675508622,-43.93036598560403

3039187_20201_2_0,whgaqn4icz,-2.399828882304271,-103.82465594899301,-29.012767717673512

4502752_20201_2_0,wi9o5o4icz,2.659614735694538,-120.69060368503509,-36.43185879790434

2738601_20201_2_0,wijjto4icz,22.81604935116858,34.27725711688936,-139.56633768941316

3026744_20201_2_0,wivnln4icz,-1.0143332961130316,-59.45451722338001,-17.631250075199958

4602841_20201_2_0,wm776p4icz,-1.520591373071585,-83.55677600895399,-31.651568740113447

5926545_20201_2_0,wn88to4icz,-1.1788270778539758,-73.26121776875769,-34.650306409059965

3406325_20201_2_0,wopr7n4icz,2.225459366241096,-98.12851598955407,-41.34781355216374

2578088_20201_2_0,wormrn4icz,-0.13704886488266768,-80.24772796098665,-41.440773758487126

1401433_20201_2_0,wqxefp4icz,1.1693236285772663,-106.50463096037586,-49.834686743229796

4652152_20201_2_0,wr2v4o4icz,-1.7154103982401576,-133.92241762112863,-13.768247643434606

4642716_20201_2_0,wrepfp4icz,-2.011169133387154,-63.64535602583149,-33.95816073340191

5455267_20201_2_0,wrisko4icz,2.0225220965536743,-97.13063056881964,-47.213296909772

5159440_20201_2_0,wryxjp4icz,-1.8026250057713376,-115.36053109977641,-37.35387757989116

1719726_20201_2_0,wrzvlo4icz,-3.774563650568088,-140.01948379617994,-20.344434624337225

3657496_20201_2_0,wt1emo4icz,0.5425632100446459,-78.46336819005569,-51.01179106576495

4579106_20201_2_0,wt1rvo4icz,3.5850573774845307,-57.432899114934685,-67.8693750253568

2074024_20201_2_0,wte5en4icz,0.9533145004201691,-132.29801739921697,-49.17982823603079

4457038_20201_2_0,wtfd9o4icz,-4.461950984592146,-91.72919976724913,-21.52140205572016

2990792_20201_2_0,wtyafo4icz,-3.54509691016737,-124.12788687074612,-17.659402032904765

4827625_20201_2_0,wuco5p4icz,2.79986606080528,-64.6448997954939,-55.45454640269877

5519979_20201_2_0,wve0cp4icz,-0.8806403182050733,-85.05325057878397,-22.243719445136236

2451242_20201_2_0,wvlspo4icz,-3.41959866944634,-89.5361378345334,-23.389354552749637

4770265_20201_2_0,wxn3ao4icz,1.4522092979006314,-98.556045496063,-34.04654248744855

5202526_20201_2_0,wxq1hp4icz,-1.3446077293972054,-92.37281221695207,-32.95464129788925

4497877_20201_2_0,wxu3ap4icz,1.9145996809670782,-78.53218397805946,-56.656749301917955

3689381_20201_2_0,wzjmco4icz,2.2249561189400797,-82.9814907786837,-41.84472327864849

4419395_20201_2_0,x1emjo4icz,-2.5546614054086376,-55.524575333955625,-22.067105548141683

4437241_20201_2_0,x1rg3p4icz,-0.6870006764739653,-55.16620749363949,-25.04343935029651

2081161_20201_2_0,x1zymo4icz,-1.0103679381266706,-96.65907613547529,-18.771206152655367

3314087_20201_2_0,x3dhto4icz,-0.2185427613820329,-84.73065398334646,-32.27766807636404

3523916_20201_2_0,50mybp4icz,2.770629840209688,-100.89305276032496,-34.70751757473383

1226840_20201_2_0,x51ivo4icz,3.953887183677706,-96.49855260011145,-69.14148843872792

4735592_20201_2_0,x5mtqo4icz,-0.8893621123640798,-88.28944209834953,-39.39722958513747

3020342_20201_2_0,7pve5o4icz,-0.7861062548401927,-88.84746358679507,-31.0604718970213

5748767_20201_2_0,x7gnan4icz,1.9341266085746236,-72.0672871578476,-78.22821697007029

5499518_20201_2_0,x7go9o4icz,0.013123727453686087,-104.30480031092574,-29.726822739024044

4151175_20201_2_0,xaqd6n4icz,-0.8166809262490082,-112.31740611341556,-21.70723926560362

3606174_20201_2_0,xcuado4icz,1.1602994401503657,-94.80166513347962,-49.84086484250081

5987222_20201_2_0,xe6j7o4icz,2.6912428341588703,-101.96986530034627,-46.112657213864225

3755461_20201_2_0,xenoyo4icz,-0.7007978361673672,-64.97256260517554,-36.16780323168925

4353342_20201_2_0,xfexxo4icz,-1.63921419099266,-83.5469288606158,-31.71058839194984

4430961_20201_2_0,xfps7o4icz,1.178503484273753,-96.50843058989551,-47.44466248512708

1627864_20201_2_0,pgbupo4icz,-1.7664859280336418,-101.79120671751693,-28.41746924439248

3756499_20201_2_0,xhrjmn4icz,6.562916765373345,-67.99187887497831,-63.85117977610834

2597304_20201_2_0,xih78o4icz,-0.49794700087012994,-103.40527833017663,-38.6911647031574

4857864_20201_2_0,xijhwo4icz,-0.9147392020083372,-82.42992198001258,-34.8550121336463

4060988_20201_2_0,xk3o6p4icz,0.28208576083082,-108.28923926503677,-52.836714231709934

5491775_20201_2_0,xkjx1o4icz,2.872490004779689,-80.63613111147146,-50.03613926075448

1053634_20201_2_0,xkzsyo4icz,2.1361423746130503,-94.48964171739132,-41.58545331246502

2879914_20201_2_0,xn36ro4icz,-0.32201246821100105,-123.03095727201705,-27.34860322290497

1732713_20201_2_0,xnnn9p4icz,-3.436670275922964,-105.36462806181953,-4.399005140790507

2089907_20201_2_0,xomx3p4icz,4.38768948126629,-88.15139038515233,-60.5729276953974

4239044_20201_2_0,xoncbp4icz,1.7035313295493852,-97.85751320450024,-35.79897050136765

1890439_20201_2_0,xp4cgp4icz,6.965629873139963,-51.902062402206155,-64.18071771530813

5854615_20201_2_0,xp4oap4icz,-7.099377730692138,-92.76432795169956,-4.743524535146605

4769502_20201_2_0,xq8lyo4icz,-0.4155641128526364,-83.81254612652486,-25.60628795202655

1788076_20201_2_0,xqeo9o4icz,-1.2696455193955025,-89.7956600111923,-32.515833870264274

5913020_20201_2_0,xqmzap4icz,-1.5568835879151426,-43.36439526348431,-15.677174659644734

5957476_20201_2_0,xrdrdp4icz,0.04933962126524026,-163.49728236768283,-39.47914409725881

4377876_20201_2_0,sdvu2p4icz,-1.7892553595894733,-101.37246813022014,-19.349932478950834

3746307_20201_2_0,xtp6tn4icz,1.7134469005794906,-123.11727270477928,-30.727523116852794

4550380_20201_2_0,xuh0ro4icz,-0.054206954924871896,-68.12308937075704,-26.773163453528824

2128463_20201_2_0,xvtvjo4icz,11.62535144401861,-61.2174529469778,-97.71569234458137

2182575_20201_2_0,xw81bp4icz,2.579477788838826,-128.7276816215907,-34.998576646638895

5464083_20201_2_0,xwy22p4icz,-3.8257627679407267,-116.63083506343065,-9.775452915941173

5488729_20201_2_0,xxggan4icz,0.30844278777842976,-70.33867902769722,-41.69263758236433

2810204_20201_2_0,1rjdcp4icz,-0.7334164267537304,-129.5719396169862,-32.168007365906746

5924262_20201_2_0,xxr3sn4icz,2.806311921934514,-51.088285093138836,-49.26454162474633

3082915_20201_2_0,xy55on4icz,-0.7598110716159749,-128.29877928824513,-34.71953695768394

2994568_20201_2_0,xywo2o4icz,-2.350172483181593,-82.64129499193103,-16.567909595620847

4390038_20201_2_0,xzugwn4icz,-0.17374381060206504,-76.71975941314972,-36.47764737655869

1559643_20201_2_0,y0cbln4icz,3.772704782628096,-104.16957175011964,-64.09947586782775

5368041_20201_2_0,n7k16p4icz,4.01523860907583,-116.38143961737987,-63.46438534465986

