3 th decile
.15
.20
/users/rhydian/anaconda3/envs/torch_env/lib/python3.7/site-packages/torch/cuda/__init__.py:52: UserWarning: CUDA initialization: Found no NVIDIA driver on your system. Please check that you have an NVIDIA GPU and installed a driver from http://www.nvidia.com/Download/index.aspx (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729006826/work/c10/cuda/CUDAFunctions.cpp:100.)
  return torch._C._cuda_getDeviceCount() > 0
  0%|          | 0/811 [00:00<?, ?it/s]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  0%|          | 1/811 [00:23<5:20:33, 23.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  0%|          | 2/811 [00:26<3:54:26, 17.39s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  0%|          | 3/811 [00:38<3:33:50, 15.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  0%|          | 4/811 [00:41<2:40:55, 11.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 5/811 [00:43<2:02:30,  9.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 6/811 [00:46<1:36:35,  7.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 7/811 [00:49<1:17:44,  5.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 8/811 [00:51<1:03:57,  4.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 9/811 [00:54<54:43,  4.09s/it]  Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 10/811 [00:56<47:52,  3.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|▏         | 11/811 [01:03<1:01:42,  4.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|▏         | 12/811 [01:06<54:28,  4.09s/it]  Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 13/811 [01:08<48:23,  3.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 14/811 [01:11<43:51,  3.30s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 15/811 [01:14<40:33,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 16/811 [01:18<46:18,  3.49s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 17/811 [01:20<42:06,  3.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 18/811 [01:23<39:40,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 19/811 [01:27<43:57,  3.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 20/811 [01:30<40:10,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 21/811 [01:32<39:19,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 22/811 [01:35<37:32,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 23/811 [01:38<37:15,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 24/811 [01:40<36:52,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 25/811 [01:43<36:08,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 26/811 [01:46<36:29,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 27/811 [01:49<35:32,  2.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 28/811 [01:51<35:09,  2.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▎         | 29/811 [01:54<34:19,  2.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▎         | 30/811 [01:56<33:48,  2.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 31/811 [01:59<34:01,  2.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 32/811 [02:01<33:36,  2.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 33/811 [02:04<33:07,  2.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 34/811 [02:07<34:28,  2.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 35/811 [02:09<34:19,  2.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 36/811 [02:12<34:50,  2.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▍         | 37/811 [02:15<34:09,  2.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▍         | 38/811 [02:17<33:59,  2.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▍         | 39/811 [02:20<33:01,  2.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▍         | 40/811 [02:23<35:47,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▌         | 41/811 [02:26<34:48,  2.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▌         | 42/811 [02:28<34:16,  2.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▌         | 43/811 [02:31<34:42,  2.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▌         | 44/811 [02:33<33:40,  2.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 45/811 [02:36<33:35,  2.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 46/811 [02:39<35:44,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 47/811 [02:42<34:06,  2.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 48/811 [02:44<33:38,  2.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 49/811 [02:47<33:10,  2.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 50/811 [02:49<33:19,  2.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▋         | 51/811 [02:52<33:11,  2.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▋         | 52/811 [02:55<33:20,  2.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 53/811 [02:57<33:16,  2.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 54/811 [03:00<32:43,  2.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 55/811 [03:02<32:27,  2.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 56/811 [03:05<32:06,  2.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 57/811 [03:08<33:12,  2.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 58/811 [03:10<32:29,  2.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 59/811 [03:13<34:00,  2.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 60/811 [03:16<33:35,  2.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 61/811 [03:19<33:59,  2.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 62/811 [03:21<33:33,  2.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 63/811 [03:24<32:48,  2.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 64/811 [03:27<33:40,  2.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 65/811 [03:29<32:47,  2.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 66/811 [03:32<34:20,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 67/811 [03:35<33:37,  2.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 68/811 [03:37<32:45,  2.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▊         | 69/811 [03:40<32:27,  2.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▊         | 70/811 [03:43<33:49,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 71/811 [03:45<32:50,  2.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 72/811 [03:48<32:45,  2.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 73/811 [03:50<32:06,  2.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 74/811 [03:54<34:30,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 75/811 [03:56<34:08,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 76/811 [03:59<34:49,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 77/811 [04:02<33:37,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|▉         | 78/811 [04:05<34:39,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|▉         | 79/811 [04:08<33:52,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|▉         | 80/811 [04:10<34:12,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|▉         | 81/811 [04:13<33:47,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|█         | 82/811 [04:17<36:48,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|█         | 83/811 [04:20<36:26,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|█         | 84/811 [04:22<35:20,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|█         | 85/811 [04:25<34:46,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 86/811 [04:28<34:35,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 87/811 [04:31<35:15,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 88/811 [04:34<34:36,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 89/811 [04:36<33:38,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 90/811 [04:39<33:09,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 91/811 [04:42<35:11,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█▏        | 92/811 [04:45<34:15,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█▏        | 93/811 [04:48<34:47,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 94/811 [04:51<33:36,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 95/811 [04:54<33:43,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 96/811 [04:56<33:00,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 97/811 [04:59<32:44,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 98/811 [05:02<32:42,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 99/811 [05:05<33:33,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 100/811 [05:08<33:45,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 101/811 [05:10<33:01,  2.79s/it] 13%|█▎        | 102/811 [05:13<32:19,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 103/811 [05:16<34:47,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 104/811 [05:19<35:05,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 105/811 [05:22<33:51,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 106/811 [05:26<38:19,  3.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 107/811 [05:30<39:46,  3.39s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 108/811 [05:33<37:44,  3.22s/it] 13%|█▎        | 109/811 [05:36<38:39,  3.30s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▎        | 110/811 [05:40<38:40,  3.31s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▎        | 111/811 [05:42<36:52,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 112/811 [05:45<35:30,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 113/811 [05:50<41:10,  3.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 114/811 [05:53<38:33,  3.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 115/811 [05:56<37:43,  3.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 116/811 [05:59<36:17,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 117/811 [06:02<35:32,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▍        | 118/811 [06:04<34:32,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▍        | 119/811 [06:08<35:30,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▍        | 120/811 [06:11<34:52,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▍        | 121/811 [06:13<33:25,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▌        | 122/811 [06:16<32:47,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▌        | 123/811 [06:19<33:46,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▌        | 124/811 [06:22<32:09,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▌        | 125/811 [06:24<31:42,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 126/811 [06:27<31:48,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 127/811 [06:30<31:09,  2.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 128/811 [06:33<32:15,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 129/811 [06:36<33:29,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 130/811 [06:39<35:01,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 131/811 [06:42<34:20,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▋        | 132/811 [06:45<33:00,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▋        | 133/811 [06:47<31:43,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 134/811 [06:50<30:59,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 135/811 [06:53<30:52,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 136/811 [06:55<30:40,  2.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 137/811 [06:59<33:27,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 138/811 [07:07<51:38,  4.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 139/811 [07:10<45:51,  4.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 140/811 [07:13<41:27,  3.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 141/811 [07:16<38:21,  3.43s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 142/811 [07:19<36:05,  3.24s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 143/811 [07:22<34:56,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 144/811 [07:25<34:15,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 145/811 [07:27<33:18,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 146/811 [07:30<31:34,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 147/811 [07:33<31:36,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 148/811 [07:36<31:39,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 149/811 [07:39<31:49,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 150/811 [07:42<32:09,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▊        | 151/811 [07:44<31:54,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▊        | 152/811 [07:47<31:40,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 153/811 [07:50<31:09,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 154/811 [07:53<31:22,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 155/811 [07:56<30:49,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 156/811 [07:58<30:04,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 157/811 [08:01<29:34,  2.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 158/811 [08:04<30:05,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|█▉        | 159/811 [08:07<32:07,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|█▉        | 160/811 [08:10<31:51,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|█▉        | 161/811 [08:14<34:32,  3.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|█▉        | 162/811 [08:17<32:58,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|██        | 163/811 [08:20<32:56,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|██        | 164/811 [08:23<32:41,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|██        | 165/811 [08:25<31:50,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|██        | 166/811 [08:28<31:21,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 167/811 [08:31<30:45,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 168/811 [08:34<30:17,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 169/811 [08:36<29:04,  2.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 170/811 [08:39<28:21,  2.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 171/811 [08:41<27:37,  2.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 172/811 [08:44<27:48,  2.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██▏       | 173/811 [08:47<30:20,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██▏       | 174/811 [08:50<29:53,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 175/811 [08:52<28:50,  2.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 176/811 [08:55<29:22,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 177/811 [08:58<29:41,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 178/811 [09:01<29:25,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 179/811 [09:04<30:30,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 180/811 [09:07<31:02,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 181/811 [09:10<30:37,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 182/811 [09:14<34:39,  3.31s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 183/811 [09:17<32:22,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 184/811 [09:25<48:36,  4.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 185/811 [09:28<43:39,  4.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 186/811 [09:31<38:42,  3.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 187/811 [09:34<36:44,  3.53s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 188/811 [09:37<34:16,  3.30s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 189/811 [09:40<33:27,  3.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 190/811 [09:43<32:25,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▎       | 191/811 [09:46<31:55,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▎       | 192/811 [09:49<31:31,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 193/811 [09:51<29:35,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 194/811 [09:54<30:00,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 195/811 [09:57<30:19,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 196/811 [10:00<28:58,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 197/811 [10:02<29:01,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 198/811 [10:12<49:42,  4.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▍       | 199/811 [10:15<43:11,  4.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▍       | 200/811 [10:18<38:44,  3.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▍       | 201/811 [10:20<35:21,  3.48s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▍       | 202/811 [10:23<33:28,  3.30s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▌       | 203/811 [10:26<31:42,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▌       | 204/811 [10:29<30:21,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▌       | 205/811 [10:31<29:32,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▌       | 206/811 [10:34<29:05,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 207/811 [10:37<29:18,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 208/811 [10:40<28:53,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 209/811 [10:43<29:09,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 210/811 [10:46<29:00,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 211/811 [10:48<28:00,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 212/811 [10:51<27:50,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▋       | 213/811 [10:54<27:58,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▋       | 214/811 [10:57<27:24,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 215/811 [10:59<27:14,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 216/811 [11:02<27:49,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 217/811 [11:05<28:02,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 218/811 [11:09<30:13,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 219/811 [11:11<29:07,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 220/811 [11:14<28:22,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 221/811 [11:17<28:33,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 222/811 [11:20<28:11,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 223/811 [11:23<27:59,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 224/811 [11:26<30:00,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 225/811 [11:39<58:11,  5.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 226/811 [11:42<48:34,  4.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 227/811 [11:45<42:52,  4.41s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 228/811 [11:48<38:33,  3.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 229/811 [11:50<34:49,  3.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 230/811 [11:53<32:29,  3.35s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 231/811 [11:56<31:09,  3.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▊       | 232/811 [12:01<36:32,  3.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▊       | 233/811 [12:05<34:54,  3.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 234/811 [12:08<34:43,  3.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 235/811 [12:11<32:05,  3.34s/it] 29%|██▉       | 236/811 [12:14<31:18,  3.27s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 237/811 [12:16<29:09,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 238/811 [12:19<27:35,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 239/811 [12:22<28:15,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|██▉       | 240/811 [12:25<27:27,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|██▉       | 241/811 [12:28<28:25,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|██▉       | 242/811 [12:31<27:47,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|██▉       | 243/811 [12:34<27:15,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|███       | 244/811 [12:37<27:28,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|███       | 245/811 [12:40<27:42,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|███       | 246/811 [12:42<27:04,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|███       | 247/811 [12:45<27:19,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 248/811 [12:48<27:03,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 249/811 [12:51<27:22,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 250/811 [12:54<27:04,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 251/811 [12:57<27:06,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 252/811 [13:01<31:19,  3.36s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 253/811 [13:04<29:05,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███▏      | 254/811 [13:17<55:43,  6.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███▏      | 255/811 [13:20<47:04,  5.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 256/811 [13:22<40:13,  4.35s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 257/811 [13:25<35:48,  3.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 258/811 [13:28<32:23,  3.51s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 259/811 [13:30<30:05,  3.27s/it] 32%|███▏      | 260/811 [13:33<28:16,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 261/811 [13:36<27:10,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 262/811 [13:38<26:31,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 263/811 [13:41<26:29,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 264/811 [13:47<35:08,  3.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 265/811 [13:50<31:48,  3.49s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 266/811 [13:53<29:38,  3.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 267/811 [13:56<30:28,  3.36s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 268/811 [13:59<28:27,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 269/811 [14:02<27:15,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 270/811 [14:15<53:37,  5.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 271/811 [14:17<45:03,  5.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▎      | 272/811 [14:21<40:20,  4.49s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▎      | 273/811 [14:23<35:41,  3.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 274/811 [14:26<32:09,  3.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 275/811 [14:29<30:04,  3.37s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 276/811 [14:33<32:38,  3.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 277/811 [14:37<33:23,  3.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 278/811 [14:41<34:29,  3.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 279/811 [14:45<32:18,  3.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▍      | 280/811 [14:47<30:17,  3.42s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▍      | 281/811 [14:50<27:59,  3.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▍      | 282/811 [14:53<28:29,  3.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▍      | 283/811 [14:56<27:14,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▌      | 284/811 [14:59<26:38,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▌      | 285/811 [15:02<25:39,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▌      | 286/811 [15:04<24:54,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▌      | 287/811 [15:07<24:59,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 288/811 [15:10<25:00,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 289/811 [15:13<24:34,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 290/811 [15:16<25:18,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 291/811 [15:20<27:27,  3.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 292/811 [15:24<31:21,  3.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 293/811 [15:37<54:56,  6.36s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▋      | 294/811 [15:40<45:35,  5.29s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▋      | 295/811 [15:43<39:51,  4.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▋      | 296/811 [15:46<35:23,  4.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 297/811 [15:49<31:43,  3.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 298/811 [15:53<34:20,  4.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 299/811 [15:58<35:30,  4.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 300/811 [16:02<33:55,  3.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 301/811 [16:04<30:09,  3.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 302/811 [16:07<27:40,  3.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 303/811 [16:10<26:41,  3.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 304/811 [16:12<25:25,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 305/811 [16:15<24:48,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 306/811 [16:18<24:46,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 307/811 [16:22<27:14,  3.24s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 308/811 [16:25<26:17,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 309/811 [16:30<30:21,  3.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 310/811 [16:32<27:54,  3.34s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 311/811 [16:35<26:06,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 312/811 [16:38<25:18,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▊      | 313/811 [16:41<25:14,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▊      | 314/811 [16:43<24:19,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 315/811 [16:46<24:15,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 316/811 [16:49<24:02,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 317/811 [16:52<23:39,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 318/811 [16:55<23:31,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 319/811 [16:59<27:15,  3.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 320/811 [17:02<26:31,  3.24s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|███▉      | 321/811 [17:05<25:02,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|███▉      | 322/811 [17:08<23:47,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|███▉      | 323/811 [17:10<22:56,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|███▉      | 324/811 [17:13<22:23,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|████      | 325/811 [17:16<22:18,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|████      | 326/811 [17:20<25:24,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|████      | 327/811 [17:22<24:21,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|████      | 328/811 [17:35<47:28,  5.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 329/811 [17:38<40:36,  5.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 330/811 [17:41<36:37,  4.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 331/811 [17:44<32:49,  4.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 332/811 [17:47<29:19,  3.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 333/811 [17:50<27:05,  3.40s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 334/811 [17:53<25:09,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████▏     | 335/811 [17:55<24:06,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████▏     | 336/811 [18:02<33:00,  4.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 337/811 [18:05<29:39,  3.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 338/811 [18:08<27:29,  3.49s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 339/811 [18:11<25:55,  3.30s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 340/811 [18:13<24:52,  3.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 341/811 [18:16<23:32,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 342/811 [18:19<23:15,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 343/811 [18:22<22:57,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 344/811 [18:25<22:20,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 345/811 [18:27<22:15,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 346/811 [18:30<22:46,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 347/811 [18:33<22:33,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 348/811 [18:37<25:14,  3.27s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 349/811 [18:40<24:08,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 350/811 [18:43<23:02,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 351/811 [18:46<22:42,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 352/811 [18:49<22:02,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▎     | 353/811 [18:51<22:11,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▎     | 354/811 [18:54<22:14,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 355/811 [18:57<22:03,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 356/811 [19:00<22:05,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 357/811 [19:03<22:33,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 358/811 [19:06<22:16,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 359/811 [19:09<21:51,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 360/811 [19:12<22:15,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▍     | 361/811 [19:15<21:41,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▍     | 362/811 [19:18<21:38,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▍     | 363/811 [19:21<21:29,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▍     | 364/811 [19:23<21:15,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▌     | 365/811 [19:26<21:00,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▌     | 366/811 [19:29<20:42,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▌     | 367/811 [19:31<20:06,  2.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▌     | 368/811 [19:35<21:09,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▌     | 369/811 [19:39<24:35,  3.34s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 370/811 [19:42<23:09,  3.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 371/811 [19:45<22:49,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 372/811 [19:48<22:17,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Trying to load from /users/rhydian/self-supervised-project/model_weights/SSECEncodersBothBoth
==> Resuming model trained for 106 epochs...
Trying to load from ../model_weights/angle_regressor4
==> Resuming model trained for 7 epochs...
3318745_20201_2_0,5diz5o4icz,0.5515808278177335,-110.89086384548364,-53.49052915868599

1035518_20201_2_0,5drpcn4icz,0.9436217106576149,-106.4145251259149,-42.40395334559099

4152824_20201_2_0,5dtkyn4icz,0.2315326804355637,-98.20079319598887,-45.37716443448069

2834651_20201_2_0,5dtysn4icz,-1.4465944977330292,-96.89592124771238,-41.310257587313714

4191173_20201_2_0,5e02wo4icz,-3.5029245990421494,-119.46140886941185,-18.22160873203356

4558854_20201_2_0,5e09fn4icz,-1.9402284342640932,-121.86896094554683,-21.641565417434734

4689795_20201_2_0,5e1man4icz,0.3924550507331094,-84.60783285998764,-33.69921245961385

5547834_20201_2_0,5e2dnn4icz,-0.381183566522668,-123.34140422185723,-33.43167174747933

1240436_20201_2_0,5e2nio4icz,0.752144523519279,-79.8248604708132,-44.224033441254775

4518918_20201_2_0,5e9ntn4icz,3.403389599461177,-125.22694193685231,-51.10927974468032

3916212_20201_2_0,5ealbo4icz,-1.155957200279831,-84.09907576866513,-25.529951831910594

1395367_20201_2_0,5ej3dp4icz,7.323275666003096,-100.56425017872499,-84.07824467431222

5329178_20201_2_0,5ekvjo4icz,-0.39364603195439624,-32.88383537211217,-63.80931645376933

5993642_20201_2_0,5ep93o4icz,-0.1044856030845191,-41.58174680724676,-31.212623242493294

3333893_20201_2_0,5exl8p4icz,2.6989850225130962,-93.40876436653181,-42.666823746695314

4475329_20201_2_0,5fdzco4icz,0.2016898170202394,-87.41675281388194,-21.21707766368

2938600_20201_2_0,5fjign4icz,1.4875944768038012,-79.15235657459309,-61.62025648882725

4474261_20201_2_0,5fl16p4icz,2.0717264768837977,-107.63449033827507,-40.8842212997062

5723157_20201_2_0,5fo64p4icz,0.22819751108551148,-70.87543246107069,-34.37919201531726

2663108_20201_2_0,5fos2p4icz,-3.2292443238995623,-74.78875099838706,-40.38577410908228

5142602_20201_2_0,5fqi3p4icz,1.2985151602213023,-59.30040364880199,-40.233756065324755

4272241_20201_2_0,5ftu6n4icz,13.746510960889701,-58.66122956954533,-121.43298624683494

4019707_20201_2_0,5ftz5p4icz,0.40681032665963385,-102.1823371153946,-54.5379561677816

4167511_20201_2_0,5fwbpo4icz,3.7754103277725846,-79.07625609896996,-52.57476661168731

5978288_20201_2_0,5fygso4icz,-0.8729046155396679,-98.21887499328778,-28.049180412881284

1915016_20201_2_0,5g0man4icz,-2.322144053326815,-109.27771841045072,-15.013054971866168

5153568_20201_2_0,5g1y7p4icz,0.01271114915018929,-75.02786684494086,-31.86346615624859

5380837_20201_2_0,5g47vo4icz,1.628388128483337,-60.01591193174059,-49.15191185325601

4410763_20201_2_0,5g7non4icz,0.5527412660827786,-66.59935432661496,-31.964908866214643

1293530_20201_2_0,5g80cn4icz,-1.3322881012739918,-147.1599342964723,-50.148476636983546

3120340_20201_2_0,5g9vco4icz,-2.331111842600186,-103.38902398694597,-11.923957627614058

3799031_20201_2_0,5gbemo4icz,2.881968993807253,-99.92699689207325,-39.32643503249932

2441570_20201_2_0,5gfnfo4icz,1.4191734151085011,-70.30533238760461,-40.43031419319877

3050258_20201_2_0,5gfxzo4icz,1.7674607684841261,-114.79343672419884,-53.06753550104324

5119297_20201_2_0,5gkhrn4icz,-2.673310121517414,-106.41708517428046,-20.278494059511118

1925179_20201_2_0,pqfqbn4icz,-0.0893608808486944,-105.32881843215284,-43.281744328881075

4407195_20201_2_0,5h3nrn4icz,-0.8121970721713068,-78.67696722492525,-37.162559081627165

4569422_20201_2_0,5h4feo4icz,-2.363747035119129,-132.56248928734448,-14.524414736547612

4694929_20201_2_0,5h5c9o4icz,3.097497610342201,-72.66725708692587,-50.14759432044602

2789181_20201_2_0,5h8wep4icz,-0.7822819246558035,-87.8636474577334,-25.25642058202989

2887060_20201_2_0,5hcagp4icz,1.533322609536456,-120.23696940983928,-54.894153064843536

2307839_20201_2_0,5hdsro4icz,2.135542895390557,-134.15200139138787,-39.46820542430346

4165553_20201_2_0,5hj58p4icz,0.7730641868244743,-124.66778937029244,-43.981753944460095

5943879_20201_2_0,5hmj2p4icz,1.2376389417788054,-88.40595252821689,-42.67423743539901

1692566_20201_2_0,5hr47p4icz,-1.497488334269326,-83.62035488180442,-32.155832809194706

4008955_20201_2_0,ccs46n4icz,1.193543323941008,-103.59873753107252,-51.15163487918184

2332016_20201_2_0,5hvpjn4icz,0.2919304967735125,-102.2717688098841,-43.40389716214774

5759435_20201_2_0,5hyt7n4icz,-2.881227166258532,-107.6045030335614,-22.137937074765418

5827336_20201_2_0,5i1f3p4icz,4.081291111854571,-94.18294431400727,-41.446507243281985

5163007_20201_2_0,5i716o4icz,-0.2708605177235424,-110.5409270131637,-39.04115078659291

5877946_20201_2_0,5ib0lo4icz,1.1998283683531188,-85.53601496391386,-38.83885449262955

1533598_20201_2_0,5ic0eo4icz,2.748991848719001,-99.47839598379872,-56.24352192973225

2032143_20201_2_0,5igf5o4icz,-0.6131411269585988,-119.76183530685896,-29.945647339106102

2521531_20201_2_0,5ihlko4icz,36.474320941655115,74.22053091986717,-143.50713346451056

5038522_20201_2_0,5ihoap4icz,-1.1111348694326113,-66.17210706598422,-24.763338719933046

1212486_20201_2_0,5in3fp4icz,4.165400261091421,-93.9217112088443,-69.07405410942266

4370600_20201_2_0,5iu7cp4icz,-2.120272405406736,-120.1406804001208,-38.69783956371394

2860733_20201_2_0,5iwaqn4icz,-1.9932763308384667,-133.94951183633918,-16.139485787848287

4330459_20201_2_0,5ix15o4icz,-1.785425741703325,-150.68578686217305,-7.815911560709111

3317098_20201_2_0,5ix4ip4icz,-0.6643265638845202,-85.40018181342214,-41.54091600570629

1428772_20201_2_0,5izaln4icz,0.5081487650209753,-131.36154499081047,-34.77111290898743

3002489_20201_2_0,5j08in4icz,3.1851928276861767,-105.9213154200869,-66.84098148549921

5103953_20201_2_0,5j2icn4icz,0.2003645687828206,-118.02665719266142,-35.36674689082574

4084351_20201_2_0,5j4gcn4icz,-3.0969864146330917,-130.68371824381953,-23.69106625446497

5768405_20201_2_0,5j64rn4icz,-5.836589660322309,-123.03852590130518,-5.176484828580001

3975856_20201_2_0,5jggun4icz,0.33399274968468406,-110.28269905046358,-25.783409294749205

1850657_20201_2_0,5jku5p4icz,0.7643205159320067,-76.57128174674176,-28.982118167183614

2030376_20201_2_0,5jopzo4icz,3.1558021087156645,-70.75806957693737,-42.966102814557885

2059365_20201_2_0,5jqqkn4icz,0.018791646364108818,-90.57067941907084,-43.10822548396074

1152709_20201_2_0,5jv3zo4icz,-1.8969189085954081,-122.63854274868507,-40.91997673643816

2753141_20201_2_0,5jvt3o4icz,-2.0197268161275828,-122.03415641370856,-3.3072829950875615

4874148_20201_2_0,5k0lep4icz,0.4730883374765598,-129.6082775155201,-40.12656600318425

2519554_20201_2_0,5k105o4icz,-0.04417790652287414,-76.00386365798684,-44.33834678138378

1011824_20201_2_0,5k39vo4icz,-0.7414116390840506,-70.35845388280535,-41.74073764321318

2813376_20201_2_0,5k46tn4icz,-3.4238065979000347,-103.75878170017674,-17.682364899655653

4165838_20201_2_0,5keojp4icz,-3.122366729133135,-111.17287469283696,-66.57697892032164

1510397_20201_2_0,5khb9o4icz,0.5021206442880266,-117.69913050167122,-27.914210792634066

4587760_20201_2_0,5km6ro4icz,0.7739033013459744,-101.83958816915106,-53.207390663912804

3637480_20201_2_0,5kvl6p4icz,-0.6018556611492349,-90.45655870234043,-22.134044068410972

1261792_20201_2_0,5kw9bo4icz,0.692740582744722,-49.675497669841405,-46.52876660050306

2552479_20201_2_0,5kzmcp4icz,-8.740978237036241,-114.28773576989124,51.42584967538994

5448516_20201_2_0,qzg27o4icz,-3.4274447438646582,-83.39890487270017,-12.170752301298208

2822653_20201_2_0,5l2rmo4icz,2.359400372941377,-93.37159837407356,-47.54352626038951

1992035_20201_2_0,5l69hp4icz,-5.7694657044045785,-142.26608012321893,-8.021563499098306

2851221_20201_2_0,5lbifo4icz,1.8333990458095653,-125.85650613808383,-44.18569379643421

2155302_20201_2_0,5ldcvo4icz,2.2459416574413433,-84.58575545678192,-44.79775929378707

1831112_20201_2_0,5lelto4icz,-1.469286381029398,-86.23362369600827,-34.25914763421241

4070068_20201_2_0,5lidep4icz,0.3897733449277634,-130.71563103385307,-42.653269979306884

4462380_20201_2_0,5lkh9o4icz,-1.2819442014986653,-64.4826289819344,-26.829454384354932

1544838_20201_2_0,5lkt7n4icz,-3.171733605553418,-89.08032799846461,-12.969209382008131

2175325_20201_2_0,5lnw9p4icz,-0.4658766308950879,-85.53372990587002,-26.53234689566196

5665724_20201_2_0,5lseso4icz,-0.5860336684274032,-72.61483805088918,-30.176378173879513

3777499_20201_2_0,5lvg7n4icz,0.2665219128030051,-101.94840119627176,-40.175953354840345

1847310_20201_2_0,5lzubp4icz,3.3717389581617656,-119.73040335895209,-70.59078675463442

1385522_20201_2_0,5m414p4icz,1.9993723947971758,-65.38742842409638,-43.29866036244084

4826160_20201_2_0,5m65to4icz,2.6426845827636716,-50.432198521145665,-53.04971423919494

2218520_20201_2_0,5mh0io4icz,-2.036326432072711,-80.07331459017206,-34.42972508891742

2929818_20201_2_0,5mkqgn4icz,2.5553561430768292,-97.1399200081996,-75.22070436192963

2956978_20201_2_0,5mnfkn4icz,0.27963725731113553,-122.52403058399815,-17.23339200210141

2226853_20201_2_0,5mnhip4icz,-0.15154247881173963,-79.5101608956185,-39.99264963650877

2712002_20201_2_0,5mqqko4icz,-0.9642028183483586,-61.36833178953438,-22.845530733000047

2831330_20201_2_0,5mto0o4icz,176.50125586915968,481.48828926283056,-70.44420523648883

5043174_20201_2_0,eai8ko4icz,0.311431185782949,-85.19295465735453,-30.576551230717996

2539108_20201_2_0,5n451o4icz,-1.310550871365558,-109.81078814840401,-47.407037213142885

1319779_20201_2_0,5ncw0o4icz,-0.2608955124209066,-101.15328254380452,-45.754321626536196

6009895_20201_2_0,5nfvfo4icz,-11.516097098538495,-152.72107264153072,27.937543123082136

4183700_20201_2_0,5ng8kn4icz,-1.0086900728690567,-69.56590552729745,-36.66340856254462

5165079_20201_2_0,5ngpcn4icz,2.4598285873297803,-112.87588854808189,-37.94692373468229

2773253_20201_2_0,5ni0gn4icz,134.75351292297606,295.5010155138259,-188.68594806945424

3217199_20201_2_0,5nmfgo4icz,-3.293549920444623,-149.2172309245203,-21.408760451063955

2775222_20201_2_0,5nmtun4icz,0.303286336858278,-80.63152669087503,-31.639866550344806

5092049_20201_2_0,5no4io4icz,3.5514538122041044,-50.60650417858761,-44.33739345420787

2442393_20201_2_0,5nq48n4icz,0.8161960428379637,-68.45435041795335,-25.085155773432078

4421991_20201_2_0,5o0pxn4icz,-0.7445589934414337,-97.35973122741075,-29.12936128676465

1434781_20201_2_0,5o75do4icz,-3.8501545984658323,-110.46083404064828,-22.45450573525784

2392888_20201_2_0,5o974p4icz,1.3580646304416522,-110.3386531906105,-31.64138095644236

1984207_20201_2_0,5oa3ko4icz,1.5768559066685566,-63.48940176275306,-52.997121811375536

2446843_20201_2_0,5oc1fo4icz,1.9358548366227755,-133.13136627090108,-64.6439673169395

3989008_20201_2_0,5oeu9n4icz,0.5990207029798545,-94.58072497531035,-48.7059378704992

1715389_20201_2_0,5ofk7n4icz,-0.15083976607150007,-104.74515898397709,-55.16743015160364

3226662_20201_2_0,5oi4mn4icz,-1.2025031091060538,-117.27407525047218,-25.73167328144544

5951012_20201_2_0,5oizpo4icz,-0.7203333013179587,-90.00999878792837,-24.928521487092468

5905166_20201_2_0,5okbhp4icz,0.45387680302440203,-66.70512564203543,-40.37987832595918

1921472_20201_2_0,5olq2o4icz,1.7149534376327689,-72.65754790324866,-41.11475035711351

4801868_20201_2_0,5om4ip4icz,-1.8615660517224073,-84.55840658550756,-24.660075213698477

1346516_20201_2_0,5oqydo4icz,-0.20601606518128374,-93.55031266256182,-61.24165591134911

1572497_20201_2_0,5osbpo4icz,0.057860757841432374,-76.5278031479186,-29.77063489311263

5516770_20201_2_0,5ota1o4icz,2.0267225124898145,-53.245922933263444,-43.35370479964763

3357580_20201_2_0,5oveso4icz,1.7558422307314072,-53.66840170204796,-44.34856512095189

3349805_20201_2_0,5oz66p4icz,-2.07492123247836,-114.88742788443733,-26.872427956602863

1438776_20201_2_0,5p5kmo4icz,-3.3500033174674546,-95.37601101786305,-20.920121012447083

2469061_20201_2_0,5p6f7o4icz,-2.4836782430032116,-113.06710572328987,-35.068784570949404

3075459_20201_2_0,5p6idp4icz,-1.680075796590669,-83.56523605081634,-25.265914074790857

4471005_20201_2_0,5p8hin4icz,-2.274246337170191,-72.2924175157853,-31.079612838215013

3390550_20201_2_0,5pgg4p4icz,-0.062021674862832034,-59.15660264278,-37.45745078305046

2125627_20201_2_0,5pkd9o4icz,2.295374793669534,-54.36782448237838,-48.48391824694373

1503653_20201_2_0,5pkdio4icz,-4.576000980789451,-102.15582544979338,-18.442658517675

2104368_20201_2_0,5q73dp4icz,0.21605296511342545,-115.0175685367982,-55.22377942110943

2404898_20201_2_0,5qbshp4icz,-1.593783121128958,-75.76389814147652,-15.36531284078201

4622429_20201_2_0,5qha4o4icz,-2.128342303596318,-93.9831844550213,-4.652923095122588

5352526_20201_2_0,5qhu0o4icz,0.819126932702785,-107.36353609950606,-53.88198267686923

1238804_20201_2_0,5qj4bn4icz,-1.701802054811859,-47.87979824839982,3.2882534368635135

4703321_20201_2_0,5qjbyo4icz,-0.9175139395836158,-76.784764062692,-26.106783079247464

1926470_20201_2_0,5qnkno4icz,1.4586196390609658,-46.641836961555555,-49.664464403765706

2404282_20201_2_0,5qofep4icz,-1.2210422751626295,-132.0789227321094,-46.90518432942521

2470417_20201_2_0,5qoymo4icz,0.38138089460499414,-84.52007341522938,-30.956318615356338

5704129_20201_2_0,5qvqbo4icz,0.887833871486313,-105.76353093038105,-38.94098670111711

2331774_20201_2_0,5qxaun4icz,-7.37083959661006,-108.32864240870668,1.542923697211691

3005220_20201_2_0,5qy1cn4icz,1.337156492048266,-109.50891556148468,-47.085465330224395

5993520_20201_2_0,5qy6ho4icz,-1.9267620396920493,-104.16852907410686,-26.069604910856285

4113989_20201_2_0,5qyecp4icz,-1.9564867053346342,-101.89677392167872,-17.77821391682599

1229646_20201_2_0,5qz7gn4icz,-3.5216864737611635,-128.0854138103425,-14.007461011639464

1081259_20201_2_0,5qzgin4icz,-1.6979227705039426,-102.77839619639389,-23.43672763777967

4034992_20201_2_0,5r1hpo4icz,3.6897418745702035,-109.97049347143562,-47.03492686047049

4986379_20201_2_0,5r86uo4icz,-1.4575034755284106,-82.13828250167589,-25.79220615227318

3698025_20201_2_0,5rfozo4icz,1.1291268955426421,-83.23073781951723,-49.913158062485635

2763863_20201_2_0,5rhf7p4icz,3.819266028328304,-61.784320425514665,-58.19446254191192

4856278_20201_2_0,5s2tqn4icz,1.3249612121230048,-93.92104566693789,-48.84068439055193

5764495_20201_2_0,5s3qun4icz,-0.7763582391291644,-81.59058159968717,-40.399107107673444

1614445_20201_2_0,5s59lo4icz,-1.4922753907754205,-71.03114529612418,-26.752482248598085

4861426_20201_2_0,5s8tsn4icz,-1.2167152352848074,-97.28271157834394,-25.193818323546296

2675780_20201_2_0,5sdj0o4icz,3.883756672293419,-83.19715538896091,-71.88260544761248

4009914_20201_2_0,5sfkjn4icz,-1.5024385519348735,-86.69544633825515,-56.56235972161437

2901121_20201_2_0,5slqpn4icz,-0.2843069127024752,-116.65907705162584,-45.74664823615831

2436748_20201_2_0,5slxjo4icz,0.486855015647895,-79.87407315426876,-36.64497251611297

1921413_20201_2_0,5socsn4icz,2.609066664182138,-97.13808057632693,-47.208605313668954

4189711_20201_2_0,5sr3jp4icz,2.6548258074464495,-67.6545242683762,-48.29446853980241

3814495_20201_2_0,5stl4p4icz,-0.6779442813106826,-81.56870218781285,-28.593945502474156

2440000_20201_2_0,5svmbo4icz,0.5697474880523917,-101.87158038748308,-27.495409912059728

4908178_20201_2_0,5syq9p4icz,15.586639697937782,-12.744118545734608,-105.3848004710915

1432515_20201_2_0,5t2djo4icz,-2.049043452220107,-84.88856245015728,-27.316404074732375

1553952_20201_2_0,5t3t8o4icz,1.7689328068533943,-63.271224003926875,-37.1611278786594

5157811_20201_2_0,5t6o7n4icz,1.8403372818877328,-65.96077715568899,-41.709725252637355

5350388_20201_2_0,5t70no4icz,1.1612998270748174,-72.88226608083988,-55.63029480786115

5703525_20201_2_0,5tdwkn4icz,1.9733933654678115,-87.17742735715487,-54.013974766919716

4239412_20201_2_0,5ter6p4icz,-2.229760022431502,-88.97417145449785,-27.58825990304524

2926468_20201_2_0,5timnn4icz,0.3496495446118226,-95.80689870257055,-28.02159367894822

5288852_20201_2_0,5tpyvn4icz,0.1176341871674477,-101.30392233725263,-26.42212562672033

1765156_20201_2_0,5trr5o4icz,-2.6826088252130025,-97.62992488021922,-26.373308875077456

1120520_20201_2_0,5u14jp4icz,-0.35453930749660517,-95.35074494125953,-49.112208956904055

4899761_20201_2_0,5u3buo4icz,0.5078278923257239,-79.50552498091582,-48.129318567844805

5060027_20201_2_0,5u5qcp4icz,1.1459699754865713,-80.94251371256527,-43.427330881218026

2217285_20201_2_0,5u6emo4icz,0.17603705739066233,-113.22971022900336,-19.38839583508033

4281415_20201_2_0,5u99ln4icz,-2.7916917291334133,-133.16308003985534,-22.80908749297477

3079023_20201_2_0,5ucmfp4icz,-0.7013711520376285,-106.06006587294476,-18.85731185467162

2747398_20201_2_0,5udybp4icz,-13.828907024636278,-146.20868935730402,18.82296381458552

5803170_20201_2_0,5ug5ho4icz,2.3010364284871003,-100.31136636640292,-47.215310044937695

1061327_20201_2_0,5ui07n4icz,-1.6376610701470968,-135.359707484159,-33.42188580044038

2657099_20201_2_0,5ujtzo4icz,-5.096784924928031,-79.062858845205,-1.7373648955598355

4440477_20201_2_0,5umotn4icz,-0.21245988021739928,-101.22007182055535,-23.871432980167214

3106996_20201_2_0,5upfyo4icz,2.031370186027167,-122.7667127611258,-44.47185230413338

2676013_20201_2_0,5uroeo4icz,-0.424981736859401,-64.28253642766606,-22.424707816670875

5142507_20201_2_0,5urq7p4icz,-0.4334915025898729,-133.75027003452485,-26.7462380628658

5640332_20201_2_0,5v9nro4icz,-0.07760576038753694,-62.772865272505214,-33.60148046832373

4616180_20201_2_0,5vaefo4icz,-1.5965312728976784,-82.59025368430244,-26.433710199071882

1927021_20201_2_0,5vd1cn4icz,1.6962187772703508,-142.29538970968292,-37.1246228662085

3428011_20201_2_0,5vf40p4icz,-0.9421444009830306,-64.99197418353845,-31.678936567695672

4491662_20201_2_0,5vkt8p4icz,-4.47713404779726,-88.51757144660206,-57.24653282365428

3014766_20201_2_0,5vpdep4icz,0.6147779547528216,-99.23357976354208,-45.83664089669992

2171371_20201_2_0,5vvpco4icz,1.836409704367176,-78.47220173604506,-39.79074623668022

2462593_20201_2_0,5vzafp4icz,-1.921584879076274,-54.91362249103392,-22.741246324200574

5290627_20201_2_0,5w0ekn4icz,-4.882775630518772,-76.58546517356226,-0.31905266915310904

4878295_20201_2_0,5w1ykn4icz,0.546385443815505,-54.157388600253455,-37.985969106440606

5916514_20201_2_0,5w42eo4icz,0.014683416350158861,-118.12309205940997,-32.0626961125551

2734019_20201_2_0,5w4f7o4icz,26.61917567147513,-32.96274173646279,-150.122247118789

5236828_20201_2_0,5w7ton4icz,-1.8629966493751327,-77.45713378227367,-10.712929502439877

5904245_20201_2_0,5w9sap4icz,-0.2986464442152045,-95.70336866964308,-44.434268067279774

4781820_20201_2_0,5wdwko4icz,-1.5753105519576565,-103.12898610592555,-33.662769778580795

5767266_20201_2_0,5wg07p4icz,1.6475087299698474,-115.47565379260388,-48.6196287739164

3080399_20201_2_0,5wg71o4icz,0.21604791037520807,-102.0479158639375,-34.76934333240567

5038002_20201_2_0,5woj0p4icz,2.0522303266159234,-109.5208023859119,-47.946062037041756

2895134_20201_2_0,5wvx5o4icz,-0.6720415906110268,-94.63651704481859,-45.14996171824983

5171389_20201_2_0,5wyaap4icz,-5.748732318368925,-143.50217431039525,9.19331847641621

5380792_20201_2_0,5x7exn4icz,2.686555993114186,-38.70599837066831,-58.09072630492098

4826050_20201_2_0,5x8q9n4icz,2.414701773219271,-96.71328168458066,-67.43132689629212

1909061_20201_2_0,5xg18o4icz,0.20813370072715393,-121.12886074202927,-24.940645524193187

5754032_20201_2_0,5xhc2p4icz,-0.05848976659758354,-88.33843011598259,-30.334683009262505

4145867_20201_2_0,5xiafo4icz,-0.7620582798492438,-79.1692905587839,-30.86374833583116

1751211_20201_2_0,5xqb5p4icz,-2.00424868653693,-31.179776074450757,-22.424024263138463

5913561_20201_2_0,5xrr7n4icz,-0.1342915877167202,-68.95643325560735,-26.659344504320728

1666946_20201_2_0,5y0cno4icz,-2.235041730752768,-129.90508134429172,-14.692485919927464

4568151_20201_2_0,5y65mo4icz,-2.162861476931578,-85.3225148418839,-20.70143109611348

1471534_20201_2_0,5ya1mo4icz,-0.6544377447930487,-67.17575942819286,-29.55200343759661

3161519_20201_2_0,5ygqjp4icz,1.265128458508444,-78.94419950808665,-49.47315092976521

1852009_20201_2_0,5yl01p4icz,-1.0398247183793978,-126.69868354671007,-31.449015244530692

3146897_20201_2_0,5ymr8o4icz,-0.1397411982009307,-106.93711444636017,-40.85266638363315

4875649_20201_2_0,5yssin4icz,-0.3297250358085268,-128.7488226320466,-31.562646770556142

1301620_20201_2_0,5ywq5p4icz,0.5368464585540971,-103.32994011935986,-59.9402578794283

4382865_20201_2_0,5yxaco4icz,-2.1847201711989213,-95.28964844940501,-29.37438792478278

1748161_20201_2_0,5z4akn4icz,-1.7103060108112036,-88.27652478919893,-33.71168495588137

1256863_20201_2_0,5z51oo4icz,-0.7627200830380547,-112.96441760651109,-35.58528087817419

3847490_20201_2_0,5z7pro4icz,-3.8619678313571297,-87.92327447770691,-16.43348221848754

3202297_20201_2_0,5zaa2o4icz,10.404021998130155,-38.00999722137911,-77.66137065250705

5025694_20201_2_0,jyxkcp4icz,0.2251292832404417,-60.73486877313931,-40.112395417500124

2794717_20201_2_0,5zl5un4icz,0.27289265360066284,-124.59463809359715,-41.70504670747761

5762971_20201_2_0,5zryvo4icz,109.62778014182908,158.14407819701103,-170.60185515463397

5297202_20201_2_0,5zsdip4icz,0.470451324633568,-58.255208201877934,-29.673540980076368

4056403_20201_2_0,5ztdrn4icz,-4.362130833078637,-82.32289029308686,-19.541849831160505

2090206_20201_2_0,5zuxhp4icz,2.410913982511849,-76.58631971141779,-54.02619234598993

2498906_20201_2_0,5zuyqn4icz,-1.7259561369450362,-124.72660430427692,-25.182444524129323

2771532_20201_2_0,5zvzwo4icz,-3.096419240841477,-91.4067640270913,-8.917509285796413

1858164_20201_2_0,5zw6dp4icz,0.5866603854528636,-99.56100949022652,-28.158504021692053

5285382_20201_2_0,5zwmcp4icz,-3.0394507577873577,-108.39566973527673,-32.70191901355952

4785118_20201_2_0,5zz0bn4icz,0.585177605457022,-102.80911714763369,-46.212907103889506

5318271_20201_2_0,5zzs2p4icz,1.9552628697238466,-36.70640813563739,-40.31585875642374

5735843_20201_2_0,600p5p4icz,-2.7454337040942582,-101.44922114129113,-11.599903780642052

5812509_20201_2_0,604ijn4icz,0.6056756929426749,-70.0041700000715,-35.04593306558172

2601962_20201_2_0,6077kp4icz,-4.937704390472252,-84.33759340352631,-5.812956306742549

5433970_20201_2_0,608flo4icz,-1.906503142871338,-72.21477624708575,-29.897676618417634

1739262_20201_2_0,60cr9p4icz,-1.5661674904883378,-99.69823135091409,-28.92947824269656

1666708_20201_2_0,60d0wn4icz,2.012937854068367,-101.08590474806235,-35.408974906303754

4291748_20201_2_0,60dzqo4icz,-0.9746217269024614,-108.51421005212322,-34.737481385472904

2403318_20201_2_0,60pafn4icz,-3.7079081173751707,-116.02500572410071,-46.74120201573477

3989454_20201_2_0,60pupo4icz,-0.45216705009228303,-94.1720885843221,-25.57769377505531

3536134_20201_2_0,60rzno4icz,7.4132972943266795,-85.63224954243793,-91.8861807207915

4383063_20201_2_0,60x6on4icz,-2.8511475202994876,-83.7261791739345,-26.249060940721762

4277530_20201_2_0,60z1gn4icz,1.4139317482409755,-105.258758217701,-30.197104506542402

5834789_20201_2_0,6107on4icz,1.3201865254374274,-112.2367573342014,-31.79148595051197

4144395_20201_2_0,610o8p4icz,1.128783693240729,-94.88185656041969,-41.56984672572921

5521049_20201_2_0,6127ko4icz,60.538792118573625,112.82660833766428,-187.11321719187706

3690633_20201_2_0,612i8n4icz,-4.043108345193013,-135.29560399163006,-13.284181267386273

4727103_20201_2_0,613j9o4icz,-0.7813895637983472,-138.39361878589258,-27.989160420181946

1372580_20201_2_0,615uep4icz,-0.5746565111610957,-120.77924281779289,-35.68549649782038

1905507_20201_2_0,616gvo4icz,-1.0691494087389417,-68.17149603513673,-42.33450706268303

1534976_20201_2_0,61c10p4icz,1.4077854666267282,-72.15255039780064,-36.517207110239156

1908818_20201_2_0,61eo5p4icz,-0.5040408423658722,-120.51806370808998,-29.15131515791458

5866546_20201_2_0,61gxeo4icz,-2.2449148862769603,-79.0980587515304,-16.854971119325754

4587923_20201_2_0,61iocp4icz,0.7872462107990671,-89.564351862786,-40.90701721579944

5854773_20201_2_0,61kzin4icz,-2.851458050746711,-154.29539194131695,-35.19429724743614

5053403_20201_2_0,61m3fp4icz,1.5270198490855573,-123.55429825209998,-39.77537203646598

5565352_20201_2_0,61mrvo4icz,-1.3327757497651092,-92.99526833707378,-28.95538577641716

3154001_20201_2_0,61n0ep4icz,1.621109482513512,-117.50014607949211,-35.98044714965313

5740146_20201_2_0,625wyo4icz,-0.10375207914307194,-95.06510640090093,-46.88036436995803

2872499_20201_2_0,627izo4icz,2.4476512284909493,-88.14277567600087,-48.22458495647011

2893280_20201_2_0,62chgo4icz,-0.11875000437158978,-103.24439469495167,-33.05326293768732

1604132_20201_2_0,62d6yo4icz,-2.977841028536589,-73.71591944342742,-22.624315404874196

2144166_20201_2_0,62f7uo4icz,-1.2914408450476886,-96.89964332776788,-19.25619864184317

1823305_20201_2_0,62imgo4icz,-4.202445408513942,-71.51445108761698,-3.4780637091127744

1022201_20201_2_0,62jy6o4icz,1.4356836425558828,-87.31710982951824,-49.78297395253125
 46%|████▌     | 373/811 [19:53<26:33,  3.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 374/811 [19:56<25:01,  3.44s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 375/811 [19:58<23:27,  3.23s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▋     | 376/811 [20:01<22:22,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▋     | 377/811 [20:04<22:45,  3.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 378/811 [20:08<22:29,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 379/811 [20:11<22:29,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 380/811 [20:13<21:20,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 381/811 [20:16<20:55,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 382/811 [20:20<22:35,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 383/811 [20:27<31:31,  4.42s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 384/811 [20:30<27:55,  3.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 385/811 [20:34<28:27,  4.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 386/811 [20:37<26:28,  3.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 387/811 [20:41<25:50,  3.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 388/811 [20:43<23:48,  3.38s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 389/811 [20:46<22:15,  3.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 390/811 [20:49<21:50,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 391/811 [20:52<21:43,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 392/811 [20:55<20:48,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 393/811 [20:59<22:53,  3.29s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▊     | 394/811 [21:02<22:45,  3.28s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▊     | 395/811 [21:06<23:29,  3.39s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 396/811 [21:09<22:46,  3.29s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 397/811 [21:12<21:42,  3.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 398/811 [21:15<21:23,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 399/811 [21:19<24:36,  3.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 400/811 [21:22<22:56,  3.35s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 401/811 [21:25<22:06,  3.24s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|████▉     | 402/811 [21:28<20:44,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|████▉     | 403/811 [21:31<20:20,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|████▉     | 404/811 [21:33<19:54,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|████▉     | 405/811 [21:36<19:46,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 406/811 [21:39<20:06,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 407/811 [21:42<19:31,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 408/811 [21:45<19:03,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 409/811 [21:51<24:52,  3.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 410/811 [21:53<22:46,  3.41s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 411/811 [21:56<21:15,  3.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 412/811 [21:59<20:56,  3.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 413/811 [22:02<20:30,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 414/811 [22:05<20:06,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 415/811 [22:08<19:54,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████▏    | 416/811 [22:11<20:10,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████▏    | 417/811 [22:14<19:36,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 418/811 [22:17<19:09,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 419/811 [22:21<21:31,  3.30s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 420/811 [22:24<20:28,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 421/811 [22:26<19:19,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 422/811 [22:29<18:34,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 423/811 [22:31<18:10,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 424/811 [22:34<17:50,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 425/811 [22:37<17:31,  2.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 426/811 [22:41<19:33,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 427/811 [22:43<19:01,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 428/811 [22:46<18:45,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 429/811 [22:49<18:29,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 430/811 [22:52<18:10,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 431/811 [22:54<17:43,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 432/811 [22:57<17:51,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 433/811 [23:00<17:23,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▎    | 434/811 [23:04<19:07,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▎    | 435/811 [23:07<18:53,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 436/811 [23:09<18:29,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 437/811 [23:12<18:14,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 438/811 [23:15<18:12,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 439/811 [23:18<18:05,  2.92s/it] 54%|█████▍    | 440/811 [23:21<18:00,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 441/811 [23:24<18:20,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▍    | 442/811 [23:27<17:50,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▍    | 443/811 [23:30<17:36,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▍    | 444/811 [23:33<17:37,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▍    | 445/811 [23:35<17:15,  2.83s/it] 55%|█████▍    | 446/811 [23:38<17:40,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▌    | 447/811 [23:41<17:22,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▌    | 448/811 [23:44<17:16,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▌    | 449/811 [23:47<17:22,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▌    | 450/811 [23:50<17:20,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 451/811 [23:53<17:06,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 452/811 [23:55<17:13,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 453/811 [23:58<16:18,  2.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 454/811 [24:01<16:15,  2.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 455/811 [24:03<16:21,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 456/811 [24:06<16:24,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▋    | 457/811 [24:09<16:18,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▋    | 458/811 [24:12<16:31,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 459/811 [24:15<16:17,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 460/811 [24:17<16:08,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 461/811 [24:20<15:53,  2.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 462/811 [24:23<16:07,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 463/811 [24:26<15:58,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 464/811 [24:28<16:08,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 465/811 [24:31<16:25,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 466/811 [24:34<16:46,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 467/811 [24:37<16:31,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 468/811 [24:40<15:57,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 469/811 [24:43<16:05,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 470/811 [24:46<16:02,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 471/811 [24:48<15:49,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 472/811 [24:51<15:50,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 473/811 [24:54<15:52,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 474/811 [24:57<15:31,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▊    | 475/811 [24:59<15:16,  2.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▊    | 476/811 [25:02<15:42,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 477/811 [25:05<15:24,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 478/811 [25:09<17:19,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 479/811 [25:11<16:23,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 480/811 [25:20<25:03,  4.54s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 481/811 [25:22<22:04,  4.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 482/811 [25:25<19:55,  3.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|█████▉    | 483/811 [25:28<18:00,  3.29s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|█████▉    | 484/811 [25:30<17:03,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|█████▉    | 485/811 [25:34<16:52,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|█████▉    | 486/811 [25:36<16:02,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|██████    | 487/811 [25:39<15:55,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|██████    | 488/811 [25:42<15:34,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|██████    | 489/811 [25:45<15:24,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|██████    | 490/811 [25:50<19:51,  3.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 491/811 [25:53<18:01,  3.38s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 492/811 [25:56<16:43,  3.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 493/811 [25:58<16:00,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 494/811 [26:01<15:52,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 495/811 [26:04<15:40,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 496/811 [26:07<15:24,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████▏   | 497/811 [26:10<14:44,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████▏   | 498/811 [26:12<14:43,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 499/811 [26:15<14:59,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 500/811 [26:18<14:46,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 501/811 [26:21<14:47,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 502/811 [26:24<15:00,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 503/811 [26:27<14:34,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 504/811 [26:30<14:28,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 505/811 [26:33<15:05,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 506/811 [26:36<16:04,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 507/811 [26:41<17:30,  3.46s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 508/811 [26:44<17:33,  3.48s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 509/811 [26:48<18:14,  3.62s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 510/811 [26:51<17:01,  3.39s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 511/811 [26:53<15:39,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 512/811 [26:56<14:54,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 513/811 [26:59<14:45,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 514/811 [27:02<14:20,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▎   | 515/811 [27:05<14:18,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▎   | 516/811 [27:08<15:23,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▎   | 517/811 [27:11<14:44,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 518/811 [27:14<14:07,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 519/811 [27:18<15:27,  3.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 520/811 [27:21<16:19,  3.37s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 521/811 [27:24<15:21,  3.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 522/811 [27:27<15:02,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 523/811 [27:30<14:35,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▍   | 524/811 [27:33<14:13,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▍   | 525/811 [27:36<14:00,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▍   | 526/811 [27:38<13:51,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▍   | 527/811 [27:42<14:08,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▌   | 528/811 [27:45<15:02,  3.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▌   | 529/811 [27:51<17:59,  3.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▌   | 530/811 [28:03<30:42,  6.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▌   | 531/811 [28:06<25:24,  5.45s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 532/811 [28:10<22:59,  4.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 533/811 [28:14<21:38,  4.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 534/811 [28:28<33:54,  7.35s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 535/811 [28:31<28:04,  6.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 536/811 [28:34<23:33,  5.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 537/811 [28:37<20:12,  4.42s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▋   | 538/811 [28:39<17:49,  3.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▋   | 539/811 [28:42<16:26,  3.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 540/811 [28:45<15:05,  3.34s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 541/811 [28:48<14:28,  3.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 542/811 [28:51<13:42,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 543/811 [28:54<13:34,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 544/811 [28:57<13:33,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 545/811 [28:59<13:06,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 546/811 [29:02<12:42,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 547/811 [29:05<12:33,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 548/811 [29:08<12:14,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 549/811 [29:10<11:58,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 550/811 [29:13<11:56,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 551/811 [29:16<11:48,  2.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 552/811 [29:20<13:24,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 553/811 [29:32<25:45,  5.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 554/811 [29:36<22:59,  5.37s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 555/811 [29:39<19:44,  4.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▊   | 556/811 [29:42<17:31,  4.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▊   | 557/811 [29:45<15:40,  3.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 558/811 [29:48<14:40,  3.48s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 559/811 [29:50<13:37,  3.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 560/811 [29:53<12:50,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 561/811 [29:56<12:11,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 562/811 [29:58<11:48,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 563/811 [30:01<11:38,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|██████▉   | 564/811 [30:04<11:24,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|██████▉   | 565/811 [30:06<11:15,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|██████▉   | 566/811 [30:09<10:57,  2.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|██████▉   | 567/811 [30:12<10:57,  2.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|███████   | 568/811 [30:14<10:53,  2.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|███████   | 569/811 [30:18<11:24,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|███████   | 570/811 [30:20<11:14,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|███████   | 571/811 [30:24<12:08,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 572/811 [30:27<11:44,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 573/811 [30:29<11:31,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 574/811 [30:32<11:12,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 575/811 [30:35<10:56,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 576/811 [30:38<11:11,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 577/811 [30:40<10:46,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████▏  | 578/811 [30:43<10:39,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████▏  | 579/811 [30:46<10:26,  2.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 580/811 [30:48<10:17,  2.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 581/811 [30:51<10:07,  2.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 582/811 [30:54<10:16,  2.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 583/811 [30:56<10:08,  2.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 584/811 [31:00<11:02,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 585/811 [31:04<12:13,  3.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 586/811 [31:16<22:49,  6.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 587/811 [31:19<19:08,  5.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 588/811 [31:22<16:11,  4.36s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 589/811 [31:25<14:35,  3.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 590/811 [31:28<13:14,  3.60s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 591/811 [31:30<12:04,  3.29s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 592/811 [31:33<11:34,  3.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 593/811 [31:36<10:58,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 594/811 [31:39<10:58,  3.04s/it] 73%|███████▎  | 595/811 [31:42<10:50,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 596/811 [31:45<10:33,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▎  | 597/811 [31:47<10:19,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▎  | 598/811 [31:50<10:03,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 599/811 [31:53<10:07,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 600/811 [31:56<09:56,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 601/811 [31:59<10:16,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 602/811 [32:02<10:03,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 603/811 [32:05<10:06,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 604/811 [32:28<31:14,  9.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▍  | 605/811 [32:34<28:00,  8.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▍  | 606/811 [32:37<22:03,  6.46s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▍  | 607/811 [32:41<19:57,  5.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▍  | 608/811 [32:44<16:35,  4.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▌  | 609/811 [32:46<14:10,  4.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▌  | 610/811 [32:55<18:22,  5.49s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▌  | 611/811 [32:58<15:43,  4.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▌  | 612/811 [33:01<13:42,  4.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 613/811 [33:03<12:10,  3.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 614/811 [33:06<11:11,  3.41s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 615/811 [33:09<10:48,  3.31s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 616/811 [33:12<10:33,  3.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 617/811 [33:15<10:06,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 618/811 [33:18<09:37,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▋  | 619/811 [33:21<09:30,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▋  | 620/811 [33:23<09:13,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 621/811 [33:26<09:14,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 622/811 [33:29<08:56,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 623/811 [33:32<08:43,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 624/811 [33:35<09:31,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 625/811 [33:38<09:36,  3.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 626/811 [33:42<09:54,  3.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 627/811 [33:44<09:14,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 628/811 [33:47<08:48,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 629/811 [33:50<08:30,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 630/811 [33:52<08:21,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 631/811 [33:55<08:19,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 632/811 [33:58<08:12,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 633/811 [34:01<08:22,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 634/811 [34:04<08:26,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 635/811 [34:07<08:30,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 636/811 [34:10<08:17,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▊  | 637/811 [34:12<08:14,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▊  | 638/811 [34:17<10:05,  3.50s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 639/811 [34:20<09:33,  3.34s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 640/811 [34:24<09:32,  3.35s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 641/811 [34:27<09:17,  3.28s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 642/811 [34:30<08:47,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 643/811 [34:32<08:20,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 644/811 [34:35<08:03,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|███████▉  | 645/811 [34:39<08:51,  3.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|███████▉  | 646/811 [34:42<08:37,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|███████▉  | 647/811 [34:44<08:10,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|███████▉  | 648/811 [34:47<07:47,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 649/811 [34:50<07:49,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 650/811 [34:53<07:45,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 651/811 [34:56<07:45,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 652/811 [34:59<07:33,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 653/811 [35:02<07:37,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).

3289860_20201_2_0,62m6bp4icz,2.291138824657908,-86.6108091011445,-55.48241763772522

2580198_20201_2_0,62p5gn4icz,-2.5291492945338567,-124.87354950027236,-30.986474624757946

3745218_20201_2_0,62pmcp4icz,0.1778693899916849,-80.91382094897585,-53.540882869581424

4900676_20201_2_0,62wyjn4icz,0.954208689120278,-123.2408007797213,-40.39901369189661

5752278_20201_2_0,62xdkn4icz,-2.725701231839655,-112.59376239928835,-9.00228404980399

2024520_20201_2_0,632zmo4icz,2.6835415361486206,-62.79620708435448,-39.33836739831008

1073144_20201_2_0,633jyo4icz,-1.4054362124121147,-86.9771905937279,-20.905524550225252

4396831_20201_2_0,633qjo4icz,1.3480824194498755,-44.729627508111946,-46.725526769468686

2654175_20201_2_0,6381ip4icz,0.8509638843261147,-134.80550135267657,-19.237527885823283

3807205_20201_2_0,63c8ip4icz,3.6988381137448525,-88.05467433233372,-72.76010650535517

3304157_20201_2_0,63cl2o4icz,0.40682494837208166,-62.0226514972251,-32.85202575791962

4304551_20201_2_0,63gj0o4icz,2.0739597350933754,-68.54225979758633,-43.58803808478936

5538655_20201_2_0,63jkun4icz,-1.6402445522901097,-68.45849643141236,-25.78193428509678

5759417_20201_2_0,63te8o4icz,3.5991388554666197,-122.24939269108998,-56.24206794952731

2513037_20201_2_0,63twko4icz,-2.7865375898434026,-99.66626554683015,-16.699135845342354

2874608_20201_2_0,63vtjo4icz,2.1431194536053972,-96.03800775071613,-48.56948394193208

3191508_20201_2_0,63wd9p4icz,1.8858067847380697,-77.49784207082695,-43.31796149024642

4697981_20201_2_0,640oan4icz,-2.564062635137815,-90.52729738876198,-7.877821787870758

1668972_20201_2_0,641t0p4icz,-1.981741912140258,-63.92496140136387,-12.256464165996306

2069359_20201_2_0,646ydn4icz,-7.751191077203325,-136.92879034996332,4.7223930550010635

2753388_20201_2_0,64agip4icz,4.836407551374562,-118.0758085684921,-91.06719454547515

5969715_20201_2_0,64ch3p4icz,-1.3896199076691687,-72.89333264185763,-27.65684791227332

5441944_20201_2_0,64gwin4icz,-0.13488651382834876,-126.47152864067488,-41.35421231737084

4738447_20201_2_0,64hlxn4icz,0.14154876100921407,-88.35231919797147,-50.84001303674842

4207934_20201_2_0,64hw0p4icz,-2.784906711069827,-84.9237223887217,-20.982565768430078

5727959_20201_2_0,64ibyo4icz,-0.0938008989817952,-60.83485222633877,-30.689511515264712

4237078_20201_2_0,64j0gp4icz,-0.9772562616958914,-121.99152853783337,-36.42558540146851

1513833_20201_2_0,64j9ep4icz,0.6244236836118464,-78.1345683057952,-29.897666552006

1074224_20201_2_0,64k6rn4icz,-1.7999476932799003,-74.48712852349962,-26.443840764074764

3601838_20201_2_0,64lo7p4icz,-0.42233465367890616,-138.4317456547721,-22.271348293756176

2144090_20201_2_0,64oxjp4icz,-3.6009673494658605,-121.99162902030898,-10.950396534610604

2739833_20201_2_0,64ozpn4icz,-2.0697275418291636,-122.78342192175995,-23.05291550635836

1779352_20201_2_0,64udvn4icz,-8.031289192407801,-72.08073528618223,20.218134965362793

2489322_20201_2_0,64w66p4icz,-1.5542558751289741,-130.57141482740658,-20.175867098490414

3088902_20201_2_0,64x88o4icz,-0.5519823794373547,-94.06188051868301,-47.3530985860633

3251536_20201_2_0,64z4to4icz,3.249393466512812,-72.94126099982103,-57.25931824153541

3103191_20201_2_0,6501vn4icz,-4.128081234268493,-84.55530696965386,-18.459339392682736

2299817_20201_2_0,65067p4icz,-0.8367873851511833,-133.74785724337275,-29.907864654267684

1484440_20201_2_0,6522ap4icz,-1.9208841089873274,-67.8285340234811,-31.844289978679853

1725038_20201_2_0,656f5p4icz,2.154723432762797,-114.97419967643407,-46.01260402952201

5104730_20201_2_0,65ag2p4icz,-1.5762830665416254,-132.87249900933637,-36.46807155490686

3604410_20201_2_0,65bk8p4icz,1.9197104237061775,-82.16283322229012,-55.18322791201874

4265290_20201_2_0,65bv6o4icz,4.9100371042195965,-66.17504107714538,-37.85963725496815

2225879_20201_2_0,65crdo4icz,0.6518931591356274,-85.46089090633728,-51.62630947935642

1072539_20201_2_0,65eqbn4icz,-2.072472626826129,-130.380449632193,-23.443526726936994

3650594_20201_2_0,65fpon4icz,11.940734111305666,-109.8435500358537,-94.32829289702907

4482430_20201_2_0,65h31o4icz,0.7131139445945484,-92.70439187026417,-44.92829012011572

3713141_20201_2_0,65hcvo4icz,1.7031968623105518,-25.541123633644247,-49.237978013012935

1281846_20201_2_0,65hx3p4icz,3.389094925062272,-108.98506036473825,-40.39313818623239

4567757_20201_2_0,65mzco4icz,0.7150120715531337,-124.2923561840366,-26.85553847930494

1308596_20201_2_0,65yjho4icz,0.9493840999610035,-78.47128764315215,-30.670235425329196

5623531_20201_2_0,662l5o4icz,-0.3133606181070815,-93.52375998292564,-31.393884611071087

3561805_20201_2_0,665qap4icz,-3.880747326765751,-122.6398591053208,0.108895609833084

3524581_20201_2_0,66db8p4icz,-4.466160683653251,-113.37646817050762,-7.345529832824738

4233406_20201_2_0,66esuo4icz,-0.6584166299898353,-39.45345428878767,-55.41223461187283

1567955_20201_2_0,66p1co4icz,1.7889095222302172,-65.59136442554481,-52.22451727631801

1784947_20201_2_0,66pg8o4icz,-1.8634197490936961,-49.826826829367434,-14.052386241314935

4198727_20201_2_0,66qicp4icz,-2.756242741208453,-105.66137017972875,-18.95337247697273

2660093_20201_2_0,66qmcp4icz,2.154318669511283,-84.86514861880642,-47.807579561898166

3728893_20201_2_0,66rdep4icz,-1.2496742692427212,-119.39959487474232,-42.28155506948298

2200816_20201_2_0,66rkco4icz,2.549527754561683,-78.12299085191219,-44.50137502986482

3996333_20201_2_0,66smjp4icz,-0.9254925973463408,-70.73358457888261,-40.6618042520861

1321940_20201_2_0,66u66p4icz,4.6706258659572,-106.31701433487078,-47.26472920461835

1122926_20201_2_0,6718io4icz,4.729921005111121,-49.765323773439206,-45.99609459258562

2207925_20201_2_0,671fco4icz,-1.2266043519192353,-122.44311329827502,-18.939919724251666

3466885_20201_2_0,6728uo4icz,2.143854789769444,-66.92644283559866,-78.33347338905341

1500685_20201_2_0,673g0p4icz,-0.9514726351159221,-53.0361752744937,-27.048366141832147

2918205_20201_2_0,6745xn4icz,0.046613471446685484,-101.29263911645191,-33.57619058614435

5717935_20201_2_0,675zfo4icz,-1.7369902614428065,-154.04672936580786,-30.15165488234588

3699806_20201_2_0,676e9p4icz,-0.6879556328062423,-119.23617338391344,-39.8134458849524

4425564_20201_2_0,67ea2p4icz,3.5314141506359515,-69.36981194514323,-52.147735857086616

5047031_20201_2_0,67ef3p4icz,0.9327080717833828,-71.10078205138907,-37.41380596328398

4745770_20201_2_0,67fkzo4icz,1.1349831208941334,-68.52951482079354,-36.581359584023986

3022137_20201_2_0,67h84p4icz,-0.004614800061513195,-100.85254928476473,-42.035256545108

3398751_20201_2_0,67irbp4icz,-7.976127522879416,-110.58475116353017,-3.6744876077544575

2695918_20201_2_0,67pu7p4icz,-1.2633199816703855,-128.19201405409825,-27.926647456087437

2142297_20201_2_0,67sgsn4icz,-0.35017628358019687,-95.88312545865807,-56.21244508189652

1526301_20201_2_0,67wstn4icz,1.2597329550342067,-118.46515401703437,-31.730949099874522

3158763_20201_2_0,681n9p4icz,4.04782970134839,-69.96307673342133,-50.054912838629065

5411718_20201_2_0,68azun4icz,2.359799979846593,-59.85159881104994,-43.51546706944569

4695054_20201_2_0,68cvnn4icz,-0.7205028468595149,-114.09600184712207,-32.972930242224606

2267716_20201_2_0,68l1cn4icz,-0.47181032380779203,-127.36709607363179,-31.982276053193345

5352621_20201_2_0,68lgap4icz,0.39146375436867165,-64.70061192915608,-35.38401806463939

1946704_20201_2_0,68n31o4icz,1.5742360377402516,-114.91641452337296,-31.549159376412902

2057185_20201_2_0,68ndyo4icz,-2.260178247812771,-90.89919507393421,-26.550591741210496

2903767_20201_2_0,68nk9n4icz,0.061047990653927006,-99.36517485321704,-17.832143535449518

1757799_20201_2_0,68rdkn4icz,-4.409112231259112,-135.24977425781822,-16.044947005668007

1488351_20201_2_0,68srpn4icz,2.7422568359943127,-82.46898605975753,-44.7592424497995

5845517_20201_2_0,68vtjp4icz,1.0032724298949554,-65.64233182986729,-54.178758303834655

2702432_20201_2_0,68wono4icz,1.8141065300413834,-47.89920181710215,-45.23517444746011

4915023_20201_2_0,68ypln4icz,0.8998081902098344,-119.35473252761963,-41.01085505403546

5755331_20201_2_0,69au7o4icz,-0.9769541518693178,-95.16270183867314,-36.68705529147492

1311850_20201_2_0,69b3oo4icz,1.3135701026373472,-120.32312257442797,-63.884531760656586

3075099_20201_2_0,69durn4icz,-0.32525387396146427,-68.19072698104512,-40.439922715999984

3028010_20201_2_0,69e47p4icz,-1.186819529970478,-80.91806079386765,-24.152854757051273

5153130_20201_2_0,69o2ep4icz,-2.4465248264693926,-103.73701043164607,-29.698687484452407

3857843_20201_2_0,69v84o4icz,-0.5373552952697196,-111.8259890546629,-38.884957295015994

2814803_20201_2_0,69vofn4icz,-2.161059899548737,-86.61876546094592,-18.10513311418498

3011236_20201_2_0,69w8xo4icz,-0.26321516726470884,-120.42841599391201,-52.81821356899067

5692068_20201_2_0,69xnhp4icz,2.2117216664331063,-92.44601850091982,-30.306234112749564

3477380_20201_2_0,6a1bao4icz,-0.45765144375887445,-133.4453607679364,-32.88505393323504

5209430_20201_2_0,6a1p0o4icz,-1.8669706469903966,-76.0323139214313,-34.2351666420316

3314211_20201_2_0,6a3ean4icz,1.2679159801919566,-84.73630081392679,-73.87362897352361

4080922_20201_2_0,6a4pbp4icz,-1.8606665416538875,-81.25911262773917,-31.218334674793155

3685610_20201_2_0,6a8knn4icz,3.441730508655981,-42.3195418306224,-59.107802750673414

3546930_20201_2_0,6a8u0o4icz,0.5815828708047712,-79.72163969570977,-41.95345938113228

1900838_20201_2_0,6a99so4icz,0.24793242438610016,-76.12224979678439,-40.77923243218518

4978498_20201_2_0,6a9uuo4icz,-3.0191607448027646,-72.33098322915902,-19.184738852488323

2811884_20201_2_0,6acqpo4icz,-1.1662580785834133,-55.53160945760851,-40.531262206323404

1905829_20201_2_0,6agrhn4icz,0.6322675453798516,-106.30905005877034,-35.36070193730987

2479088_20201_2_0,6ajcoo4icz,-0.4911824062411413,-105.70788413617052,-39.385364342382545

2496114_20201_2_0,6akb1p4icz,1.2624714348612327,-91.16357646568954,-57.36783147305002

5751580_20201_2_0,6amnmn4icz,0.4955969418806262,-94.38754688678102,-32.48953822570209

2837149_20201_2_0,6anzwn4icz,-0.4240976033604801,-135.58836026440446,-34.288821112123884

2520423_20201_2_0,6aruvn4icz,1.590184042499441,-121.06949438226226,-38.899319693591664

1495114_20201_2_0,mwbedo4icz,-5.078927077745126,-140.4812683088914,-20.195103319207533

2648730_20201_2_0,6avnun4icz,0.05941999692056525,-150.59135446521958,-30.970177812190116

3416857_20201_2_0,6axzvn4icz,1.6591056067566432,-110.79926873082826,-45.246084141571416

4734703_20201_2_0,6b5edp4icz,-3.440085690014369,-99.68420908678402,-22.439464549487354

1570586_20201_2_0,6b6man4icz,-0.7380969718994586,-142.8267639399011,-21.719621091956185

1543138_20201_2_0,6b947p4icz,-1.7324719084333622,-72.68373444286175,-15.41575207307018

5226872_20201_2_0,6bc60p4icz,-0.4750877830735928,-80.01219067321676,-35.42293298234924

4738852_20201_2_0,6bch5p4icz,1.766424263207025,-122.92454515128378,-58.02272189110029

2477903_20201_2_0,6bfisn4icz,-2.940932962813416,-124.76146417897374,-41.74531334634102

5592232_20201_2_0,6bmihp4icz,-1.8132706470872035,-119.47130032833496,-18.073005976688066

4129143_20201_2_0,6bmxgo4icz,-1.0200608020558366,-86.829784010026,-15.382898518341435

2179966_20201_2_0,6bugln4icz,2.1026713436406976,-63.128656786641756,-54.14305005585487

3805276_20201_2_0,6bustn4icz,1.6133692601030432,-106.40543551008764,-34.813207273899565

2312430_20201_2_0,6c2oun4icz,0.9383825032881475,-106.12642462543079,-25.292425879632447

3813425_20201_2_0,6c2uen4icz,1.920747522586119,-97.10610893641262,-46.1722387620684

4929903_20201_2_0,6cerfn4icz,-0.8169002136057498,-112.13911869453472,-36.271044752961714

5615931_20201_2_0,6ceupn4icz,1.7441230714460805,-126.76981543262684,-23.47111929748243

4352139_20201_2_0,6ckqgp4icz,0.9162605487677685,-84.61522272329728,-30.643235529359387

5900704_20201_2_0,6ctuip4icz,-0.3492688491996335,-86.92831246027441,-33.67065874796238

1219088_20201_2_0,6cxxlo4icz,-0.7708850211902051,-88.65994458949768,-20.695387592454622

1919565_20201_2_0,6czawn4icz,-3.3561203752384703,-98.197218139278,-24.84633006325018

2222493_20201_2_0,6d1qwo4icz,0.562016986563014,-132.04070802429135,-36.78612828370436

3772530_20201_2_0,6d2sln4icz,-1.8543090704029137,-122.04437047588573,-34.43435672555751

5495014_20201_2_0,6dc8po4icz,-2.7797566657141144,-107.14773313494624,-20.329308162375042

2320443_20201_2_0,6dey9o4icz,-1.3303468175143542,-109.05080520776733,-28.82369191870056

2441912_20201_2_0,6dggxn4icz,0.30152671866022696,-95.0499268447463,-36.24465434354968

1330075_20201_2_0,6dkqin4icz,1.3208588099303706,-130.4296161136017,-37.18862860094427

5079168_20201_2_0,6dmijo4icz,-3.2424190849876395,-129.82302776936194,-27.903948128629253

2299331_20201_2_0,6dmzpn4icz,-1.4941414213094182,-115.51157190221775,-26.122723248920153

5745613_20201_2_0,6do5hp4icz,2.923555875459599,-99.32456346193254,-49.803128357747056

5456775_20201_2_0,6dy1ln4icz,7.428949498092671,-137.45791408020648,-72.10878856892707

3971587_20201_2_0,6e19qn4icz,-3.9801358167674974,-97.62907774690157,-10.46814057242159

1699936_20201_2_0,6ecvzo4icz,-3.02168758518245,-56.393319544392085,-34.59711109236656

2362198_20201_2_0,6ef97o4icz,-2.020320492340145,-77.76292286473097,-26.44859807107882

5430927_20201_2_0,6ekyqn4icz,2.063053013854965,-103.12525370031375,-77.62441402021877

2809733_20201_2_0,6eofyo4icz,-5.095607401750181,-105.25667944740047,-8.962302407508744

1271017_20201_2_0,6es4mn4icz,-2.1369959707644526,-114.60522624132471,-20.83500111601174

5175971_20201_2_0,6etzpn4icz,2.4763488755257788,-139.40024430383912,-55.518040612004896

4704692_20201_2_0,6ev57o4icz,-1.7992014589288867,-106.23429399331971,-28.059339349420867

3614413_20201_2_0,6ewcun4icz,-0.06119236044670098,-126.37463157129065,-56.34788261424103

3086689_20201_2_0,6f0gfo4icz,-2.0775911825821245,-125.3995497901181,-10.518138673724039

1720546_20201_2_0,6f3jgo4icz,-0.6612194460389558,-91.17678046242594,-40.21507206178333

3374369_20201_2_0,6f509n4icz,-7.604724951154073,-129.2773071568989,0.4760377034249643

2383568_20201_2_0,6f9bsn4icz,-0.2569520985259067,-147.27042569244628,-31.92683387527046

2957822_20201_2_0,6f9hkn4icz,2.5518217180312366,-107.50429652259592,-62.3427091889743

3100870_20201_2_0,6fa3to4icz,153.11239542674284,513.2569303365476,-151.88844738991938

1067255_20201_2_0,6ff25o4icz,-0.0718228481474298,-75.33684006975051,-18.511181451437082

4238788_20201_2_0,6fjicn4icz,-0.5603337009175219,-140.16706236226133,-27.46568943138236

5588173_20201_2_0,6fl36p4icz,1.596130127427778,-91.40821825309618,-51.483233223504385

1707184_20201_2_0,6focjo4icz,0.20770579545712273,-52.54590169563241,-30.415242991938342

3210438_20201_2_0,6fpfmn4icz,1.172625173190178,-138.84412834006858,-43.699788757467246

1432261_20201_2_0,6fzxgp4icz,102.58594245112984,27.60174122649471,-265.2027881614141

2333305_20201_2_0,6g65dp4icz,0.223204982770596,-133.92964475591387,-26.537432484744542

2908561_20201_2_0,6g852p4icz,-1.017266790906777,-101.11166076552104,-35.85302410359051

1569857_20201_2_0,6gcjio4icz,2.3194606682419465,-99.98653027264677,-40.63417527573323

2895128_20201_2_0,6gckfp4icz,-3.4868204601093806,-107.15332184813843,-24.74914420085169

1057133_20201_2_0,6gg6yo4icz,-0.4783174828887273,-104.49235872760457,-39.97687961632849

5630260_20201_2_0,6gkh5p4icz,-0.8464634142940228,-64.61253641535387,-35.24361071210147

2762230_20201_2_0,6go8vo4icz,0.891317489076086,-68.5451132171942,-48.64212703932854

4710860_20201_2_0,6golmo4icz,-0.11794068223510969,-125.15094468728674,-17.049817007716854

2581553_20201_2_0,6gpiun4icz,-9.944707603568864,-164.24087346558093,-8.957281158323624

4417131_20201_2_0,6graao4icz,2.3107762766229967,-102.59854225612216,-36.85123971643375

3733532_20201_2_0,6gxljo4icz,-2.170286016117234,-91.03888880801182,-12.333234717534154

1107983_20201_2_0,6gz20p4icz,1.6667783239637723,-92.63512709245924,-49.8064725627348

2577828_20201_2_0,6h6m8o4icz,-0.3165487778058665,-75.87963557551507,-35.40081654782787

1043022_20201_2_0,6h7k8p4icz,0.9358221053961353,-79.33292085629455,-28.48390377027772

2038891_20201_2_0,6h93oo4icz,1.0113641508793065,-106.9266027402594,-48.292602902201

3923435_20201_2_0,6ha45p4icz,-0.8143585557249028,-67.38096491079722,-39.477068768250746

5910135_20201_2_0,6hiybo4icz,-2.660887656672429,-88.45278432461771,-13.389761303396043

2781641_20201_2_0,6hwo5p4icz,2.065206098503457,-144.15365390611117,-43.41329509475513

3012239_20201_2_0,6hy9dn4icz,-1.6591897686168768,-128.00242459248847,-32.817805859482775

1128095_20201_2_0,6i0w9o4icz,3.1320506164542423,-93.0559707792487,-68.20459481448381

1193681_20201_2_0,6i55cn4icz,0.4896925573917158,-141.35678530867517,-36.25714945966472

3152959_20201_2_0,6i63fn4icz,-0.25087153626906705,-89.65654219139762,-41.41765638654613

1722060_20201_2_0,6ieoen4icz,1.8791278318206128,-86.57925991193986,-51.016349226123154

3186815_20201_2_0,6ikbjo4icz,1.9214787811736234,-128.80919934949395,-45.92640473810272

2039231_20201_2_0,6ikkcp4icz,-1.7309575059698086,-136.45313468189318,-34.582693884506114

4645247_20201_2_0,6in4yo4icz,2.850024084672135,-49.22585776291302,-50.619564387951286

2172160_20201_2_0,6inenn4icz,1.0146599083614316,-110.96322896201642,-39.89724299444664

1554275_20201_2_0,6iprnn4icz,-0.3397217719594404,-62.961217150863376,-40.45449642151689

4875673_20201_2_0,6ir07p4icz,0.1730486766394147,-120.29526067822366,-40.0461180368672

1492836_20201_2_0,6iuk5p4icz,3.2989702123590856,-88.18296567330009,-52.428970373966635

2069758_20201_2_0,6ix71p4icz,2.676545826326097,-94.42607951480224,-57.99877588560409

3408310_20201_2_0,6izd9o4icz,1.6846853485534377,-93.2473943176694,-59.533835715850685

5806896_20201_2_0,6j1cyo4icz,-1.8300416647811828,-51.094881696536135,-40.991829707381385

4305471_20201_2_0,6j6j2o4icz,-0.09718057696959648,-78.95037080492415,-36.9607839972644

3583939_20201_2_0,6j7zpn4icz,1.3354982195413638,-86.9838658540049,-47.00397315118886

3992090_20201_2_0,6j8nep4icz,-0.3958313527009229,-114.30128674737873,-29.427601996389896

1576823_20201_2_0,6jimso4icz,0.3734917534017005,-50.39317619101084,-34.087571095024344

2814752_20201_2_0,6jxwho4icz,1.0205366739098873,-71.9349479316138,-24.058320280676014

4883255_20201_2_0,6kfb5p4icz,31.64126171551408,-48.349987682184405,-176.04970801984683

5208135_20201_2_0,6khvjp4icz,-1.1490241074683618,-134.1158816634862,-28.12873486809815

5878778_20201_2_0,6kls0p4icz,-5.564549707258482,-125.28490766568532,2.5217382002186355

5478111_20201_2_0,6klwfo4icz,1.2769332695161968,-79.42825628636723,-51.79535241340709

1158982_20201_2_0,6knzeo4icz,-0.07096135041813025,-95.86456870044066,-32.94293482574247

3809589_20201_2_0,6kqqyn4icz,0.2741383190566988,-69.64346227277719,-35.36882492901542

2875146_20201_2_0,6kv16p4icz,-0.4406787814802968,-82.18505857571958,-18.00982685340142

3807650_20201_2_0,6ky0gp4icz,2.5718010609707935,-86.04145866120837,-47.79652892311205

5214525_20201_2_0,6kyizo4icz,-11.982565271653577,-135.82041164449376,31.651758163316046

5081353_20201_2_0,6kzjqn4icz,-1.1685076585145713,-84.69296986776399,-34.507521198804

5531631_20201_2_0,6l4w5o4icz,-2.7400468311026023,-117.58212443003518,-11.660407319422248

4944892_20201_2_0,6l6e7p4icz,-2.4343017445031507,-123.02018192855516,-39.87168199270691

5790512_20201_2_0,6l81xo4icz,-1.1377507389209576,-52.54271965810065,-31.750641809068313

5936050_20201_2_0,6l9moo4icz,0.6340150809512543,-80.87303835339333,-46.92920581093084

1831803_20201_2_0,6l9ydo4icz,2.0551436687041322,-139.8436488592013,-54.46878857373056

3660669_20201_2_0,6la1io4icz,0.380235811343082,-85.4963750893111,-34.839478202082134

4267128_20201_2_0,6lablo4icz,3.4224116700105043,-72.04736145393079,-59.557086315192066

5071305_20201_2_0,6lc7uo4icz,-0.39800574491651947,-111.46252973428307,-29.393956084135624

5885735_20201_2_0,6lcsgp4icz,0.24438123177744264,-118.90773761552705,-34.81864838071846

2330060_20201_2_0,6le3hp4icz,-0.7132810896633256,-137.41172971193288,-32.72944865113706

3460127_20201_2_0,6le56p4icz,0.9984773402767947,-87.02716828852755,-51.313848935962284

1970796_20201_2_0,eexr7o4icz,0.17910969734474616,-94.71555853443303,-59.79389224091575

3401234_20201_2_0,6llfgp4icz,-4.986649128101383,-80.12601433354786,-13.528163212180317

4368848_20201_2_0,6lpa4o4icz,0.09326829255561485,-103.64329970396585,-32.31668096438477

5662052_20201_2_0,6lplqn4icz,1.4214414867678418,-132.98858377648102,-51.3426612259255

4491101_20201_2_0,6lpx1p4icz,-7.7746159776961425,-151.8119732369548,6.475353572969198

4049822_20201_2_0,6lw69p4icz,0.768349351943291,-92.91963544439434,-53.311788001982706

5739755_20201_2_0,6lwkcp4icz,-4.6280881810145935,-92.88234086377358,-23.113565203664265

2284442_20201_2_0,6lxabp4icz,-2.1698694348359804,-76.20491135942541,-22.644872898659315

1089435_20201_2_0,6m3rgp4icz,-0.3732899381902791,-98.60910652936985,-25.526261656856633

5263734_20201_2_0,6m7xln4icz,3.628878907034194,-97.47460055088794,-62.45162129745921

3518652_20201_2_0,6m993o4icz,1.64538314140913,-76.6643882484488,-23.243225789283144

3271477_20201_2_0,6m9blo4icz,-1.027401497182827,-100.896392545226,-22.01601873448206

4501983_20201_2_0,6mbpfo4icz,7.425140538727633,-51.726037270031384,-79.51977477640912

1140006_20201_2_0,6meu0o4icz,-2.450686267297339,-129.1845836724826,-24.039223114506513

1503096_20201_2_0,6mfnip4icz,2.2809807959273933,-88.79919939703584,-60.41459335256327

3807677_20201_2_0,6mhozo4icz,1.6379472451162886,-93.3022347590163,-49.52607061262043

3211285_20201_2_0,6mkuip4icz,-0.49409111382064674,-107.44013948091396,-37.88786475401827

4267987_20201_2_0,6mo8on4icz,-6.09811262782686,-92.64470407108678,-21.530088460986292

5805298_20201_2_0,6moeqn4icz,-2.6041919067633033,-133.13861017695174,-25.8816383385619

3323035_20201_2_0,6mr7po4icz,-2.329700200984479,-81.87391762294203,-13.374951876764825

1492646_20201_2_0,6mro2o4icz,-0.8467538488023778,-117.67432180799878,-23.41428157194595

1876911_20201_2_0,6msyzo4icz,0.8147079495973082,-89.42369789018176,-35.690914453687654

4604954_20201_2_0,6n1yno4icz,-5.677299231408975,-127.1095494247194,-1.132748876624234

4026625_20201_2_0,6n72gn4icz,0.6456269768562546,-120.28215534324733,-54.85514713468943

1091125_20201_2_0,6n758n4icz,1.3887400186197252,-78.9868626733197,-50.9079962897532

1011069_20201_2_0,6na91o4icz,-3.6951994371827266,-132.86993547855985,-27.938785503615463

3449496_20201_2_0,6nbgto4icz,-0.9914364298887192,-89.23993907214339,-24.423692388007936

4266965_20201_2_0,6nflvn4icz,-0.2064917825264303,-109.98541965446225,-35.38694423317

3335101_20201_2_0,6niwep4icz,0.648054352316518,-94.70373502757326,-54.440396599018214

3198424_20201_2_0,6nnj7p4icz,6.05548135580377,-70.77469214613456,-73.75551829847109

2436477_20201_2_0,6no5co4icz,-0.2690027008042041,-123.05655216091162,-7.7308289142043805

3151053_20201_2_0,6no73p4icz,-0.7504088600020153,-72.75631192659745,-25.0777259214355

5576904_20201_2_0,6nsx3p4icz,3.27215656559194,-116.38544450249873,-56.52213468095438

5614845_20201_2_0,6ntlho4icz,-12.579448855095432,-153.93117806803068,25.449971880746915

2968128_20201_2_0,6nznsn4icz,-0.06859463596788616,-137.37916008018138,-27.928753834964795

5164161_20201_2_0,6nzorn4icz,-0.4734868327808991,-94.13548793763022,-39.20675632420364

3257458_20201_2_0,6o4fbn4icz,0.5984925269313803,-104.43166538442316,-47.776602932642604

1394903_20201_2_0,6o8oun4icz,2.2743937999705306,-106.83057388754807,-62.50853470659649

2109873_20201_2_0,6ob2wn4icz,3.917832001036524,-83.67574788940473,-68.38409826047904

2586936_20201_2_0,6od9wo4icz,-3.6973897329095373,-84.32444874640626,-3.280358938904101

5947886_20201_2_0,6odlgp4icz,0.33288930060346367,-103.51974522405499,-36.572010941259265

2873263_20201_2_0,6oemun4icz,2.5231544506571657,-75.53956525897058,-45.2167685992392

4184751_20201_2_0,6oex6p4icz,-0.018904365061623123,-105.17261564201843,-37.81736571969631

2865966_20201_2_0,6ofeao4icz,0.8795794687593217,-76.69642329981784,-21.73189489636451

2208738_20201_2_0,6ofnvo4icz,-0.27648984301771823,-92.00802655979388,-40.65620029861731

4836639_20201_2_0,6ombnn4icz,-1.8079286630475937,-106.83530570656592,-6.892352258223454

3246412_20201_2_0,6onhmo4icz,-2.37429087681841,-90.75732554659251,-18.67524669807503

2470980_20201_2_0,6ota8o4icz,-1.4063699420072753,-143.31552424110814,-32.651698859475886

3171318_20201_2_0,6ovd0p4icz,0.49407315202268026,-52.60421539258783,-32.96801550776162

4285936_20201_2_0,6p2qxo4icz,-1.859312312301365,-81.13329582963598,-46.47241052562954

5593798_20201_2_0,6p6dho4icz,11.228284904515055,-24.24379850858668,-86.39957166849413

3743468_20201_2_0,6p8d5p4icz,-2.164560637637728,-104.3194183512368,-23.54101756334653

3617550_20201_2_0,6p8eip4icz,-16.45986326095726,-149.90225844427155,46.19843433205038

3123150_20201_2_0,6p9fap4icz,-4.386240703786963,-97.00523813754714,-13.77316022170973

4043867_20201_2_0,6p9ypo4icz,1.2118242068443479,-111.20629835533839,-39.68197261635805
 81%|████████  | 654/811 [35:05<07:39,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 655/811 [35:08<07:41,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 656/811 [35:10<07:26,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 657/811 [35:13<07:18,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 658/811 [35:17<07:46,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████▏ | 659/811 [35:20<07:50,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████▏ | 660/811 [35:22<07:28,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 661/811 [35:25<07:22,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 662/811 [35:28<07:15,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 663/811 [35:31<07:09,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 664/811 [35:34<07:04,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 665/811 [35:37<06:58,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 666/811 [35:40<06:52,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 667/811 [35:42<06:51,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 668/811 [35:45<06:44,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 669/811 [35:48<06:40,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 670/811 [35:51<06:41,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 671/811 [35:54<06:43,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 672/811 [35:57<06:35,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 673/811 [35:59<06:29,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 674/811 [36:02<06:24,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 675/811 [36:05<06:25,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 676/811 [36:08<06:29,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 677/811 [36:11<06:27,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▎ | 678/811 [36:14<06:19,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▎ | 679/811 [36:17<06:12,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 680/811 [36:19<06:02,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 681/811 [36:22<05:49,  2.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 682/811 [36:25<05:56,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 683/811 [36:28<06:03,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 684/811 [36:30<05:54,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 685/811 [36:33<05:51,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▍ | 686/811 [36:36<05:44,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▍ | 687/811 [36:39<05:52,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▍ | 688/811 [36:41<05:44,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▍ | 689/811 [36:44<05:40,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▌ | 690/811 [36:47<05:36,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▌ | 691/811 [36:50<05:37,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▌ | 692/811 [36:53<05:40,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▌ | 693/811 [36:56<05:38,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 694/811 [37:00<06:22,  3.27s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 695/811 [37:04<06:56,  3.59s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 696/811 [37:07<06:25,  3.35s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 697/811 [37:10<06:04,  3.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 698/811 [37:13<05:51,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 699/811 [37:20<08:05,  4.34s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▋ | 700/811 [37:23<07:08,  3.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▋ | 701/811 [37:26<06:30,  3.55s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 702/811 [37:28<06:03,  3.34s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 703/811 [37:32<06:03,  3.36s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 704/811 [37:35<05:42,  3.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 705/811 [37:37<05:24,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 706/811 [37:41<05:21,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 707/811 [37:43<05:03,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 708/811 [37:46<04:51,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 709/811 [37:49<05:11,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 710/811 [37:52<04:55,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 711/811 [37:55<04:43,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 712/811 [37:57<04:40,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 713/811 [38:00<04:29,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 714/811 [38:03<04:23,  2.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 715/811 [38:05<04:19,  2.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 716/811 [38:08<04:18,  2.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 717/811 [38:11<04:17,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▊ | 718/811 [38:13<04:09,  2.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▊ | 719/811 [38:16<04:05,  2.67s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 720/811 [38:19<04:03,  2.68s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 721/811 [38:21<04:02,  2.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 722/811 [38:24<03:59,  2.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 723/811 [38:27<03:54,  2.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 724/811 [38:29<03:50,  2.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 725/811 [38:32<03:48,  2.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|████████▉ | 726/811 [38:35<03:49,  2.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|████████▉ | 727/811 [38:38<03:50,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|████████▉ | 728/811 [38:40<03:45,  2.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|████████▉ | 729/811 [38:43<03:45,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 730/811 [38:46<03:43,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 731/811 [38:49<03:40,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 732/811 [38:51<03:34,  2.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 733/811 [38:54<03:30,  2.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 734/811 [38:57<03:31,  2.74s/it] 91%|█████████ | 735/811 [38:59<03:28,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 736/811 [39:02<03:31,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 737/811 [39:05<03:25,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 738/811 [39:08<03:20,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 739/811 [39:11<03:16,  2.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 740/811 [39:13<03:11,  2.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████▏| 741/811 [39:16<03:13,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████▏| 742/811 [39:19<03:09,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 743/811 [39:22<03:11,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 744/811 [39:25<03:08,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 745/811 [39:28<03:19,  3.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 746/811 [39:31<03:07,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 747/811 [39:34<03:04,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 748/811 [39:36<02:56,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 749/811 [39:39<02:49,  2.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 750/811 [39:41<02:46,  2.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 751/811 [39:44<02:47,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 752/811 [39:47<02:47,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 753/811 [39:50<02:45,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 754/811 [39:53<02:45,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 755/811 [39:56<02:42,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 756/811 [39:59<02:39,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 757/811 [40:02<02:36,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 758/811 [40:05<02:35,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▎| 759/811 [40:08<02:28,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▎| 760/811 [40:10<02:23,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 761/811 [40:13<02:18,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 762/811 [40:16<02:15,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 763/811 [40:24<03:27,  4.31s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 764/811 [40:26<02:57,  3.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 765/811 [40:29<02:45,  3.61s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 766/811 [40:32<02:28,  3.31s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▍| 767/811 [40:35<02:15,  3.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▍| 768/811 [40:37<02:06,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▍| 769/811 [40:40<02:00,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▍| 770/811 [40:43<01:57,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▌| 771/811 [40:46<01:54,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▌| 772/811 [40:49<01:53,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▌| 773/811 [40:51<01:49,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▌| 774/811 [40:54<01:45,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 775/811 [40:57<01:41,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 776/811 [40:59<01:35,  2.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 777/811 [41:02<01:32,  2.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 778/811 [41:05<01:30,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 779/811 [41:08<01:29,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 780/811 [41:11<01:28,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▋| 781/811 [41:14<01:24,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▋| 782/811 [41:16<01:19,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 783/811 [41:23<01:53,  4.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 784/811 [41:26<01:40,  3.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 785/811 [41:29<01:28,  3.42s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 786/811 [41:32<01:19,  3.19s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 787/811 [41:34<01:13,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 788/811 [41:37<01:08,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 789/811 [41:40<01:03,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 790/811 [41:43<00:59,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 791/811 [41:45<00:56,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 792/811 [41:48<00:53,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 793/811 [41:51<00:52,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 794/811 [41:54<00:47,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 795/811 [41:57<00:45,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 796/811 [41:59<00:41,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 797/811 [42:02<00:38,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 798/811 [42:05<00:35,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▊| 799/811 [42:07<00:32,  2.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▊| 800/811 [42:11<00:31,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 801/811 [42:13<00:28,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 802/811 [42:16<00:25,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 803/811 [42:19<00:22,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 804/811 [42:22<00:20,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 805/811 [42:25<00:17,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 806/811 [42:28<00:14,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|█████████▉| 807/811 [42:31<00:11,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|█████████▉| 808/811 [42:37<00:11,  3.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|█████████▉| 809/811 [42:39<00:06,  3.45s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|█████████▉| 810/811 [42:42<00:03,  3.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|██████████| 811/811 [42:46<00:00,  3.37s/it]100%|██████████| 811/811 [42:46<00:00,  3.16s/it]

1290482_20201_2_0,6p9z6p4icz,0.5996035675047898,-55.41655554892509,-43.43853413960457

2578770_20201_2_0,6pi14o4icz,-1.1735984895769311,-87.39245689602447,-19.706434434189305

5070496_20201_2_0,6pk53o4icz,1.0836150193745373,-81.47316093441353,-52.61919573701081

4178788_20201_2_0,6plavn4icz,-1.5966075466032599,-115.91003789204115,-32.820631082962564

3629552_20201_2_0,6pm3so4icz,-0.5612419576389996,-96.9484191888431,-37.709007410074236

4052818_20201_2_0,6pphgo4icz,-0.5635651785610312,-123.80091112914397,-30.992567004623723

3005536_20201_2_0,6pq3oo4icz,0.4771470344222772,-121.25917644928137,-50.03028603749331

5892242_20201_2_0,6pqx0o4icz,4.090740317120034,-81.77457471901576,-61.2578176856461

1150050_20201_2_0,6ptmwn4icz,-0.24373522095806519,-128.48830552778924,-41.12244309504641

2617236_20201_2_0,6ptw2p4icz,-1.2647962686842464,-131.33162404166637,-7.694145630094113

4650711_20201_2_0,6pudgo4icz,2.3075918368147867,-52.254271335311614,-30.44866986037573

2784069_20201_2_0,6pvq9o4icz,0.9695563190477262,-112.81807143235744,-39.47670908200388

3046716_20201_2_0,6pw6ho4icz,-0.5098010231921769,-85.19762252701364,-60.722274210113056

1181130_20201_2_0,6pwxhp4icz,-1.9972762514358058,-99.95493660451373,-8.604247229544043

1313926_20201_2_0,6pxd0p4icz,-3.256778572467252,-112.66366944167814,-32.8235608520381

1546404_20201_2_0,6pxskn4icz,-1.4403446452129636,-111.51663028480951,-17.475811025075927

3208488_20201_2_0,6q3fln4icz,-1.1890273325616139,-88.50340404584679,-35.8827468463311

2386792_20201_2_0,6q4moo4icz,0.9463490296393918,-85.90771557812874,-37.5900913100304

2220102_20201_2_0,6q4oln4icz,2.593758748631831,-114.80579284251189,-56.201438143504035

2052731_20201_2_0,6q6isn4icz,17.02689591854894,-28.033254084319594,-170.93052969457864

5169024_20201_2_0,6qb1fn4icz,1.8308297037953745,-91.4353725308678,-48.78157062296263

3540639_20201_2_0,6qcjon4icz,0.8422133143853282,-94.8763913977105,-33.00200546062025

4389099_20201_2_0,6qhthn4icz,3.3277593199473308,-79.51274588816361,-49.67884605111246

4394896_20201_2_0,i85t4p4icz,0.6395691822712449,-58.77828839973296,-38.46494727883227

1955814_20201_2_0,6qngho4icz,-1.6718849514023004,-145.76232677296983,-19.809118789512738

5574164_20201_2_0,6qnyvn4icz,1.5277559747409313,-98.48923691043026,-45.1489633483945

4335391_20201_2_0,6qpinn4icz,-4.786650001182259,-133.8881267949496,-17.383416203227426

3584230_20201_2_0,6qsdon4icz,4.880668606851679,-56.68135574853204,-63.61223592781286

4255228_20201_2_0,6qwr7n4icz,0.7895580510315999,-102.76939530508994,-38.10269704234108

5146401_20201_2_0,6qz0tn4icz,-3.0943938860955473,-96.16812731162216,-19.581365698779067

3298706_20201_2_0,6r1dzo4icz,0.7139836007356,-94.90472860875275,-29.31975953326119

4206883_20201_2_0,6r8l9o4icz,-0.9617034042306738,-83.52372778969635,-14.674501313678547

2747305_20201_2_0,6r9c2o4icz,3.2878834884120067,-80.40035060355723,-58.66800566286146

5275571_20201_2_0,6rexlo4icz,-0.24400247494893273,-47.643397545743454,-26.847409383841622

4316357_20201_2_0,6rhcao4icz,5.361733273650144,-77.66318883779786,209.85462560646334

4016259_20201_2_0,6rizno4icz,-1.2615114409941455,-123.38736902704048,-26.461399901172655

4965109_20201_2_0,6rmmpn4icz,0.5837883661160814,-77.39931803616372,-41.579625730905775

3705886_20201_2_0,6rpoin4icz,1.4655996705398728,-121.99728776179495,-42.035463564377196

2728897_20201_2_0,6rqx3p4icz,1.5565730761799095,-108.89951173089324,-50.01633982842034

3264828_20201_2_0,6rrsvn4icz,-5.00408957996792,-96.11500571871642,-17.805996517847007

3529024_20201_2_0,6s243p4icz,0.1122276612591165,-65.70744169350084,-43.909677106782524

5289191_20201_2_0,6s27fo4icz,-1.2234255867030976,-112.40107707798828,-24.905817967434373

4689999_20201_2_0,6s39nn4icz,1.0250590279752114,-125.34142300516783,-50.57639573557887

5202428_20201_2_0,6s6seo4icz,-0.9291370459114443,-95.69055629469736,-32.25912638833087

2838695_20201_2_0,6sa2ap4icz,-1.1579141215017605,-80.58999020215745,-10.516294848103556

4507558_20201_2_0,6sbthn4icz,54.08945391526973,170.20523727881147,-172.68699453651158

5777626_20201_2_0,6sd3kp4icz,-0.5339282682552648,-94.06452210535011,-32.415829874706205

5486997_20201_2_0,6slklo4icz,-0.594746384540244,-116.4813349994304,-24.66556981965688

5233428_20201_2_0,6so8bo4icz,-3.5904550088978033,-104.62791601929732,-0.4733743878991419

3887280_20201_2_0,6sp1ap4icz,1.8608439949812419,-69.81845511674109,-52.02867527102339

6016007_20201_2_0,6svo7p4icz,0.054272187933902746,-96.59663794371386,-41.77272978507085

2410290_20201_2_0,6sxb4o4icz,1.0034407324402086,-99.24758175837798,-43.74164145015979

3354683_20201_2_0,6t1ado4icz,-0.3750810184644043,-93.54565732316536,-22.40325139748458

5450922_20201_2_0,6t1iho4icz,0.41035061575387327,-101.63442103116142,-50.35041882474749

5086014_20201_2_0,6t2hno4icz,-0.4722491055050546,-76.53552099272693,-19.31232949848689

1609011_20201_2_0,6t37qn4icz,2.913972580224363,-104.77174665158896,-58.98446102437572

4009061_20201_2_0,6t3zvo4icz,3.0352001995576336,-84.89105312627345,-57.26541406803872

3745064_20201_2_0,6t4zco4icz,1.1043004387215838,-74.52543628896362,-30.898299090830122

3952749_20201_2_0,6t6eon4icz,0.9093718356717515,-88.45542510017313,-36.6907653181097

1227728_20201_2_0,6t6uyo4icz,1.1911811631779647,-76.51750358544217,-32.24325828682652

4137315_20201_2_0,6taqco4icz,0.3644732848202271,-101.0008702002869,-39.63117039507259

2146061_20201_2_0,6tb7ao4icz,-0.2104183665175677,-95.48661139980032,-33.45888172429903

1690942_20201_2_0,6tb7dp4icz,-2.7884267200548196,-110.23441329918847,-38.80821125642292

5263408_20201_2_0,6tcj7p4icz,-2.1548209959434765,-52.79891031937825,-31.222238427733032

1481616_20201_2_0,6tdueo4icz,-2.9666640729997678,-99.90767739882773,-29.316233084993755

3625404_20201_2_0,6tk4no4icz,0.10856596987346194,-73.56329350243468,-15.258420178618678

5938866_20201_2_0,6tlfkn4icz,-0.6400114506150829,-89.06569524958891,-25.098921613921817

1710742_20201_2_0,6tlo5o4icz,1.1654172048178095,-77.85896060923793,-77.79344521919911

3124375_20201_2_0,6tmmcp4icz,-4.349171226653833,-97.24719564418868,-16.72494580841125

4845933_20201_2_0,6tq4mn4icz,-3.533158118592429,-118.0979795094083,-31.362361914054816

2198214_20201_2_0,6tryfp4icz,0.01922725704405559,-97.24310596618713,-31.25345681380125

2313723_20201_2_0,6tukgp4icz,-1.466830128056818,-90.97017656037849,-33.95344283045965

2070452_20201_2_0,6ty9cp4icz,-0.5465833230268524,-117.50615433237812,-56.39439784402842

5726092_20201_2_0,6u9v8p4icz,1.865390504482178,-101.42570506092457,-41.29340120340669

2393652_20201_2_0,6uajcp4icz,0.8860649119427755,-65.31153043064586,-47.401456413264796

4863901_20201_2_0,6uaxjn4icz,-3.876292139669989,-76.12941623627353,-10.689451666928818

2850910_20201_2_0,6ui3kp4icz,0.9608716338240598,-90.94978496867517,-53.80438208834242

1267298_20201_2_0,6uj95p4icz,32.971425564730765,-108.10060769954168,24.8960043489313

4747315_20201_2_0,6ujdkn4icz,1.027753407613283,-111.16105284224847,-33.88991707922446

5493404_20201_2_0,oa70wn4icz,3.170775471096074,-75.05467232870959,-70.67287410089575

4970558_20201_2_0,6urnzn4icz,-5.620123767222536,-104.87859261344147,-7.074490044551801

5926375_20201_2_0,6us5uo4icz,3.431359091328997,-93.65266487888127,-56.05485826725746

4703728_20201_2_0,6utkep4icz,1.8876552706330636,-70.19295332331808,-42.173684650140416

3716053_20201_2_0,6utr8p4icz,-2.1372560000099177,-72.89295814422766,-13.025540543721945

3008895_20201_2_0,6uwgao4icz,-1.0830838157189941,-117.67006910417302,-33.84087405616185

4672700_20201_2_0,6v6wlo4icz,-0.9336631168424311,-114.8555035328539,-37.76543511804017

3886888_20201_2_0,6vb7un4icz,-1.0220979582785243,-94.4143422628535,-36.79649193633634

3194538_20201_2_0,6veh9o4icz,0.7801266572564728,-87.96584911603543,-31.208388845237977

3255889_20201_2_0,6vemsn4icz,-1.142797161639304,-142.82133838970535,-45.89336784799683

4027077_20201_2_0,6vgxlo4icz,-0.0861467453036732,-95.36503627170876,-25.085336186337287

1703388_20201_2_0,6vjlon4icz,-1.5062978594663432,-79.11648210125713,-32.57849540323096

5036583_20201_2_0,6vmtwn4icz,-3.4564964153982256,-115.12666157753802,-10.290090450153997

3767596_20201_2_0,6vrhfo4icz,0.8183722013830481,-45.80657419923347,-30.076142940643905

4106076_20201_2_0,6vrmpn4icz,-0.7738333809071711,-50.38882200610249,-17.636757375303517

4384960_20201_2_0,6vt4on4icz,-1.5251837120810847,-91.72543910044038,-17.824527101116672

3830707_20201_2_0,6vvglo4icz,-0.045645790386872935,-133.31736224951905,-46.674197415231816

5430529_20201_2_0,6vy0xn4icz,2.1046985809038525,-149.92946445731445,-41.37484112483014

2377316_20201_2_0,6w4mcn4icz,1.4131166949395328,-69.6247201239091,-24.690033782636007

4788063_20201_2_0,6wczun4icz,0.4003141736212676,-117.77869698456172,-26.702844149468163

4217493_20201_2_0,6wg34p4icz,1.125180715846337,-95.64280536000012,-41.514446144902436

2683419_20201_2_0,6wntso4icz,0.2709468626278402,-112.43763647516843,-35.758916570141864

4457170_20201_2_0,6woy6p4icz,0.3333278306113579,-48.55245298523786,-47.8261658185117

2725540_20201_2_0,6wtjko4icz,2.712291070309856,-76.55343387775451,-64.07056339357995

5639912_20201_2_0,6x1evn4icz,1.129098963444592,-56.791168223345494,-48.854762050544366

5222929_20201_2_0,6x6ubo4icz,2.3961902810167293,-62.87344765963445,-39.05716764605512

5356806_20201_2_0,6x81io4icz,-0.4763032335778173,-97.93155632835467,-30.488195421525475

3371188_20201_2_0,6x9nfo4icz,-0.3988603523072011,-49.999021404436036,-40.804858029986804

4255427_20201_2_0,6xh6ep4icz,-1.6462890690382244,-100.70962553789818,-44.572650432431104

5413870_20201_2_0,6xkw2p4icz,2.952073920645918,-110.77161025765812,-49.52358198508453

1487212_20201_2_0,6xl40p4icz,-2.922925526638388,-110.45299537482214,-6.230299102197904

1929753_20201_2_0,6xlnao4icz,-0.16564799169557698,-125.9750748763806,-43.87316974079667

1944079_20201_2_0,6xq53p4icz,-1.2121092412104966,-120.77200549296305,-10.093885347315535

2954407_20201_2_0,6xtsip4icz,-1.7721873333798028,-79.11067232426484,-24.16672151344099

1529553_20201_2_0,6xvf9o4icz,2.4611041141118313,-83.41877601418122,-46.48341659507723

5795237_20201_2_0,6xvfyo4icz,-3.8544712689571243,-86.80990598102562,-11.451659795168126

5538636_20201_2_0,6xz28o4icz,2.1433331787122616,-94.70074852914016,-41.56343947130321

1091066_20201_2_0,6y1con4icz,0.6576363052380516,-121.60354507036195,-31.777699685023208

3784949_20201_2_0,6y2a7o4icz,0.9165384030769069,-64.88470957858704,-22.597939441310658

2066894_20201_2_0,6y2iip4icz,1.0312677392129213,-86.29468449255924,-39.246742184802315

5720217_20201_2_0,6y7jbo4icz,-0.26560369861935285,-97.13450124484552,-40.615446272448594

4826021_20201_2_0,6yd0po4icz,1.0143696156429924,-89.71381762222777,-36.84339430090952

5719938_20201_2_0,6ylkzo4icz,-0.5377656440888978,-57.65636957906756,-32.363460892205566

5977038_20201_2_0,6yluyo4icz,0.2920426549223769,-123.18615844378579,-31.51422099235161

4034350_20201_2_0,6yq3ln4icz,-0.0026862506661796065,-70.42498208693601,-33.56638021902596

3787006_20201_2_0,6yzz0o4icz,1.7229329512656029,-72.1659899845358,-43.324386812488385

4142965_20201_2_0,6yzzko4icz,-2.1611546990490305,-120.30581277040065,-22.147587562531243

2279654_20201_2_0,6z0q6p4icz,-2.5924486976557337,-133.73753892278117,-10.262180461044991

5573679_20201_2_0,6z8con4icz,0.5114778449583086,-97.06440428065278,-36.48913241919567

1184205_20201_2_0,6zb65p4icz,-1.3167210716316198,-103.56888682034088,-40.57515979651785

3225475_20201_2_0,6zh1cn4icz,-1.2969563168779736,-97.32231923496806,-33.60632505792225

4532716_20201_2_0,6zjufn4icz,0.9924766603930693,-107.74545083895217,-43.34910114147661

4669116_20201_2_0,6zlgxo4icz,-1.9419011341565497,-81.63565575431704,-36.991596852020436

1012589_20201_2_0,6zmbio4icz,3.5982277208989415,-89.0502717813832,-50.43877846754617

3811795_20201_2_0,6zngpn4icz,-2.2271769829041785,-83.0967967930165,-19.617886476287765

3051970_20201_2_0,6zr9go4icz,-0.001890487652803921,-111.6936963611233,-18.47314670102176

5620793_20201_2_0,6zyjbp4icz,3.275232741445563,-68.90702836231267,-68.18344184289046

4629266_20201_2_0,701i6o4icz,-0.7166806716424028,-100.95910647964828,-25.548182796226286

3077567_20201_2_0,704cep4icz,0.6431867889301184,-86.04537615455754,-33.33109654311657

5450092_20201_2_0,706hap4icz,0.6909625783770824,-92.4910787037287,-54.15750935971586

3831074_20201_2_0,70g31o4icz,-0.3032545553110965,-70.92927675912196,-22.315561337178707

1686939_20201_2_0,70hy7p4icz,-0.254502310143125,-93.13361492143349,-40.57078188790581

4055077_20201_2_0,70i8qn4icz,2.367096980596234,-82.0811594497111,-47.750689690974255

4808450_20201_2_0,70lwvo4icz,2.157374165830977,-66.66542063259604,-45.12063990684425

5413928_20201_2_0,70m68n4icz,0.7956525964043454,-90.6341565738353,-47.6359587807964

4783126_20201_2_0,712e2o4icz,-1.7011598899180351,-85.0679502056577,-42.832134218103164

4905436_20201_2_0,71bmnn4icz,0.32224452957469735,-102.27400213951202,-23.949696731299923

4021016_20201_2_0,71cybp4icz,-0.7399387069353829,-129.95949110672439,-39.74101699581841

4204824_20201_2_0,71ed3o4icz,4.886912695384617,-61.57338686761241,-43.104518303982886

1542869_20201_2_0,71kp8o4icz,-1.0575299194340324,-119.42792429994395,-22.327535910895733

5509628_20201_2_0,71s0cp4icz,19.060739474157195,-145.77343721168262,72.02216076509768

2412372_20201_2_0,71s1so4icz,-0.004866392952304959,-103.03507640015587,-29.746057290247236

3576057_20201_2_0,71s6bo4icz,0.27243155465090096,-122.98277769852578,-48.40436275067363

5250687_20201_2_0,71yaao4icz,0.7038574558981044,-94.523121070472,-27.184036640825042

2403625_20201_2_0,71z53p4icz,4.375740858267091,-106.05862167654001,-60.1331583235562

3904816_20201_2_0,71zphp4icz,0.06433231392703899,-129.2694851788325,-33.79093874472714

5128905_20201_2_0,71zw8o4icz,3.0267224128729344,-93.50912738070508,-58.00142312277866

5069152_20201_2_0,723jkn4icz,-4.423301920606415,-93.88048512762958,-11.162075326359854

3304114_20201_2_0,72487o4icz,-2.226403828933508,-87.78608540114072,-32.64536067856827

2505165_20201_2_0,724g2p4icz,-10.050428308890075,-78.94020258240448,10.140460542311928

1301945_20201_2_0,724i4o4icz,0.39339328917600397,-44.17884213824209,-40.54633446752719

2408230_20201_2_0,7254ep4icz,-0.2817292652248423,-113.44721022428195,-49.27768356224888

5814578_20201_2_0,725hwn4icz,2.883668963497135,-92.36145431816709,-48.114898282961676

4668204_20201_2_0,726yep4icz,3.0738148721156433,-82.5944047716581,-73.91984936525652

4043635_20201_2_0,72awtn4icz,-0.13450425529183704,-89.17480278808281,-28.47214211376621

2384762_20201_2_0,72b6cp4icz,-2.1613346395581146,-162.15769667333532,-32.72576020599503

1581738_20201_2_0,72g5oo4icz,-0.052030944618155404,-83.23970796417694,-62.828889423950415

5088435_20201_2_0,72g9nn4icz,0.26502826594691314,-100.70851862882398,-29.025715626698712

2628034_20201_2_0,72quep4icz,1.0990749807502924,-99.03022740440915,-42.965538148537604

2187343_20201_2_0,72rsyo4icz,3.320777892737712,-109.69830735178897,-59.20804955811428

3522419_20201_2_0,72snzo4icz,0.8811490474894282,-77.61926075824303,-44.30531142874729

4987014_20201_2_0,72tmlo4icz,1.275405727027708,-71.1792677645652,-15.17054978936568

2110205_20201_2_0,72uv3p4icz,-2.70142979474397,-100.18654775399722,-18.90765874501733

5537268_20201_2_0,72vs0p4icz,5.604075642698406,-91.93452299095148,-61.07030186942046

1834230_20201_2_0,7332hp4icz,-2.7653350063665316,-119.96380640542361,-39.659417312904736

5119557_20201_2_0,737iun4icz,-100.13157422529976,416.1905983345631,318.8775775844116

1992887_20201_2_0,737yko4icz,2.756944269712674,-82.97604106430916,-49.745202005265426

3737602_20201_2_0,73iowo4icz,1.1480975508555273,-105.6724856636807,-39.5524964749017

5155300_20201_2_0,73jtxo4icz,-0.7078880701086214,-102.32085917117769,-23.397802714331675

1697714_20201_2_0,73oihp4icz,-9.609702902948976,-110.44978032905357,-30.386067302454876

1613195_20201_2_0,73seap4icz,1.4942917126678332,-55.93619929975645,-48.225832488763984

3199281_20201_2_0,73vuon4icz,-0.9610928782418934,-87.81629369610863,-17.08298529548098

5570403_20201_2_0,73z6on4icz,-0.5413976564854317,-102.38530616904654,-23.21285353698258

3956292_20201_2_0,74319p4icz,2.813011907846053,-99.67292711791478,-58.54851410689861

1583543_20201_2_0,74678n4icz,-0.15143101980037635,-96.31110868746597,-37.49237700113427

2937016_20201_2_0,748xwn4icz,1.645246974868586,-86.57124056043392,-55.179355592041105

5141046_20201_2_0,74bfpo4icz,0.3340150759990694,-114.14304857530908,-30.698477394240257

2989381_20201_2_0,74bo7o4icz,-0.10042659616524237,-84.66670214264275,-33.05202679583152

5528281_20201_2_0,74hsep4icz,6.18893769281986,-115.3542217307596,-51.49289366946681

1034357_20201_2_0,74hw0o4icz,0.7052511803738687,-81.56684342708272,-45.41753095069315

5978174_20201_2_0,74mnfp4icz,-3.5207243357988935,-129.04534357724717,-9.225199321126539

4716270_20201_2_0,74rrqo4icz,1.5396174101218396,-106.8566675894804,-24.390443689662234

3638283_20201_2_0,74sy6p4icz,1.6550475379717537,-79.15986910034434,-47.722579715625514

5230345_20201_2_0,74u62p4icz,0.09035132275136468,-83.16728783330996,-28.392724178997383

3295623_20201_2_0,74wlfn4icz,-2.6379959899864915,-144.32966207462235,-9.177186250654202

5023595_20201_2_0,750yeo4icz,1.577746445506043,-71.27613478515372,-40.906703746171004

5367365_20201_2_0,7542wo4icz,-2.244009447458726,-123.20510737735202,-23.47985885876365

2522499_20201_2_0,7560ap4icz,-0.5603841297906911,-77.60328742934274,-46.44044914267073

3426656_20201_2_0,7579vo4icz,1.1109147547446905,-90.38104721459817,-41.05427471707897

3841500_20201_2_0,759ebp4icz,-1.4590074071895105,-103.83137665176872,-37.950445381032935

2392831_20201_2_0,75axjo4icz,3.070472715366784,-78.8630197567918,-51.486434177382165

5333326_20201_2_0,75hrho4icz,1.7479127107666943,-105.19425635881794,-30.501557174188775

2330973_20201_2_0,75l4vn4icz,-1.4455851641789643,-85.82539553923647,-26.78137943627111

3066199_20201_2_0,75m0rn4icz,0.31104278571389765,-151.5025952604352,-26.2854630003837

5950694_20201_2_0,75x7gn4icz,0.24592720620032663,-84.29625804453909,-33.78940182367894

4433513_20201_2_0,75zy6o4icz,2.7250084899518585,-111.85394629847693,-54.87318596767149

4073532_20201_2_0,7658dn4icz,-0.8257806978438694,-121.30497537351718,-36.15066964640485

2282270_20201_2_0,767fnn4icz,-0.09882782837320996,-73.39440011225213,-49.34816865200118

3909652_20201_2_0,76eaoo4icz,2.001698622415714,-65.57932144246772,-51.54265882955899

1738899_20201_2_0,76g4rn4icz,-1.8313136372060832,-76.03081420012913,-66.17857161702943

3242828_20201_2_0,76h5ap4icz,1.3474054162120719,-84.73664109939617,-41.55127526152425

5933222_20201_2_0,76ih2o4icz,0.5525034537653838,-62.309294445070606,-20.7150181285526

5383942_20201_2_0,76lyxo4icz,1.560207410659325,-55.867813947234,-46.36154908123453

4499749_20201_2_0,76nxep4icz,1.2600418256446968,-85.49530236076868,-55.861257385126876

4380681_20201_2_0,76rajn4icz,6.63024006419871,3.4769918676424254,-130.51104615635836

3501018_20201_2_0,76wepn4icz,1.0009073206039718,-92.11525951934925,-39.392835367918025

3803597_20201_2_0,773fun4icz,-0.5185422011899001,-126.17764356722219,-23.60943175828173

5645700_20201_2_0,773o4p4icz,0.9779776071397625,-82.8233127545206,-34.76594755982384

4265700_20201_2_0,773oen4icz,-0.41383067876730806,-100.39195334561626,-31.49431673170065

2586435_20201_2_0,775too4icz,-3.782912707870056,-78.90116632000553,-15.007801901863587

1873803_20201_2_0,77839p4icz,-2.308028617004744,-84.98735202233183,-26.21077941179388

3222942_20201_2_0,778bjo4icz,-2.320408362249052,-41.413672375378326,-26.274658487669313

1335176_20201_2_0,778w9o4icz,0.9063839913680518,-61.43000733482489,-47.64563589177678

4446018_20201_2_0,77c7fo4icz,0.8380569305513578,-100.11319585771477,-48.0758696936785

3923999_20201_2_0,77e0rn4icz,-2.978659381956674,-133.8809477021292,-13.740319177808388

5531851_20201_2_0,77fkjo4icz,-4.372115955001059,-69.51870414905474,-5.520857943145714

4348772_20201_2_0,77fo5o4icz,-2.4244944303382536,-91.36738279152934,-31.276095763550217

1255151_20201_2_0,77h7ap4icz,-1.77555315002037,-62.247783535834174,-36.203703583613475

2610755_20201_2_0,77kfvn4icz,6.102185055427892,-77.493543660461,-65.79521021274883

4864414_20201_2_0,77poep4icz,-1.6911131946103528,-136.21942383479586,-29.58893981111663

2450736_20201_2_0,77sbep4icz,-0.08069515352229023,-72.77766455433658,-55.25421357327424

4583316_20201_2_0,77wkgp4icz,0.06714080596660632,-95.95410196581275,-49.66706784081424

4554745_20201_2_0,77xs0p4icz,7.463202765888034,-48.14291475912236,-76.64304380106071

5681700_20201_2_0,77xwbp4icz,1.0348160029147035,-85.53381816321456,-48.84038403952485

2419314_20201_2_0,782wjp4icz,-0.8478487044034039,-117.25667208955866,-39.025186346684535

5616842_20201_2_0,78fken4icz,-0.8215251478592458,-91.64573782993088,-40.21538563505845

5526634_20201_2_0,78h0nn4icz,0.9998927297429715,-70.94646463375787,-55.473749874074684

4828178_20201_2_0,78hp9p4icz,0.6897022570924571,-57.29894941758005,-42.606071906820276

2721204_20201_2_0,78iq9o4icz,-1.4189648550861018,-111.48591975915778,-31.273861964925928

2051267_20201_2_0,78qjdo4icz,-2.2629034194721105,-133.26261158528806,-28.169780515707885

4708587_20201_2_0,790imn4icz,-0.5967625286901761,-117.21459248020409,-46.54943541919782

1080144_20201_2_0,79hi8p4icz,3.8644425135408005,-38.43284668506203,-41.123607901463544

4543590_20201_2_0,79kbep4icz,0.44896678219779734,-121.22145011979967,-57.404688111166024

3811435_20201_2_0,79lten4icz,2.2000233144597092,-94.21084823712158,-41.810619727923665

4308570_20201_2_0,79mpcn4icz,-2.0876314986339866,-95.48592978958422,-20.981338161893035

1175027_20201_2_0,79ng5o4icz,-2.197753772408432,-86.88969968509181,-29.49369996274214

1236409_20201_2_0,79ow0p4icz,-1.080116500588915,-80.84753264737941,-20.113996531022195

1848153_20201_2_0,79rgeo4icz,1.567797908565372,-152.97095771790157,-55.24276087082495

2892720_20201_2_0,79tn5n4icz,4.10862651421589,-133.1484267071676,-57.64825070639458

4670086_20201_2_0,79x27p4icz,0.44914192598238567,-57.517292544727525,-32.70658770992753

1724245_20201_2_0,79ysmo4icz,-0.5291677315380784,-107.06068154999193,-24.035429858276885

2903822_20201_2_0,yr172p4icz,0.744154836409921,-90.74952263685452,-40.78005206068302

/users/rhydian/anaconda3/envs/torch_env/lib/python3.7/site-packages/torch/cuda/__init__.py:52: UserWarning: CUDA initialization: Found no NVIDIA driver on your system. Please check that you have an NVIDIA GPU and installed a driver from http://www.nvidia.com/Download/index.aspx (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729006826/work/c10/cuda/CUDAFunctions.cpp:100.)
  return torch._C._cuda_getDeviceCount() > 0
  0%|          | 0/102 [00:00<?, ?it/s]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 1/102 [00:03<05:52,  3.49s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 2/102 [00:06<05:32,  3.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 3/102 [00:09<05:19,  3.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/102 [00:12<04:57,  3.03s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▍         | 5/102 [00:14<04:40,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 6/102 [00:17<04:30,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 7/102 [00:19<04:24,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 8/102 [00:22<04:20,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 9/102 [00:25<04:16,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|▉         | 10/102 [00:28<04:15,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 11/102 [00:30<04:09,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 12/102 [00:33<04:07,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 13/102 [00:36<03:59,  2.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▎        | 14/102 [00:40<04:45,  3.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▍        | 15/102 [00:43<04:25,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 16/102 [00:46<04:13,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 17/102 [00:49<04:12,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 18/102 [00:51<04:01,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▊        | 19/102 [00:54<03:55,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|█▉        | 20/102 [00:57<03:45,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 21/102 [01:03<05:13,  3.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 22/102 [01:06<04:50,  3.63s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 23/102 [01:09<04:30,  3.43s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▎       | 24/102 [01:12<04:13,  3.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▍       | 25/102 [01:15<04:00,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▌       | 26/102 [01:17<03:48,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▋       | 27/102 [01:20<03:40,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 28/102 [01:23<03:33,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 28%|██▊       | 29/102 [01:26<03:25,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▉       | 30/102 [01:28<03:18,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|███       | 31/102 [01:31<03:17,  2.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███▏      | 32/102 [01:34<03:13,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 33/102 [01:37<03:14,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 34/102 [01:49<06:33,  5.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▍      | 35/102 [01:52<05:24,  4.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▌      | 36/102 [01:55<04:36,  4.18s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▋      | 37/102 [01:58<04:09,  3.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 38/102 [02:01<03:48,  3.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 39/102 [02:03<03:29,  3.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 40/102 [02:07<03:21,  3.24s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|████      | 41/102 [02:09<03:06,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 42/102 [02:12<02:56,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 43/102 [02:15<02:48,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 44/102 [02:17<02:45,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 45/102 [02:21<03:00,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▌     | 46/102 [02:24<02:46,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 47/102 [02:26<02:39,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 48/102 [02:29<02:32,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 49/102 [02:32<02:28,  2.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▉     | 50/102 [02:35<02:32,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 51/102 [02:48<04:58,  5.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████     | 52/102 [02:51<04:06,  4.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 53/102 [02:53<03:28,  4.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 54/102 [02:56<03:00,  3.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 55/102 [02:59<02:43,  3.47s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▍    | 56/102 [03:01<02:28,  3.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▌    | 57/102 [03:04<02:18,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 58/102 [03:07<02:13,  3.04s/it] 58%|█████▊    | 59/102 [03:10<02:05,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 60/102 [03:13<02:02,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|█████▉    | 61/102 [03:15<01:58,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████    | 62/102 [03:18<01:55,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 63/102 [03:21<01:51,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 64/102 [03:24<01:45,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▎   | 65/102 [03:26<01:44,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▍   | 66/102 [03:29<01:41,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▌   | 67/102 [03:33<01:45,  3.01s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 68/102 [03:35<01:38,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 69/102 [03:38<01:33,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▊   | 70/102 [03:41<01:27,  2.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|██████▉   | 71/102 [03:43<01:25,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████   | 72/102 [03:46<01:23,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 73/102 [03:49<01:19,  2.74s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 74/102 [03:52<01:17,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▎  | 75/102 [03:54<01:14,  2.76s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▍  | 76/102 [03:57<01:11,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▌  | 77/102 [04:00<01:08,  2.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▋  | 78/102 [04:05<01:19,  3.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 79/102 [04:07<01:11,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 80/102 [04:10<01:06,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 81/102 [04:27<02:30,  7.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 82/102 [04:29<01:56,  5.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████▏ | 83/102 [04:32<01:33,  4.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 84/102 [04:35<01:15,  4.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 85/102 [04:38<01:04,  3.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 86/102 [04:41<00:56,  3.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▌ | 87/102 [04:43<00:49,  3.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▋ | 88/102 [04:46<00:44,  3.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 89/102 [04:49<00:39,  3.00s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 90/102 [05:02<01:13,  6.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 91/102 [05:09<01:09,  6.29s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 92/102 [05:12<00:52,  5.25s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 93/102 [05:15<00:40,  4.53s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 94/102 [05:27<00:55,  6.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 95/102 [05:30<00:40,  5.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 96/102 [05:33<00:29,  4.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▌| 97/102 [05:36<00:21,  4.24s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 98/102 [05:39<00:15,  3.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 99/102 [05:42<00:10,  3.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 100/102 [05:44<00:06,  3.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 101/102 [05:47<00:03,  3.16s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|██████████| 102/102 [05:50<00:00,  3.00s/it]100%|██████████| 102/102 [05:50<00:00,  3.43s/it]
Trying to load from /users/rhydian/self-supervised-project/model_weights/SSECEncodersBothBoth
==> Resuming model trained for 106 epochs...
Trying to load from ../model_weights/angle_regressor4
==> Resuming model trained for 7 epochs...
2891652_20201_2_0,5lcnmo4icz,0.4751775865226819,-116.9857346389486,-29.886795821926455

1625149_20201_2_0,5mcexo4icz,-2.614428868560073,-81.93224724264968,-22.54475064287928

4647915_20201_2_0,5ns0ko4icz,-1.2948880328828882,-54.96847575178734,-37.17080909803698

3489706_20201_2_0,5o8gxo4icz,3.2042853508234668,-91.88761280346677,-68.02312054038596

5288238_20201_2_0,5pmbkn4icz,-0.32368633741934355,-118.26966192914298,-28.220597191832496

3423563_20201_2_0,5pup7n4icz,3.0016607215406053,-87.35552795838186,-52.98703347311351

5206216_20201_2_0,5px26o4icz,2.141581388544059,-101.03592417568709,-45.81042685645494

5365909_20201_2_0,5qaygp4icz,-4.655381478018635,-117.17013837420731,-7.1199243560445495

2803212_20201_2_0,5qvtun4icz,-1.8668948658218396,-132.3120273622776,0.8274959810357245

5344336_20201_2_0,5rpl9p4icz,0.12360131716595944,-84.32094982575444,-33.081793517906874

3376773_20201_2_0,5ssaxn4icz,-5.419272732580882,-137.931267329374,1.6132120242357075

5974751_20201_2_0,5tsnfo4icz,-1.6173434162380844,-96.74354120518743,-18.519156591607725

5431283_20201_2_0,5ua56o4icz,12.578782441032287,-39.08370671424191,-127.80105836373856

4237832_20201_2_0,5unm5p4icz,-0.6046845306699453,-148.04271046654938,-29.503504297157534

5120326_20201_2_0,5uq3co4icz,-2.94983904849167,-116.7480618458346,-35.6830174832086

1138934_20201_2_0,5uxxro4icz,1.152529390579143,-77.30175091267705,-46.424982343224414

5853632_20201_2_0,5viizo4icz,-0.6539612862596468,-80.0246369280475,-18.86427294084588

3722908_20201_2_0,5y2ydn4icz,1.7061293527239305,-96.27491272780344,-45.66669792662694

2352530_20201_2_0,5yafcp4icz,-0.6724834248553352,-79.82253013872648,-37.73742997767086

2158878_20201_2_0,5ysghp4icz,-3.3167058827737925,-74.02317708860437,-18.844467974365728

3205225_20201_2_0,5zekln4icz,2.0918144773005243,-146.4679378854271,-32.718669350221106

5762505_20201_2_0,5zkkyn4icz,-3.4403517432518176,-109.62429285020488,-25.525809223146325

3539102_20201_2_0,5zv2io4icz,-2.2603720879821503,-142.49892650552303,-33.77085654881165

5941686_20201_2_0,621pgp4icz,-0.7851120241298158,-68.60408775524775,-32.129220151039135

5237146_20201_2_0,62i93p4icz,0.6511517570830189,-95.72725182021858,-54.261683464445085

4299162_20201_2_0,62mhwo4icz,1.4892938400004545,-53.30043131896991,-60.20914507026325

5247291_20201_2_0,62qwfn4icz,-3.4098963837121055,-127.02162760635443,-20.801922438669777

4194715_20201_2_0,6316in4icz,-1.415075158013211,-122.04601272135287,-32.64947968964398

1998386_20201_2_0,63upap4icz,0.31726312943499796,-53.00245526276527,-20.02929556242782

4968510_20201_2_0,63vkjp4icz,-0.49983819840318705,-113.0599203090566,-37.206798948052935

5954139_20201_2_0,666j5p4icz,-0.49133115752744766,-104.31272119512138,-28.38918424335405

1829728_20201_2_0,666s9o4icz,-4.354576256849336,-106.63792432909605,-23.897439314937245

5471236_20201_2_0,670qcn4icz,1.2754160712515479,-116.47840472623926,-31.979273362799475

1283571_20201_2_0,671rgo4icz,1.8674550806420933,-108.62548063599644,-48.4700599153862

3130368_20201_2_0,67cxpn4icz,-2.286677545959719,-81.79034252386003,-37.77667145413693

4690946_20201_2_0,67ka2p4icz,0.5911222489528914,-116.28212564422856,-44.05025456334637

3528777_20201_2_0,67u7wn4icz,1.1918748032298963,-76.7285646095105,-46.41263041889205

3962088_20201_2_0,698qgo4icz,-1.3748420002717299,-88.46662590950663,-30.074504764138553

5581438_20201_2_0,69og8o4icz,0.2876534033572957,-92.94478116705616,-33.91606072396861

3551399_20201_2_0,69sq7o4icz,-0.16279360060683584,-90.37225226718934,-33.00922955473888

3302995_20201_2_0,6bdy9p4icz,1.7445354600461875,-88.13570422373556,-57.45045695462943

1833790_20201_2_0,6cvkgn4icz,2.1010987481122396,-75.78294160962491,-58.38991541292613

4865996_20201_2_0,6dpi5n4icz,3.6028435834086148,-98.77412208760327,-52.372039268513475

5434615_20201_2_0,6e012o4icz,0.8115254113236039,-117.03976512031576,-52.70535580994776

4839844_20201_2_0,6e1ixo4icz,3.3823959311923177,-99.65100603368774,-43.847711856398874

3761551_20201_2_0,6e40sn4icz,-2.4489855949645953,-105.43406097364533,-31.24058262438605

3039657_20201_2_0,6e8shp4icz,-3.5724249253585745,-132.1255943360788,-17.70930699632099

3161556_20201_2_0,6eam6p4icz,-0.002434456868241388,-81.27355289692935,-22.022446253524905

3061904_20201_2_0,6f78bo4icz,-1.3296995571596157,-95.82785915793667,-16.44745576283927

4958903_20201_2_0,6g8m8p4icz,-0.45065168263934424,-84.79267743213873,-25.19051737903186

1598892_20201_2_0,6gci7n4icz,2.691342099661194,-75.78726556215304,-55.51291934782199

5320993_20201_2_0,6gfe4o4icz,2.3489578494632593,-105.95576831178843,-51.25028810640973

5799133_20201_2_0,6h4rdo4icz,-1.7315070978973102,-96.90691034787145,-48.48332031432966

2841138_20201_2_0,6ir8fn4icz,-0.4141597813853267,-91.41606154427257,-39.30978201109798

1048264_20201_2_0,6izdkn4icz,-0.49121779044241765,-96.04760692048251,-72.10113833302255

3965974_20201_2_0,6kvnmo4icz,-1.9290053004458616,-118.18932218489243,-40.60299547041146

2848464_20201_2_0,6l3rvo4icz,2.802756900018608,-29.65790872372952,-78.33895479600224

6016628_20201_2_0,6m2zen4icz,-0.5387520932895151,-90.49112180524071,-23.30302321860661

1419761_20201_2_0,6nwh8o4icz,5.814505781237154,-104.67937926390678,247.6328289702803

4667674_20201_2_0,6olnjn4icz,-0.8454326023457357,-81.53603270844962,-45.47963561039896

2506559_20201_2_0,6p35qo4icz,4.273463038910933,-92.08277016404475,-62.76822339012337

2528583_20201_2_0,6ps1zo4icz,0.3984681122411611,-62.24060934959596,-36.40348173518852

5801655_20201_2_0,6ri9ap4icz,1.9687197177082125,-58.24759065300731,-44.84741760016456

5776841_20201_2_0,6s2m8o4icz,1.0771015127510124,-48.86052582913777,-34.333684797251976

4228047_20201_2_0,6sd5oo4icz,-23.084474173038277,-168.34967119123,81.44206558932139

1804701_20201_2_0,6svd9o4icz,2.563733727192556,-68.28857938681065,-53.462283750563216

2999295_20201_2_0,6u4ojo4icz,-0.20639138702311843,-63.270170435672696,-35.55464494600446

4053248_20201_2_0,6w6d3p4icz,1.0686632278084598,-74.71319764369085,-31.436388604064817

5178891_20201_2_0,6wc9jp4icz,-1.1061177269565967,-67.07129753961186,-25.962562028469392

3271947_20201_2_0,6womin4icz,2.3415635135802417,-89.99532782100687,-65.09233940760154

3462202_20201_2_0,6wuxeo4icz,1.3811308012810182,-78.47927462659567,-57.24975322349488

4140111_20201_2_0,6xdmwn4icz,-1.793489132003028,-109.38244886984563,-33.69483663212965

4124589_20201_2_0,6yksmn4icz,-5.016149661568681,-114.87294452367559,-13.895933677762187

1875039_20201_2_0,6z0frn4icz,-1.394265846948692,-100.51958310279284,-21.898810296075126

3054509_20201_2_0,6z5awo4icz,-0.7365246316762483,-59.42020617865688,-15.053031276360613

5309431_20201_2_0,701pwo4icz,-0.37596226958669554,-101.08093728192478,-40.68088783836241

4671753_20201_2_0,70wvin4icz,0.8097914553085107,-80.69415780660816,-61.22596094108712

4980259_20201_2_0,jhexpn4icz,-1.5880625171195248,-82.00383592230685,-35.80861691401314

1928465_20201_2_0,72d8rn4icz,-0.7599024613673787,-122.40716392084465,-35.54278370123278

3056322_20201_2_0,72pwfo4icz,3.549562797169754,-39.377042485666635,-46.183392275827515

1886138_20201_2_0,72xrcp4icz,1.6977989889390523,-101.14438034151178,-50.47594651597393

4928676_20201_2_0,7309mo4icz,-2.49737647736341,-87.73226013778026,-26.88922433174804

4759904_20201_2_0,7338tn4icz,1.7950352571938266,-129.17628766232832,-39.20861550786029

2058220_20201_2_0,73n2vn4icz,2.2541219355595916,-80.80564979219682,-48.50817359216231

3055352_20201_2_0,7471ko4icz,1.4465002635964728,-63.35974678499008,-52.47618583237913

1391010_20201_2_0,74qm3p4icz,-0.5611599332889146,-50.396321838815595,-42.03812206805624

5322530_20201_2_0,754gjn4icz,1.5166659441313355,-104.05026616375756,-35.98615155752343

5807087_20201_2_0,75f1jn4icz,0.12409465717788147,-71.70842242968035,-23.031812491135895

2987653_20201_2_0,766i2p4icz,-2.0408988782130835,-105.21476168122575,-19.04251223196819

1728690_20201_2_0,766zwn4icz,-4.21300249036541,-128.57461203540353,-11.043869839813766

1550583_20201_2_0,789frn4icz,-0.9913563566454573,-101.49239301246027,-28.115880798006287

3337449_20201_2_0,78dtqn4icz,-1.544241339445593,-99.31245699326456,-41.485090163632805

4277137_20201_2_0,79cslo4icz,-1.7095885352193578,-126.68167526971666,-22.66152580945102

2282215_20201_2_0,7aadlo4icz,-3.1299140754010444,-149.83131694615628,-14.900161362668229

4395158_20201_2_0,7aiken4icz,1.6223541014211542,-120.58617423467484,-57.40141954788896

2558638_20201_2_0,7anyjn4icz,-0.2684086427379607,-100.19211849424215,-31.118695693101742

5805715_20201_2_0,7bajyo4icz,6.270727292194215,-79.89564515347698,-74.31866957132992

1787501_20201_2_0,7c93sn4icz,2.0708779214961135,-71.55992792600574,-34.9708630172304

4715545_20201_2_0,7cjlip4icz,-1.1951442816386406,-94.60011791387615,-75.81768247646717

1087882_20201_2_0,7dhjyo4icz,-0.0887408775611182,-84.88287425624225,-40.608911718770415

2923737_20201_2_0,7ey97o4icz,-1.215580754266263,-111.60730549645308,-32.042085100096514

4512063_20201_2_0,2baueo4icz,-0.10078932236204263,-84.60290245059878,-31.763259985702348

/users/rhydian/anaconda3/envs/torch_env/lib/python3.7/site-packages/torch/cuda/__init__.py:52: UserWarning: CUDA initialization: Found no NVIDIA driver on your system. Please check that you have an NVIDIA GPU and installed a driver from http://www.nvidia.com/Download/index.aspx (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729006826/work/c10/cuda/CUDAFunctions.cpp:100.)
  return torch._C._cuda_getDeviceCount() > 0
  0%|          | 0/101 [00:00<?, ?it/s]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 1/101 [00:02<04:48,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 2/101 [00:05<04:50,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  3%|▎         | 3/101 [00:08<04:47,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/101 [00:11<04:34,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  5%|▍         | 5/101 [00:24<09:22,  5.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 6/101 [00:27<07:45,  4.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 7/101 [00:29<06:45,  4.31s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  8%|▊         | 8/101 [00:42<10:42,  6.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 9/101 [00:45<08:40,  5.66s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 10%|▉         | 10/101 [00:48<07:14,  4.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 11%|█         | 11/101 [00:51<06:28,  4.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 12/101 [00:54<05:54,  3.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 13%|█▎        | 13/101 [00:57<05:12,  3.56s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 14%|█▍        | 14/101 [01:00<04:44,  3.27s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 15%|█▍        | 15/101 [01:02<04:27,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 16/101 [01:05<04:13,  2.99s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 17%|█▋        | 17/101 [01:08<04:04,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 18/101 [01:11<03:59,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 19%|█▉        | 19/101 [01:13<03:53,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 20%|█▉        | 20/101 [01:16<03:50,  2.85s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 21/101 [01:19<03:41,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 22%|██▏       | 22/101 [01:22<03:48,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 23/101 [01:25<03:45,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 24%|██▍       | 24/101 [01:28<03:45,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 25%|██▍       | 25/101 [01:30<03:37,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 26%|██▌       | 26/101 [01:33<03:33,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 27/101 [01:36<03:38,  2.95s/it] 28%|██▊       | 28/101 [01:39<03:31,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 29%|██▊       | 29/101 [01:42<03:32,  2.95s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|██▉       | 30/101 [01:45<03:25,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 31%|███       | 31/101 [01:49<03:38,  3.13s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 32/101 [01:52<03:41,  3.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 33%|███▎      | 33/101 [01:55<03:32,  3.12s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 34%|███▎      | 34/101 [01:58<03:24,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 35%|███▍      | 35/101 [02:01<03:25,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 36/101 [02:04<03:12,  2.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 37%|███▋      | 37/101 [02:07<03:18,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 38%|███▊      | 38/101 [02:10<03:11,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▊      | 39/101 [02:13<03:08,  3.04s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 40%|███▉      | 40/101 [02:17<03:21,  3.30s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 41/101 [02:20<03:16,  3.27s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 42%|████▏     | 42/101 [02:23<03:02,  3.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 43%|████▎     | 43/101 [02:27<03:06,  3.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▎     | 44/101 [02:29<02:57,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 45%|████▍     | 45/101 [02:32<02:46,  2.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 46%|████▌     | 46/101 [02:35<02:39,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 47%|████▋     | 47/101 [02:38<02:35,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 48/101 [02:40<02:30,  2.84s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 49%|████▊     | 49/101 [02:44<02:39,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|████▉     | 50/101 [02:47<02:38,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 51/101 [02:51<02:48,  3.38s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 51%|█████▏    | 52/101 [02:53<02:29,  3.06s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 52%|█████▏    | 53/101 [02:58<02:41,  3.36s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 54/101 [03:00<02:30,  3.21s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 54%|█████▍    | 55/101 [03:03<02:21,  3.07s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 55%|█████▌    | 56/101 [03:06<02:11,  2.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 56%|█████▋    | 57/101 [03:11<02:33,  3.49s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 57%|█████▋    | 58/101 [03:14<02:23,  3.34s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 58%|█████▊    | 59/101 [03:16<02:15,  3.22s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 59%|█████▉    | 60/101 [03:19<02:07,  3.11s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 60%|██████    | 61/101 [03:22<01:59,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 61%|██████▏   | 62/101 [03:25<01:56,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 62%|██████▏   | 63/101 [03:28<01:50,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 63%|██████▎   | 64/101 [03:30<01:44,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 64%|██████▍   | 65/101 [03:33<01:43,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 65%|██████▌   | 66/101 [03:36<01:42,  2.92s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 66%|██████▋   | 67/101 [03:39<01:37,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 67%|██████▋   | 68/101 [03:42<01:35,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 68%|██████▊   | 69/101 [03:45<01:33,  2.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 69%|██████▉   | 70/101 [03:48<01:29,  2.90s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 70%|███████   | 71/101 [03:51<01:26,  2.87s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 71%|███████▏  | 72/101 [03:54<01:23,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 72%|███████▏  | 73/101 [03:56<01:20,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 73%|███████▎  | 74/101 [03:59<01:18,  2.89s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 74%|███████▍  | 75/101 [04:02<01:14,  2.88s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 75%|███████▌  | 76/101 [04:05<01:10,  2.83s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 76%|███████▌  | 77/101 [04:08<01:08,  2.86s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 77%|███████▋  | 78/101 [04:11<01:06,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 78%|███████▊  | 79/101 [04:14<01:07,  3.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 79%|███████▉  | 80/101 [04:17<01:02,  2.98s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 80%|████████  | 81/101 [04:20<00:58,  2.91s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 81%|████████  | 82/101 [04:22<00:53,  2.82s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 82%|████████▏ | 83/101 [04:25<00:49,  2.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 83%|████████▎ | 84/101 [04:28<00:46,  2.71s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 84%|████████▍ | 85/101 [04:30<00:43,  2.70s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 85%|████████▌ | 86/101 [04:33<00:41,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 86%|████████▌ | 87/101 [04:36<00:38,  2.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 87%|████████▋ | 88/101 [04:38<00:34,  2.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 88%|████████▊ | 89/101 [04:41<00:33,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 89%|████████▉ | 90/101 [04:44<00:30,  2.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 90%|█████████ | 91/101 [04:47<00:27,  2.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 91%|█████████ | 92/101 [04:50<00:24,  2.72s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 92%|█████████▏| 93/101 [04:52<00:21,  2.73s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 93%|█████████▎| 94/101 [04:55<00:19,  2.75s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 94%|█████████▍| 95/101 [04:58<00:16,  2.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 95%|█████████▌| 96/101 [05:01<00:13,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 96%|█████████▌| 97/101 [05:04<00:11,  2.78s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 97%|█████████▋| 98/101 [05:11<00:12,  4.05s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 98%|█████████▊| 99/101 [05:13<00:07,  3.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
 99%|█████████▉| 100/101 [05:16<00:03,  3.37s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
100%|██████████| 101/101 [05:19<00:00,  3.28s/it]100%|██████████| 101/101 [05:19<00:00,  3.16s/it]
Trying to load from /users/rhydian/self-supervised-project/model_weights/SSECEncodersBothBoth
==> Resuming model trained for 106 epochs...
Trying to load from ../model_weights/angle_regressor4
==> Resuming model trained for 7 epochs...
2361911_20201_2_0,5gjonn4icz,-0.6662470487449049,-120.37886549223904,-30.92555722437237

2489109_20201_2_0,5gnvlo4icz,1.3874374821666111,-76.80525997205308,-48.86936905015244

2554557_20201_2_0,5hnifp4icz,-2.4720503232397326,-99.75666137023114,-39.10521252200182

2320232_20201_2_0,5hq64o4icz,-1.269124924259817,-122.95371641829365,-15.139402340908504

2276247_20201_2_0,5hzhdp4icz,-1.0192814873569105,-90.76528666691485,-42.60137483444936

3860103_20201_2_0,5jzsxo4icz,1.059132965672978,-91.55356762116205,-28.928107330451837

5077914_20201_2_0,5m39qn4icz,-0.9063284342159583,-92.97872893178831,-52.21339468790349

1312947_20201_2_0,5mnv1o4icz,-0.025771445130732217,-102.67211204876475,-30.17958036298053

1139719_20201_2_0,5msfyo4icz,1.0325230790432822,-72.74566789718293,-41.90554088323134

4204962_20201_2_0,5n3eqn4icz,-1.0870492076008265,-79.02742130980033,-28.84756767215812

4080868_20201_2_0,oskczn4icz,1.8292165929802866,-97.55877939594896,-46.79296962292375

5698279_20201_2_0,5nghpo4icz,1.7219646247950133,-78.27427551511678,-43.01757919924066

4466311_20201_2_0,5nuc6p4icz,-0.7595866202719679,-107.80498238025604,-39.65040833917489

2268947_20201_2_0,5nxm9p4icz,-0.1985485853182393,-99.7352132972693,-36.447182543657135

3760855_20201_2_0,5oud9o4icz,-2.234306003998938,-56.48627286048111,-23.729008918635756

3966160_20201_2_0,5q86pn4icz,1.5324550057208448,-99.10225160925927,-41.76729659835284

2357907_20201_2_0,5r2lgo4icz,-0.1725475318045603,-97.42456986947403,-41.331808067230185

5361412_20201_2_0,5r6z5o4icz,-0.6892457287518426,-69.48296947588784,-27.25279503224894

3655250_20201_2_0,5r8lto4icz,6.082388298847935,-72.37465102759901,-50.64250914890644

3714204_20201_2_0,5s921p4icz,2.503467879707631,-109.71299413272402,-50.62644551726184

4166617_20201_2_0,5t2h3p4icz,1.688648980034422,-121.30525746788993,-50.18171816436637

2138544_20201_2_0,5upv7o4icz,3.58645217881109,-84.69139144962409,-49.93905390886829

2263383_20201_2_0,5vopco4icz,-1.841486459325154,-95.53682065173737,-23.744018062720215

5045276_20201_2_0,5vubto4icz,15.638205683760285,60.8199681759219,-41.352387570355546

5717802_20201_2_0,5w50ln4icz,-2.4500121887701973,-137.16517612843057,-22.14047753819402

5338809_20201_2_0,5w9mno4icz,-0.6740983201674483,-113.6718492538057,-25.817341783370495

2477463_20201_2_0,5wjw9p4icz,-0.5458654503049537,-122.54764435601308,-45.50141487523847

3444249_20201_2_0,5wsdtn4icz,-3.4196978893635137,-83.70133839039252,277.04818609377685

3513294_20201_2_0,5x21vo4icz,-1.9075117615690984,-121.13878095173246,-12.369870986354414

2821368_20201_2_0,5xmscp4icz,-5.703510622221666,-102.94435125636727,7.801373305566699

3951261_20201_2_0,5xnkrn4icz,-2.82818719981059,-75.75845929520358,-22.766163339160926

3737866_20201_2_0,5yyuho4icz,0.7236780966508176,-70.89757027631973,-30.381577753244784

2413427_20201_2_0,61pk3p4icz,-2.1391087826094046,-103.6097193314148,-17.061864287966884

5473738_20201_2_0,635knn4icz,-3.6820432091404682,-108.89992958949989,-10.768004424372393

5553379_20201_2_0,63oqbo4icz,-0.7075639701005368,-99.95951557279352,-29.283583863933302

5142049_20201_2_0,63yj4o4icz,-2.683989549854675,-103.1701865481273,-33.48515480666393

1875271_20201_2_0,64eswo4icz,12.345786355663042,-26.900779235523714,-77.28045868752135

4013177_20201_2_0,64gbhp4icz,-8.360958395207271,-134.3469711054135,24.457900522179926

1239965_20201_2_0,675kcn4icz,-16.482931926717125,-136.49447341130823,63.96254237270571

1402729_20201_2_0,68obwn4icz,-2.026715014095444,-99.22368255038455,-43.88535841939125

2736584_20201_2_0,69noeo4icz,-0.02004285060033782,-98.60415104124465,-19.32802726670323

1585983_20201_2_0,69tnqn4icz,-0.9032722576842243,-98.7800420462728,-21.574972372220586

4851214_20201_2_0,6akhip4icz,0.29002094605089457,-82.36213821905994,-28.19950050630858

4622304_20201_2_0,6bd4vn4icz,1.4181252530851298,-106.4535277228587,-43.83226588195291

2245058_20201_2_0,6bi3fp4icz,-0.20468569265291733,-79.93365520243847,-40.70573907404814

1195317_20201_2_0,6bx5zo4icz,-2.5924820839358698,-80.83127679256958,-36.634249146661986

3770526_20201_2_0,6bzc1p4icz,1.5928723974546275,-103.752498927206,-44.400303307201824

4670178_20201_2_0,6c5ngo4icz,-2.909915115618862,-109.04075977140474,-23.88446399040228

1517135_20201_2_0,6cbu7o4icz,0.10305334792296772,-115.0200437614713,-39.944302102596254

1618712_20201_2_0,6cilmn4icz,0.31633486106860137,-80.62866071182776,-31.673647215291865

4935323_20201_2_0,6d7oap4icz,-1.9268860158897532,-107.72145269840792,-31.706770349408288

2956729_20201_2_0,6dadco4icz,1.4468835691708846,-60.59373057547484,-39.401246056283824

3337195_20201_2_0,6fcdrn4icz,-0.8457243194416411,-104.29547394430716,-19.672720617963577

2668002_20201_2_0,6ffl7p4icz,3.6669018397462994,-101.23313901931857,-69.3451613074686

5711458_20201_2_0,6fg29o4icz,-0.64058828966155,-94.0316522319269,-25.877406167897988

1573261_20201_2_0,6hc9so4icz,0.30020880576027176,-73.02002133190277,-46.73718061954405

1503932_20201_2_0,6hvjsn4icz,-3.4887842744987205,-123.45049037759298,-19.356107394760727

4051388_20201_2_0,6ib88n4icz,-1.0475023701646828,-74.725932226732,-2.2649289906854904

4927885_20201_2_0,6kl5qo4icz,-0.3985294820018775,-65.07811178407945,-18.873899454156657

5853165_20201_2_0,6kolqo4icz,-3.6163846805373905,-93.54780509499656,-19.95294935382853

3339459_20201_2_0,6kufpo4icz,-0.36198990260707814,-87.2636164479832,-35.168449736708894

1275896_20201_2_0,6kxr8p4icz,1.4014896835237183,-95.03654005625202,-66.45569751878267

2099677_20201_2_0,6m30nn4icz,0.06515240406693633,-117.20707738409845,-35.84615881070141

2165232_20201_2_0,6n2jyn4icz,0.3628175185672684,-104.1032037856497,-50.60368977651771

3910758_20201_2_0,6nxt7o4icz,-2.144461634472883,-82.44482899709294,-34.43070568939032

4648497_20201_2_0,6oomgo4icz,-0.4079762864394731,-76.43423393696699,-37.984227049654265

3245118_20201_2_0,6p5kqo4icz,4.519264226375929,-62.348575670516254,-51.21512728875308

2775986_20201_2_0,6plvcn4icz,-0.09651424210904481,-102.25496940887334,-47.930481167669086

3538444_20201_2_0,6pu4to4icz,-1.1170425495014447,-39.04695389371605,-19.416034913366033

5260523_20201_2_0,6qr4xn4icz,0.23400209377447512,-116.57247870733133,-32.70301201864186

2429870_20201_2_0,6qzg5o4icz,-0.3251038966898913,-77.15310367773586,-30.34459372909035

5421626_20201_2_0,6s4jin4icz,-3.1608788545242223,-99.001032554435,-23.14344029376835

5650221_20201_2_0,6sl5en4icz,1.0796461047671233,-98.23617278805665,-38.69817882959275

5822732_20201_2_0,6t206p4icz,-2.8313458339201247,-115.30792549379638,-15.641950958728799

3677900_20201_2_0,6ti27o4icz,-1.3141443761204563,-101.62660012478827,-28.70607201819213

1200808_20201_2_0,6tmgao4icz,-0.0011767807177809739,-81.05877663468755,-50.15952373080462

2980070_20201_2_0,6tqq9p4icz,2.977147337220023,-110.26782437530667,-39.10867744061383

1431197_20201_2_0,6ufkeo4icz,-1.7546635560762556,-90.64533420489167,-17.276824875577447

3375796_20201_2_0,33vqfn4icz,-0.9127876915364832,-117.11361256614882,-13.71213630536485

3734962_20201_2_0,6vqlvo4icz,-1.123466671120488,-56.766148037908465,-20.61689833826749

3246353_20201_2_0,6vszgo4icz,4.016878970694852,-75.69377868310903,-75.7908353304335

1112256_20201_2_0,6w4w5p4icz,0.9093114009190071,-117.92143422328618,-44.264360445037966

3596458_20201_2_0,6wd1vo4icz,-1.2731019295574804,-90.00872708641009,-17.318729580428098

3734962_20201_2_0,6vqlvo4icz,-1.123466671120488,-56.766148037908465,-20.61689833826749

1033073_20201_2_0,6xx81o4icz,-1.435779867802337,-95.63663924005701,-29.10549112317827

2661601_20201_2_0,mg68ep4icz,0.918799861071276,-111.9866176127799,-59.443891908135924

3255007_20201_2_0,6z1mln4icz,1.0216614404344346,-105.75827332915688,-45.87447257374629

5669375_20201_2_0,6zcmqo4icz,1.156619036956353,-112.40784216745388,-24.78432776454207

5879546_20201_2_0,6zn5ho4icz,-0.05348608003355407,-94.15746010219482,-25.406830378644003

1032855_20201_2_0,6zuoep4icz,-0.5147937042272381,-107.52134294469121,-15.41869050133144

5047452_20201_2_0,707fwn4icz,-2.31866753032526,-134.85085470954698,-20.030637885643273

5081531_20201_2_0,71e69o4icz,0.8676049107603417,-78.57993301380458,-37.04212662742353

5239082_20201_2_0,71nejo4icz,1.4741038575707395,-59.26794689570653,-60.2659636156516

3780932_20201_2_0,73guto4icz,-6.583950531637922,-114.32401908483024,-1.0965677580630597

1595422_20201_2_0,745xoo4icz,-5.704387225915894,-104.76170203973678,-10.632125369300198

2388729_20201_2_0,748o8p4icz,1.0584857389019013,-73.51669012361117,-48.85161818373848

2476130_20201_2_0,74kqrn4icz,1.2667749421279004,-68.95595790325254,-54.95358939130048

5302094_20201_2_0,75abgn4icz,-2.1679379792544564,-127.82386761478605,-28.753768530462622

1935775_20201_2_0,7650lo4icz,-2.154616596811485,-102.26898279903111,-25.260332767387297

2708629_20201_2_0,76bqln4icz,-2.7685835919975044,-105.87427516351312,-22.077383226377478

3624790_20201_2_0,q0t0vn4icz,0.865309234785969,-112.3447829594607,-41.6296867056172

